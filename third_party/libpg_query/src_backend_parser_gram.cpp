/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 68,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 69,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 70,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 71,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 72,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 73,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 74,                     /* CLASS  */
  YYSYMBOL_CLOSE = 75,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 76,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 77,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 78,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 79,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 80,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 81,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 82,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 83,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 84,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 85,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 86,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 87,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 88,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 89,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 90,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 91,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 92,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 93,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 94,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 95,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 96,                      /* COPY  */
  YYSYMBOL_COST = 97,                      /* COST  */
  YYSYMBOL_CREATE_P = 98,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 99,                     /* CROSS  */
  YYSYMBOL_CSV = 100,                      /* CSV  */
  YYSYMBOL_CUBE = 101,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 102,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 103,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 104,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 105,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 106,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 107,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 108,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 109,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 110,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 111,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 112,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 113,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 114,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 115,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 116,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 117,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 118,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 119,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 120,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 121,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 122,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 123,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 124,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 125,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 126,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 127,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 128,                 /* DISTINCT  */
  YYSYMBOL_DO = 129,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 130,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 131,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 132,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 133,                     /* DROP  */
  YYSYMBOL_EACH = 134,                     /* EACH  */
  YYSYMBOL_ELSE = 135,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 136,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 137,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 138,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 139,                    /* END_P  */
  YYSYMBOL_ENUM_P = 140,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 141,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 142,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 143,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 144,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 145,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 146,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 147,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 148,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 149,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 150,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 151,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 152,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 153,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 154,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 155,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 156,                   /* FAMILY  */
  YYSYMBOL_FETCH = 157,                    /* FETCH  */
  YYSYMBOL_FILTER = 158,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 159,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 160,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 161,                /* FOLLOWING  */
  YYSYMBOL_FOR = 162,                      /* FOR  */
  YYSYMBOL_FORCE = 163,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 164,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 165,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 166,                   /* FREEZE  */
  YYSYMBOL_FROM = 167,                     /* FROM  */
  YYSYMBOL_FULL = 168,                     /* FULL  */
  YYSYMBOL_FUNCTION = 169,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 170,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 171,                /* GENERATED  */
  YYSYMBOL_GLOB = 172,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 173,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 174,                    /* GRANT  */
  YYSYMBOL_GRANTED = 175,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 176,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 177,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 178,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 179,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 180,                  /* HANDLER  */
  YYSYMBOL_HAVING = 181,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 182,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 183,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 184,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 185,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 186,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 187,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 188,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 189,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 190,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 191,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 192,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 193,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 194,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 195,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 196,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 197,                /* INCREMENT  */
  YYSYMBOL_INDEX = 198,                    /* INDEX  */
  YYSYMBOL_INDEXES = 199,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 200,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 201,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 202,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 203,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 204,                  /* INNER_P  */
  YYSYMBOL_INOUT = 205,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 206,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 207,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 208,                   /* INSERT  */
  YYSYMBOL_INSTALL = 209,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 210,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 211,                    /* INT_P  */
  YYSYMBOL_INTEGER = 212,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 213,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 214,                 /* INTERVAL  */
  YYSYMBOL_INTO = 215,                     /* INTO  */
  YYSYMBOL_INVOKER = 216,                  /* INVOKER  */
  YYSYMBOL_IS = 217,                       /* IS  */
  YYSYMBOL_ISNULL = 218,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 219,                /* ISOLATION  */
  YYSYMBOL_JOIN = 220,                     /* JOIN  */
  YYSYMBOL_JSON = 221,                     /* JSON  */
  YYSYMBOL_KEY = 222,                      /* KEY  */
  YYSYMBOL_LABEL = 223,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 224,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 225,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 226,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 227,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 228,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 229,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 230,                     /* LEFT  */
  YYSYMBOL_LEVEL = 231,                    /* LEVEL  */
  YYSYMBOL_LIKE = 232,                     /* LIKE  */
  YYSYMBOL_LIMIT = 233,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 234,                   /* LISTEN  */
  YYSYMBOL_LOAD = 235,                     /* LOAD  */
  YYSYMBOL_LOCAL = 236,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 237,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 238,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 239,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 240,                   /* LOGGED  */
  YYSYMBOL_MACRO = 241,                    /* MACRO  */
  YYSYMBOL_MAP = 242,                      /* MAP  */
  YYSYMBOL_MAPPING = 243,                  /* MAPPING  */
  YYSYMBOL_MATCH = 244,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 245,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 246,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 247,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 248,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 249,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 250,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 251,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 252,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 253,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 254,                 /* MINVALUE  */
  YYSYMBOL_MODE = 255,                     /* MODE  */
  YYSYMBOL_MONTH_P = 256,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 257,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 258,                     /* MOVE  */
  YYSYMBOL_NAME_P = 259,                   /* NAME_P  */
  YYSYMBOL_NAMES = 260,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 261,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 262,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 263,                    /* NCHAR  */
  YYSYMBOL_NEW = 264,                      /* NEW  */
  YYSYMBOL_NEXT = 265,                     /* NEXT  */
  YYSYMBOL_NO = 266,                       /* NO  */
  YYSYMBOL_NONE = 267,                     /* NONE  */
  YYSYMBOL_NOT = 268,                      /* NOT  */
  YYSYMBOL_NOTHING = 269,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 270,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 271,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 272,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 273,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 274,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 275,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 276,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 277,                 /* OBJECT_P  */
  YYSYMBOL_OF = 278,                       /* OF  */
  YYSYMBOL_OFF = 279,                      /* OFF  */
  YYSYMBOL_OFFSET = 280,                   /* OFFSET  */
  YYSYMBOL_OIDS = 281,                     /* OIDS  */
  YYSYMBOL_OLD = 282,                      /* OLD  */
  YYSYMBOL_ON = 283,                       /* ON  */
  YYSYMBOL_ONLY = 284,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 285,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 286,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 287,                  /* OPTIONS  */
  YYSYMBOL_OR = 288,                       /* OR  */
  YYSYMBOL_ORDER = 289,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 290,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 291,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 292,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 293,                  /* OUTER_P  */
  YYSYMBOL_OVER = 294,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 295,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 296,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 297,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 298,                    /* OWNED  */
  YYSYMBOL_OWNER = 299,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 300,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 301,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 302,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 303,                /* PARTITION  */
  YYSYMBOL_PASSING = 304,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 305,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 306,                  /* PERCENT  */
  YYSYMBOL_PIVOT = 307,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 308,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 309,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 310,                  /* PLACING  */
  YYSYMBOL_PLANS = 311,                    /* PLANS  */
  YYSYMBOL_POLICY = 312,                   /* POLICY  */
  YYSYMBOL_POSITION = 313,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 314,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 315,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 316,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 317,                /* PRECISION  */
  YYSYMBOL_PREPARE = 318,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 319,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 320,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 321,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 322,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 323,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 324,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 325,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 326,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 327,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 328,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 329,                    /* QUOTE  */
  YYSYMBOL_RANGE = 330,                    /* RANGE  */
  YYSYMBOL_READ_P = 331,                   /* READ_P  */
  YYSYMBOL_REAL = 332,                     /* REAL  */
  YYSYMBOL_REASSIGN = 333,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 334,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 335,                /* RECURSIVE  */
  YYSYMBOL_REF = 336,                      /* REF  */
  YYSYMBOL_REFERENCES = 337,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 338,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 339,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 340,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 341,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 342,                  /* RELEASE  */
  YYSYMBOL_RENAME = 343,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 344,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 345,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 346,                  /* REPLICA  */
  YYSYMBOL_RESET = 347,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 348,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 349,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 350,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 351,                /* RETURNING  */
  YYSYMBOL_RETURNS = 352,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 353,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 354,                    /* RIGHT  */
  YYSYMBOL_ROLE = 355,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 356,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 357,                   /* ROLLUP  */
  YYSYMBOL_ROW = 358,                      /* ROW  */
  YYSYMBOL_ROWS = 359,                     /* ROWS  */
  YYSYMBOL_RULE = 360,                     /* RULE  */
  YYSYMBOL_SAMPLE = 361,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 362,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 363,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 364,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 365,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 366,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 367,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 368,                /* SECONDS_P  */
  YYSYMBOL_SECURITY = 369,                 /* SECURITY  */
  YYSYMBOL_SELECT = 370,                   /* SELECT  */
  YYSYMBOL_SEMI = 371,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 372,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 373,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 374,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 375,                   /* SERVER  */
  YYSYMBOL_SESSION = 376,                  /* SESSION  */
  YYSYMBOL_SET = 377,                      /* SET  */
  YYSYMBOL_SETOF = 378,                    /* SETOF  */
  YYSYMBOL_SETS = 379,                     /* SETS  */
  YYSYMBOL_SHARE = 380,                    /* SHARE  */
  YYSYMBOL_SHOW = 381,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 382,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 383,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 384,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 385,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 386,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 387,                     /* SOME  */
  YYSYMBOL_SQL_P = 388,                    /* SQL_P  */
  YYSYMBOL_STABLE = 389,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 390,             /* STANDALONE_P  */
  YYSYMBOL_START = 391,                    /* START  */
  YYSYMBOL_STATEMENT = 392,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 393,               /* STATISTICS  */
  YYSYMBOL_STDIN = 394,                    /* STDIN  */
  YYSYMBOL_STDOUT = 395,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 396,                  /* STORAGE  */
  YYSYMBOL_STORED = 397,                   /* STORED  */
  YYSYMBOL_STRICT_P = 398,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 399,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 400,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 401,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 402,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 403,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 404,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 405,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 406,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 407,                    /* TABLE  */
  YYSYMBOL_TABLES = 408,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 409,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 410,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 411,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 412,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 413,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 414,                   /* TEXT_P  */
  YYSYMBOL_THEN = 415,                     /* THEN  */
  YYSYMBOL_TIES = 416,                     /* TIES  */
  YYSYMBOL_TIME = 417,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 418,                /* TIMESTAMP  */
  YYSYMBOL_TO = 419,                       /* TO  */
  YYSYMBOL_TRAILING = 420,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 421,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 422,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 423,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 424,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 425,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 426,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 427,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 428,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 429,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 430,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 431,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 432,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 433,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 434,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 435,                    /* UNION  */
  YYSYMBOL_UNIQUE = 436,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 437,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 438,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 439,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 440,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 441,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 442,                   /* UPDATE  */
  YYSYMBOL_USE_P = 443,                    /* USE_P  */
  YYSYMBOL_USER = 444,                     /* USER  */
  YYSYMBOL_USING = 445,                    /* USING  */
  YYSYMBOL_VACUUM = 446,                   /* VACUUM  */
  YYSYMBOL_VALID = 447,                    /* VALID  */
  YYSYMBOL_VALIDATE = 448,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 449,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 450,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 451,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 452,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 453,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 454,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 455,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 456,                /* VERSION_P  */
  YYSYMBOL_VIEW = 457,                     /* VIEW  */
  YYSYMBOL_VIEWS = 458,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 459,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 460,                 /* VOLATILE  */
  YYSYMBOL_WHEN = 461,                     /* WHEN  */
  YYSYMBOL_WHERE = 462,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 463,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 464,                   /* WINDOW  */
  YYSYMBOL_WITH = 465,                     /* WITH  */
  YYSYMBOL_WITHIN = 466,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 467,                  /* WITHOUT  */
  YYSYMBOL_WORK = 468,                     /* WORK  */
  YYSYMBOL_WRAPPER = 469,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 470,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 471,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 472,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 473,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 474,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 475,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 476,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 477,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 478,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 479,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 480,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 481,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 482,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 483,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 484,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 485,                    /* YES_P  */
  YYSYMBOL_ZONE = 486,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 487,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 488,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 489,                  /* WITH_LA  */
  YYSYMBOL_490_ = 490,                     /* '<'  */
  YYSYMBOL_491_ = 491,                     /* '>'  */
  YYSYMBOL_492_ = 492,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 493,                /* POSTFIXOP  */
  YYSYMBOL_494_ = 494,                     /* '+'  */
  YYSYMBOL_495_ = 495,                     /* '-'  */
  YYSYMBOL_496_ = 496,                     /* '*'  */
  YYSYMBOL_497_ = 497,                     /* '/'  */
  YYSYMBOL_498_ = 498,                     /* '%'  */
  YYSYMBOL_499_ = 499,                     /* '^'  */
  YYSYMBOL_UMINUS = 500,                   /* UMINUS  */
  YYSYMBOL_501_ = 501,                     /* '['  */
  YYSYMBOL_502_ = 502,                     /* ']'  */
  YYSYMBOL_503_ = 503,                     /* '('  */
  YYSYMBOL_504_ = 504,                     /* ')'  */
  YYSYMBOL_505_ = 505,                     /* '.'  */
  YYSYMBOL_506_ = 506,                     /* ';'  */
  YYSYMBOL_507_ = 507,                     /* ','  */
  YYSYMBOL_508_ = 508,                     /* '#'  */
  YYSYMBOL_509_ = 509,                     /* '$'  */
  YYSYMBOL_510_ = 510,                     /* '?'  */
  YYSYMBOL_511_ = 511,                     /* '{'  */
  YYSYMBOL_512_ = 512,                     /* '}'  */
  YYSYMBOL_513_ = 513,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 514,                 /* $accept  */
  YYSYMBOL_stmtblock = 515,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 516,                /* stmtmulti  */
  YYSYMBOL_stmt = 517,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 518,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 519,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 520,               /* SeqOptList  */
  YYSYMBOL_opt_with = 521,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 522,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 523,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 524,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 525,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 526,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 527, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 528,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 529, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 530, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 531,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 532,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 533, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 534,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 535,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 536,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 537,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 538,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 539,               /* DetachStmt  */
  YYSYMBOL_opt_database = 540,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 541,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 542,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 543,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 544,               /* opt_col_id  */
  YYSYMBOL_qualified_name = 545,           /* qualified_name  */
  YYSYMBOL_ColId = 546,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 547,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 548,                   /* Sconst  */
  YYSYMBOL_indirection = 549,              /* indirection  */
  YYSYMBOL_attr_name = 550,                /* attr_name  */
  YYSYMBOL_ColLabel = 551,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 552,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 553,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 554,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 555, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 556,                /* opt_using  */
  YYSYMBOL_opt_as = 557,                   /* opt_as  */
  YYSYMBOL_opt_program = 558,              /* opt_program  */
  YYSYMBOL_copy_options = 559,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 560,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 561,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 562,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 563,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 564,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 565,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 566, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 567,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 568,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 569,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 570,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 571,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 572, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 573,       /* generic_option_arg  */
  YYSYMBOL_key_action = 574,               /* key_action  */
  YYSYMBOL_ColConstraint = 575,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 576,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 577,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 578,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 579,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 580,      /* generic_option_elem  */
  YYSYMBOL_key_update = 581,               /* key_update  */
  YYSYMBOL_key_actions = 582,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 583,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 584,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 585,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 586,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 587,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 588,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 589,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 590,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 591,                  /* OptWith  */
  YYSYMBOL_definition = 592,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 593,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 594,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 595,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 596,                /* columnDef  */
  YYSYMBOL_def_list = 597,                 /* def_list  */
  YYSYMBOL_index_name = 598,               /* index_name  */
  YYSYMBOL_TableElement = 599,             /* TableElement  */
  YYSYMBOL_def_elem = 600,                 /* def_elem  */
  YYSYMBOL_opt_definition = 601,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 602,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 603,               /* columnElem  */
  YYSYMBOL_opt_column_list = 604,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 605,              /* ColQualList  */
  YYSYMBOL_key_delete = 606,               /* key_delete  */
  YYSYMBOL_reloption_elem = 607,           /* reloption_elem  */
  YYSYMBOL_columnList = 608,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 609,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 610,                /* func_type  */
  YYSYMBOL_ConstraintElem = 611,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 612,         /* TableElementList  */
  YYSYMBOL_key_match = 613,                /* key_match  */
  YYSYMBOL_TableLikeClause = 614,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 615,                  /* OptTemp  */
  YYSYMBOL_generated_when = 616,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 617,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 618,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 619,         /* create_as_target  */
  YYSYMBOL_CreateFunctionStmt = 620,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 621,              /* macro_alias  */
  YYSYMBOL_param_list = 622,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 623,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 624,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 625,              /* schema_stmt  */
  YYSYMBOL_unreserved_keyword = 626,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 627,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 628,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 629,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 630,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 631,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 632,         /* reserved_keyword  */
  YYSYMBOL_CreateSeqStmt = 633,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 634,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 635,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 636,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 637,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 638,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 639,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 640,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 641,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 642,             /* using_clause  */
  YYSYMBOL_DropStmt = 643,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 644,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 645,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 646,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 647,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 648, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 649,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 650,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_clause = 651,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 652,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 653,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 654,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 655,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 656,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 657, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 658,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 659,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 660,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 661,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 662,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 663,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 664,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 665,                /* IndexStmt  */
  YYSYMBOL_access_method = 666,            /* access_method  */
  YYSYMBOL_access_method_clause = 667,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 668,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 669,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 670,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 671,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 672,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 673,              /* insert_rest  */
  YYSYMBOL_insert_target = 674,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 675,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 676,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 677,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 678,       /* insert_column_item  */
  YYSYMBOL_set_clause = 679,               /* set_clause  */
  YYSYMBOL_opt_or_action = 680,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 681,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 682,               /* index_elem  */
  YYSYMBOL_returning_clause = 683,         /* returning_clause  */
  YYSYMBOL_override_kind = 684,            /* override_kind  */
  YYSYMBOL_set_target_list = 685,          /* set_target_list  */
  YYSYMBOL_opt_collate = 686,              /* opt_collate  */
  YYSYMBOL_opt_class = 687,                /* opt_class  */
  YYSYMBOL_insert_column_list = 688,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 689,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 690, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 691,             /* index_params  */
  YYSYMBOL_set_target = 692,               /* set_target  */
  YYSYMBOL_LoadStmt = 693,                 /* LoadStmt  */
  YYSYMBOL_file_name = 694,                /* file_name  */
  YYSYMBOL_PragmaStmt = 695,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 696,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 697,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 698,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 699,               /* RenameStmt  */
  YYSYMBOL_opt_column = 700,               /* opt_column  */
  YYSYMBOL_SelectStmt = 701,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 702,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 703,         /* select_no_parens  */
  YYSYMBOL_select_clause = 704,            /* select_clause  */
  YYSYMBOL_opt_select = 705,               /* opt_select  */
  YYSYMBOL_simple_select = 706,            /* simple_select  */
  YYSYMBOL_value_or_values = 707,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 708,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 709,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 710,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 711, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 712,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 713,              /* with_clause  */
  YYSYMBOL_cte_list = 714,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 715,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 716,         /* opt_materialized  */
  YYSYMBOL_into_clause = 717,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 718,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 719,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 720,          /* all_or_distinct  */
  YYSYMBOL_by_name = 721,                  /* by_name  */
  YYSYMBOL_distinct_clause = 722,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 723,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 724,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 725,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 726,              /* sort_clause  */
  YYSYMBOL_sortby_list = 727,              /* sortby_list  */
  YYSYMBOL_sortby = 728,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 729,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 730,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 731,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 732,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 733,             /* limit_clause  */
  YYSYMBOL_offset_clause = 734,            /* offset_clause  */
  YYSYMBOL_sample_count = 735,             /* sample_count  */
  YYSYMBOL_sample_clause = 736,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 737,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 738,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 739,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 740,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 741,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 742,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 743,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 744, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 745,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 746,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 747,            /* first_or_next  */
  YYSYMBOL_group_clause = 748,             /* group_clause  */
  YYSYMBOL_group_by_list = 749,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 750,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 751,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 752,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 753,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 754,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 755,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 756,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 757,            /* having_clause  */
  YYSYMBOL_qualify_clause = 758,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 759,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 760,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 761,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 762,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 763,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 764,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 765,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 766,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 767,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 768,              /* from_clause  */
  YYSYMBOL_from_list = 769,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 770,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 771,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 772,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 773,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 774,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 775,             /* pivot_header  */
  YYSYMBOL_pivot_value = 776,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 777,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 778,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 779,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 780,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 781,             /* joined_table  */
  YYSYMBOL_alias_clause = 782,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 783,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 784,        /* func_alias_clause  */
  YYSYMBOL_join_type = 785,                /* join_type  */
  YYSYMBOL_join_outer = 786,               /* join_outer  */
  YYSYMBOL_join_qual = 787,                /* join_qual  */
  YYSYMBOL_relation_expr = 788,            /* relation_expr  */
  YYSYMBOL_func_table = 789,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 790,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 791,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 792,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 793,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 794,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 795,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 796,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 797,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 798,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 799,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 800,             /* opt_Typename  */
  YYSYMBOL_Typename = 801,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 802,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 803,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 804,            /* ConstTypename  */
  YYSYMBOL_GenericType = 805,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 806,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 807,                  /* Numeric  */
  YYSYMBOL_opt_float = 808,                /* opt_float  */
  YYSYMBOL_Bit = 809,                      /* Bit  */
  YYSYMBOL_ConstBit = 810,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 811,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 812,         /* BitWithoutLength  */
  YYSYMBOL_Character = 813,                /* Character  */
  YYSYMBOL_ConstCharacter = 814,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 815,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 816,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 817,                /* character  */
  YYSYMBOL_opt_varying = 818,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 819,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 820,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 821,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 822,             /* year_keyword  */
  YYSYMBOL_month_keyword = 823,            /* month_keyword  */
  YYSYMBOL_day_keyword = 824,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 825,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 826,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 827,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 828,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 829,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 830,             /* opt_interval  */
  YYSYMBOL_a_expr = 831,                   /* a_expr  */
  YYSYMBOL_b_expr = 832,                   /* b_expr  */
  YYSYMBOL_c_expr = 833,                   /* c_expr  */
  YYSYMBOL_d_expr = 834,                   /* d_expr  */
  YYSYMBOL_indirection_expr = 835,         /* indirection_expr  */
  YYSYMBOL_struct_expr = 836,              /* struct_expr  */
  YYSYMBOL_func_application = 837,         /* func_application  */
  YYSYMBOL_func_expr = 838,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 839,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 840, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 841,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 842,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 843,            /* filter_clause  */
  YYSYMBOL_export_clause = 844,            /* export_clause  */
  YYSYMBOL_window_clause = 845,            /* window_clause  */
  YYSYMBOL_window_definition_list = 846,   /* window_definition_list  */
  YYSYMBOL_window_definition = 847,        /* window_definition  */
  YYSYMBOL_over_clause = 848,              /* over_clause  */
  YYSYMBOL_window_specification = 849,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 850, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 851,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 852,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 853,             /* frame_extent  */
  YYSYMBOL_frame_bound = 854,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 855, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 856,            /* qualified_row  */
  YYSYMBOL_row = 857,                      /* row  */
  YYSYMBOL_dict_arg = 858,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 859,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 860, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 861,                  /* map_arg  */
  YYSYMBOL_map_arguments = 862,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 863,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 864, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 865,                 /* sub_type  */
  YYSYMBOL_all_Op = 866,                   /* all_Op  */
  YYSYMBOL_MathOp = 867,                   /* MathOp  */
  YYSYMBOL_qual_Op = 868,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 869,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 870,              /* subquery_Op  */
  YYSYMBOL_any_operator = 871,             /* any_operator  */
  YYSYMBOL_c_expr_list = 872,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 873,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 874,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 875,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 876,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 877,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 878,            /* func_arg_expr  */
  YYSYMBOL_type_list = 879,                /* type_list  */
  YYSYMBOL_extract_list = 880,             /* extract_list  */
  YYSYMBOL_extract_arg = 881,              /* extract_arg  */
  YYSYMBOL_overlay_list = 882,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 883,          /* overlay_placing  */
  YYSYMBOL_position_list = 884,            /* position_list  */
  YYSYMBOL_substr_list = 885,              /* substr_list  */
  YYSYMBOL_substr_from = 886,              /* substr_from  */
  YYSYMBOL_substr_for = 887,               /* substr_for  */
  YYSYMBOL_trim_list = 888,                /* trim_list  */
  YYSYMBOL_in_expr = 889,                  /* in_expr  */
  YYSYMBOL_case_expr = 890,                /* case_expr  */
  YYSYMBOL_when_clause_list = 891,         /* when_clause_list  */
  YYSYMBOL_when_clause = 892,              /* when_clause  */
  YYSYMBOL_case_default = 893,             /* case_default  */
  YYSYMBOL_case_arg = 894,                 /* case_arg  */
  YYSYMBOL_columnref = 895,                /* columnref  */
  YYSYMBOL_indirection_el = 896,           /* indirection_el  */
  YYSYMBOL_opt_slice_bound = 897,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 898,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 899,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 900,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 901, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 902,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 903, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 904,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 905,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 906,                /* target_el  */
  YYSYMBOL_except_list = 907,              /* except_list  */
  YYSYMBOL_opt_except_list = 908,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 909,          /* replace_list_el  */
  YYSYMBOL_replace_list = 910,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 911,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 912,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 913,      /* qualified_name_list  */
  YYSYMBOL_name_list = 914,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 915,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 916, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 917,                     /* name  */
  YYSYMBOL_func_name = 918,                /* func_name  */
  YYSYMBOL_AexprConst = 919,               /* AexprConst  */
  YYSYMBOL_Iconst = 920,                   /* Iconst  */
  YYSYMBOL_type_function_name = 921,       /* type_function_name  */
  YYSYMBOL_function_name_token = 922,      /* function_name_token  */
  YYSYMBOL_type_name_token = 923,          /* type_name_token  */
  YYSYMBOL_any_name = 924,                 /* any_name  */
  YYSYMBOL_attrs = 925,                    /* attrs  */
  YYSYMBOL_opt_name_list = 926,            /* opt_name_list  */
  YYSYMBOL_param_name = 927,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 928,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 929,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 930,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 931,               /* UpdateStmt  */
  YYSYMBOL_UseStmt = 932,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 933,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 934,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 935,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 936,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 937,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 938,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 939,            /* generic_reset  */
  YYSYMBOL_reset_rest = 940,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 941,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 942,                 /* set_rest  */
  YYSYMBOL_generic_set = 943,              /* generic_set  */
  YYSYMBOL_var_value = 944,                /* var_value  */
  YYSYMBOL_zone_value = 945,               /* zone_value  */
  YYSYMBOL_var_list = 946,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 947,         /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 948,         /* show_or_describe  */
  YYSYMBOL_opt_tables = 949,               /* opt_tables  */
  YYSYMBOL_var_name = 950,                 /* var_name  */
  YYSYMBOL_table_id = 951,                 /* table_id  */
  YYSYMBOL_ViewStmt = 952,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 953          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  683
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   67583

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  514
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  440
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2036
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3381

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   746


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   508,   509,   498,     2,     2,
     503,   504,   496,   494,   507,   495,   505,   497,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   513,   506,
     490,   492,   491,   510,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   501,     2,   502,   499,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   511,     2,   512,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   493,   500
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   491,   491,   507,   519,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   542,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,   554,   555,   556,   557,   558,   559,   560,   561,   562,
     563,   564,   566,     7,    47,    48,    52,    53,    68,    69,
      76,    84,    92,   100,   108,   116,   127,   128,   155,   160,
     168,   184,   201,   218,   235,   236,   255,   259,   263,   267,
     271,   280,   290,   299,   308,   318,   328,   339,   353,   370,
     370,   374,   374,   378,   378,   382,   388,   395,   399,   400,
     404,   405,   419,   426,   433,   443,   444,   447,   460,   461,
     462,   466,   477,   485,   490,   495,   500,   505,   513,   521,
     526,   531,   538,   539,   543,   544,   545,   549,   556,   557,
     561,   562,   566,   567,   568,   572,   573,   577,   578,   594,
     595,   598,   607,   618,   619,   620,   623,   624,   625,   629,
     630,   631,   632,   636,   637,   641,   643,   659,   661,   666,
     669,   677,   681,   685,   689,   693,   697,   704,   709,   716,
     717,   721,   726,   730,   734,   742,   749,   750,   755,   756,
     760,   761,   766,   768,   770,   775,   795,   796,   798,   803,
     804,   808,   809,   812,   813,   838,   839,   844,   848,   849,
     853,   854,   858,   859,   860,   861,   862,   866,   879,   886,
     893,   900,   901,   905,   906,   910,   911,   915,   916,   920,
     921,   925,   926,   930,   941,   942,   943,   944,   948,   949,
     954,   955,   956,   965,   971,   980,   981,   994,   995,   999,
    1000,  1004,  1005,  1011,  1017,  1025,  1034,  1042,  1051,  1060,
    1064,  1069,  1079,  1092,  1093,  1096,  1097,  1098,  1101,  1109,
    1119,  1120,  1123,  1131,  1140,  1144,  1151,  1152,  1156,  1165,
    1169,  1194,  1198,  1211,  1225,  1240,  1252,  1265,  1279,  1293,
    1306,  1321,  1340,  1346,  1351,  1357,  1364,  1365,  1373,  1377,
    1381,  1387,  1394,  1399,  1400,  1401,  1402,  1403,  1404,  1408,
    1409,  1421,  1422,  1427,  1434,  1441,  1448,  1480,  1491,  1504,
    1509,  1510,  1513,  1514,  1517,  1518,  1523,  1524,  1529,  1533,
    1539,  1560,  1568,  1581,  1584,  1588,  1588,  1591,  1592,  1594,
    1599,  1606,  1611,  1617,  1622,  1628,  1634,  1640,  1649,  1651,
    1654,  1658,  1659,  1660,  1661,  1662,  1663,  1668,  1688,  1689,
    1690,  1691,  1702,  1716,  1717,  1723,  1728,  1733,  1738,  1743,
    1748,  1753,  1758,  1764,  1770,  1776,  1783,  1805,  1814,  1818,
    1826,  1830,  1838,  1850,  1871,  1875,  1881,  1885,  1898,  1906,
    1916,  1918,  1920,  1922,  1924,  1926,  1931,  1932,  1939,  1948,
    1956,  1965,  1976,  1984,  1985,  1986,  1990,  1990,  1993,  1993,
    1996,  1996,  1999,  1999,  2002,  2002,  2005,  2005,  2008,  2008,
    2011,  2011,  2014,  2016,  2018,  2020,  2022,  2024,  2026,  2028,
    2030,  2035,  2040,  2046,  2053,  2058,  2064,  2070,  2101,  2103,
    2105,  2113,  2128,  2130,  2132,  2134,  2136,  2138,  2140,  2142,
    2144,  2146,  2148,  2150,  2152,  2154,  2156,  2158,  2161,  2163,
    2165,  2168,  2170,  2172,  2174,  2176,  2181,  2186,  2193,  2198,
    2205,  2210,  2217,  2222,  2230,  2238,  2246,  2254,  2272,  2280,
    2288,  2296,  2304,  2312,  2320,  2324,  2340,  2348,  2356,  2364,
    2372,  2380,  2388,  2392,  2396,  2400,  2404,  2412,  2420,  2428,
    2436,  2456,  2478,  2489,  2496,  2510,  2518,  2526,  2546,  2548,
    2550,  2552,  2554,  2556,  2558,  2560,  2562,  2564,  2566,  2568,
    2570,  2572,  2574,  2576,  2578,  2580,  2582,  2584,  2586,  2588,
    2592,  2596,  2600,  2614,  2615,  2619,  2633,  2634,  2635,  2642,
    2646,  2650,  2653,  2664,  2669,  2671,  2682,  2706,  2717,  2728,
    2732,  2739,  2743,  2747,  2764,  2772,  2781,  2785,  2792,  2800,
    2808,  2819,  2839,  2875,  2886,  2887,  2894,  2900,  2902,  2904,
    2908,  2917,  2922,  2929,  2944,  2951,  2955,  2959,  2963,  2967,
    2977,  2986,  3008,  3009,  3013,  3014,  3015,  3019,  3020,  3027,
    3028,  3032,  3033,  3038,  3046,  3048,  3062,  3065,  3092,  3093,
    3096,  3097,  3105,  3113,  3121,  3130,  3140,  3158,  3204,  3213,
    3222,  3231,  3240,  3252,  3253,  3254,  3255,  3256,  3270,  3271,
    3274,  3275,  3279,  3289,  3290,  3294,  3295,  3299,  3306,  3307,
    3312,  3313,  3318,  3319,  3322,  3323,  3324,  3327,  3328,  3331,
    3332,  3333,  3334,  3335,  3336,  3337,  3338,  3339,  3340,  3341,
    3342,  3343,  3344,  3347,  3349,  3354,  3356,  3361,  3363,  3365,
    3367,  3369,  3371,  3373,  3375,  3389,  3391,  3396,  3400,  3407,
    3412,  3418,  3422,  3429,  3434,  3441,  3446,  3454,  3458,  3464,
    3468,  3477,  3488,  3489,  3493,  3497,  3504,  3505,  3506,  3507,
    3508,  3509,  3510,  3511,  3512,  3513,  3523,  3527,  3534,  3541,
    3542,  3558,  3562,  3567,  3571,  3586,  3591,  3595,  3598,  3601,
    3602,  3603,  3606,  3613,  3623,  3637,  3638,  3642,  3653,  3654,
    3657,  3658,  3661,  3665,  3672,  3680,  3691,  3692,  3697,  3698,
    3702,  3703,  3704,  3708,  3717,  3725,  3741,  3742,  3747,  3748,
    3758,  3759,  3763,  3764,  3768,  3769,  3772,  3788,  3796,  3806,
    3807,  3810,  3811,  3814,  3818,  3819,  3823,  3824,  3827,  3828,
    3829,  3839,  3840,  3844,  3846,  3852,  3853,  3857,  3858,  3861,
    3872,  3875,  3886,  3890,  3894,  3906,  3910,  3919,  3926,  3964,
    3968,  3972,  3976,  3980,  3984,  3988,  3994,  4011,  4012,  4013,
    4016,  4017,  4018,  4021,  4022,  4023,  4026,  4027,  4030,  4032,
    4037,  4038,  4041,  4045,  4046,     7,    18,    31,    35,    42,
      53,    54,    60,    61,    11,    24,    37,    54,    55,    56,
      61,     3,    10,    17,    24,    31,    38,    45,    52,    61,
      61,    63,    63,    65,    66,    70,    71,    10,    16,    22,
      28,    38,    39,    47,    58,    70,    78,    86,    93,   103,
     105,   111,   115,   119,   134,   141,   142,   143,   147,   148,
       2,     1,    30,    53,    54,    59,    63,    68,    72,    80,
      81,    85,    86,    91,    92,    96,    97,   102,   103,   104,
     105,   106,   107,   112,   120,   124,   129,   130,   135,   139,
     144,   148,   152,   156,   160,   164,   168,   172,   176,   180,
     184,   188,   192,   196,   200,   204,   212,   218,   219,   220,
     225,   229,     7,    14,    20,    28,    29,     9,    19,    29,
      42,    43,     9,    23,    29,    36,    42,    49,    59,    63,
      71,    72,    73,    77,    86,    95,   102,   103,   108,   120,
     125,   150,   155,   160,   166,   176,   186,   192,   203,   214,
     229,   230,   236,   237,   242,   243,   249,   250,   254,   255,
     260,   262,   268,   269,   273,   274,   277,   278,   283,     7,
      21,    36,    56,    57,    84,    85,    86,    87,    88,    89,
      93,    94,    99,   104,   105,   106,   107,   108,   113,   120,
     121,   122,   139,   146,   153,   163,   173,   185,   193,   202,
     220,   221,   225,   226,   230,   239,   262,   276,   283,   288,
     290,   292,   294,   297,   300,   301,   302,   303,   308,   312,
     313,   318,   325,   330,   331,   332,   333,   334,   335,   336,
     337,   343,   344,   348,   353,   360,   367,   374,   386,   387,
     388,   389,   393,   398,   399,   400,   405,   410,   411,   412,
     413,   414,   415,   420,   440,   469,   470,   474,   478,   479,
     480,   484,   488,   496,   497,   502,   503,   504,   508,   516,
     517,   522,   523,   527,   532,   536,   540,   545,   553,   554,
     558,   559,   563,   564,   570,   581,   594,   608,   622,   636,
     650,   673,   677,   684,   688,   696,   701,   708,   718,   719,
     720,   721,   722,   729,   736,   737,   742,   743,     7,    13,
      19,    25,     6,    15,    25,    35,    45,    55,    65,    75,
      85,    95,   106,   117,   127,   140,   141,     9,    19,     8,
      33,    62,    66,    67,    72,    73,    78,    79,    83,    84,
      89,    90,     9,    16,    26,    33,    44,    45,    50,    51,
      52,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    90,    91,    92,    97,    98,   103,   107,   115,   116,
     121,   122,   123,   129,   134,   142,   143,     7,    14,    31,
      51,    52,     9,    13,    44,    45,    46,    50,    51,    55,
      59,    60,    64,    70,    75,    76,    77,    78,     2,     9,
      15,    21,    28,    35,    45,    46,    47,     7,    18,    19,
      23,    24,    25,    26,    27,     9,    18,    27,    36,    45,
      54,    63,    72,    85,    87,    93,    94,    99,   103,   107,
     118,   126,   130,   139,   148,   157,   166,   175,   184,   192,
     200,   209,   218,   227,   236,   253,   262,   271,   280,   290,
     303,   318,   327,   335,   350,   358,   368,   378,   385,   392,
     400,   407,   418,   419,   424,   428,   433,   438,   446,   447,
     452,   456,   457,   458,     2,     7,    12,    17,    26,    33,
      43,    44,    51,     9,    17,    29,    30,    34,    35,    36,
      41,    42,    43,    48,    52,    56,    60,    64,    68,    72,
      76,    80,    84,    88,    92,    97,   101,   105,   112,   113,
     117,   118,   119,     5,    12,    22,    23,     7,    14,    22,
       6,     7,    16,    25,    34,    43,    52,     7,    18,    25,
      34,    35,    39,    40,     9,    19,    29,    39,    49,    59,
      69,    79,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   114,
     115,   116,   117,   118,   119,   124,   125,   130,   131,   132,
     137,   138,   139,   142,   143,     7,    16,    25,    46,    47,
      50,    54,     8,    20,    33,    46,    58,    70,    86,    87,
      91,    95,     8,    21,    34,    47,    65,    87,    88,    89,
      90,     7,    19,    33,     8,    22,    36,    48,    56,    70,
      71,    72,    73,    74,    87,    88,    93,    94,    98,    99,
       7,    26,    50,    73,    80,    85,    86,    87,    88,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    93,    93,    93,    93,    93,    93,    93,    93,    93,
      93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
      93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
      93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
      93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
      93,    93,    93,    93,    93,    94,    94,    94,    94,    94,
      94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
      94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
      94,    94,    94,    95,    95,    95,    95,    95,    95,    95,
      95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
      95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
      95,    95,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    97,    97,    97,    97,    97,    97,    97,
      97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
      97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
      97,    97,    97,    97,    97,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN",
  "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT",
  "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION",
  "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED",
  "COMPRESSION", "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION",
  "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P",
  "COPY", "COST", "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P",
  "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL",
  "ISOLATION", "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
  "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
  "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED",
  "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE",
  "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLISECOND_P",
  "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P",
  "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR",
  "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL",
  "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF",
  "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION",
  "OPTIONS", "OR", "ORDER", "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P",
  "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PIVOT", "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS",
  "POLICY", "POSITION", "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES",
  "PROCEDURAL", "PROCEDURE", "PROGRAM", "PUBLICATION", "QUALIFY", "QUOTE",
  "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE",
  "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE",
  "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P",
  "SECONDS_P", "SECURITY", "SELECT", "SEMI", "SEQUENCE", "SEQUENCES",
  "SERIALIZABLE", "SERVER", "SESSION", "SET", "SETOF", "SETS", "SHARE",
  "SHOW", "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME",
  "SQL_P", "STABLE", "STANDALONE_P", "START", "STATEMENT", "STATISTICS",
  "STDIN", "STDOUT", "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT",
  "SUBSCRIPTION", "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID",
  "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP",
  "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIES", "TIME", "TIMESTAMP",
  "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM",
  "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P",
  "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN",
  "UNLISTEN", "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER",
  "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW",
  "VIEWS", "VIRTUAL", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P",
  "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P",
  "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS",
  "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT",
  "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE",
  "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'",
  "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'",
  "'.'", "';'", "','", "'#'", "'$'", "'?'", "'{'", "'}'", "':'", "$accept",
  "stmtblock", "stmtmulti", "stmt", "AlterObjectSchemaStmt",
  "AlterSeqStmt", "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem",
  "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "CallStmt", "CheckPointStmt", "opt_col_id",
  "qualified_name", "ColId", "ColIdOrString", "Sconst", "indirection",
  "attr_name", "ColLabel", "CopyStmt", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "CreateFunctionStmt", "macro_alias",
  "param_list", "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt",
  "unreserved_keyword", "col_name_keyword", "func_name_keyword",
  "type_name_keyword", "other_keyword", "type_func_name_keyword",
  "reserved_keyword", "CreateSeqStmt", "OptSeqOptList", "CreateTypeStmt",
  "opt_enum_val_list", "enum_val_list", "DeallocateStmt", "DeleteStmt",
  "relation_expr_opt_alias", "where_or_current_clause", "using_clause",
  "DropStmt", "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "type_name_list",
  "ExecuteStmt", "execute_param_clause", "ExplainStmt", "opt_verbose",
  "explain_option_arg", "ExplainableStmt", "NonReservedWord",
  "NonReservedWord_or_Sconst", "explain_option_list", "analyze_keyword",
  "opt_boolean_or_string", "explain_option_elem", "explain_option_name",
  "ExportStmt", "ImportStmt", "IndexStmt", "access_method",
  "access_method_clause", "opt_concurrently", "opt_index_name",
  "opt_reloptions", "opt_unique", "InsertStmt", "insert_rest",
  "insert_target", "opt_by_name_or_position", "opt_conf_expr",
  "opt_with_clause", "insert_column_item", "set_clause", "opt_or_action",
  "opt_on_conflict", "index_elem", "returning_clause", "override_kind",
  "set_target_list", "opt_collate", "opt_class", "insert_column_list",
  "set_clause_list", "set_clause_list_opt_comma", "index_params",
  "set_target", "LoadStmt", "file_name", "PragmaStmt", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "RenameStmt", "opt_column",
  "SelectStmt", "select_with_parens", "select_no_parens", "select_clause",
  "opt_select", "simple_select", "value_or_values", "pivot_keyword",
  "unpivot_keyword", "pivot_column_entry", "pivot_column_list_internal",
  "pivot_column_list", "with_clause", "cte_list", "common_table_expr",
  "opt_materialized", "into_clause", "OptTempTableName", "opt_table",
  "all_or_distinct", "by_name", "distinct_clause", "opt_all_clause",
  "opt_ignore_nulls", "opt_sort_clause", "sort_clause", "sortby_list",
  "sortby", "opt_asc_desc", "opt_nulls_order", "select_limit",
  "opt_select_limit", "limit_clause", "offset_clause", "sample_count",
  "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_list_opt_comma", "group_by_item",
  "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "qualify_clause", "for_locking_clause", "opt_for_locking_clause",
  "for_locking_items", "for_locking_item", "for_locking_strength",
  "locked_rels_list", "opt_nowait_or_skip", "values_clause",
  "values_clause_opt_comma", "from_clause", "from_list",
  "from_list_opt_comma", "table_ref", "opt_pivot_group_by",
  "opt_include_nulls", "single_pivot_value", "pivot_header", "pivot_value",
  "pivot_value_list", "unpivot_header", "unpivot_value",
  "unpivot_value_list", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr", "struct_expr", "func_application",
  "func_expr", "func_expr_windowless", "func_expr_common_subexpr",
  "list_comprehension", "within_group_clause", "filter_clause",
  "export_clause", "window_clause", "window_definition_list",
  "window_definition", "over_clause", "window_specification",
  "opt_existing_window_name", "opt_partition_clause", "opt_frame_clause",
  "frame_extent", "frame_bound", "opt_window_exclusion_clause",
  "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "map_arg", "map_arguments",
  "map_arguments_opt_comma", "opt_map_arguments_opt_comma", "sub_type",
  "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "c_expr_list", "c_expr_list_opt_comma", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "indirection_el", "opt_slice_bound", "opt_indirection",
  "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "UseStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "VariableResetStmt", "generic_reset", "reset_rest",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "VariableShowStmt", "show_or_describe", "opt_tables",
  "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-2965)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1965)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    6336,   337,   846, -2965, -2965,   256,   337, 46355, 60391,   337,
     125,  3284, 48291, -2965,   294,  6239,   337, 51195, 67063,   338,
     343, 28682,   408, 51679, 51679, -2965, -2965, -2965, 60391, 51195,
   52163,   337,   346, 60875, -2965,   337, 30618, 48775,   233, -2965,
   51195,    75,    41, 52647, 51195,  3479,   776,   265, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,   329,
   -2965, -2965, -2965, -2965,   129, -2965, -2965, -2965, -2965, -2965,
     151, -2965,    99,   152, 28682, 28682,  2029,   319, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, 30134, -2965, -2965, -2965,
   -2965, 53131, 51195, 53615, 49259, 54099, -2965,  1030, -2965,   204,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,   212, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,   213,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,   215,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965,   553,   218, -2965, -2965, -2965,   384, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965,  3479, 51195,    14,
     719,   560, 54583, -2965, -2965, 51195, -2965, -2965,   634,   859,
   -2965, -2965, 49743, -2965, -2965, -2965,   919,  1111,   799, -2965,
   -2965,   644, -2965,   154, -2965, -2965,   739,   668, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965,   792, -2965, 64263, -2965,
   61359, 55067, 55551, -2965,   680, 67080, 27712, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965,   329, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, 51679,
   60391, 51679,   703,   707,  1062,   732, 29166,   743, 31103,   754,
     760,  1006,   764,   779,   785,   790,    41, 28197,   805,   553,
   -2965, 56035, 56035,   -10,  2131, -2965, 56035, 56519, -2965,   677,
   -2965,  1030, -2965, -2965, -2965, -2965, -2965,   400,   811, -2965,
   57003, 57003, 57003,   858,  1099, -2965, -2965, -2965,   863, -2965,
   -2965,  1068, 18220, 18220, 61843, 61843,  1030, 61843,   907, -2965,
   -2965,   353, -2965, -2965, -2965,  2029,   893,   553, -2965, -2965,
   48775, -2965, -2965,   167,  1252, 18220, 51195,   964, -2965,  1007,
     964,  1016,  1019, -2965,  6336, -2965, 51195,  1348,  1237, 48775,
     609,   609,  1469,   609,   935,  1065,  2908,  3295, -2965,   729,
   -2965,  1034,  1125,  1055,  1326, -2965,   893,  1423,   756,  1216,
    1433,  6829,  1436,   883,  1440,  1043,  1523, 18220, 43935,   553,
   -2965,  9586,  1087,  1097, -2965, -2965, -2965, -2965,  1059,  1344,
   -2965,  1577, -2965, -2965,  1164, 57487, 57971, 58455, 58939,  1538,
   -2965, -2965,  1484, -2965, -2965, -2965,  1185, -2965, -2965, -2965,
     178, -2965, -2965, -2965, -2965, -2965, -2965,  1204, -2965,  1204,
    1204, -2965, -2965, -2965, -2965,  1157,  1157,  1345,  1166, -2965,
   -2965, -2965,  1528, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965,  1178,  1011, -2965,  1204, -2965,  1157, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, 66623, -2965, -2965, -2965,
   -2965,   418,   767, -2965,  1181, -2965, -2965, -2965, -2965,    97,
    1187, -2965,  1649, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965,  1192, -2965,  2961,  1157,  1553,  1200,   113, -2965,  1558,
     172, -2965,  1559,  1425, 18220, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965,    41, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965,   364, -2965, -2965, 40851, 67080,  1290,  1207, -2965,
   -2965, 18220, 18220,  1208,  2651, 56035, 56519, 18220, 51195, -2965,
   18220, 21783,  1210, 18220, 18220, 10095, 18220, 26744, 56035,  2131,
    1211, -2965,   599, 51195,  1215, -2965,  1311,  1311,   346, 28682,
    1504, -2965,   999,  1501,  1431, -2965, 28682,  1431,  1001,  1223,
    1508,  1431, -2965,   449,  1509,  1311, 31587,  1227, -2965,  1311,
    1441, -2965, -2965, 40851, 12640, 64732,  1693, -2965, -2965, -2965,
   -2965,  1512, 60391,  1251, -2965, -2965, -2965, -2965, -2965, -2965,
     612,  1750,   180,  1751, 18220,   180,   180,  1257,   221,   221,
   -2965,  1260, -2965,   222,  1262,  1263,  1754,  1762,   173,   163,
    1011,   180, 18220, -2965,   221,  1265,  1764,  1267,  1766,   205,
     210, -2965,   223, 18220, 18220, 18220,  1630, 18220,  9077,  1763,
   43935, -2965, 51195,   600, -2965,   553,  1272,  1030, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965,   198,  7093, -2965, -2965,
   -2965, -2965,  1313, -2965, -2965, -2965, -2965,  1481, 18220, -2965,
   -2965,  1270,  1504, -2965,   224, -2965, -2965,  1504, -2965, -2965,
   -2965, -2965, -2965,   270,  1679, 39883, 40367, 60391,   553, -2965,
   62327, -2965, -2965, -2965, -2965, -2965, -2965,   655, -2965,   329,
   42479,  1276,  1280,   964, 51195, 51195,  1745, -2965, -2965, -2965,
    1007, 48775,   131,  1571,  1410, -2965, -2965,  2029,  2029, 13639,
     940,   483,    76, 14148, 18729,  1626,  1520,   581,   160,  1627,
   -2965,  1525,  1742, 21783, 18220, 18220,   935,  1065, 18220, -2965,
   -2965, -2965,  1575, 51195, 46839,   832,   881,  1305,  1390,  1307,
      36,  1720, -2965,  1312, -2965,  1393, 51195, 66623,   258, -2965,
    1755,   258,   258,   292,  1756,  1394,   285,  1557,    23,  -107,
    1698, -2965,  1312, 48775,   166,    29,  1312, 51195,  1398,    57,
    1312, 60391,  1207, 37525,  1320, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965,   145, 12640, -2965,  1140,  1203,
    1309,   293,   130,  1362,  1395, 12640,  1411,  1437,   150,  1466,
    1474,  1479,  1491,  1554,  1585,  1591,  1593,   148,  1596,  1601,
    1615,  1617,  1621,  1625, -2965,  1628,   186,  1631,   161, 12640,
    1636, -2965,   192, -2965, 42479,   -19, -2965, -2965,  1639,  1399,
   60391,  1357, 51195,  1038,  1677,  1728, 65201, 51195,  1561,  1698,
    1566,  1332,  1796,  1572,  1097,  1578,  1336, -2965, 62811,  1840,
   -2965, -2965, -2965, -2965, -2965, -2965,  1342, -2965, -2965, 18220,
   -2965, -2965, -2965,  1838, -2965, 64732, 64732,  1204,  1204, -2965,
   -2965,  1817,  1454,  1458,  1838, -2965,  1838, -2965, 60391, -2965,
   -2965, 64732, -2965, 60391,  1356,  1379,  1838, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965,  1838,  1463, -2965,  1468,  1471,  1472, -2965,
   -2965, -2965, -2965, -2965, 60391, 43935,  1383, 60391, -2965, 51195,
   51195, -2965, 51195, 60391,  1389, 67080, 45387, -2965, -2965, -2965,
   -2965,   381,   976, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965,  1030, 43935, -2965,  2714, 41412,  1392, 18220, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,  1396,
    1727, -2965, -2965,  6572,  1397, 41452,  1400, 21783, 21783,   553,
    4343, -2965, -2965, 21783,  1401, 45871,  8070,  1403,  1404, 41740,
   14657, 18220, 14657, 14657, 41877, -2965,  1412, 41977, 56035,  1417,
   51195, 50227, -2965, -2965, -2965, 18220, 18220,  2131, 50711,  1435,
   -2965, 28682, -2965,  1682, 28682, -2965, -2965,  3367, -2965, 28682,
    1683, 18220, 28682, -2965,  1643,  1646,  1421, 28682, -2965, 51195,
    1424, 51195, -2965, -2965, -2965, -2965, -2965,  1407,   751, -2965,
     757,  2204, -2965, -2965, 18220, 18220, -2965, 42479,  1470, 18220,
   -2965, 18220, 42973, 35945, 15166, 42973,  1918,  1918, 34007, -2965,
    1588, 42057, -2965,  1432,  1827,  7833,  1428, -2965, -2965,  1426,
   -2965,  1429,  1430, 38431,   179,   553,   553, 18220, -2965, 18220,
    3517,  3517, -2965,   195, 64732, 18220, 18220, 18220, 18220, 18220,
   18220, 18220, 18220, 43451,  1521,   149, 60391, 18220, 18220,  1434,
     870, -2965, 18220,  1667, -2965,  1442, 18220,  1524,   830, 18220,
   18220, 18220, 18220, 18220, 18220, 18220, 18220, 18220, -2965, -2965,
   24309,   201,   636,  1770,  1790,    80,   383, 18220,  1782,  9586,
   -2965,  1782, -2965, -2965, -2965, -2965, -2965,   225, -2965, -2965,
   -2965,  1407, -2965,  1407, -2965, 60391, -2965, 51195,   167, 47807,
   18220, -2965, -2965,  1443,  1447,   672, -2965,  1511, -2965, -2965,
   51195, 34491,  1741, -2965,   331,  1450, -2965, 41332,  1699,  1741,
    2029, -2965, -2965, 22801,  1580,  1743,  1685, -2965, -2965,  1665,
    1668, -2965,  1475, 42551, 19238, 19238, -2965,  1306, 42479,  1308,
   -2965, -2965, -2965, -2965, -2965, -2965,    63, -2965, 51195,    67,
   32071, -2965,  1476,    56, -2965,  4958,  1799,  1761,  1626,   160,
    1477, -2965,  1279,  1485, 63295, 51195,  1765,  1722,  1771,  -102,
   64732, -2965, -2965, -2965, -2965, 51195, 60391, 59423, 63779, 44419,
   51195, 43935, -2965, -2965, -2965, -2965, 51195,   422, 51195,  7187,
   -2965, -2965, -2965,   258, -2965, -2965, -2965, -2965, -2965, 60391,
   51195, -2965, -2965,   258, 60391, 51195,   258, -2965,  1314, 51195,
   51195, 51195, 51195,  1316, 51195, 51195, -2965, -2965, -2965, 18220,
      -8,    -8,  1703, 10604,   104, -2965, 18220, 18220,  1669, -2965,
   -2965,   769,  1713,   123, -2965,  1541, 51195, 51195, 51195, 51195,
   51195,  2169, -2965, -2965, -2965, -2965, -2965,  1500, -2965,  1505,
    1859,  1698, -2965,  1861, 47323,   731,  3205,  1862,  1546,  1864,
   11113,  1973,  1746, -2965, -2965,  1736, -2965, 18220,  1518,  1526,
      97,   771, -2965, -2965,  1527,  1379,  1543,  1548,  1531,  1532,
   64732,   773, -2965,   782,  1838,   147,  1533,  1534,  1415,  1060,
     643,  1310,   113, -2965, 43935, -2965,   172, -2965,  1749,   177,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965,  1207, 24804, -2965,
     793, -2965, -2965,  1999,  1030,  1999,   517, -2965, -2965,  1999,
   -2965,  1985,  1999, -2965, 64732, -2965,  7939, -2965, 18220, 18220,
   -2965, 18220,  1878, -2965,  2035,  2035, 64732, 21783, 21783, 21783,
   21783, 21783, 21783,   468,  1265, 21783, 21783, 21783, 21783, 21783,
   21783, 21783, 21783, 21783, 23310,   334, -2965, -2965,   795,  2012,
   18220, 18220,  1891,  1878, 18220, -2965, 64732,  1552, -2965,  1562,
    1565, 18220, -2965, 64732, -2965, 51195,  1567,    38,   -11, -2965,
    1556,  1560, -2965,  1504, -2965,   939,   951, 51195,  3087,  4018,
    4106, -2965, -2965, 18220,  1881,  3367, 28682, -2965, 18220,  1573,
   -2965, -2965, 28682,  1896, -2965, -2965, -2965, 32555,  3367, 64732,
     852, -2965, 51195, 64732,   853, 40851, -2965, 12640, -2965, 64732,
   -2965, -2965, -2965, -2965, -2965, -2965,  1574,  1563, 18220,    87,
   -2965, 36437,  5681, -2965,  1568, -2965,  1549, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965,  1579, -2965,  1582, -2965,  1584, 51195, -2965, 19747,
   -2965, 60391, -2965, -2965, 18220, 18220, 51195, -2965,  1630, -2965,
    1586, 36477, -2965, -2965, -2965,   242,   882, 42638,   383,  6522,
    6522,  6522, 42973, -2965, -2965, -2965,  1597, -2965, 21783, 21783,
   -2965,  5050,  2299,  9077, -2965, -2965,  1910, -2965,   158, -2965,
    1590, -2965, -2965,  3334, -2965, 35945, 42909, 18220,   169, -2965,
   18220,  1434, 18220,  1663,  6522,  6522,  6522,   554,   554,   242,
     242,   242,   882,   383, -2965, -2965, -2965,  1594, 18220, 43935,
   -2965,  1602,  1605,  1943,  1267, 18220, -2965, -2965, 28682,  1435,
     -19,  1435,  1838,  3517, -2965,  1007, -2965, -2965,  1007, 42479,
   51195, -2965, -2965,  1851,  1606, 28682,  1638,  2070,  2052, 60391,
   -2965, -2965,  1607,  1782,  1632, -2965, -2965,  1634, 18220,  1300,
    1634, -2965,  1741,   -20,  1829,   980,   980,  1306,  1835, -2965,
   -2965,  1678, -2965, -2965, -2965, 18220, 11622,  1315, -2965,  1321,
   -2965, -2965, -2965, -2965, -2965,  1616, -2965,  1886, -2965, 51195,
   -2965, -2965, 21783,  2069, 18220, 33039,  2071,  1870, -2965, -2965,
   -2965,  1712,  1312, 18220,  1866, -2965,   144,  1633,  1987,   -88,
    1939, 60391, -2965,   287,   288, -2965,   848,  1990,   177,  1991,
     177, 43935, 43935, 43935,   854, -2965, -2965, -2965,  1030, -2965,
    -126,   862, -2965, -2965, -2965, -2965,  1721,    61,  1698,  1312,
   -2965, -2965, -2965, -2965, -2965, -2965, -2965,   241,    69,  1312,
    1723, -2965,  1724, -2965,  1729,    94,  1312, -2965, -2965, 42479,
    1645,   104,   104,   104, 12640, -2965,  1874,  1875,  1637, 42479,
   42479, -2965,   182, -2965, 60391, -2965, -2965, -2965,  1669,  1728,
   51195,  1698,  1648,  2112,  1097,  1336, -2965,  1809,   687,   801,
   -2965, 60391, 51195, 51195, 51195, 26275, -2965, -2965, -2965,  1651,
    1652, -2965,   -25,  1879,  1873, 51195,  1696, 51195,  1307,  2122,
   51195, -2965,   878, 15675,  2015, 51195,  1661, -2965, -2965, -2965,
   -2965,  1838, -2965, -2965,   430,   430, -2965, -2965, 60391, -2965,
    1664, -2965,  1670, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965, 60391, -2965, -2965, -2965, 44903,
   -2965, -2965, -2965, -2965, -2965, 43935, -2965,  1030, -2965,  1030,
    1897, 60391, 38915,  1030, 39399,  1030,  1671, -2965, 42479, 36517,
   42479,  1891, -2965,   244,  2035,   496,   496,   496,  3721,  2002,
     290,  1673,   496,   496,   496,   358,   358,   244,   244,   244,
    2035,   334,   677, 45871,  1674, -2965, 42479, 42479, -2965, -2965,
    1675, -2965, -2965, -2965, -2965,  1680,  1684, -2965, -2965, -2965,
   -2965, -2965, -2965, 60391,  1004,  1435,   233,   233,   233,   233,
   -2965, 51195, 51195, 51195, 42479,  2115,  1997, -2965,  3367, 42479,
   51195, -2965, 25787, 51195, -2965,  2009, -2965,  2104, -2965, 51195,
     880, -2965, -2965, -2965, -2965, -2965, 42121, 18220, -2965,  2050,
   -2965, 18220, 18220, -2965, 35945, -2965, -2965,  1688,  9077, 42404,
   -2965,  2000, 36557, 42479, -2965,  1588, -2965,  3517, 18220,  5096,
    5288, 18220,  1689, 18220,  2031, -2965, -2965,  1700, -2965, -2965,
   64732, 18220,  1704,  3375, 21783, 21783,  4547, -2965,  5125, 18220,
    9077, -2965, 37565,  1702,  1706,  1703, 16184, -2965,  1920,  1710,
   -2965,  1881,   104,  1881,  1731, -2965, -2965, -2965, -2965,  2204,
   -2965, 18220,  1882, 60391,   534,  1794,   896, -2965,   553, 34491,
    1638, 18220,   415, -2965, -2965,  1735, -2965,  1634, -2965, -2965,
   -2965,  1941, -2965, -2965, -2965, 51195, -2965,  1737, -2965, 32071,
    2056,  9077, -2965, 32071, 51195, 51195, 36597,  2092, -2965, 60391,
   60391, 60391, -2965, 60391,  1739,  1738,   663,  1740,   737, -2965,
    1555,   663,  2073,   702,  1307,   285,  2644,   524, -2965, -2965,
   -2965,  1818, 51195, -2965, 60391, -2965, -2965, -2965, -2965, -2965,
   44419, -2965, -2965, 35460, 43935, -2965, 43935, 51195, 51195, 51195,
   51195, 51195, 51195, 51195, 51195, 51195, 51195, -2965,  1747,  1752,
    1757,  1703, -2965, -2965, -2965, -2965, -2965, -2965,  -107, -2965,
     182,  1760, -2965, 47323,  3479,  1546,  2209,  1728,   984, 59907,
   -2965,  1767,  1748,   898,  1698,  1772,  2210, -2965,   731, 47323,
   -2965, -2965, -2965,  2170, -2965,   680,   226, -2965,  1097, -2965,
    3479,  1336, -2965,  3479, 42479, 60391,  1813, -2965,  1379,  1758,
   -2965, -2965,  1379, 64732,  1379, -2965, -2965,   177,   900, -2965,
   -2965, -2965, -2965, -2965, 60391,  1759, -2965,  1759, -2965, -2965,
    1759, -2965, -2965, -2965, -2965, 21783,  2086,  1773, 64732, -2965,
   -2965, 51195, -2965, -2965, -2965,   925,  1769,  1881, 51195, 51195,
   51195, 51195, -2965, -2965, -2965, 16693, 18220,  1800, -2965,  1776,
   13149,  2075, -2965, 25299, -2965,   231,  1777, 32555, 60391, -2965,
   -2965, -2965, 18220, 42479, -2965, 42479, -2965, -2965, -2965,  7702,
   -2965,  1775,  1785, 60391, 18220, -2965, -2965, -2965,   325, 18220,
   18220,  5050, -2965, 37876, 18220, 64732,   930,  5050,   207, 18220,
    5754,  5847, 18220, 18220,  5994, 36941, -2965, 18220, 12131, -2965,
    1786, 18220, 36981, 34975, -2965, 28682,  1997,  1788,  1997,  1030,
    1789, 42479, 18220, -2965, -2965, -2965, -2965,  1814,   456, 30618,
    1994, -2965,  1778, 60391, -2965,  1882, 42479, -2965, -2965, 35945,
   -2965, -2965, -2965, -2965, -2965,  2215,  2024,  1791,  1797, -2965,
    1236, -2965, -2965, 60391,  1802, -2965,  1805,   663, -2965, 60391,
    1846, -2965,   240,  2094,   119, -2965, 18220, -2965,  2190,  2278,
    1555,  1816, 60391, 51195, 21783, -2965,   255,   199, -2965,  2099,
   51195,  1846,  2236, -2965, -2965, -2965,   737, -2965,  2138,  2053,
   -2965,   258, -2965, 18220,   737,  2054,   262, 60391, -2965, -2965,
    1808, -2965, 64732,   177,   177, -2965,  1824,  1825,  1828,  1834,
    1836,  1839,  1841,  1842,  1843,  1844,  1845, -2965,  1849,  1852,
    1853,  1857,  1858,  1867,  1868,  1884,  1178,  1885, -2965,  1887,
    1735,  1892,  1901,  1904,  1905,  1912, 65670,  1913,  1915,  1916,
    1917,  1181,  1919,   381,   976, -2965, -2965, -2965, -2965,  1921,
   -2965, -2965, -2965,  1200,  1872, -2965, -2965, -2965,  1924, -2965,
    1937, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,   104,
    1207,   118, 60391,  1876,  1696,  2326, 17202,   867,  2118,  1880,
   -2965,  1030,  1546, -2965, 47323,  3470,   718,  1873, -2965,   193,
    1696, -2965,  2282,  1546,  1936,  2362, -2965,  2132, 60391,  1922,
   -2965, -2965, -2965, -2965, 44903,  1759,  5662, 21783, 64732,   931,
     932, -2965,  2414,  2085,  1997, -2965, -2965, -2965, -2965, -2965,
    1927,   -33,  1928,  8568,  1925, -2965, -2965, -2965, -2965, -2965,
   -2965, 42479, 42479, 60391,  2107, -2965, -2965,  1930,  1935, 33523,
    2383,  1942, -2965, 12640, -2965,  2254, -2965, 27228, -2965, 42479,
   18220, -2965, -2965, 37605,  2262,  5050,  5050, 37876,   953, -2965,
    5050, 18220, 18220,  5050,  5050, 18220, -2965,  1949, -2965,   954,
   -2965, 37021, -2965, 66139, -2965, -2965,  1800,  1030,  1800, -2965,
   -2965,  1946, -2965, -2965, -2965,  2004, -2965, -2965,   955,  2366,
    1882, 18220, -2965, -2965,  1952, 32071, -2965, -2965, -2965, -2965,
   32071,   663, -2965,  2126,  1846,  1965, -2965, -2965, -2965, -2965,
   -2965, -2965, 37061, -2965,    55, 18220, -2965,   797,  3721, -2965,
   -2965, -2965, -2965,  1846,  1097, -2965, 51195,  2433,  2327, -2965,
   -2965, 42479, -2965, -2965,  1838,  1838, -2965, -2965,  2104, -2965,
   -2965, -2965, -2965,  1200,   132, 35460, 51195, 51195,  1972, -2965,
   -2965,  -107,  2357,   960,   731, -2965,  3479,  3479, 42479, 51195,
    2330, 47323, -2965,  2439,  1977, 51195,  1696,  1037,  1037, -2965,
    2123, -2965,  2124, -2965, -2965,  2446,   295, -2965, 17711, 51195,
   -2965, -2965, 29650, -2965,  5662,   969, -2965, -2965,  1980,  1984,
   -2965,  1800, 18220,  1986, 18220, -2965, 20256,  2450,  1988, -2965,
   18220,  2049, 23819, -2965, 18220, -2965, 51195, 56035,    -8,  1995,
   56035, -2965, -2965, -2965, 18220, -2965,  5050,  5050,  5050, -2965,
   -2965, -2965, -2965,  2194,  2107, -2965,  2107, 18220,  3479,   553,
    2509, 60391,   -18, -2965, 42479, -2965, -2965, -2965, 51195, -2965,
   43935, -2965,   663,   -36,  1996, 18220, 37101,  2231, -2965, -2965,
    2261, -2965,  2322, -2965,  2065,   466,  2090, -2965, -2965, -2965,
   -2965,  1207,  1030,  1546,  1873,  1936, -2965,  2018, 51195,  3479,
     731,   680, -2965, -2965, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965, -2965, -2965, -2965, -2965,  3479,  2451,  2238,  2455,  3479,
   42479,  1813, 18220,   101, -2965,   995,  2452, -2965, -2965,  2513,
    2107,  2041, 20256,  2043, -2965,  2025, 60391, 42479,  2172, -2965,
   -2965,  2044, -2965, -2965,   104, 18220, -2965, 37950,  2490,  1703,
    2049,  2049, -2965,   456, -2965, -2965,  2459, 29650,  2422,  1097,
     663,  2060,   996, -2965, -2965, -2965, -2965, -2965,  1698, -2965,
   37445,  2287,   162,  2272,  1996, 18220, -2965,  2127, -2965, -2965,
   -2965,  2518, -2965, -2965, 47323,  2057,  1936,  1873,  1696,  1936,
    2275, -2965,  2276, -2965,  2061, 37485, 60391, 60391,  1546, 29650,
   60391,  2064,  2049, -2965,  2066, -2965, -2965, -2965, 50227, -2965,
    2074,  2079, -2965, 18220,   191, -2965, -2965,  2129, 51195,  1002,
      18,  2261, 35460, -2965, 43935,  1701,   -36,  2365, -2965, -2965,
   -2965, -2965,   187,  2290, -2965,  2294, -2965, 42479, -2965,  3479,
   47323, -2965, -2965, -2965, -2965, -2965, -2965, 29650,  2452, -2965,
     331, -2965,  1435, -2965,   331, -2965, -2965, -2965, -2965,  1030,
   -2965,  1403, 20765, 20765, 20765,  2081,  3479, -2965,  1435, -2965,
    2211,  2272, -2965, -2965, -2965, -2965, -2965,   734,   734,  2468,
   -2965,  2145, -2965,  1936,  1015, 60391,  1634, -2965,  1634, 22292,
    2232,   157, 41372,  2445, -2965,  2445,  2445, -2965, -2965, -2965,
   34491, -2965, -2965,  2566, -2965,   250, -2965, -2965, -2965,  1546,
     331, -2965, -2965,  2556, -2965, -2965, -2965, -2965, -2965,   176,
   -2965, -2965, -2965,  1435,   663, -2965, -2965, -2965,  1435,  1634,
   21274,  2235, -2965,  2303, -2965, -2965, -2965, -2965, -2965, -2965,
   -2965
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     917,  1206,     0,  1169,  1168,  1331,  1206,     0,  1316,  1206,
     869,  1085,     0,   810,  1331,     0,  1206,     0,   917,     0,
       0,     0,     0,     0,     0,    81,    84,    82,     0,     0,
       0,  1206,   121,     0,   809,  1206,     0,     0,   113,    83,
       0,  1415,     0,     0,     0,     0,     0,     2,     4,     5,
       6,     7,     8,     9,    21,    10,    11,    12,    17,    13,
      14,    15,    16,    18,    19,    20,    22,    23,    24,  1127,
      25,    26,    27,    28,     0,    29,    30,    31,    32,    33,
      57,    44,   126,    56,     0,     0,   916,   225,    64,    34,
      35,    36,    37,    38,    39,    40,   808,    41,  1205,  1204,
    1198,     0,     0,     0,     0,     0,  1330,     0,  1199,  1184,
    1429,  1430,  1431,  1432,  1433,  1434,  1435,  1436,  1437,  1438,
    1439,  1795,  1440,  1441,  1442,  1443,  1444,  1796,  1445,  1446,
    1447,  1741,  1742,  1797,  1743,  1744,  1448,  1449,  1450,  1451,
    1452,  1453,  1454,  1455,  1745,  1746,  1456,  1457,  1458,  1459,
    1460,  1747,  1798,  1748,  1461,  1462,  1463,  1464,  1465,  1799,
    1466,  1467,  1468,  1469,  1470,  1471,  1472,  1473,  1474,  1800,
    1475,  1476,  1477,  1478,  1479,  1480,  1481,  1482,  1483,  1484,
    1749,  1750,  1485,  1486,  1487,  1488,  1489,  1490,  1491,  1492,
    1493,  1494,  1495,  1496,  1497,  1498,  1499,  1500,  1501,  1502,
    1503,  1504,  1505,  1506,  1507,  1508,  1509,  1510,  1511,  1512,
    1751,  1513,  1514,  1515,  1516,  1517,  1752,  1518,  1519,  1520,
    1753,  1521,  1522,  1523,  1801,  1802,  1524,  1525,  1754,  1804,
    1526,  1527,  1755,  1756,  1528,  1529,  1530,  1531,  1532,  1533,
    1534,  1535,  1536,  1805,  1537,  1538,  1539,  1540,  1541,  1542,
    1543,  1544,  1545,  1546,  1547,  1548,  1806,  1757,  1549,  1550,
    1551,  1552,  1553,  1758,  1759,  1760,  1554,  1807,  1808,  1555,
    1809,  1556,  1557,  1558,  1559,  1560,  1561,  1562,  1810,  1563,
    1811,  1564,  1565,  1566,  1567,  1568,  1569,  1570,  1571,  1761,
    1572,  1573,  1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,
    1582,  1583,  1584,  1585,  1586,  1587,  1588,  1589,  1762,  1813,
    1763,  1590,  1591,  1592,  1764,  1593,  1594,  1814,  1595,  1765,
    1596,  1766,  1597,  1598,  1599,  1600,  1601,  1602,  1603,  1604,
    1605,  1606,  1767,  1815,  1607,  1816,  1768,  1608,  1609,  1610,
    1611,  1612,  1613,  1614,  1615,  1616,  1617,  1618,  1619,  1769,
    1817,  1620,  1621,  1770,  1622,  1623,  1624,  1625,  1626,  1627,
    1628,  1629,  1630,  1631,  1632,  1633,  1771,  1634,  1635,  1636,
    1637,  1638,  1639,  1640,  1641,  1642,  1643,  1644,  1645,  1646,
    1647,  1648,  1649,  1650,  1651,  1652,  1818,  1653,  1654,  1655,
    1772,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,  1664,
    1665,  1666,  1667,  1668,  1669,  1670,  1671,  1672,  1773,  1673,
    1674,  1675,  1819,  1676,  1677,  1774,  1678,  1679,  1680,  1681,
    1682,  1683,  1684,  1685,  1686,  1687,  1688,  1689,  1690,  1775,
    1691,  1776,  1692,  1693,  1694,  1695,  1821,  1696,  1697,  1698,
    1699,  1700,  1701,  1777,  1778,  1702,  1703,  1779,  1704,  1780,
    1705,  1706,  1781,  1707,  1708,  1709,  1710,  1711,  1712,  1713,
    1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,  1723,
    1782,  1783,  1724,  1822,  1725,  1726,  1727,  1728,  1729,  1730,
    1731,  1732,  1733,  1734,  1735,  1736,  1784,  1785,  1786,  1787,
    1788,  1789,  1790,  1791,  1792,  1793,  1794,  1737,  1738,  1739,
    1740,     0,  1185,  1186,   772,  1320,     0,   750,  1184,  1754,
    1761,  1775,  1314,  1315,  1185,  1201,   868,     0,     0,     0,
       0,     0,     0,  1079,  1078,     0,  1120,  1084,     0,     0,
    1188,  1090,  1622,  1187,   749,  1088,  1330,     0,     0,  1351,
    1352,     0,  1361,     0,  1344,  1349,  1345,     0,  1370,  1363,
    1371,  1353,  1343,  1364,  1354,  1342,     0,  1372,     0,  1347,
       0,     0,     0,  1202,  1181,   917,     0,  1131,  1132,  1133,
    1134,  1135,  1136,  1141,  1137,  1138,  1139,  1140,  1142,  1143,
    1144,  1145,  1146,  1122,  1127,  1147,  1148,  1149,  1150,  1151,
    1152,  1153,  1154,  1155,  1156,  1157,  1158,  1159,  1160,     0,
    1316,     0,     0,  1747,  1798,  1752,     0,  1765,     0,  1768,
    1769,  1656,  1776,  1779,  1780,  1781,  1782,     0,   293,  1187,
    1182,   277,     0,    59,   229,   239,   277,   282,   544,   305,
     545,     0,  1189,   896,   895,   893,   892,  1317,  1209,  1279,
    1526,  1566,  1671,  1777,  1702,   813,  1280,  1274,  1278,  1203,
     120,   118,     0,   721,  1526,  1566,  1660,  1671,  1777,   817,
     821,     0,  1200,   815,   802,     0,   803,  1187,    65,   112,
       0,   840,  1414,     0,  1419,     0,  1636,    92,    95,   781,
      93,    57,     0,     1,   917,  1126,  1107,     0,   923,     0,
     116,   116,     0,   116,     0,    49,     0,     0,    57,    52,
      56,   226,   812,  1777,  1702,   801,   804,  1535,     0,     0,
    1535,     0,  1535,     0,  1535,     0,  1333,   707,     0,   751,
    1190,     0,     0,  1050,  1083,  1082,  1081,  1080,  1085,  1535,
    1424,     0,  1388,  1389,     0,     0,     0,     0,     0,  1115,
    1091,  1089,     0,  1328,  1359,  1360,     0,  1350,  1346,  1348,
       0,   773,  1823,  1824,  1825,   348,  1826,   377,   355,   377,
     377,  1827,  1828,  1829,  1830,   344,   344,  1500,   357,  1831,
    1832,  1833,  1535,  1834,  1835,   345,   346,   382,  1836,  1837,
    1838,  1839,  1840,     0,     0,  1841,   377,  1842,   344,  1843,
    1844,  1845,   349,  1846,   315,  1847,     0,  1848,   347,   316,
    1849,   385,   385,  1850,     0,   372,  1851,   774,   775,  1369,
       0,  1373,   330,   331,   332,   333,   358,   359,   334,   364,
     365,   369,   335,   417,   344,  1535,   776,  1369,  1365,  1535,
    1369,   743,  1535,     0,     0,  1177,  1124,  1161,  1852,  1853,
    1854,  1855,  1856,  1857,  1858,  1859,  1861,  1860,  1862,  1863,
    1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,
    1874,  1875,  1876,  1877,  1878,  1879,  1880,  1883,  1881,  1882,
    1884,  1885,  1886,  1887,  1888,  1889,  1890,  1891,  1892,  1893,
    1894,  1895,  1896,  1898,  1897,  1899,  1900,  1901,  1902,  1903,
    1904,  1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,  1913,
    1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,
    1924,  1925,  1926,  1927,  1928,  1929,  1930,  1931,  1932,  1162,
    1163,  1175,     0,  1176,  1166,  1130,   917,     0,   867,  1313,
     894,     0,     0,     0,   665,   277,   282,     0,     0,   295,
       0,   680,     0,   686,     0,     0,     0,   277,    64,     0,
     239,   294,  1183,     0,   275,   276,   167,   167,   121,     0,
     102,   287,     0,     0,   290,   288,     0,   290,     0,     0,
       0,   290,   286,   247,     0,   167,     0,   275,   278,   167,
       0,   297,  1403,     0,     0,     0,     0,  1277,  1275,  1276,
    1281,     0,     0,     0,   753,   755,   756,   633,   766,   530,
       0,  1742,  1743,  1744,   701,  1745,  1746,  1748,  1749,  1750,
     484,  1751,   764,  1753,  1755,  1756,  1758,  1759,  1760,  1761,
    1762,  1763,     0,   765,  1766,  1602,  1771,  1772,  1774,  1777,
    1778,   763,  1783,     0,     0,     0,   732,   656,     0,     0,
       0,   529,     0,   702,   708,   525,     0,     0,   338,   339,
     360,   361,   340,   366,   367,   341,     0,   728,   418,   513,
     716,   532,   563,   534,   543,   521,   600,   514,     0,   524,
     516,   724,   102,   722,     0,   517,   752,   102,   720,   820,
     818,   824,   819,     0,     0,     0,     0,     0,  1183,   786,
     787,  1413,  1411,  1412,  1410,  1409,  1416,     0,  1418,  1127,
     651,   653,     0,    94,     0,     0,     0,    47,    46,     3,
     781,     0,     0,     0,     0,   114,   115,     0,     0,     0,
       0,     0,     0,     0,     0,   210,   141,   142,   144,   207,
     211,   219,     0,     0,     0,     0,     0,    53,     0,   811,
     807,   805,     0,     0,     0,  1106,  1106,     0,     0,     0,
       0,     0,  1268,  1217,  1261,     0,     0,     0,     0,  1296,
    1309,     0,     0,     0,     0,     0,  1306,     0,     0,  1289,
    1283,  1285,  1219,     0,  1106,     0,  1215,     0,     0,     0,
    1221,     0,   867,   706,     0,  1194,  1965,  1966,  1967,  1968,
    1969,  1970,  1971,  1972,  1973,  1974,  1975,  1976,  1977,  1978,
    1979,  1980,  1981,  1982,  1983,  1984,  1985,  1986,  1987,  1988,
    1989,  1990,  1991,  1992,  1993,  1994,  1995,  1996,  1997,  1998,
    1999,  2000,  2001,  2002,  2003,  2004,  2005,  2006,  2007,  2008,
    2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,  2017,  2018,
    2019,  2020,  2021,  2022,  2023,  2024,  2025,  2026,  2027,  2028,
    2029,  2030,  2031,  1919,  2032,  2033,  2034,  2035,  2036,  1192,
    1193,  1196,  1195,  1197,  1191,  1184,     0,  1933,  1795,  1796,
    1797,  1798,  1748,  1799,  1800,     0,  1801,  1802,  1754,  1804,
    1805,  1806,  1807,  1808,  1809,  1810,  1811,  1761,  1813,  1814,
    1815,  1816,  1817,  1818,  1959,  1819,  1775,  1821,  1781,     0,
    1822,   536,  1185,   769,   659,   126,   657,   782,     0,     0,
       0,   865,     0,     0,     0,  1420,     0,     0,  1535,   901,
    1535,  1050,     0,  1535,  1050,  1535,     0,  1114,  1117,     0,
    1362,  1358,  1356,  1355,  1357,   376,   363,   371,   370,   656,
     353,   352,   351,     0,   350,     0,     0,   377,   377,   375,
     354,   330,     0,     0,     0,   381,     0,   379,     0,  1367,
    1368,     0,  1340,     0,   323,   319,     0,   390,   391,   392,
     393,   400,   401,   398,   399,   394,   395,   388,   389,   396,
     397,   386,   387,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   336,   342,     0,     0,   777,     0,  1335,     0,
       0,  1337,     0,     0,     0,   917,     0,  1290,  1171,  1172,
    1170,     0,     0,  1129,  1293,  1165,  1174,  1164,  1173,  1128,
    1310,  1123,     0,     0,  1401,   855,     0,     0,     0,   666,
     675,   667,   668,   669,   670,   671,   672,   673,   674,     0,
       0,   238,   236,     0,     0,     0,     0,     0,     0,   702,
       0,   488,   514,     0,     0,     0,   651,   685,     0,     0,
       0,     0,     0,     0,   651,   691,     0,     0,   261,   273,
       0,   160,   166,   237,   235,     0,   721,   230,     0,   307,
     287,     0,   286,     0,     0,   289,   283,     0,   284,     0,
       0,     0,     0,   285,     0,     0,     0,     0,   233,     0,
     273,     0,   234,   304,   830,   829,   838,  1318,     0,   662,
       0,   917,  1282,   814,     0,   656,   522,   700,     0,     0,
     527,   613,   443,     0,     0,   444,   422,   423,     0,   731,
     740,   651,   655,     0,   525,   651,     0,   518,   519,     0,
     603,   605,     0,     0,   703,   754,   526,     0,   759,     0,
     417,   417,   727,   633,     0,   623,   626,     0,     0,   630,
     631,   632,     0,     0,     0,   719,     0,   641,   643,     0,
       0,   459,   639,     0,   462,     0,     0,     0,     0,   627,
     628,   629,   619,   620,   621,   622,   624,   625,   637,   618,
     440,     0,   515,     0,   566,     0,   439,   725,   228,     0,
     757,   228,   832,   836,   837,   835,   831,     0,   823,   822,
     827,   825,   828,   826,   816,     0,   788,  1407,     0,  1404,
     654,   223,    96,   745,     0,   100,  1108,   793,   922,   921,
       0,     0,    69,    68,   135,   127,   129,   135,     0,    67,
       0,   183,   184,     0,     0,     0,     0,   216,   214,   753,
     766,   171,   145,   170,     0,     0,   149,     0,   175,   418,
     209,    51,   139,   140,   143,    50,     0,   212,     0,   222,
       0,    88,    90,    73,    87,    85,    70,    78,   210,   144,
       0,   806,     0,     0,     0,     0,     0,  1535,     0,     0,
     318,  1252,  1233,  1002,  1105,     0,     0,     0,     0,     0,
       0,     0,  1260,  1257,  1258,  1259,     0,     0,     0,     0,
    1294,  1295,  1308,     0,  1299,  1300,  1297,  1301,  1302,     0,
       0,  1287,  1288,     0,     0,     0,     0,  1286,     0,     0,
       0,     0,     0,     0,     0,     0,  1332,  1327,   704,   707,
     126,   126,   126,     0,   124,   125,     0,     0,   854,  1048,
    1058,     0,     0,     0,  1424,     0,     0,     0,     0,     0,
       0,  1085,  1425,  1423,  1427,  1426,  1428,  1506,  1377,     0,
       0,   900,   897,     0,  1047,  1021,     0,     0,  1119,     0,
       0,     0,  1535,  1037,  1116,     0,  1329,     0,     0,     0,
    1369,     0,   374,   373,   324,   320,     0,     0,     0,     0,
       0,     0,  1374,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1369,   778,     0,  1366,  1369,   744,     0,  1369,
    1180,  1125,  1167,  1291,  1311,  1292,  1312,   867,   862,   890,
       0,   870,   875,   852,     0,   852,     0,   872,   876,   852,
     871,     0,   852,   866,     0,   559,     0,   549,     0,     0,
     296,     0,     0,   550,   490,   491,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   508,   507,   551,   300,     0,   303,
       0,     0,   683,   684,     0,   552,     0,     0,   690,     0,
       0,     0,   557,     0,   240,     0,     0,     0,   155,   159,
     162,     0,   165,   102,    58,  1526,  1566,     0,   113,   113,
     113,   111,   101,     0,   187,     0,     0,   262,     0,     0,
     264,   266,     0,     0,   269,   246,   245,     0,     0,     0,
       0,   308,     0,   749,     0,     0,  1319,     0,  1208,     0,
    1213,  1214,  1211,  1207,  1210,  1212,     0,     0,     0,   699,
     695,     0,     0,   608,   610,   612,     0,   617,   623,   626,
     630,   631,   632,   627,   628,   629,   619,   620,   621,   622,
     624,   625,     0,   645,     0,   599,     0,     0,   730,     0,
     486,     0,   520,   531,     0,     0,   606,   535,   732,   709,
       0,     0,   762,   761,   419,   428,   431,   463,   464,   435,
     436,   437,   441,   784,   783,   726,     0,   718,     0,     0,
     420,   445,   450,     0,   692,   480,     0,   468,     0,   458,
       0,   466,   470,   446,   461,     0,   442,     0,   719,   642,
     644,     0,   640,     0,   432,   433,   434,   424,   425,   426,
     427,   429,   430,   438,   616,   614,   615,     0,   707,     0,
     717,     0,     0,   568,     0,     0,   465,   723,     0,   307,
     126,   307,     0,   417,   789,   781,  1417,  1406,   781,   652,
     746,   780,    98,     0,     0,     0,   791,   908,   912,     0,
     708,   942,   944,   228,     0,   133,   134,   138,     0,     0,
     138,   117,    66,  1772,  1656,     0,     0,     0,     0,   176,
     217,     0,   208,   173,   174,     0,   172,   753,   177,   752,
     178,   181,   182,   150,   741,   218,   220,     0,   213,     0,
     747,    72,    91,     0,     0,     0,     0,     0,    55,    54,
     224,     0,  1218,     0,  1535,  1235,     0,     0,     0,     0,
       0,     0,   952,     0,  1052,   952,  1273,  1535,  1369,  1535,
    1369,  1433,  1501,  1672,     0,  1231,  1026,  1264,     0,  1099,
    1055,     0,  1011,  1254,  1269,  1092,     0,     0,  1284,  1220,
    1298,  1303,  1095,  1307,  1304,  1323,  1305,  1106,     0,  1216,
       0,  1093,     0,  1321,     0,     0,  1222,  1097,  1325,   706,
       0,   124,   124,   124,     0,   658,     0,     0,     0,   660,
     661,   853,     0,  1049,     0,   864,   843,   844,   854,  1422,
       0,   901,  1050,     0,  1050,     0,  1424,     0,     0,  1379,
    1375,     0,     0,     0,     0,   318,  1040,  1038,  1071,     0,
    1045,  1039,     0,     0,   997,     0,   799,     0,     0,     0,
       0,  1390,     0,     0,     0,     0,     0,   343,   356,  1341,
     330,     0,   384,   383,   385,   385,   313,   330,     0,   330,
       0,   328,     0,   368,   337,   410,   411,   412,   413,   414,
     415,   416,  1334,   779,  1336,     0,  1338,  1402,   859,     0,
     858,   863,   857,   861,   856,     0,   851,     0,   885,     0,
       0,     0,     0,     0,     0,     0,     0,   546,   664,     0,
     678,   677,   489,   496,   499,   503,   504,   505,   679,     0,
       0,     0,   500,   501,   502,   492,   493,   494,   495,   497,
     498,   506,   305,     0,     0,   299,   688,   687,   681,   682,
       0,   554,   555,   556,   689,     0,     0,   274,   153,   151,
     154,   156,   152,     0,     0,   307,   113,   113,   113,   113,
     110,     0,     0,     0,   306,     0,   204,   268,     0,   292,
       0,   265,     0,     0,   256,     0,   263,   312,   279,     0,
       0,   281,   839,   663,   119,   523,     0,     0,   696,     0,
     485,     0,   611,   533,     0,   634,   598,     0,     0,     0,
     739,     0,   652,   602,   604,   740,   528,   417,     0,     0,
       0,     0,     0,     0,     0,   469,   460,     0,   467,   471,
       0,     0,     0,   454,     0,     0,   452,   481,   448,     0,
       0,   482,   706,     0,   710,     0,     0,   567,   576,   231,
     227,   187,   124,   187,     0,   833,  1408,  1405,    99,   917,
     792,     0,   931,     0,     0,     0,     0,   934,   948,   945,
     791,     0,     0,   128,   130,     0,   635,   138,   132,   180,
     179,     0,   148,   215,   146,     0,   221,     0,    89,     0,
      75,     0,   249,     0,     0,     0,     0,     0,  1001,     0,
       0,     0,   952,     0,  1060,     0,  1067,     0,     0,  1052,
    1033,  1253,     0,     0,     0,  1227,  1272,  1245,  1237,  1223,
    1251,     0,     0,  1256,     0,  1249,  1266,  1267,  1265,  1270,
       0,   962,   987,     0,     0,   998,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   705,     0,     0,
       0,   126,   122,   123,   537,   888,   889,   887,  1289,  1059,
       0,     0,   899,  1047,     0,  1119,     0,  1421,  1085,     0,
    1380,     0,  1378,     0,   901,  1050,     0,  1025,  1021,  1046,
    1019,  1018,  1020,     0,   800,  1181,     0,   794,  1050,  1118,
       0,     0,  1391,     0,  1385,     0,  1113,   362,   326,     0,
     380,   378,   327,     0,   325,   321,   329,  1369,     0,   847,
     886,   891,   873,   878,     0,   884,   880,   879,   874,   882,
     881,   877,   547,   558,   676,     0,     0,     0,     0,   298,
     301,     0,   553,   548,   272,     0,     0,   187,     0,     0,
       0,     0,   104,   103,   109,     0,     0,   570,   267,     0,
       0,     0,   254,   244,   250,     0,     0,     0,     0,   310,
     309,   280,     0,   698,   694,   607,   609,   646,   729,   651,
     734,   736,     0,     0,     0,   601,   487,   760,   421,     0,
       0,   451,   693,   472,     0,     0,     0,   447,   634,     0,
       0,     0,     0,     0,   456,     0,   714,   707,     0,   713,
       0,     0,     0,     0,   542,   232,   204,     0,   204,     0,
       0,   790,     0,   785,   909,   910,   911,     0,     0,     0,
     926,   903,     0,     0,   943,   931,   919,   136,   137,     0,
     131,   147,   742,   748,    74,     0,   525,     0,     0,    71,
       0,  1100,   952,     0,     0,  1234,     0,  1069,  1013,  1061,
    1044,  1028,     0,     0,     0,   953,     0,  1086,     0,     0,
    1034,     0,     0,     0,     0,  1014,     0,     0,   973,     0,
       0,  1044,     0,  1051,   969,   970,     0,  1226,  1246,     0,
    1242,     0,  1271,     0,     0,     0,     0,     0,  1229,  1241,
       0,  1224,     0,  1369,  1369,  1232,   773,  1823,  1824,  1825,
    1826,  1827,  1828,  1829,  1830,  1831,  1832,  1943,  1833,  1834,
    1835,  1836,  1837,  1838,  1839,  1840,  1952,  1841,   959,  1842,
    1602,  1843,  1844,  1845,  1846,  1847,     0,  1848,   316,  1849,
    1850,  2028,  1851,   619,   620,   957,   958,  1054,   954,   774,
     955,  1062,   956,     0,  1057,  1012,  1096,  1324,     0,  1094,
       0,  1322,  1103,  1101,  1098,  1326,   540,   541,   538,   124,
     867,   846,     0,     0,   799,     0,     0,     0,  1535,     0,
    1376,     0,  1119,   898,  1047,     0,  1077,   997,  1072,     0,
     799,   797,     0,  1119,  1400,     0,  1382,     0,     0,     0,
     322,   314,  1339,   860,     0,   883,   509,     0,     0,     0,
       0,   163,     0,   169,   204,   108,   107,   106,   105,   186,
    1476,  1755,  1655,     0,   190,   185,   188,   193,   195,   194,
     196,   192,   203,     0,   206,   291,   647,   649,     0,     0,
       0,     0,   255,     0,   257,     0,   259,     0,   311,   697,
     737,   738,   733,     0,   418,   478,   476,   473,     0,   474,
     455,     0,     0,   453,   449,     0,   483,     0,   711,     0,
     562,     0,   565,   579,   575,   574,   570,   537,   570,   834,
      97,   930,   907,   933,   932,     0,   708,   940,     0,     0,
     931,     0,   935,    43,     0,     0,    86,   248,    79,    80,
       0,  1065,  1236,     0,  1044,     0,   952,  1030,  1029,  1032,
    1027,  1031,     0,  1087,     0,     0,   971,     0,   978,  1016,
    1017,  1015,   972,  1044,  1050,   974,     0,     0,     0,  1238,
    1228,  1225,  1230,  1239,     0,     0,  1240,  1243,   312,  1255,
    1248,  1952,  1961,     0,     0,     0,     0,     0,     0,   842,
     849,  1289,     0,     0,  1021,   796,     0,     0,  1387,     0,
       0,  1047,  1381,     0,     0,     0,   799,     0,     0,   949,
       0,   994,     0,  1178,   798,     0,     0,  1392,     0,     0,
    1111,  1112,     0,   848,   510,     0,   511,   302,     0,     0,
     161,   570,     0,     0,     0,   197,   191,     0,   569,   571,
       0,   158,   650,   251,     0,   253,     0,   277,   126,     0,
     277,   260,   735,   560,     0,   475,   479,   477,   457,   715,
     712,   564,   578,   581,   206,   758,   206,     0,     0,   918,
       0,     0,   915,   902,   920,   636,    76,    77,     0,   952,
       0,  1043,  1066,   983,   961,     0,     0,     0,   968,   975,
    1076,   977,     0,  1247,  1263,     0,     0,  1056,  1104,  1102,
     539,   867,     0,  1119,   997,  1400,  1384,     0,     0,     0,
    1021,  1181,   795,  1010,  1003,  1004,  1005,  1006,  1007,  1008,
    1009,  1024,  1023,   995,   996,     0,     0,     0,     0,     0,
    1386,  1113,     0,   937,   946,     0,   937,   512,   164,     0,
     206,     0,     0,     0,   189,     0,     0,   205,     0,    62,
     648,     0,   243,   241,   124,     0,   242,     0,     0,   126,
     158,   158,   904,     0,   905,   941,     0,     0,     0,  1050,
    1068,  1042,     0,  1035,   981,   980,   982,   986,     0,   984,
       0,  1000,     0,   993,   961,     0,  1250,     0,  1063,   841,
     845,     0,   951,  1394,  1047,     0,  1400,   997,   799,  1400,
       0,  1397,     0,  1383,     0,     0,     0,   939,  1119,     0,
     939,     0,   158,   199,     0,   198,   573,   572,   160,   252,
       0,     0,   561,     0,   585,    61,    60,     0,     0,     0,
       0,  1076,     0,  1022,     0,     0,   983,     0,   976,  1073,
    1074,  1075,     0,   989,   979,   990,  1244,  1262,  1064,     0,
    1047,  1395,   950,  1179,  1393,  1398,  1399,     0,   937,   936,
     135,   938,   307,   947,   135,   168,    63,   200,   157,     0,
     258,   580,     0,     0,     0,     0,     0,   914,   307,   925,
       0,   993,  1041,  1036,   960,   985,   999,     0,     0,     0,
     991,     0,   992,  1400,     0,   939,   138,  1109,   138,  1741,
    1477,  1709,     0,   597,   586,   597,   597,   577,   906,   913,
       0,   952,   965,     0,   964,     0,  1053,   988,  1396,  1119,
     135,   927,   928,     0,   590,   589,   588,   592,   591,     0,
     584,   582,   583,   307,  1070,   963,   967,   966,   307,   138,
       0,     0,   594,     0,   595,   924,  1110,   929,   587,   593,
     596
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2965, -2965, -2965,  1911,    93,   102,  -708, -1132,  -862, -1147,
   -2965,  -170,   107, -2965, -2965,   100, -2965,   897, -2965,    90,
    -643,   460, -2965,   988, -2965, -2965,  2596, -2965,   108,   110,
    2013,  1780,  2183,  3460,    89,  -496, -1290,  -952,    13, -2965,
   -2965, -2965, -2965,  -860,   404, -1158, -2965,   330, -2965, -2965,
   -2965, -2965,  -260,    77, -2965,    12, -2072, -2732,  -598, -2965,
    -696, -2965,  -367, -2965,  -642, -2965,  -709,  -650,  -684, -2665,
   -1083, -2965,  1488,  -410, -2965,   494, -2965, -2411, -2965, -2965,
     482, -2965, -1103, -2965, -2142,    78,  -626, -2483, -2437, -2062,
    -698,   153,  -634,   143, -2040, -1016, -2965,   504, -2965,  -620,
   -2965,  -679, -2369,   114, -2672, -1608,   116,  1330, -1996,   117,
   -1609, -2965,    -7, -2965, -2965, -2965,  -557, -2965, -2414,    19,
   -2013,   120, -2965, -2965,   124,    28,  -476,   196, -2965,   126,
   -2965, -2965,  1254,  -756, -2965,  1304,   128, -2454, -2965,  -452,
   -2965,  -515,  -490, -2965, -2965,    25,  -908,  1239, -2965, -2965,
   -2965,    20, -2965,  -510, -2965, -2965, -2455, -2965,    33, -2965,
   -2965, -2965, -2965, -2965,  -451,   211, -2965, -2965,  -578, -2425,
    -530, -2965, -2851, -2859, -2965, -2965,  -676, -2778, -1952,   133,
     122,   134,   135, -2965,   229,   136, -1094,     2,  2717,    -9,
     -44, -2965,   -22, -2965, -2965, -2965,   550, -2965, -2965,    21,
      59,  1576, -2965,  -968, -2965, -1586,   902, -2965,  1715,  1717,
   -2107,  -693,   -72, -2965,   591, -1605, -2043,  -517,  1008,  1564,
    1570,   339, -2331, -2965,  -562, -2965,   -73, -2965, -2965,   584,
    1045, -1498, -1492, -2965, -2080, -2965,  -480,  -372, -2965, -2965,
   -2965, -2965, -2965, -2395, -2257,  -511,  1017, -2965,  1581, -2965,
   -2965, -2965, -2965,    37, -1447,  2676,   623,   105, -2965, -2965,
   -2965, -2965,    66, -2965,   775,  -217, -2965,  2089,  -527,  -619,
    1783,   -14,   185, -1720,    11,  2097,   386, -2965, -2965,   389,
   -1967, -1450,   344,  -294,  1353, -2965, -2965,  -550, -1292,  -780,
   -2965, -2965,  -484,  1082, -2965, -2965, -2965,  1569,  2444, -2965,
   -2965,  3140,  3409, -2965,  -593,  3437,   670,  -758,  1787,  -851,
    1793,  -877,  -859,  -865,  1798,  1806, -1454,  4531,  -680,  3142,
   -2138, -2965,   892,    46, -2965, -1415,   127, -2965, -2965, -2965,
   -2965, -2139, -2965,  -453, -2965,  -450, -2965, -2965, -2965, -1606,
   -2964, -1636, -2965,  3628,   742, -2965, -2965,   348, -2965, -2965,
   -2965, -2965, -1458, -2965,  5371,   645, -2965, -1934, -2965, -2965,
    -913,  -648, -1029,  -928, -1245, -1291, -2965, -2965, -2965, -2965,
   -2965, -2965, -1265, -1678,  -249,   705, -2965, -2965,   784, -2965,
   -2965, -2965,  -704, -1694, -2001, -2965, -2965, -2965,   711,  1266,
      49,  -641, -1566, -2965,   758, -2259, -2965, -2965,   352, -2965,
    -472, -1079, -2300,    17,    -3, -2965,  -681, -2426, -2965, -2965,
    -559, -2546, -1048, -2965, -2965,   137,  1256,    35, -2965,   138,
    1132, -2965, -2965, -2965,   139, -2965,   447,   140,   583, -2965,
     816, -2965,   618,   141, -2965, -2965,    85,  2656,    22, -2780
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    46,    47,    48,   567,   568,  1771,  1723,  1504,  1171,
    1713,  1414,   569,  2497,  2498,  2499,  2154,  1152,  3216,  2155,
    1153,  1154,  2501,    52,    53,    54,   107,  1182,   570,   571,
     512,   618,  1043,   620,  1044,  1546,  1259,  1260,   572,  2208,
    3021,  2588,  3022,  2287,  2202,  1424,  2281,  1829,  1753,  1425,
     518,  1843,  2589,  2538,  1830,   573,  2486,  2817,  3209,  2512,
    3346,  2753,  2754,  3206,  3207,  2489,  2157,  3273,  3274,  2564,
    1705,  3268,  2226,  3151,  2161,  2142,  2755,  2234,  3111,  2856,
    2158,  2735,  2227,  3202,  1784,  2228,  3203,  2976,  2229,  1750,
    1775,  2490,  3275,  2162,  1751,  2485,  2818,  1693,  2230,  3213,
    2231,   528,  2739,   574,  2567,  1322,   575,   738,  1781,   576,
    1315,  1763,   514,   503,   504,   808,  1262,  1303,  1263,   577,
    1772,   578,  2551,  2552,   579,   580,  1089,  2442,  2076,   581,
     560,   561,   827,  1362,   562,   809,   582,   835,    68,   686,
    1416,   583,  1417,  1418,   922,    69,  1505,   924,   925,    70,
      71,   585,  3051,  2869,  1328,  1785,  2239,   529,   586,  2700,
    2078,  2445,  3198,    74,  2957,  2081,  1113,  2960,  3164,  2693,
    2955,  2446,  3237,  3290,  2958,  2082,  2083,  3165,  2084,   587,
     635,   588,   589,   986,  1943,   590,  1696,   591,  1045,    81,
      82,   960,    83,  2970,    84,    85,  1671,  1672,  1673,   665,
     677,   678,  2074,  1479,  1912,   670,  1117,  1640,   652,   653,
    2198,   694,  1745,  1635,  1636,  2087,  2453,  1664,  1665,  1126,
    1127,  1900,  3179,  1901,  1902,  1472,  1473,  3060,  1652,  1656,
    1657,  2108,  2098,  1643,  2356,  2894,  2895,  2896,  2897,  2898,
    2899,  2900,  1046,  2627,  3071,  1660,  1661,  1129,  1130,  1131,
    1669,  2118,    87,    88,  2059,  2429,  2430,   624,  2911,  1496,
    1674,  2631,  2632,  2633,  2915,  2916,  2917,   625,   955,   956,
     979,   974,  1486,  1920,   626,   627,  1877,  1878,  2325,   981,
    1914,  1930,  1931,  2639,  1801,   810,  2143,  1509,  1365,   812,
    1047,   813,  1340,  1048,  1344,   815,  1049,  1050,  1051,   818,
    1052,  1053,  1054,   821,  1336,  1055,  1056,  1355,  1384,  1385,
    1386,  1387,  1388,  1389,  1390,  1391,  1392,  1100,  1675,  1058,
    1059,  1060,  1061,  1062,  1063,   629,  1064,  1065,  1594,  2053,
    2428,  2904,  3068,  3069,  2684,  2945,  3093,  3189,  3305,  3333,
    3334,  3360,  1066,  1067,  1540,  1541,  1542,  1953,  1954,  1955,
    1956,  2047,  1588,  1589,  1068,  2822,  1591,  1974,  2907,  2908,
    1101,  1465,  1533,  1305,  1306,  1510,  1439,  1440,  1446,  1852,
    1454,  1458,  1882,  1883,  1466,  2015,  1069,  1949,  1950,  2379,
    1518,  1070,   720,  1184,  1545,  2679,  2050,  1592,  2009,  1077,
    1071,  1078,  1073,  1529,  1530,  2390,  2651,  2652,  1980,  2115,
    1623,  2120,  2121,   831,  1074,  1075,  1076,  1307,   507,   824,
    3291,  1396,  1106,  1308,  2005,   592,   100,   593,    91,   594,
    1096,   674,  1097,  1099,   595,   646,   647,   596,   659,   660,
    1506,  1608,  1507,   597,    96,  1140,   648,   666,   598,  3047
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     502,   828,    79,  1170,   506,   719,  1136,   975,   811,   920,
     695,  1072,    58,    57,   502,  1264,  1351,  1419,   506,    62,
      72,    86,    97,  1727,  1737,  1311,  1624,  1102,    65,   535,
    1457,  2057,  2090,    73,   564,    90,   682,  1726,   664,    86,
    1879,  1692,   699,   584,  1357,  2190,   638,  2458,   668,  1313,
     836,  1934,  1698,   505,  1742,  1791,  1508,  1434,   622,  1795,
     679,   679,  1626,  1413,   700,  1973,  1702,   628,  1172,  1436,
    1176,  1398,  1180,  2491,  1401,  1435,   921,   502,   502,  2448,
    1731,   506,   506,  1432,  2528,  2529,  2530,  2823,  1538,   830,
    2845,  2412,  2431,    49,  2433,   957,  1992,  1993,   705,  2820,
     978,  2484,    50,   680,  1598,  1813,  2843,    51,    55,  1601,
      56,  2860,   634,   634,    59,   713,    60,    61,   661,   709,
      63,   622,   622,   952,    64,  1536,    66,  2447,    67,  2650,
     628,   628,   926,    75,    76,    77,    78,    89,    92,    93,
      94,    95,  2539, -1938, -1938,  2209,   636,  2857,   630,  2213,
    -770,   -45,   -48, -1812,  2061, -1803,   998,  2110,  -767,  -767,
    1359, -1952, -1952, -1943, -1943,  2113,  1337,  1338, -1812,  2714,
    1091,  1088,  3025,  2719, -1963, -1963,  1359,  1125,  -382,  3236,
     516,  2553,  -382,  1128,  -751,  -377,  1404,   632,  3043,   696,
     697, -1820,  3039,  1349,  2007,  2357,   716,  -771,  2542, -1961,
   -1961,     3,     4,   632,  2328,  -768,  -768,   998,  2366,  -770,
    -385,   630,   630,  1114,  2007,  -385,  1683, -1803, -1812,  2546,
   -1820,  1605,  2377,  -771,  2634,  -617,  -344,  -357,  -372,   632,
     632,  2044,  2123,  -617,  2980,  1359,   632,  -638,  -850,  2045,
    1359,  3114,   690,   672,  1420,  -638,  1694,   687,  1264,   -45,
     -48,  2595,  2597,  1554,  2600,  1856,  2560,  1729,  1556,   746,
    1858,  1450,  1407,  1703,  -181,  3196,  1331,   998,  2995,  1703,
     692,   998,  1357,  1602,  1407,   632,  1703,  3014,  3371,   998,
    2963,   692,  1341,  3127,  1427,  1644,  2404,  3309,  1564, -1289,
    2206,  2946,  2196,  2948, -1289,  2340,  1711,  1703,  1644,  1714,
    1715,  1703,  1420,  1332,  1350,  3317, -1937, -1937,  1686,  1703,
    1788,  3040,   691,  2405,  2991,  3240,  1441,  1121,  3355,  1628,
    1566,  1694,  2351,  2352,  2353,  2687,  3041,  2487,  -317,  1645,
    3269,  2861,  2519,  1092,  1703,  1093,  1554,   688,  1740,  2116,
    1393,  2728,  1645,  2140,  2338,  1856,  3063,  1741,  2341,  1857,
    1858,  2686,  3372,  2688,  2423,  3223,  2977,  2140,  1721,  3156,
     958,  3204,   106,  3366,  3142,  3353,  2513,  3157,   920,  1856,
    3302,  2989,  2085,  1857,  1858,  1551,   650,  1710,  2617,  2514,
    3013,  3294,  1722,  1603,  1264,  1823,  1725,  2997,   692,  1532,
     998,  1896,  1732,  1123,  1554,  3002,  1716,  3033,  1555,  1556,
     536,  2141,  1420,  1566,  1420,  1420,  3378,  1646,  3045,   978,
    2727,  1421,  1337,  1338,  2710,  2481,   600,  3034,  2606,  3259,
    1735,   957,  1896,  3205,  2518,   724,   920,   725,  1349,  1564,
    2978,  2406,  2522,  2867,   -45,   -48,  2407,  3325,  2054,  2484,
    1124,  2484,  3373,  1647,   599,  2990,  3281,  1360,  1144,  3284,
    2647,  2117,  2197,  2086,  1145,   933,  1647,  2526,  2488,  -317,
    3310,  1566,  1704,  1360,  3270,  1688,  3350,  3125,  1704,  3222,
    -201,  1828,  2992,  3356,   651,  1704,  1629,  1420,  1701,  1333,
    1420,  1420,  2370,  1524,   777,  3197,  1947,  2342,  1743,  3061,
    1680,  3109,  2862,  1676,  1677,  2634,  1704,   959,  2195,  1937,
    1704,  2124,   -45,   -48,   997,  1648,  1604,  1856,  1704,  3324,
    3119,  1857,  1858,  3042,   631, -1965, -1965, -1965,  1648,   722,
    1084,  3303,  1360,  3367,  2273,  1341,  1701,  1360,   920,   920,
    3312,  3158,  1701,  1704,   693,  3103,  2339,  2884,  1717,  1701,
    1350,  2853,  2207,  3348,   675,  3271,  1718,  1544,  1948,   741,
    3304,   807,   601,  2008,  2875,  1146,  3283,   682,  3115,   919,
    1701,   747,  3282,  3020,  1701,  1554,  2981,  1973,  2607,  1555,
    1556,   689,  1701,  2414,  2707,  2865,  2535,  2536,   673,   833,
    1689,  2135,  -617,  2055,  2408,  1730,    86,  2301,  2046,  2823,
    1334,   923,  3374,  1494,  -638,  2409,  2309,  1701,  2110,   502,
    1564,  2820,   717,   506,  1361,  2461,   718,  2547,   682,  2435,
     502,  2004,  1744,  3134,   506,  2556,   -45,   -48,  2329,  1678,
    1397,   699,  1094,  2604,  1727,  1679,  1778,  1137,   517,  3318,
    3126,  2456,  1566,  1519,  1335,  1627,  2450,  1814,  2628,  1115,
     669,  2708,  1641,   700,  1495,   502,   502,  1619,  -770,  2261,
    2971, -1812,   628, -1803,   948,   -45,   -48,   -45,   -48,  1521,
    2520,  3082,  1789,   628,   946,  3106, -1812,  2539,   502,  2277,
    3107,  2060,  1352,  1798,  1521,  1799,  -382,  1352,  3221,  1400,
     717,  1090,  -751,  -377,   718,  1806,    79,  3228,   928, -1820,
     634,  1532,  2195,   679,  1353,  -771,    58,    57,  1095,  1353,
    1090,  1549,  1807,    62,    72,    86,    97,  -770,  1354,  1147,
     502,  1261,    65,  1356,  1302, -1803, -1812,    73, -1820,    90,
     982,  -771,   949,   930,  1339,  1343,  -372,  1599,  2062,  3227,
    1824,  1826,  3018,   630,  2913,  1103,  2310,  1116,  1121,   661,
     661,  1587,   661,  1873,   630,  1081,  2311,  2156,  1642,  2160,
    1721,  2962,  1411,  1412,  1792,  1793,  3004,  3005,    98,  2424,
    2618,  2619,  2620,  2621,  1411,  1412,  1768,  1854,  1855,  1149,
    2737,   684,  1085,  1875,  1722,  2964,   683,    49,  2731, -1289,
   -1289,  1864,  1144,  3292,   685,  2290,    50,  2843,  1145,   807,
    2291,    51,    55,  2695,    56,   811,  2738,  3342,    59,  1150,
      60,    61,  3023,   732,    63,    99,   632,  3094,    64,  3096,
      66,  1802,    67,  1888,  1123,  2757,  2336,    75,    76,    77,
      78,    89,    92,    93,    94,    95,   701,   502,  1868,  1869,
    1870,  1871,  1872,  1873,  1903,   828,  2823,  3190,  1815,  3191,
    1264,  1989,  1264,  3034,  1819,  1086,  2292,  2696,  2820,   920,
    1923,  2170,  2242,  2336,  1870,  1871,  1872,  1873,   992,  3255,
    3256,  2173,  2953,  3037,  2176,  2732,  1946,  1532,  1405,  2741,
    1151,  1406,   690,  2495,  2492,   733,  1976,  1582,  1583,  1584,
    1585,  1586,  1587,  2028,  1474,  1352,  -126,   721,  2758,  1146,
    1821,  -126,   983,  1554,  3368,  1375,  1376,  1352,  2387,  1990,
    2954,  2770,  1498,   984,  3112,   728,  1502,  1353,  1879,  1144,
    2744,  3296,  1694,  3242,  3038,  1145,   921,  2072,   919,  1353,
    2282,  1354,  3170,  1695,   502,   502,  1973,  1816,  1564,  2733,
     502,  2734,  2266,   502,   502,  2345,   502,   502,   502,   502,
    2073,  1894,   691,  2657,  2268,  2270,  2271,    86,  1483,  2531,
    2267,  2269,   502,  1544,  1490,  3099,   506,  2265,  2578,   502,
    1566,  1694,  -126,   506,  3217,  2582,  2280,  2584,    21,   734,
    2759,  1814,  1697,  2109,  2109,  2289,   919,  1302,   807,  2293,
    1825,  2493,  2295,  2937,  2459,   998, -1965, -1965, -1965,   998,
    1868,  1869,  1870,  1871,  1872,  1873,   622,   502,  2016,  1638,
    3343,  2168,  2029,   622,  1994,   628,   735,  2010,  1897,  -126,
    1379,  1380,   628,  1898,  1415,   502,  1146,  2436,   692,  2030,
    2437,  1727,   734,  1430,  2031,  2017,   502,   502,   502,   682,
     502,   502,  1420,  1261,  2249,   632,  1480,  3200,  1480,  2132,
    2467,   736,  1420,  1147,   101,  1420,   744,  2191,  2192,  2193,
    1584,  1585,  1586,  1587,   717,  2456,  2272,   739,   718,   735,
    2274,   502,  2032,  2276,  1477,  3117,  2169,  3143,   745,  1144,
    2748,  1487,  1415,  1632,  1633,  1145,  1639,  3250,   919,   919,
    1347,  1348,  2218,  2521,  3344,  2179,   630,   987,   988,   989,
    2186,   737,  1121,   630,  2549,   700,   700,  1122,   700,  1148,
     717,   717,  -751,  1149,   718,  1543,   742,    21,    25,    26,
      27,  3345,   502,  1515,   743,    45,   502,   502,  2749,  2666,
    3144,   679,  1090,  2260,  2262,   749,   502,   502,   502,  3145,
     726,   502,   727,  1150,  2750,  1147,  1548,  2048,  2018,  2246,
    2144,  2049,  1536,  2019,   737,  1550,   748,  1420,  2020,  2561,
     807,  3146,  1488, -1934, -1934,  2569,  1493,   519,   750,  1617,
    2171,  2880,  1618,  1600,   693,  2174,   980,   964,  1123,   964,
    1147,    32,  1606,   942,  1415,  1415,  1146,  2303,  2304,  2305,
    2306,  2307,  2308,   834,  1728,  2312,  2313,  2314,  2315,  2316,
    2317,  2318,  2319,  2320,  2321,  2494,  2232,  2495,  2233,  2156,
    2156,  2156,  1755,   965,  1151,   965,   931,   732,    37,   102,
     932,  1887,  2033,  1889,  1890,  1124, -1935, -1935,   103,  1481,
     520,  1489,  -125,  3147,   933,  2496,  1174,  -125,   823,   967,
    1149,   967,   519,  2751,  1352,   934,  3148,  1079,  1080,  1756,
    1082,    39,  2752,  2334,  1369,  1370,   937,    25,    26,    27,
    2256,  1973,    42,   104,  1420,  1936,  1353,   940,  1937,  1302,
    1175,  1938,   108,   941,  1939,   515,    43,   943,  1302,  3364,
    1356,   920,   563,  2203,  3029,  2250,  2204,  2257,  1939,   733,
    2258,  2629,   944,  3351,  2636,  3352,  2259,   649,   945,  2258,
      44,   662,  1302,   946,  2296,   520,  2021,  2284,  -125,  2322,
    2285,   951,  2323,   105,    45,  1144,  2302,  2022,  1957,   807,
      32,  1145,  1375,  1376,   985,  1958,  1959,  2879,   991,  1960,
    1961,  1962, -1936, -1936,  1758,  3327,  3377,  1762,  2399,  2400,
    1147,  1151,   502,  1828,  1764,  1765,  2330,  1766,   807,   807,
    1144,  3339,  1144,  2335,   990,  -125,  1145,    37,  1145,  2768,
    2346,   993,  2347,   971,   807,   971,  2368,  2371,  2509,  2369,
    2369,  2510,  2348,  2761,  2349,  2402,  2515,  2432,   992,  2516,
    1482,  2590,  1482,  1755,  2928, -1939, -1939,  2725,   920,  2367,
      39,  2434,  2572,  2367,  2641,  1937,  1178,  2369,  1261,  2373,
    1149,    42,  2503,  1083,  2505,   523,  3375,   524,  1087,   919,
    2702,  3376,  2852,  2703,  2873,  2204,  2840,  2874, -1940, -1940,
    1756,  2760,  1146,  2769,  2460,  2460,  1261,  1817,  1098,  1818,
    1179,   502,  1312,   527, -1941, -1941,    86,  1379,  1380,  2881,
    3149,   923,  2882,  3150,  2929,  3056,  3057,  1939,  1939,  2369,
     502,   502,  2506,    45,  2508,  1757,   502,  1146,   502,  1146,
   -1942, -1942,   506,   502,   502,   502,   502,  3085,  3090,  3100,
    1939,  1937,  3101,  2724,  3133,  2726,   823,  2204,   502,   502,
     523,  1104,   524,  3167,   502,  1536,  1939,   502,   506, -1944,
   -1944,   506,   502,  2470,   502,   502,   506, -1945, -1945,   506,
     502,  1151, -1946, -1946,   506,  1758,  2580,  2581,   527,  3238,
    3263,   628,  3239,  3264, -1947, -1947,  3308,   502,   502,  3239,
    1105,  1827,   502,  1944,   502,  1111,  2545,   502,   622,  3349,
    1107,   622,  3239,  1108,  1940,  1112,   622,   628,  1119,   622,
     628,  2057,    86,  1139,   622,   628,  1261,  1138,   628,  1941,
     502,  1141,   502,   628,  1942,  1142,  1945,   807,   502,   502,
     502,   502,   502,   502,   502,   502,  1261,  2456,  2156,  1155,
     502,   502,  2824,  1181,  2160,   502,  1147, -1948, -1948,   502,
    2579,  1143,   502,   502,   502,   502,   502,   502,   502,   502,
     502,  1156,   630,   502,  1173,  2455,  1915,  3055,  1177,  1917,
     502,  1309,  1302,  1118,  1921,  1120,  2092,  1924, -1949, -1949,
    1310,  1147,  1928,  1147, -1950, -1950, -1951, -1951,   630, -1953,
   -1953,   630,  1314,   502, -1954, -1954,   630,  1316,   700,   630,
    2972,  1317,  2131,  2768,   630,  1327,  1149,  2741, -1955, -1955,
   -1956, -1956,  1329,  2742, -1957, -1957,   502,  3166, -1958, -1958,
     814, -1960, -1960,  1095, -1962, -1962,  2743,   502,   502, -1964,
   -1964,  2815,  1746,  1747,  1330,   823,  1150,  2177,  1335,  2184,
    1339,  1149,  1342,  1149,  2111,  2112,  -176,  -176,  2744,  1343,
    2745,  1377,  1378,  -180,  -180,  2144,  1345,  1379,  1380,  -179,
    -179,  1346,  3019,   807,  1358,  3326,  2968,  2969,  1364,  3328,
    1363,  2178,  1261,  2185,  1261,  1366,  2063,  3335,  3336,  3361,
    3362,  1394,  2136,  1611,  1613,  1395,  1399,  1402,  1403,  1422,
    1423,  1428,  2145,  1455,  2148,  1468,  2587,  2159,  1470,  1478,
    1471,  1484,   920,  2163,  1485,  2165,  1491,  1151,  1492,  1497,
    1501,  1503,   502,  1511,  2670,  2671,  1302,  2172,  1157,   502,
     502,  1157,  2175,  1512,  1989,  3369,  2180,  2181,  2182,  2183,
    2939,  2187,  2188,  1607,  1514,  -348,  -355,  2746,  1158,  -345,
    1519,  1158,  1151,    45,  1151,  -201,  -202,  -346,  1523,  -349,
    1524,  -347,  1537,  1302,  1528,  1547,  1595,  1597,  2236,  1593,
     502,  1609,  3166,  1620,  1621,  1625,  1630,  1631,  1122,  1666,
    1963,  1964,  1965,   807,  1966,  1967,  1968,  1969,  1970,  1971,
    1124,  1670,  1159,  1668,  2456,  1159,  1681,  1261,  1699,  1700,
    1701,  1706,  1708,  1720,  1712,  1719,  1724,  1734,  1748,  1707,
     671,   919,  1752,  2747,  3166,  1760,  1761,   823,  2748,  1770,
    2718,  2872,  1420,  1739,  1773,  1774,  1776,   807,  2839,  1780,
    1777,   502,   502,  1786,   502,  1787,  1779,   998,  1157,   807,
     502,   502,   502,   502,   502,   502,  1794,  1804,   502,   502,
     502,   502,   502,   502,   502,   502,   502,   502,  1158,  2847,
    2863,  1796,  3166,   502,   502,  1797,  2749,   502,   814,   807,
    1805,   708,  1808,   711,   502,   715,   807,  1809,  1814,  3131,
    1810,  1811,  2750,  1820,  1848,  1160,  1845,  1913,  1160,  3000,
    1847,  1850,  1916,  1922,  1853,  1876,   502,  2697,  1885,   502,
    1884,   502,  1159,   506,  1935,   502,  1892,  1415,  1925,   506,
    1895,  1926,   807,  2288,  1927,  2876,   807,  1932,   919,  1554,
    1302,  1948,   807,  1979,  1982,  1984,  1986,  2013,  2006,  1985,
    2024,   502,  1987,  2027,  1161,  2025,  2051,  1161,  2052,  2058,
    2070,  2071,  1162,   622,   691,  1162,  2075,  2088,  2091,   622,
    2100,    21,   628,  2821,  1163,  2101,  2590,  1163,   628,  2102,
     -57,  2103,   502,  3219,  2104,  2126,  2127,   502,   502,  2764,
    1536,  2130,  2105,  2122,   -57,  3078,   823,  2137,  2133,   -57,
    2138,  2751,   692,  2139,  2205,  2201,  1164,  3182,  2210,  1164,
    2752,   502,   502,  2219,   682,  1160,   502,  2222,  2221,  2223,
    2237,  2238,  2240,  2243,  2244,   823,   823,  3009,  3010,  2245,
     502,  2358,  2247,   502,  1415,   502,  1351,  2361,  2251,  2252,
    2248,   823,  2275,  2871,  2253,  2254,  2255,  2263,  2264,  2286,
     -57,   502,  1261,   630,  2294,  1881,  1856,  1166,   502,   630,
    1166,   502,  2324,  1880,  1161,   506,  2331,  2355,  2362,  2343,
     -57,  2383,  1162,  2344,  2988,  2375,  2332,   814,   502,  2333,
    1167,  2337,   506,  1167,  1163,  2382,  2360,  2403,  2374,  2918,
    1420,   502,  2419,  2398,  2384,  1420,  2385,  1817,  2386,  1169,
    2396,  2698,  1169,  2410,  2427,   622,  2438,  2420,   502,   502,
    2441,    25,    26,    27,   628,  2425,  1164,   -57,  2426,  2439,
    2443,  2444,   622,  -182,  2449,   502,   -57,   502,  1727,  2462,
    2463,   628,  2452,  2465,  2451,  2466,   502,   816,  2469,  2474,
    2473,  2475,  1824,  1826,  2477,  2480,  2479,  2483,  2502,  2504,
    2517,  2534,  2523,  2524,  1261,  1261,  1261,  2527,  2525,  2532,
    2533,  2543,  2544,  2815,  2548,  2558,  2563,  1166,  3201,  2559,
    2562,  2566,  2570,  2575,    32,  2577,  2585,   -57,   961,  2605,
    2594,  2637,  2586,   962,  2625,  2602,  2608,  2611,  2626,  2612,
    1167,   -57,  2638,  2986,  2613,   630,   -57,  1302,  2614,  2644,
     501,   513,  2648,  2662,  2654,   533,    21,  3054,  2664,  1169,
     533,    37,   630,  2665,   619,  3314,   633,   633,  2668,  2678,
     682,   637,   533,   645,  2683,  2677,   645,  2685,   807,   663,
     667,  1762,  3008,   667,   823,  2711,   533,   533,  1764,  1765,
     963,  1766,  2715,  2692,    39,  2689,   502,   -57,  2709,   814,
    2723,  2713,  2730,  2736,  2756,    42,  2729,  2511,  2772,  2846,
    2855,  2836,  2565,  2877,  2859,  2851,  2837,   -57,  2868,    43,
    2870,  2838,   -57,  2842,  2903,  2952,  2204,   619,   619,  2909,
    2961,  2850,   919,  2883,  2965,  2854,  2878,  2959,  1261,   663,
    2905,  2914,  2920,    44,   667,   533,   667,   667,   667,  2921,
    2940,  2537,  2947,  2950,  2979,  2966,  3120,  2699,   723,   964,
      10,  2967,   730,  2983,   -57,   731,  2973,  1553,  2550,  2974,
    1554,  2975,  3201,   -57,  1555,  1556,   502,   920,  2984,  2985,
     506,  2993,  2996,  1824,  1826,  2998,  2999,  3003,   717,  -767,
   -1933,  1107,   718, -1934,  1420,   965,    25,    26,    27, -1935,
    3301, -1936,   519,  3016, -1937,  1564, -1938, -1939, -1940, -1941,
   -1942,   966, -1965,  2680, -1944,   502,  3017, -1945, -1946,  2635,
     823,   967, -1947, -1948,  3015,   816,  3026, -1121,  1415,   628,
     502,    21, -1949, -1950,   502,   502,  2592,  1566,  2593,   682,
    3024,   502,  2598,  3031,  2601,  3184,  3030,  3044,   939, -1951,
   -1953,   502, -1954,   968,   502,  1989,   502, -1955,   814,    32,
    2815,  3046,  3048,   807,   502,   520, -1956,   502,   502, -1957,
   -1958,   682,   502,   502,  3171,  3049,  3173, -1959, -1960,   502,
   -1961, -1962, -1963,  3058, -1964,  3052,  -768,   814,   814,  3059,
    3062,  3064,  3066,  3181,   502,  3070,    37,  3072,   969,  3073,
    2401,  1944,  3076,   814,   502,   970,  3077,  2701,  3079,  3084,
     630,  3089,  1940,  3097,  3098,  3102,  3105,  2217,  3183,   -57,
      86,  3186,  2717,  3108,   502,  2821,  1110,  1941,  3110,    39,
     823, -1965,  1942,  3122,  1945,  3123,  3130,  3132,  3138,  3139,
      42,  3140,  3153,  3154,  3168,   971,  3155,  3169, -1965,  3172,
    3175,  2720,  2721, -1965,  3178,  3176,  3254,  3188,  3185,  3208,
    3265,  3261,   972,  1261,  2992,  3212,  2819,  1261,  3214,  1261,
    3215,    25,    26,    27,   823,  1319,  1321,  1324,  1326,  2773,
    3218,  3224,  3241,  3230,  3231,   717,   823,  3232,  2943,   718,
    3236, -1965,    45,  3248,  2826,  2827,  2828,  2829,  2830,  2831,
    2832,  2833,  2834,  2835,  3251,  3243,  2844,  3245,  3249,  3253,
    3258,  3260,  3262,  3267,   816,  3272,   823,  3278,  3279,  1762,
    3280,  3285,  3286,   823,  3287,  3316,  1764,  1765,  3295,  1766,
    3297,   973,  2864,  3319,    32,  2866,   807,  3321,  3299,  3306,
     523,  1420,   524,  3300,  1575,  3337,  3317,  3318,  3340,  3359,
    3354,  3365,  3370,  3379,  3380,  1109,  3006,  2771,   502,   823,
    2775,   807,  2816,   823,  2164,   526,  2500,  2067,   527,   823,
     537,    37,  2540,   929,  3053,  2591,  3276,  2841,   502,   502,
    3118,   682,  3347,   502,  3315,  3322,   502,  3341,  3152,  2537,
    2635,    38,  1691,  2482,  2507,   502,   814,  2858,  3313,  3320,
    2478,  3311,  2740,  1759,    39,  1822,  2705,   502,  1812,  1790,
    3195,  3234,   502,   502,  1429,    42,   632,   502,   807,  2825,
    2704,  3293,   502,  3257,  3363,   502,   502,   719,  2690,    43,
     502,  1302,  2468,  1475,   502,  1476,    21,  3289,   502,  2454,
    1622, -1965,   506,  2616,  1157,   502,  3298,  2129,  2097,  2464,
     682,  1663,  3244,    44,  3174,  2128,  1662,   623,  2440,  2912,
    3081,   667,  2365,   936,  1158,   667,   950,    45,   667,  2610,
    1667,  2609,  2821,  2640,  3124,   533,  1803,    80,  1444,  1442,
    2283,  1431,   622,  3247,  1600,  3246,   816,  1433,  2394,   502,
    2646,   628,  1437,  2378,  2457,    80,  2417,   502,   621,  2415,
    1438,  2951,  1904,   826,   533,   533,  2395,  2656,  1159,  2762,
    2066,  2372,   706,    80,     0,     0,   502,  2763,  1367,  1368,
    2987,     0,   681,     0,     0,   807,     0,     0,     0,  1831,
       0,     0,   814,     0,     0,     0,     0,     0,  2949,     0,
       0,     0,   927,   513,   633,     0, -1965,     0,     0,   501,
    1477,   667,     0,  1582,  1583,  1584,  1585,  1586,  1587,  2819,
     619,   621,   621,   698,   954,   954,  3193,     0,     0,   954,
     977,     0,   630,    80,  1832,  2764,    25,    26,    27,     0,
       0,     0,     0,   645,   645,   645,     0,     0,     0,     0,
       0,     0,     0,  1833,     0,  1369,  1370,   645,   645,   502,
     645,  1160,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1834,     0,   667,     0,  1835,     0,  3036,     0,   533,
       0,     0,     0,     0,     0,     0,     0,   919,     0,   667,
     502,   807,   667,     0,     0,     0,     0,  1836,     0,    32,
    1837,     0,   814,     0,   682,   816,   502,     0,     0,     0,
    1161,     0,     0,     0,     0,   823,  1838,     0,  1162,  1371,
    1372,  1373,  1374,  1375,  1376,     0,  1302,  1377,  1378,     0,
    1163,     0,  2765,   502,   816,   816,    37,     0,   667,   667,
     667,   667,     0,  1682,   502,   502,   814,     0,   502,     0,
     816,     0,     0,     0,     0,     0,  1709,     0,   814,     0,
    3032,     0,  1164,     0,     0,   961,     0,     0,     0,    39,
     962,     0,     0,     0,   502,     0,     0,  1733,     0,     0,
      42,     0,     0,  1415,     0,     0,     0,     0,   814,     0,
       0,     0,     0,     0,    43,   814,     0,     0,   502,     0,
       0,     0,     0,     0,     0,     0,     0,  1839,     0,     0,
       0,     0,     0,  1166,     0,  1840,     0,     0,    44,     0,
       0,     0,   817,     0,     0,     0,     0,   963,  2819,     0,
       0,   814,    45,  3121,     0,   814,  1167,  1841,  1379,  1380,
       0,   814,     0,     0,     0,     0,     0,     0,  3135,  3136,
       0,     0,     0,  3128,  3129,  1169,  3095,  2766,     0,     0,
    2767,   502,     0,  1842,     0,   502,     0,     0,     0,   506,
       0,     0,  3141,     0,     0,   502,     0,   502,     0,   502,
       0,     0,     0,   502,     0,   502,     0,   502,  1367,  1368,
       0,     0,     0,     0,     0,     0,   964,   502,     0,     0,
     823,     0,     0,     0,  1132,     0,     0, -1697,     0,     0,
     502,     0,  1754,     0,     0,     0,     0,  1769,   628,     0,
    3192,     0,  3194,  1261,  2816,     0,     0,     0,   502,     0,
       0,     0,   965,     0,     0,     0,     0,     0,   954,   977,
       0,   667,     0,   816,  1449,     0,     0,     0,   966,     0,
     954,   954,     0,     0,  1381,  1382,   533,     0,   967,     0,
       0,  3226,   619,     0,     0,  1369,  1370,  1701,     0,   619,
       0,     0,     0,     0,     0,   502,     0,  3229,     0,   533,
       0,  3233,     0,     0,     0,   502,     0,     0,     0,     0,
     968,     0,     0,     0,     0,  1513,     0,     0,   502,   630,
       0,     0,     0,   823,     0, -1697,     0,     0,     0,     0,
     502,  1133,     0,     0,   506,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   502,  1371,
    1372,  1373,  1374,  1375,  1376,   969,     0,  1377,  1378,     0,
       0,  3220,   970,     0,     0,   533,     0,     0,     0,     0,
   -1697,     0,   502,     0,    80,     0,   506,     0,     0,     0,
     817,     0,     0,   628, -1697,     0,   502,     0,     0, -1697,
       0,     0,     0,   823, -1697,  2819,     0,  1261,  1911,   816,
       0,     0,   971, -1697,     0,     0,     0,     0, -1697,     0,
    1614,     0,     0,  1616,     0,  3307,     0,     0,   823,   972,
     502,  3323,    80,   681,   506,   628,     0,   533,   533,     0,
       0,     0,     0,     0,   667,   502,   502,   502,     0,     0,
   -1697,     0,     0,     0,     0,     0,     0,   814,  3338,     0,
       0,     0,     0,     0,     0,     0,  1449,     0,     0,     0,
   -1697,     0,   502,   935,   630,     0,   667,  1690,  1379,  1380,
       0,     0,   961,   628,   947,   823,     0,   962,     0,   667,
       0,     0,  1553,     0,     0,  1554,     0,     0,   973,  1555,
    1556,  2816,  2235,  1134,     0,     0,   667,     0,     0,     0,
     667,     0,     0,   502,  1736,     0,   630, -1697,     0,   816,
   -1697,     0,    21,     0,     0,     0, -1697,     0,     0,     0,
    1564,     0,   698,  1553,     0,     0,  1554, -1965,  3095,     0,
    1555,  1556,     0,     0,   963,     0,     0,  2065,     0,  2068,
       0,    80,     0,     0,   961,     0,     0,     0,     0,   962,
    2077,     0,  1566,   816,   630, -1697,     0,     0,     0,     0,
       0,  1564,     0,     0,     0,   816,     0,     0, -1965,   817,
       0,     0,     0,     0,     0,     0,     0,     0, -1697,     0,
       0,     0,   823,     0,  1381,  1382,     0,     0,  2114,     0,
       0,     0,     0,  1566,     0,   816,     0,   519,     0,     0,
       0,     0,   816,   964,  1383,     0,   963,     0,     0,     0,
       0,     0,   534,     0,     0,  2411,   823,   534,     0,     0,
       0,     0, -1121,     0,     0,     0,     0,     0,     0,   534,
       0,     0,   814,  1749,   669,   667,     0,     0,   816,   965,
     667,     0,   816,   534,   534,     0, -1965,     0,   816,     0,
       0,  1783,    25,    26,    27,   966,  2669,     0,     0,     0,
     520,     0, -1697, -1965,     0,   967,     0,     0, -1965,     0,
       0,     0, -1697,     0,     0,   964,  2211,  2212,  2214,  2215,
    2216,  1800,     0,     0,     0,     0,  1800, -1965,   823, -1697,
       0, -1697, -1697,     0,     0,     0,     0,   968,     0,     0,
       0,     0,   534,     0, -1965,     0, -1965,     0,     0, -1965,
       0,   965,   521,     0,     0,    32,     0,   826,  1135,     0,
     826,     0,   533,   533,     0,   533,   826,   966, -1697,     0,
       0, -1697, -1697, -1697,     0,   814,     0,   967,     0,     0,
       0,   817,   969,     0,     0,     0,     0, -1965,     0,   970,
       0,     0,    37,     0,     0,     0,     0,  3035,     0,  1575,
       0,     0,     0,     0,  1367,  1368,     0,     0,     0,   968,
    1449,  1449,     0,     0,     0,     0,  1449,    21,   501,     0,
       0,     0,     0,    80,     0,    39,    21,   522,     0,   971,
    1918,   954,     0,   533,  1899,     0,    42,     0,     0,     0,
    1575,   667,     0,     0,   619,   814,   972,   619,     0,     0,
      43,     0,   619,     0,   969,   619,   621,     0,     0,     0,
     619,   970,   533,   621,   533,   823,     0,  2350,     0,     0,
     814,     0,     0,     0,    44,   523,     0,   524,   819,     0,
       0,  1369,  1370,     0,     0,     0,  1972,     0,    45,     0,
       0,  1978,     0,     0,   525,     0, -1965,  1516,     0,     0,
     526,   971,     0,   527,     0,     0,     0,     0,  1520,   997,
       0,     0,  1856,     0,     0,   973,  1857,  1858,   972,     0,
    1859,  1860,  1861,     0,     0,     0,     0,   814,     0,   826,
       0,     0,     0,     0,     0,  1534,     0, -1965,     0,     0,
     817,     0,     0,     0,     0,  1371,  1372,  1373,  1374,  1375,
    1376,     0,     0,  1377,  1378,     0,     0,    25,    26,    27,
       0,     0,     0,     0,     0,     0,    25,    26,    27,   817,
     817,     0,     0,     0,   816,     0,     0,     0,  2064,     0,
     667,     0,   667,     0,     0,   817,     0,   973,     0,     0,
       0,     0,  1919,   667,  2080,     0,     0,     0,     0,     0,
       0, -1965,     0,     0,     0,     0,  1449,     0,  1582,  1583,
    1584,  1585,  1586,  1587,   698,   698,     0,   698,     0,     0,
      32,     0,     0,     0,     0,     0,     0,     0,     0,    32,
       0,   667,     0,   533,   814,     0,     0,     0,     0,     0,
       0,     0, -1965,     0,     0,     0,     0,  1690,   533,  1582,
    1583,  1584,  1585,  1586,  1587,     0,     0,    37,   533,  2146,
     533,  2150,     0,   533,  1379,  1380,    37,     0,   814,   533,
       0,   533,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   826,   533,     0,     0,     0,   826,   533,     0,
      39,     0,   533,   533,   533,   533,     0,   533,   533,    39,
       0,    42,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,   823,     0,     0,    43,   819,     0,  1863,   667,
     667,   667,   667,   667,    43,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2225,     0,    44,
     814,     0,     0,     0,     0,     0,     0,   820,    44,     0,
       0,     0,     0,    45,     0,     0,     0,     0,     0,   816,
       0,     0,    45,     0,     0,     0,     0,     0,     0,     0,
    2541,     0,   534,     0,     0,   822,     0,     0,   817,     0,
    1381,  1382,  2554,  2555,  2557,     0,  1864,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2568, -1699,     0,
    2571,   534,   534,     0,     0,  2576,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1449,  1449,  1449,  1449,  1449,  1449,     0,     0,  1449,  1449,
    1449,  1449,  1449,  1449,  1449,  1449,  1449,  1449,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   533,     0,
       0,     0,   816,  1451,     0,     0,     0,     0,     0,     0,
     667,     0,     0,     0,     0,     0,     0,   814,     0,   619,
       0,     0,     0,     0,     0,   619, -1714,     0,     0,     0,
     533,     0,     0,     0,     0,   533, -1699,     0,     0,     0,
       0,     0,    80,     0,     0,   819,     0,     0,     0,     0,
       0,  2622,  2623,  2624,   817,     0,   534,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   816,     0,     0,     0,     0,     0,     0,     0,
     533, -1699,     0,     0,  2391,     0,     0,     0,     0,   533,
       0,     0,     0,     0,     0, -1699,     0,   816,     0,     0,
   -1699,     0,     0,     0,     0, -1699,     0,     0,     0,     0,
       0,  1449,  1449,     0, -1699,     0,     0,     0,   621, -1699,
       0,   621,     0,     0, -1714,   820,   621,     0,  1972,   621,
       0,  1865,  1866,  1867,   621,  1868,  1869,  1870,  1871,  1872,
    1873,     0,     0,     0,     0,     0,     0,     0,    80,     0,
       0, -1699,     0,   822,   816,     0,     0,     0,     0,     0,
       0,   619,     0,     0,   817,  2712,     0,     0,     0, -1714,
       0, -1699,     0,   533,     0,     0,     0,     0,   619,     0,
       0,     0,  2080, -1714,     0,     0,  1659,     0, -1714,     0,
       0,     0,     0, -1714,     0,  1451,     0,     0,     0,     0,
       0,     0, -1714,     0,     0,     0,  2014, -1714,   817,     0,
       0,     0,     0,     0,     0,     0,     0,   819, -1699,     0,
     817, -1699,   533,     0,     0,  1449,     0, -1699,   533,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1714,
       0,     0,     0,     0,  1749,     0,     0,     0,     0,  2849,
     817,     0,     0,     0,     0,     0,     0,   817,     0, -1714,
       0,   816,     0,     0,   814,     0, -1699,     0,     0,     0,
       0,   997,     0,     0,  1856,     0,     0,   698,  1857,  1858,
       0,     0,  1859,  1860,  1861,     0,     0,     0,     0, -1699,
       0,     0,     0,   817,     0,   816,     0,   817,     0,     0,
       0,     0,     0,   817,     0,     0, -1714,  1749,     0, -1714,
       0,     0,     0,   667,   820, -1714,     0,     0,  2885,  2886,
    2887,  2888,     0,     0,  1749,   667,   667,   667,     0,     0,
       0,     0,     0,  1469,     0,     0,     0,     0,   533,     0,
     667,     0,   822,   667,     0,   669,     0,     0,   667,     0,
       0,     0,     0,     0, -1714,     0,  1500,     0,     0,     0,
       0,  2583,     0,     0,     0,     0,     0,   816,     0,     0,
       0,     0,     0, -1699,     0,     0,   819, -1714,   826,     0,
       0,     0,     0, -1699,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1749,  1749,     0,  1749,     0,     0,
   -1699,     0, -1699, -1699,  2220,   819,   819,     0,     0,     0,
       0,     0,     0,    80,     0,     0,     0,     0,     0,     0,
       0,   819,  1539,     0,     0,     0,   501,     0,     0,     0,
       0,     0,     0,   669,     0,     0,     0,     0,     0, -1699,
       0,     0, -1699, -1699, -1699,     0,  2615,     0,     0,     0,
    2994,     0,     0,     0,   667,   667,   667,  1862,     0,     0,
       0, -1714,     0,   533,     0,  1449,   533,     0,     0,     0,
       0, -1714,   533,     0,     0,  1553,     0,     0,  1554,     0,
    1863,     0,  1555,  1556,   534,   534,   820,  1972, -1714,  1452,
   -1714, -1714,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   816,     0,     0,     0,     0,  1451,
    1451,     0,     0,  1564,   822,  1451,     0,  1449,  1449,     0,
   -1965,     0,     0,     0,     0,     0,     0, -1714,     0,     0,
   -1714, -1714, -1714,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1566,  2694,     0,  1864,     0,
       0,     0,  2080,   621,     0,     0,     0,     0,     0,   621,
       0,     0,     0,     0,     0,     0,     0,     0,   667,     0,
       0,     0,   533,     0,     0,     0,   533,   533,   533,     0,
       0,     0,  1749,  1690,  1749,     0,  1783,     0,     0,   817,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   533,     0,  2774,  2672,     0,
       0,     0,     0,     0,   819,     0,     0,     0,     0,     0,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1965,
       0,     0,     0,     0,     0,   820,  2225,     0,     0,     0,
    1534,     0,   667,     0,     0,     0, -1965,     0,     0,     0,
       0, -1965,  1690,     0,     0,     0,     0,     0,  2014,     0,
       0,     0,     0,   822,   820,   820,     0,     0,  1783,     0,
       0,  1452,     0,     0,  2421,     0,     0,     0,     0,     0,
     820,     0,     0,     0,     0,   621,     0,  1749,     0, -1965,
       0,     0,   822,   822,     0,  2099,     0,     0,  1449,     0,
       0,     0,   621,     0,   533,     0,     0,     0,   822,     0,
       0,   667,   667,   667,   667,     0,     0,     0,     0,  3137,
       0,     0,     0,  1449,     0,     0,  1449,     0,     0,     0,
     533,   826,     0,     0,     0,     0,     0,     0,     0,  3161,
     819,   816,  1575,  1865,  1866,  1867,  2922,  1868,  1869,  1870,
    1871,  1872,  1873,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   817,     0,     0,     0,     0,   534,
     534,     0,   534,     0,     0,     0,  2944,     0,   619,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2956,     0,     0,     0,  2080,     0,  3199,     0,
       0,     0,  1972,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1690,     0,     0,     0,
       0,     0,  1749,     0,     0,     0,     0,     0,  3225,     0,
       0,     0,     0,     0,     0,   826,   533,  1449,     0, -1965,
     534,     0,     0,   667,     0,     0,   681,     0,     0,     0,
     819,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3007,     0,     0,     0,     0,     0,     0,   817,     0,  1929,
       0,  1933,     0,   820,     0,     0,   997,     0,     0,  1856,
       0,     0,     0,  1857,  1858,     0,     0,  1859,  1860,  1861,
       0,     0,     0,     0,   819,     0,     0,     0,     0,     0,
       0,   822,     0,     0,     0,     0,   819,     0,     0,  1451,
    1451,  1451,  1451,  1451,  1451,     0,     0,  1451,  1451,  1451,
    1451,  1451,  1451,  1451,  1451,  1451,  1451,     0,     0,     0,
       0,     0,     0,     0,     0,  1749,   819,   817,     0,     0,
       0,     0,     0,   819, -1965,     0,     0,  2225,     0,     0,
       0,  1582,  1583,  1584,  1585,  1586,  1587,     0,     0,     0,
       0,  3050,   817,     0,     0,     0,     0,     0,  1553,     0,
    1449,  1554,     0,     0,     0,  1555,  1556,     0,     0,   819,
       0,     0,     0,   819,     0,  1452,  1452,     0,     0,   819,
       0,  1452,     0,     0,     0,     0,  3067,     0,     0,     0,
       0,     0,   533,     0,     0,     0,  1564,     0,     0,   820,
     533,     0,     0, -1965,   997,  1534,     0,  1856,     0,   817,
       0,  1857,  1858,     0,     0,  1859,  1860,  1861,     0,     0,
       0,     0,     0,     0,     0,     0,  3092,   822,  1566,     0,
     534,     0,  2659,  1553,     0,     0,  1554,  1534,     0,     0,
    1555,  1556,     0,     0,     0,   534,     0,     0,   533,     0,
    1451,  1451,  2125,   533,     0,   534,    80,   534,     0,     0,
     534,     0,    80,     0,     0,     0,   534,     0,   534,     0,
       0,  1564,     0,     0,     0,  1863,     0,     0, -1965,   533,
     534,     0,     0,  1057,  1057,   534,     0,     0,  2716,   534,
     534,   534,   534,     0,   534,   534,     0,     0,     0,   533,
     533,     0,     0,  1566,     0,     0,     0,     0,     0,   820,
       0,     0,   667,     0,  1690,     0,   817,     0,   533,     0,
       0,     0, -1965,  2056,     0,     0,     0,     0,     0,     0,
       0,     0,   667,     0,     0,  3163,     0,   822,     0, -1965,
       0,     0,     0,  1864, -1965,     0,     0,     0,  1183,     0,
     817,     0,  1304,   820,     0,  1449,     0,     0,     0,   533,
     954,    80,     0,   954,  1451,   820,  2673,     0,     0,     0,
       0,  1452,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   822, -1965,     0,  2956,     0,     0,    80,     0,     0,
      80,   667,     0,   822,     0,   820,   997, -1965,     0,  1856,
       0,     0,   820,  1857,  1858,     0,     0,  1859,  1860,  1861,
       0,     0,     0,  1863, -1965,     0,     0,     0,     0, -1965,
       0,   667,   817,   822,  2660,     0,     0,     0,     0,     0,
     822,     0,     0,     0,     0,  1575,     0,     0,   820,     0,
       0,     0,   820,     0,     0,     0,     0,  1534,   820,     0,
       0,     0,     0,     0,     0,   534,     0, -1965,     0,  3067,
       0,     0,     0,     0,     0,   819,   822,     0,     0,     0,
     822,     0,     0,     0,     0,     0,   822,     0,     0,     0,
    3163,  1864,     0,     0,     0,     0,     0,  2364,     0,     0,
       0,     0,  1933,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   621,     0,     0,     0,     0,  1690,     0,     0,
    1575,     0,     0,     0,     0,     0,   681,     0,     0,   826,
     826,     0,  3163,   826,     0,     0,     0,     0,     0,     0,
       0,  1899, -1965,     0,     0,     0,     0,   534,     0,     0,
       0,   533,     0,     0,     0,     0,  1539,     0,  1865,  1866,
    1867,     0,  1868,  1869,  1870,  1871,  1872,  1873,     0,   817,
       0,     0,  1426,  1690,     0,     0,     0,     0,  1443,     0,
    3163,  1445,     0,     0,  1456,  1459,  1464,  1467,     0,     0,
       0,     0,     0,     0,     0,  1452,  1452,  1452,  1452,  1452,
    1452,     0,     0,  1452,  1452,  1452,  1452,  1452,  1452,  1452,
    1452,  1452,  1452,     0,     0,  1863,     0, -1965,   826,     0,
       0,     0,     0,     0,     0,  1304,     0,     0,     0,     0,
       0,     0,     0,  2080,     0,     0,     0,     0,     0,     0,
     534,     0,     0,     0,     0,  1517,     0, -1965,     0,     0,
       0,     0,     0,     0,  1582,  1583,  1584,  1585,  1586,  1587,
     819,     0,     0,  1522,     0,     0,  1451,  1451,     0,     0,
       0,     0,     0,     0,  1525,  1526,  1527,     0,  1531,  1535,
       0,     0,    80,  1864,     0,     0,     0,     0,     0,   534,
       0,     0,     0,     0,     0,  2472,  1865,  1866,  1867,     0,
    1868,  1869,  1870,  1871,  1872,  1873,     0,     0,     0,  1596,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1534,     0, -1965,     0,     0,     0,     0,     0,     0,  1582,
    1583,  1584,  1585,  1586,  1587,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   820,     0,  1452,  1452,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1637,     0,     0,   819,  1653,  1658,     0,     0,     0,     0,
       0,     0,   822,     0,     0,  1057,  1057,     0,     0,     0,
     997,     0,     0,  1856,     0,     0,     0,  1857,  1858,     0,
       0,  1859,  1860,  1861,     0,     0,     0,     0,     0,  1553,
       0,     0,  1554,     0,     0,   534,  1555,  1556,  1557,  1558,
    1559,  1560,  1561,     0,     0,     0,   817,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1562,     0,     0,
       0,     0,     0,   819,     0,     0,     0,  1564,     0,     0,
       0,     0,     0,     0,  1565,     0,     0,     0,     0,     0,
       0,     0,     0,    80,    80,     0,     0,  1451,   819,     0,
    1452,     0,     0,     0,     0,     0,     0,     0,     0,  1566,
       0,     0,   997,     0,     0,  1856,     0,     0,     0,  1857,
    1858,     0,  2906,  1859,  1860,  1861,     0,     0,  1865,  1866,
    1867,     0,  1868,  1869,  1870,  1871,  1872,  1873,     0,     0,
    2931,     0,     0,     0,     0,     0,  2924,  1304,     0,     0,
       0,     0,     0,     0,     0,   819,  1304,     0,     0,     0,
       0,     0,     0,     0,     0,    80,     0,    80,     0,   820,
     534,     0,     0,   534,     0,     0,     0,     0,     0,  1929,
    1304,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   822,     0,     0,
       0,     0,     0,  1567,     0,   997,    80,     0,  1856,     0,
       0,     0,  1857,  1858,     0,     0,  1859,  1860,  1861,     0,
    1568,     0,    80,     0,     0,  1569,    80,     0,     0, -1965,
       0,     0,     0,  2932,     0,     0,  1451,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1570,  1571,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   819,  1572,     0,     0,     0,     0,     0,     0,
       0,     0,   820,     0,     0,     0,     0,     0,     0,   534,
       0,     0,     0,   534,   534,   534,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   819,  1864,     0,  1573,
     822,     0,  1574,     0,     0,     0,     0,     0,     0,  1846,
       0,     0,   534,     0,     0,     0,  1575,     0,     0,  1576,
       0,  1863,     0,     0,     0,     0,     0,   534,   534,   534,
     534,   534,   534,   534,   534,   534,   534,     0,     0,     0,
       0,  1464,   820,  1464,  1464,     0,    80,     0,     0,     0,
       0,     0,  1553,     0,     0,  1554,  1057,  1057,     0,  1555,
    1556,     0,     0,     0,     0,     0,     0,   820,   819,  1451,
     822,     0,  1057,    80,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1864,
    1564,     0,  1452,  1452,     0,   822,     0, -1965,     0,     0,
    1951,     0,  1952,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1577,  1863,     0,     0,     0,     0,     0,
       0,  1929,  1566,     0,   820,     0,     0,     0,     0,     0,
    1991,     0,     0,     0,     0,     0,  1995,  1996,  1997,  1998,
    1999,  2000,  2001,  2002,     0,     0,     0,  2364,  2011,  2012,
       0,     0,   822,  2023,     0,     0,     0,  2026,     0,     0,
    2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,  2042,     0,
       0,  2043,     0,     0,     0,     0,     0,     0,  1057,     0,
    1304,     0,  1864,     0,     0,  2935,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2069,  1865,  1866,  1867,   819,  1868,  1869,  1870,  1871,
    1872,  1873,     0,     0,     0,     0, -1965,     0,  1578,     0,
       0,  1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,  1586,
    1587,   820,     0, -1965,     0,  1526,  1527,     0, -1965,     0,
       0,     0,     0,     0,  2381,     0,     0,     0,     0,     0,
       0,     0,     0,   534,     0,     0,     0,     0,     0,   822,
       0,     0,     0,     0,  3180,   820,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1965,     0,     0,     0,
       0,     0,     0,  1452,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   822,  1865,  1866,  1867,     0,  1868,  1869,
    1870,  1871,  1872,  1873,     0,     0,     0,     0,  1452,     0,
       0,     0,     0,   538,     0,     0,     0,     0,     0,     0,
    2189,     0,     0,     0,  1304,     0,     0,  2199,  2200,  1575,
       0,     0,     0,     0,     0,     0,     0,   820,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1304,  1453,     0,     0,   822,     0,     0,   539,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   540,     0,   -42,  1865,  1866,  1867,
       0,  1868,  1869,  1870,  1871,  1872,  1873,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,  3075,
       3,     4,  1452,     0,     0,     0, -1965,  2364,     0,  2298,
    2299,   541,  2300,     5,     0,     0,     0,     0,     6,     0,
       0,   542,     0,     0,     0,     0,     0,     7,     0,     0,
       0,     0,   819,   543,     0,     0,     0,     0,   544,     8,
       0,  2326,  2327,     0,     0,  2069,     0,     0,     0,     0,
       9,     0,     0,     0,   820,   534,     0,     0,  1590,     0,
     534,     0,    10,     0,    11,     0,     0,   545,     0,     0,
       0,     0,     0,     0,  2354,    12,     0,     0,     0,  2359,
       0,     0,   822,     0,     0,     0,   534,     0,     0,    13,
      14,     0,     0,     0,     0,     0,     0,     0,  1304,    15,
       0,  1590,     0,     0,     0,    16,   534,   534,     0,  2376,
     546, -1965,     0,    17,   547,    18,    19,     0,  1582,  1583,
    1584,  1585,  1586,  1587,     0,   534,     0,     0,     0,    20,
       0,     0,     0,    21,  1453,  1452,     0,     0,     0,     0,
    2389,     0,     0,     0,     0,  2392,  2393,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    22,
    1553,     0,     0,  1554,     0,     0,   534,  1555,  1556,     0,
       0, -1965, -1965, -1965,     0,    23,     0,     0,     0,     0,
       0,   548,     0,     0,  1590,     0,     0,     0,  2413,     0,
       0,  2416,     0,  2418,     0,     0,   549,     0,  1564,     0,
       0,    24,     0,     0,     0,  1565,     0,     0,     0,  2422,
    1553,     0,     0,  1554,     0,     0,     0,  1555,  1556,  1557,
    1558,  1559,  1560,  1561,     0,     0,     0,     0,     0,   550,
    1566,     0,   551,     0,     0,     0,     0,     0,  1562,     0,
       0,   552,     0,     0,   553,     0,     0,     0,  1564,  1637,
       0,     0,     0,     0,     0,  1565,     0,     0,     0,     0,
       0,     0,   554,     0,     0,     0,  1658,  2041,     0,     0,
       0,     0,     0,    25,    26,    27,   555,     0,     0,     0,
    1566,    28,     0,   556,    29,  1057,     0,     0,     0,     0,
       0,     0,     0,   557,  2476,     0,     0,     0,     0,   558,
       0,   820,     0,     0,     0,  1590,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,    31,     0,  1567,     0,   559,     0,     0,   822,
    1452,     0,     0,     0,     0,     0,    32,     0,     0,     0,
       0,  1568,     0,    33,     0,     0,  1569,    34,   534,     0,
       0,     0,     0,     0,     0,  1304,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
       0,     0,     0,    37,  1567,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1572,     0,     0,     0,     0,     0,
       0,  1568,     0,    38,     0,     0,  1569,     0,     0,     0,
       0,     0,     0,     0,  2574,     0,    39,     0,     0,    40,
       0,     0,    41,     0,     0,     0,     0,    42,     0,  1570,
    1571,     0,     0,     0,     0,     0,     0,  1590,     0,     0,
       0,    43,     0,     0,  1572,     0,     0,  1575,     0,     0,
       0,     0,     0,     0,  1590,     0,  1590,     0,  1453,  1453,
       0,  1874,     0,     0,  1453,    44,     0,  1590,     0,     0,
    1590,     0,     0,     0,     0,  1590,     0,     0,  1590,    45,
    1573,     0,   -42,  1574,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1144,     0,  1575,     0,     0,
    1576,  1145,     0,     0,     0,     0,     0,     0,     0,  1157,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1590,  1158,
       0,     0,     0,  1590,     0,     0,  1590,  1590,  1590,     0,
       0,     0,  1590,     0,  1577,     0,  1590,     0,  2643,     0,
       0,     0,  2645,  1952,     0,     0,     0,     0,     0,  2649,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2658,
       0,     0,  2661,  1159,  2663,     0,     0,     0,     0,     0,
       0,     0,  2667,     0,     0,     0,     0,     0,     0,     0,
    2674,  2675,     0,     0,  1577,     0,     0,  2682,     0,     0,
       0,     0,  1146,     0,     0,     0,     0,  1590,     0,     0,
       0,     0,  2691,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2706,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1057,     0,     0,     0,     0,     0,  1590,  1578,
       0,     0, -1965, -1965, -1965,     0,  1582,  1583,  1584,  1585,
    1586,  1587,     0,     0,  1590,     0,  1160,     0,     0,  1590,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1874,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,
       0,     0,  1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,
    1586,  1587,     0,     0,     0,  1161,     0,     0,     0,  1849,
       0,     0,     0,  1162,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1163,  1552,     0,     0,     0,
       0,  1553,     0,     0,  1554,     0,     0,     0,  1555,  1556,
    1557,  1558,  1559,  1560,  1561,     0,  1147,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1164,     0,  1562,
       0,     0,     0,  1563,     0,     0,     0,     0,     0,  1564,
       0,     0,     0,     0,     0,     0,  1565,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2901,  2902,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1566,  1165,  2919,     0,     0,  1149,     0,  1166,     0,
       0,     0,     0,     0,     0,  2923,     0,     0,     0,     0,
    2925,  2926,     0,     0,     0,  2927,     0,     0,     0,     0,
    2930,  1167,     0,  2933,  2934,     0,  1168,     0,  2189,  1304,
       0,     0,  2941,  1144,     0,     0,     0,  1590,     0,  1145,
    1169,     0,     0,  1057,     0,  1874,  1874,  1157,  1453,  1453,
    1453,  1453,  1453,  1453,     0,     0,  1453,  1453,  1453,  1453,
    1453,  1453,  1453,  1453,  1453,  1453,  1874,  1158,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1567,     0,  2982,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1151,     0,     0,
       0,     0,  1568,     0,     0,     0,     0,  1569,     0,     0,
       0,  1159,     0,     0,  3001,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1570,  1571,     0,     0,     0,     0,     0,     0,     0,     0,
    1146,     0,  1590,  1590,     0,  1572,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1573,  1590,     0,  1574,     0,  1590,  1590,  1590,  1590,
    1590,  1590,  1590,  1590,     0,     0,     0,  3028,  1575,  1453,
    1453,  1576,  1590,  1590,  1160,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1590,     0,     0,  1590,     0,     0,
       0,     0,     0,     0,     0,  1590,  1590,  1590,  1590,  1590,
    1590,  1590,  1590,  1590,  1590,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1535,     0,     0,     0,     0,     0,
       0,     0,     0,  1161,     0,     0,     0,     0,     0,     0,
    1590,  1162,     0,     0,  1304,     0,     0,     0,     0,     0,
       0,  2389,     0,  1163,     0,     0,     0,     0,     0,     0,
       0,     0,  3086,  3087,     0,     0,  3088,     0,     0,     0,
       0,     0,     0,     0,  1147,  1577,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1164,     0,     0,     0,     0,
       0,     0,  3104,  1453,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3116,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2166,     0,     0,     0,  1149,     0,  1166,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1167,
    1590,     0,     0,     0,  2167,     0,     0,     0,     0,     0,
    1590,  1590,     0,     0,     0,     0,     0,     0,  1169,  3160,
    1578,     0,     0,  1579,  1580,  1581,     0,  1582,  1583,  1584,
    1585,  1586,  1587,     0,     0,     0,     0,  2901,     0,     0,
       0,  3177,     0,     0,     0,  1057,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3187,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1057,     0,
       0,     0,     0,     0,     0,  1151,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3210,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1590,
    1590,  1590,     0,     0,  1874,  1874,  1874,  1874,  1874,  1874,
       0,     0,     0,  1874,  1874,  1874,  1874,  1874,  1874,  1874,
    1874,  1874,  1874,  3235,     0,     0,     0,  1590,  1590,     0,
       0,     0,     0,  2901,     0,     0,     0,     0,     0,     0,
    1553,     0,     0,  1554,     0,     0,  1057,  1555,  1556,  1557,
    1558,  1559,  1560,  1561,     0,  1590,     0,     0,     0,     0,
    1590,     0,     0,     0,     0,     0,     0,     0,  1562,     0,
       0,     0,  2653,     0,     0,     0,  3277,  1590,  1564,     0,
       0,     0,     0,     0,     0,  1565,     0,     0,     0,     0,
    1590,     0,     0,  1590,  1590,     0,     0,     0,     0,     0,
    1874,  1874,     0,     0,     0,     0,     0,     0,     0,     0,
    1566,     0,     0,     0,  1590,  1453,  1453,  1590,     0,  1590,
       0,     0,     0,  1590,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3332,  3332,  3332,     0,     0,     0,     0,
       0,  1553,     0,     0,  1554,     0,     0,  1590,  1555,  1556,
    1557,  1558,  1559,  1560,  1561,     0,     0,     0,     0,     0,
    3332,     0,     0,     0,     0,     0,     0,     0,     0,  1562,
       0,     0,     0,     0,  1567,     0,     0,     0,     0,  1564,
       0,     0,     0,     0,     0,     0,  1565,     0,     0,     0,
       0,  1568,     0,     0,     0,     0,  1569,     0,     0,     0,
       0,  3332,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1566,     0,     0,     0,     0,     0,     0,     0,  1570,
    1571,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1572,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1590,     0,  1553,     0,     0,
    1554,     0,     0,     0,  1555,  1556,  1557,  1558,  1559,  1560,
    1561,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1573,     0,     0,  1574,     0,  1562,  1453,     0,     0,     0,
       0,     0,     0,     0,     0,  1564,     0,  1575,     0,     0,
    1576,     0,  1565,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1567,     0,     0,     0,     0,
       0,     0,     0,     0,  1590,     0,  1590,  1566,     0,     0,
    1590,     0,  1568,     0,     0,     0,     0,  1569,     0,  1590,
       0,     0,  1590,     0,  1590,     0,     0,     0,  1590,     0,
       0,  1874,  1874,     0,     0,  1590,  1590,     0,     0,     0,
    1570,  1571,     0,  1590,     0,     0,     0,     0,     0,     0,
       0,     0,  1590,     0,     0,  1572,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1590,  1553,     0,
       0,  1554,     0,     0,  1577,  1555,  1556,  1557,  1558,  1559,
    1560,  1561,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1573,     0,     0,  1574,     0,  1562,     0,     0,     0,
       0,  1567,     0,     0,     0,  1453,  1564,     0,  1575,     0,
       0,  1576,     0,  1565,     0,     0,     0,     0,  1568,     0,
       0,     0,     0,  1569,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1566,     0,
       0,     0,     0,     0,     0,     0,  1570,  1571,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1572,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,
       0,     0,  1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,
    1586,  1587,     0,     0,     0,     0,  1983,  1573,     0,     0,
    1574,     0,     0,     0,     0,  1577,     0,     0,     0,     0,
       0,     0,     0,     0,  1575,     0,     0,  1576,     0,     0,
       0,     0,  1880,     0,     0,     0,     0,  1881,     0,     0,
       0,     0,  1567,     0,     0,     0,     0,  1874,  1453,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1568,
       0,     0,     0,     0,  1569,     0,     0,     0,     0,     0,
       0,     0,  1590,  1590,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1570,  1571,     0,
    1590,     0,     0,     0,  1590,     0,  1590,  1590,  1590,     0,
       0,  1590,  1572,     0,  1590,  1590,     0,     0,     0,     0,
       0,     0,  1590,     0,     0,     0,     0,     0,     0,     0,
    1578,  1577,     0,  1579,  1580,  1581,     0,  1582,  1583,  1584,
    1585,  1586,  1587,     0,     0,     0,     0,  1983,  1573,     0,
       0,  1574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1590,     0,  1575,     0,     0,  1576,  1874,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1590,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1590,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1874,  1578,     0,     0,  1579,
    1580,  1581,     0,  1582,  1583,  1584,  1585,  1586,  1587,     0,
       0,     0,     0,  2297,     0,     0,     0,     0,     0,     0,
       0,     0,  1577,     0,     0,     0,     0,  1590,  1590,  1590,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1590,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1590,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1590,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1590,     0,
       0,     0,     0,     0,     0,     0,     0,  1578,  1590,     0,
    1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,  1586,  1587,
       0,   109,   994,   632,   995,   996,   997,   998,   999,     0,
       0,  1590,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,  1590,  1000,     0,     0,
     121,   122,   123,     0,   124,   125,   126,   127,   128,   129,
     130,   131,  1001,   133,  1002,  1003,     0,   136,   137,   138,
     139,   140,   141,  1004,   602,   142,   143,  1005,  1006,   146,
       0,   147,   148,   149,   150,   603,     0,   604,  1590,  1007,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,  1008,  1009,
     182,  1010,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     767,   198,   199,  1590,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,  1011,   211,   212,   213,
     214,   215,   605,  1012,   217,     0,   218,   219,  1013,   221,
       0,   222,     0,   223,   224,    21,   225,   226,   227,   228,
     229,   230,     0,   231,     0,  1014,  1015,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,  1016,
    1017,     0,  1018,     0,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,     0,     0,   277,   278,   279,
     280,     0,   281,   282,   283,   284,   285,   286,   287,   288,
    1019,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,  1020,
     309,  1021,   311,   312,   313,   314,  1022,   315,   316,   317,
     318,  1023,   607,   320,  1024,   322,   323,   324,     0,   325,
     326,     0,     0,  1025,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,   609,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    25,    26,    27,     0,   347,
     348,   610,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
    1026,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,  1027,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    32,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,  1028,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     612,   432,     0,   433,   434,    37,   435,   436,   437,   438,
     439,   440,   441,     0,   442,  1029,  1030,     0,     0,   445,
     446,   613,   448,   614,  1031,   450,   451,   615,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,    39,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   616,
    1032,     0,   472,   473,   474,   475,   476,   477,   478,     0,
       0,   479,     0,    43,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,  1033,     0,    44,     0,     0,
       0,     0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,
       0,  1038,  3065,     0,     0,     0,  1039,  1040,  1041,  1042,
     109,   994,   632,   995,   996,   997,   998,   999,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,  1000,     0,     0,   121,
     122,   123,     0,   124,   125,   126,   127,   128,   129,   130,
     131,  1001,   133,  1002,  1003,     0,   136,   137,   138,   139,
     140,   141,  1004,   602,   142,   143,  1005,  1006,   146,     0,
     147,   148,   149,   150,   603,     0,   604,     0,  1007,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,  1008,  1009,   182,
    1010,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   767,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,  1011,   211,   212,   213,   214,
     215,   605,  1012,   217,     0,   218,   219,  1013,   221,     0,
     222,     0,   223,   224,    21,   225,   226,   227,   228,   229,
     230,     0,   231,     0,  1014,  1015,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,  1016,  1017,
       0,  1018,     0,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,
       0,   281,   282,   283,   284,   285,   286,   287,   288,  1019,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,  1020,   309,
    1021,   311,   312,   313,   314,  1022,   315,   316,   317,   318,
    1023,   607,   320,  1024,   322,   323,   324,     0,   325,   326,
       0,     0,  1025,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,   609,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    25,    26,    27,     0,   347,   348,
     610,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,  1026,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,  1027,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    32,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,  1028,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   612,
     432,     0,   433,   434,    37,   435,   436,   437,   438,   439,
     440,   441,     0,   442,  1029,  1030,     0,     0,   445,   446,
     613,   448,   614,  1031,   450,   451,   615,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,    39,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   616,  1032,
       0,   472,   473,   474,   475,   476,   477,   478,     0,     0,
     479,     0,    43,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,  1033,     0,    44,     0,     0,     0,
       0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,
    1038,     0,     0,     0,     0,  1039,  1040,  1041,  1042,  1265,
     994,   632,   995,   996,   997,   998,   999,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,  1266,   118,   119,   120,
       0,     0,     0,  1267,     0,  1000,     0,     0,  1268,   122,
     123,     0,   124,   125,   126,  1269,   128,   129,   130,   131,
    1001,  1270,  1002,  1003,     0,   136,   137,   138,   139,   140,
     141,  1004,   602,   142,   143,  1005,  1006,   146,     0,   147,
     148,   149,   150,   603,     0,  1271,     0,  1272,   154,   155,
     156,   157,   158,  1273,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,  1274,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,  1008,  1009,   182,  1010,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,  1275,     0,   195,   196,   767,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,  1011,   211,   212,   213,   214,   215,
     605,  1012,   217,     0,   218,   219,  1013,   221,     0,   222,
       0,   223,  1276,     0,  1277,   226,   227,  1278,  1279,   230,
       0,   231,     0,  1014,  1015,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,  1280,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
    1281,   257,   258,   259,   260,   261,   262,  1016,  1017,     0,
    1018,     0,   266,  1282,  1283,   269,  1284,   271,   272,   273,
     274,   275,   276,     0,     0,   277,  1285,   279,  1286,     0,
     281,   282,   283,   284,   285,   286,   287,   288,  1287,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,  1020,  1288,  1021,
     311,   312,   313,   314,  1022,   315,   316,  1289,   318,  1023,
     607,   320,  1024,   322,   323,   324,     0,   325,   326,     0,
       0,  1025,   328,   329,     0,     0,   330,   331,   332,  1290,
     334,  1291,   609,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   610,
    1292,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,  1026,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
    1293,   387,   388,   389,  1027,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,  1294,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,  1295,   413,
     414,  1028,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,  1296,   430,   612,   432,
       0,   433,   434,     0,   435,  1297,   437,   438,   439,   440,
     441,     0,   442,  1029,  1030,     0,     0,   445,   446,   613,
     448,   614,  1031,   450,   451,  1298,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,  1032,  1299,
     472,  1300,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,  1033,     0,     0,     0,     0,     0,     0,
    1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,
    1301,     0,     0,     0,  1039,  1040,  1041,  1042,   109,   994,
     632,   995,   996,   997,   998,   999,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,  1000,     0,     0,   121,   122,   123,
       0,   124,   125,   126,   127,   128,   129,   130,   131,  1001,
     133,  1002,  1003,  1460,   136,   137,   138,   139,   140,   141,
    1004,   602,   142,   143,  1005,  1006,   146,     0,   147,   148,
     149,   150,   603,     0,   604,     0,  1007,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,  1008,  1009,   182,  1010,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   767,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,  1011,   211,   212,   213,   214,   215,   605,
    1012,   217,     0,   218,   219,  1013,   221,     0,   222,     0,
     223,   224,  1461,   225,   226,   227,   228,   229,   230,     0,
     231,     0,  1014,  1015,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,  1016,  1017,     0,  1018,
       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,     0,  1462,   277,   278,   279,   280,     0,   281,
     282,   283,   284,   285,   286,   287,   288,  1019,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,  1020,   309,  1021,   311,
     312,   313,   314,  1022,   315,   316,   317,   318,  1023,   607,
     320,  1024,   322,   323,   324,     0,   325,   326,     0,     0,
    1025,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,   609,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   610,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,  1026,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,  1027,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
    1028,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   612,   432,     0,
     433,   434,     0,   435,   436,   437,   438,   439,   440,   441,
       0,   442,  1029,  1030,     0,  1463,   445,   446,   613,   448,
     614,  1031,   450,   451,   615,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,  1032,     0,   472,
     473,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,  1033,     0,     0,     0,     0,     0,     0,  1034,
    1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,     0,
       0,     0,     0,  1039,  1040,  1041,  1042,  1265,   994,   632,
     995,   996,   997,   998,   999,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,  1267,     0,  1000,     0,     0,  1268,   122,   123,     0,
     124,   125,   126,  1269,   128,   129,   130,   131,  1001,  1270,
    1002,  1003,     0,   136,   137,   138,   139,   140,   141,  1004,
     602,   142,   143,  1005,  1006,   146,     0,   147,   148,   149,
     150,   603,     0,  1271,     0,  1272,   154,   155,   156,   157,
     158,  1273,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,  1274,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,  1008,  1009,   182,  1010,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   767,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,  1011,   211,   212,   213,   214,   215,   605,  1012,
     217,     0,   218,   219,  1013,   221,     0,   222,     0,   223,
    1276,     0,  1277,   226,   227,  1278,  1279,   230,     0,   231,
       0,  1014,  1015,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,  1280,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,  1281,   257,
     258,   259,   260,   261,   262,  1016,  1017,     0,  1018,     0,
     266,  1282,  1283,   269,  1284,   271,   272,   273,   274,   275,
     276,     0,     0,   277,  1285,   279,  1286,     0,   281,   282,
     283,   284,   285,   286,   287,   288,  1287,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,  1020,  1288,  1021,   311,   312,
     313,   314,  1022,   315,   316,  1289,   318,  1023,   607,   320,
    1024,   322,   323,   324,     0,   325,   326,     0,     0,  1025,
     328,   329,     0,     0,   330,   331,   332,  1290,   334,  1291,
     609,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   610,  1292,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,  1026,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,  1293,   387,
     388,   389,  1027,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,  1294,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,  1295,   413,   414,  1028,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,  1296,   430,   612,   432,     0,   433,
     434,     0,   435,  1297,   437,   438,   439,   440,   441,     0,
     442,  1029,  1030,     0,     0,   445,   446,   613,   448,   614,
    1031,   450,   451,  1298,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,  1032,  2194,   472,  1300,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,  1033,     0,     0,     0,     0,     0,     0,  1034,  1035,
    1036,     0,     0,     0,     0,  1037,     0,  1038,     0,     0,
       0,     0,  1039,  1040,  1041,  1042,  1265,   994,   632,   995,
     996,   997,   998,   999,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
    1267,     0,  1000,     0,     0,  1268,   122,   123,     0,   124,
     125,   126,  1269,   128,   129,   130,   131,  1001,  1270,  1002,
    1003,     0,   136,   137,   138,   139,   140,   141,  1004,   602,
     142,   143,  1005,  1006,   146,     0,   147,   148,   149,   150,
     603,     0,  1271,     0,  1272,   154,   155,   156,   157,   158,
    1273,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,  1274,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,  1008,  1009,   182,  1010,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   767,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,  1011,   211,   212,   213,   214,   215,   605,  1012,   217,
       0,   218,   219,  1013,   221,     0,   222,     0,   223,  1276,
       0,  1277,   226,   227,  1278,  1279,   230,     0,   231,     0,
    1014,  1015,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,  1280,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,  1281,   257,   258,
     259,   260,   261,   262,  1016,  1017,     0,  1018,     0,   266,
    1282,  1283,   269,  1284,   271,   272,   273,   274,   275,   276,
       0,     0,   277,  1285,   279,  1286,     0,   281,   282,   283,
     284,   285,   286,   287,   288,  1287,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,  1020,  1288,  1021,   311,   312,   313,
     314,  1022,   315,   316,  1289,   318,  1023,   607,   320,  1024,
     322,   323,   324,     0,   325,   326,     0,     0,  1025,   328,
     329,     0,     0,   330,   331,   332,  1290,   334,  1291,   609,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   610,  1292,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,  1026,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,  1293,   387,   388,
     389,  1027,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,  1294,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,  1295,   413,   414,  1028,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,  1296,   430,   612,   432,     0,   433,   434,
       0,   435,  1297,   437,   438,   439,   440,   441,     0,   442,
    1029,  1030,     0,     0,   445,   446,   613,   448,   614,  1031,
     450,   451,  1298,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,  1032,     0,   472,  1300,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
    1033,     0,     0,     0,     0,     0,     0,  1034,  1035,  1036,
       0,     0,     0,     0,  1037,     0,  1038,  2241,     0,     0,
       0,  1039,  1040,  1041,  1042,   109,   994,   632,   995,   996,
     997,   998,   999,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,  -624,   118,   119,   120,     0,     0,     0,     0,
    -624,  1000,     0,     0,   121,   122,   123,     0,   124,   125,
     126,   127,   128,   129,   130,   131,  1001,   133,  1002,  1003,
       0,   136,   137,   138,   139,   140,   141,  1004,   602,   142,
     143,  1005,  1006,   146,     0,   147,   148,   149,   150,   603,
       0,   604,     0,  1007,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,  1008,  1009,   182,  1010,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   767,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
    1011,   211,   212,   213,   214,   215,   605,  1012,   217,     0,
     218,   219,  1013,   221,     0,   222,     0,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,  1014,
    1015,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,  1016,  1017,     0,  1018,     0,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
       0,   277,   278,   279,   280,     0,   281,   282,   283,   284,
     285,   286,   287,   288,  1019,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,  1020,   309,  1021,   311,   312,   313,   314,
    1022,   315,   316,   317,   318,  1023,   607,   320,  1024,   322,
     323,   324,     0,   325,   326,     0,     0,  1025,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,   609,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   610,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,  1026,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
    1027,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,  1028,   416,  -624,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   612,   432,     0,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,     0,   442,  1029,
    1030,     0,     0,   445,   446,   613,   448,   614,  1031,   450,
     451,   615,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,  1032,     0,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,  1033,
       0,     0,     0,     0,     0,     0,  1034,  1035,  1036,     0,
       0,     0,     0,  1037,     0,  1038,     0,     0,     0,     0,
    1039,  1040,  1041,  1042,  1265,   994,   632,   995,   996,   997,
     998,   999,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,  1267,     0,
    1000,     0,     0,  1268,   122,   123,     0,   124,   125,   126,
    1269,   128,   129,   130,   131,  1001,  1270,  1002,  1003,     0,
     136,   137,   138,   139,   140,   141,  1004,   602,   142,   143,
    1005,  1006,   146,     0,   147,   148,   149,   150,   603,     0,
    1271,     0,  1272,   154,   155,   156,   157,   158,  1273,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
    1274,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,  1008,  1009,   182,  1010,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   767,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,  1011,
     211,   212,   213,   214,   215,   605,  1012,   217,     0,   218,
     219,  1013,   221,     0,   222,     0,   223,  1276,     0,  1277,
     226,   227,  1278,  1279,   230,     0,   231,     0,  1014,  1015,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
    1280,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,  1281,   257,   258,   259,   260,
     261,   262,  1016,  1017,     0,  1018,     0,   266,  1282,  1283,
     269,  1284,   271,   272,   273,   274,   275,   276,     0,     0,
     277,  1285,   279,  1286,     0,   281,   282,   283,   284,   285,
     286,   287,   288,  1287,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,  1020,  1288,  1021,   311,   312,   313,   314,  1022,
     315,   316,  1289,   318,  1023,   607,   320,  1024,   322,   323,
     324,     0,   325,   326,     0,     0,  1025,   328,   329,     0,
       0,   330,   331,   332,  1290,   334,  1291,   609,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   610,  1292,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,  1026,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,  1293,   387,   388,   389,  1027,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,  1294,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,  1295,   413,   414,  1028,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,  1296,   430,   612,   432,     0,   433,   434,     0,   435,
    1297,   437,   438,   439,   440,   441,     0,   442,  1029,  1030,
       0,     0,   445,   446,   613,   448,   614,  1031,   450,   451,
    1298,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,  1032,     0,   472,  1300,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,  1033,     0,
       0,     0,     0,     0,     0,  1034,  1035,  1036,     0,     0,
       0,     0,  1037,     0,  1038,  2938,     0,     0,     0,  1039,
    1040,  1041,  1042,  1265,   994,   632,   995,   996,   997,   998,
     999,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,  1267,     0,  1000,
       0,     0,  1268,   122,   123,     0,   124,   125,   126,  1269,
     128,   129,   130,   131,  1001,  1270,  1002,  1003,     0,   136,
     137,   138,   139,   140,   141,  1004,   602,   142,   143,  1005,
    1006,   146,     0,   147,   148,   149,   150,   603,     0,  1271,
       0,  1272,   154,   155,   156,   157,   158,  1273,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,  1274,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
    1008,  1009,   182,  1010,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   767,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,  1011,   211,
     212,   213,   214,   215,   605,  1012,   217,     0,   218,   219,
    1013,   221,     0,   222,     0,   223,  1276,     0,  1277,   226,
     227,  1278,  1279,   230,     0,   231,     0,  1014,  1015,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,  1280,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,  1281,   257,   258,   259,   260,   261,
     262,  1016,  1017,     0,  1018,     0,   266,  1282,  1283,   269,
    1284,   271,   272,   273,   274,   275,   276,     0,     0,   277,
    1285,   279,  1286,     0,   281,   282,   283,   284,   285,   286,
     287,   288,  1287,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,  1020,  1288,  1021,   311,   312,   313,   314,  1022,   315,
     316,  1289,   318,  1023,   607,   320,  1024,   322,   323,   324,
       0,   325,   326,     0,     0,  1025,   328,   329,     0,     0,
     330,   331,   332,  1290,   334,  1291,   609,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   610,  1292,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,  1026,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,  1293,   387,   388,   389,  1027,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,  1294,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,  1295,   413,   414,  1028,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
    1296,   430,   612,   432,     0,   433,   434,     0,   435,  1297,
     437,   438,   439,   440,   441,     0,   442,  1029,  1030,     0,
       0,   445,   446,   613,   448,   614,  1031,   450,   451,  1298,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,  1032,     0,   472,  1300,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,  1033,     0,     0,
       0,     0,     0,     0,  1034,  1035,  1036,     0,     0,     0,
       0,  1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,
    1041,  1042,   109,   994,   632,   995,   996,     0,   998,   999,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,  1000,     0,
       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,
     129,   130,   131,  1001,   133,  1002,  1003,     0,   136,   137,
     138,   139,   140,   141,  1004,   602,   142,   143,  1005,  1006,
     146,     0,   147,   148,   149,   150,   603,     0,   604,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,  1008,
    1009,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   767,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,  1011,   211,   212,
     213,   214,   215,   605,  1012,   217,     0,   218,   219,  1013,
     221,     0,   222,     0,   223,   224,    21,   225,   226,   227,
     228,   229,   230,     0,   231,     0,  1014,  1015,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
    1016,  1017,     0,  1018,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,
     288,  1019,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    1020,   309,  1021,   311,   312,   313,   314,     0,   315,   316,
     317,   318,  1023,   607,   320,  1024,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,   609,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    25,    26,    27,     0,
     347,   348,   610,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,  1026,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,  1027,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    32,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,  1028,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   612,   432,     0,   433,   434,    37,   435,   436,   437,
     438,   439,   440,   441,     0,   442,  1029,  1030,     0,     0,
     445,   446,   613,   448,   614,  1031,   450,   451,   615,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,    39,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     616,  1032,     0,   472,   473,   474,   475,   476,   477,   478,
       0,     0,   479,     0,    43,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,     0,     0,    44,     0,
       0,     0,   109,   994,   632,   995,   996,   997,   998,   999,
    1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,
    1042,   110,   111,   112,   113,   114,   115,   116,   117,  1634,
     118,   119,   120,     0,     0,     0,     0,     0,  1000,     0,
       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,
     129,   130,   131,  1001,   133,  1002,  1003,     0,   136,   137,
     138,   139,   140,   141,  1004,   602,   142,   143,  1005,  1006,
     146,     0,   147,   148,   149,   150,   603,     0,   604,     0,
    1007,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,  1008,
    1009,   182,  1010,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   767,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,  1011,   211,   212,
     213,   214,   215,   605,  1012,   217,     0,   218,   219,  1013,
     221,     0,   222,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,   231,     0,  1014,  1015,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
    1016,  1017,     0,  1018,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,
     288,  1019,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    1020,   309,  1021,   311,   312,   313,   314,  1022,   315,   316,
     317,   318,  1023,   607,   320,  1024,   322,   323,   324,     0,
     325,   326,     0,     0,  1025,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,   609,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   610,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,  1026,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,  1027,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,  1028,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   612,   432,     0,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,     0,   442,  1029,  1030,     0,     0,
     445,   446,   613,   448,   614,  1031,   450,   451,   615,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,  1032,     0,   472,   473,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,  1033,     0,     0,     0,
       0,     0,     0,  1034,  1035,  1036,     0,     0,     0,     0,
    1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,
    1042,   109,  1649,   632,   995,   996,   997,  1650,   999,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,  1651,   118,
     119,   120,     0,     0,     0,     0,     0,  1000,     0,     0,
     121,   122,   123,     0,   124,   125,   126,   127,   128,   129,
     130,   131,  1001,   133,  1002,  1003,     0,   136,   137,   138,
     139,   140,   141,  1004,   602,   142,   143,  1005,  1006,   146,
       0,   147,   148,   149,   150,   603,     0,   604,     0,  1007,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,  1008,  1009,
     182,  1010,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     767,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,  1011,   211,   212,   213,
     214,   215,   605,  1012,   217,     0,   218,   219,  1013,   221,
       0,   222,     0,   223,   224,     0,   225,   226,   227,   228,
     229,   230,     0,   231,     0,  1014,  1015,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,  1016,
    1017,     0,  1018,     0,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,     0,     0,   277,   278,   279,
     280,     0,   281,   282,   283,   284,   285,   286,   287,   288,
    1019,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,  1020,
     309,  1021,   311,   312,   313,   314,  1022,   315,   316,   317,
     318,  1023,   607,   320,  1024,   322,   323,   324,     0,   325,
     326,     0,     0,  1025,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,   609,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   610,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
    1026,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,  1027,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,  1028,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     612,   432,     0,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,     0,   442,  1029,  1030,     0,     0,   445,
     446,   613,   448,   614,  1031,   450,   451,   615,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
    1032,     0,   472,   473,   474,   475,   476,   477,   478,     0,
       0,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,  1033,     0,     0,     0,     0,
       0,     0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,
       0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,  1042,
     109,   994,   632,   995,   996,   997,   998,   999,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,  1000,     0,     0,   121,
     122,   123,     0,   124,   125,   126,   127,   128,   129,   130,
     131,  1001,   133,  1002,  1003,     0,   136,   137,   138,   139,
     140,   141,  1004,   602,   142,   143,  1005,  1006,   146,     0,
     147,   148,   149,   150,   603,     0,   604,     0,  1007,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,  1008,  1009,   182,
    1010,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   767,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,  1011,   211,   212,   213,   214,
     215,   605,  1012,   217,     0,   218,   219,  1013,   221,     0,
     222,     0,   223,   224,  1461,   225,   226,   227,   228,   229,
     230,     0,   231,     0,  1014,  1015,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,  1016,  1017,
       0,  1018,     0,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,
       0,   281,   282,   283,   284,   285,   286,   287,   288,  1019,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,  1020,   309,
    1021,   311,   312,   313,   314,  1022,   315,   316,   317,   318,
    1023,   607,   320,  1024,   322,   323,   324,     0,   325,   326,
       0,     0,  1025,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,   609,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     610,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,  1026,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,  1027,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,  1028,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   612,
     432,     0,   433,   434,     0,   435,   436,   437,   438,   439,
     440,   441,     0,   442,  1029,  1030,     0,     0,   445,   446,
     613,   448,   614,  1031,   450,   451,   615,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,  1032,
       0,   472,   473,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,  1033,     0,     0,     0,     0,     0,
       0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,
    1038,     0,     0,     0,     0,  1039,  1040,  1041,  1042,   109,
     994,   632,   995,   996,   997,   998,   999,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
       0,     0,     0,     0,     0,  1000,     0,     0,   121,   122,
     123,     0,   124,   125,   126,   127,   128,   129,   130,   131,
    1001,   133,  1002,  1003,     0,   136,   137,   138,   139,   140,
     141,  1004,   602,   142,   143,  1005,  1006,   146,     0,   147,
     148,   149,   150,   603,     0,   604,     0,  1007,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,  1008,  1009,   182,  1010,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   767,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,  1011,   211,   212,   213,   214,   215,
     605,  1012,   217,     0,   218,   219,  1013,   221,     0,   222,
       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,
       0,   231,     0,  1014,  1015,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,  1016,  1017,     0,
    1018,     0,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,     0,     0,   277,   278,   279,   280,     0,
     281,   282,   283,   284,   285,   286,   287,   288,  1019,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,  1020,   309,  1021,
     311,   312,   313,   314,  1022,   315,   316,   317,   318,  1023,
     607,   320,  1024,   322,   323,   324,     0,   325,   326,     0,
       0,  1025,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,   609,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   610,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,  1026,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,  1027,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,  1028,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   612,   432,
       0,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,     0,   442,  1029,  1030,     0,     0,   445,   446,   613,
     448,   614,  1031,   450,   451,   615,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,  1032,     0,
     472,   473,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,  1033,     0,     0,     0,     0,     0,     0,
    1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,
    1975,     0,     0,     0,  1039,  1040,  1041,  1042,   109,   994,
     632,   995,   996,   997,   998,   999,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,  1000,     0,     0,   121,   122,   123,
       0,   124,   125,   126,   127,   128,   129,   130,   131,  1001,
     133,  1002,  1003,     0,   136,   137,   138,   139,   140,   141,
    1004,   602,   142,   143,  1005,  1006,   146,     0,   147,   148,
     149,   150,   603,     0,   604,     0,  1007,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,  1008,  1009,   182,  1010,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   767,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,  1011,   211,   212,   213,   214,   215,   605,
    1012,   217,     0,   218,   219,  1013,   221,     0,   222,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
     231,     0,  1014,  1015,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,  1016,  1017,     0,  1018,
       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   278,   279,   280,     0,   281,
     282,   283,   284,   285,   286,   287,   288,  1019,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,  1020,   309,  1021,   311,
     312,   313,   314,  1022,   315,   316,   317,   318,  1023,   607,
     320,  1024,   322,   323,   324,     0,   325,   326,     0,     0,
    1025,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,   609,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   610,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,  1026,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,  1027,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
    1028,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   612,   432,     0,
     433,   434,  2573,   435,   436,   437,   438,   439,   440,   441,
       0,   442,  1029,  1030,     0,     0,   445,   446,   613,   448,
     614,  1031,   450,   451,   615,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,  1032,     0,   472,
     473,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,  1033,     0,     0,     0,     0,     0,     0,  1034,
    1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,     0,
       0,     0,     0,  1039,  1040,  1041,  1042,   109,   994,   632,
     995,   996,   997,   998,   999,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,     0,     0,  1000,     0,     0,   121,   122,   123,     0,
     124,   125,   126,   127,   128,   129,   130,   131,  1001,   133,
    1002,  1003,     0,   136,   137,   138,   139,   140,   141,  1004,
     602,   142,   143,  1005,  1006,   146,     0,   147,   148,   149,
     150,   603,     0,   604,     0,  1007,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,  1008,  1009,   182,  1010,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   767,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,  1011,   211,   212,   213,   214,   215,   605,  1012,
     217,     0,   218,   219,  1013,   221,     0,   222,     0,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
       0,  1014,  1015,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,  1016,  1017,     0,  1018,     0,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,     0,     0,   277,   278,   279,   280,     0,   281,   282,
     283,   284,   285,   286,   287,   288,  1019,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,  1020,   309,  1021,   311,   312,
     313,   314,  1022,   315,   316,   317,   318,  1023,   607,   320,
    1024,   322,   323,   324,     0,   325,   326,     0,     0,  1025,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
     609,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   610,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,  1026,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,  1027,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,  1028,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   612,   432,     0,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,     0,
     442,  1029,  1030,     0,     0,   445,   446,   613,   448,   614,
    1031,   450,   451,   615,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,  1032,     0,   472,   473,
     474,   475,   476,   477,   478,     0,  2681,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,  1033,     0,     0,     0,     0,     0,     0,  1034,  1035,
    1036,     0,     0,     0,     0,  1037,     0,  1038,     0,     0,
       0,     0,  1039,  1040,  1041,  1042,   109,   994,   632,   995,
     996,   997,   998,   999,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,  2889,   118,   119,   120,     0,     0,     0,
       0,     0,  1000,     0,     0,   121,   122,   123,     0,   124,
     125,   126,   127,   128,   129,   130,   131,  1001,   133,  1002,
    1003,     0,   136,   137,   138,   139,   140,   141,  1004,   602,
     142,   143,  1005,  1006,   146,     0,   147,   148,   149,   150,
     603,     0,   604,     0,  1007,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,   169,   170,  2890,   172,   173,   174,   175,   176,
     177,   178,   179,  1008,  1009,   182,  1010,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   767,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,  1011,   211,   212,   213,   214,   215,   605,  1012,   217,
       0,   218,   219,  1013,   221,     0,   222,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   231,     0,
    2891,  1015,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,  1016,  1017,     0,  1018,     0,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   278,   279,   280,     0,   281,   282,   283,
     284,   285,   286,   287,   288,  1019,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,  1020,   309,  1021,   311,   312,   313,
     314,  1022,   315,   316,   317,   318,  1023,   607,   320,  1024,
     322,   323,   324,     0,   325,   326,     0,     0,  1025,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,   609,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   610,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,  1026,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
    2892,  1027,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,  1028,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   612,   432,     0,   433,   434,
       0,   435,   436,   437,   438,   439,   440,   441,     0,   442,
    1029,  1030,     0,     0,   445,   446,   613,   448,   614,  1031,
     450,   451,   615,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,  1032,     0,   472,   473,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
    1033,     0,     0,     0,     0,     0,     0,  1034,  1035,  1036,
       0,     0,     0,     0,  1037,     0,  2893,     0,     0,     0,
       0,  1039,  1040,  1041,  1042,   109,   994,   632,   995,   996,
     997,   998,   999,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,  1000,     0,     0,   121,   122,   123,     0,   124,   125,
     126,   127,   128,   129,   130,   131,  1001,   133,  1002,  1003,
       0,   136,   137,   138,   139,   140,   141,  1004,   602,   142,
     143,  1005,  1006,   146,     0,   147,   148,   149,   150,   603,
       0,   604,     0,  1007,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,  1008,  1009,   182,  1010,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   767,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
    1011,   211,   212,   213,   214,   215,   605,  1012,   217,     0,
     218,   219,  1013,   221,     0,   222,     0,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,  1014,
    1015,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,  1016,  1017,     0,  1018,     0,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
       0,   277,   278,   279,   280,     0,   281,   282,   283,   284,
     285,   286,   287,   288,  1019,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,  1020,   309,  1021,   311,   312,   313,   314,
    1022,   315,   316,   317,   318,  1023,   607,   320,  1024,   322,
     323,   324,     0,   325,   326,     0,     0,  1025,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,   609,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   610,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,  1026,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
    1027,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,  1028,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   612,   432,     0,   433,   434,  3027,
     435,   436,   437,   438,   439,   440,   441,     0,   442,  1029,
    1030,     0,     0,   445,   446,   613,   448,   614,  1031,   450,
     451,   615,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,  1032,     0,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,  1033,
       0,     0,     0,     0,     0,     0,  1034,  1035,  1036,     0,
       0,     0,     0,  1037,     0,  1038,     0,     0,     0,     0,
    1039,  1040,  1041,  1042,   109,   994,   632,   995,   996,   997,
     998,   999,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
    1000,     0,     0,   121,   122,   123,     0,   124,   125,   126,
     127,   128,   129,   130,   131,  1001,   133,  1002,  1003,     0,
     136,   137,   138,   139,   140,   141,  1004,   602,   142,   143,
    1005,  1006,   146,     0,   147,   148,   149,   150,   603,     0,
     604,     0,  1007,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,  1008,  1009,   182,  1010,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   767,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,  1011,
     211,   212,   213,   214,   215,   605,  1012,   217,     0,   218,
     219,  1013,   221,     0,   222,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,   231,     0,  1014,  1015,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,  1016,  1017,     0,  1018,     0,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,   287,   288,  1019,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,  1020,   309,  1021,   311,   312,   313,   314,  1022,
     315,   316,   317,   318,  1023,   607,   320,  1024,   322,   323,
     324,     0,   325,   326,     0,     0,  1025,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,   609,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   610,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,  1026,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,  1027,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,  1028,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   612,   432,     0,   433,   434,  3159,   435,
     436,   437,   438,   439,   440,   441,     0,   442,  1029,  1030,
       0,     0,   445,   446,   613,   448,   614,  1031,   450,   451,
     615,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,  1032,     0,   472,   473,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,  1033,     0,
       0,     0,     0,     0,     0,  1034,  1035,  1036,     0,     0,
       0,     0,  1037,     0,  1038,     0,     0,     0,     0,  1039,
    1040,  1041,  1042,   109,   994,   632,   995,   996,   997,   998,
     999,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,     0,     0,  1000,
       0,     0,   121,   122,   123,     0,   124,   125,   126,   127,
     128,   129,   130,   131,  1001,   133,  1002,  1003,     0,   136,
     137,   138,   139,   140,   141,  1004,   602,   142,   143,  1005,
    1006,   146,     0,   147,   148,   149,   150,   603,     0,   604,
       0,  1007,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
    1008,  1009,   182,  1010,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   767,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,  1011,   211,
     212,   213,   214,   215,   605,  1012,   217,     0,   218,   219,
    1013,   221,     0,   222,     0,   223,   224,     0,   225,   226,
     227,   228,   229,   230,     0,   231,     0,  1014,  1015,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,  1016,  1017,     0,  1018,     0,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,     0,     0,   277,
     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,
     287,   288,  1019,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,  1020,   309,  1021,   311,   312,   313,   314,  1022,   315,
     316,   317,   318,  1023,   607,   320,  1024,   322,   323,   324,
       0,   325,   326,     0,     0,  1025,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,   609,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   610,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,  1026,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,  1027,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,  1028,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   612,   432,     0,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,     0,   442,  1029,  1030,     0,
       0,   445,   446,   613,   448,   614,  1031,   450,   451,   615,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,  1032,     0,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,  1033,     0,     0,
       0,     0,     0,     0,  1034,  1035,  1036,     0,     0,     0,
       0,  1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,
    1041,  1042,   109,   994,   632,   995,   996,   997,   998,   999,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,  1000,     0,
       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,
     129,   130,   131,  1001,   133,  1002,  1003,     0,   136,   137,
     138,   139,   140,   141,  1004,   602,   142,   143,  1005,  1006,
     146,     0,   147,   148,   149,   150,   603,     0,   604,     0,
    1007,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,  1008,
    1009,   182,  1010,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   767,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,  1011,   211,   212,
     213,   214,   215,   605,  1012,   217,     0,   218,   219,  1013,
     221,     0,   222,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,   231,     0,  1014,  1015,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
    1016,  1017,     0,  1018,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,
     288,  1019,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    1020,   309,  1021,   311,   312,   313,   314,  1022,   315,   316,
     317,   318,  1023,   607,   320,  1024,   322,   323,   324,     0,
     325,   326,     0,     0,  1025,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,   609,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   610,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,  1026,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,  1027,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,  1028,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   612,   432,     0,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,     0,   442,  1029,  1030,     0,     0,
     445,   446,   613,   448,   614,  1031,   450,   451,   615,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,  1032,     0,   472,   473,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,  1033,     0,     0,     0,
       0,     0,     0,  1654,  1655,  1036,     0,     0,     0,     0,
    1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,
    1042,   109,  2107,   632,   995,   996,   997,   998,   999,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,     0,  1000,     0,     0,
     121,   122,   123,     0,   124,   125,   126,   127,   128,   129,
     130,   131,  1001,   133,  1002,  1003,     0,   136,   137,   138,
     139,   140,   141,  1004,   602,   142,   143,  1005,  1006,   146,
       0,   147,   148,   149,   150,   603,     0,   604,     0,  1007,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,  1008,  1009,
     182,  1010,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     767,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,  1011,   211,   212,   213,
     214,   215,   605,  1012,   217,     0,   218,   219,  1013,   221,
       0,   222,     0,   223,   224,     0,   225,   226,   227,   228,
     229,   230,     0,   231,     0,  1014,  1015,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,  1016,
    1017,     0,  1018,     0,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,     0,     0,   277,   278,   279,
     280,     0,   281,   282,   283,   284,   285,   286,   287,   288,
    1019,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,  1020,
     309,  1021,   311,   312,   313,   314,  1022,   315,   316,   317,
     318,  1023,   607,   320,  1024,   322,   323,   324,     0,   325,
     326,     0,     0,  1025,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,   609,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   610,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
    1026,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,  1027,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,  1028,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     612,   432,     0,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,     0,   442,  1029,  1030,     0,     0,   445,
     446,   613,   448,   614,  1031,   450,   451,   615,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
    1032,     0,   472,   473,   474,   475,   476,   477,   478,     0,
       0,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,  1033,     0,     0,     0,     0,
       0,     0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,
       0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,  1042,
     109,   994,   632,   995,   996,   997,   998,   999,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,  1000,     0,     0,   121,
     122,   123,     0,   124,   125,   126,   127,   128,   129,   130,
     131,  1001,   133,  1002,  1003,     0,   136,   137,   138,   139,
     140,   141,  1004,   602,   142,   143,  1005,  1006,   146,     0,
     147,   148,   149,   150,   603,     0,   604,     0,  1007,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,  1008,  1009,   182,
    1010,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   767,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,  1011,   211,   212,   213,   214,
     215,   605,  1012,   217,     0,   218,   219,  1013,   221,     0,
     222,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   231,     0,  1014,  1015,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,  1016,  1017,
       0,  1018,     0,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,
       0,   281,   282,   283,   284,   285,   286,   287,   288,  1019,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,  1020,   309,
    1021,   311,   312,   313,   314,  1022,   315,   316,   317,   318,
    1023,   607,   320,  1024,   322,   323,   324,     0,   325,   326,
       0,     0,  1025,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,   609,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     610,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,  1026,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,  1027,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,  1028,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   612,
     432,     0,   433,   434,     0,   435,   436,   437,   438,   439,
     440,   441,     0,   442,  1029,  1030,     0,     0,   445,   446,
     613,   448,   614,  1031,   450,   451,   615,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,  1032,
       0,   472,   473,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,  1033,     0,     0,     0,     0,     0,
       0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,
    2388,     0,     0,     0,     0,  1039,  1040,  1041,  1042,   109,
     994,   632,   995,   996,   997,   998,   999,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
       0,     0,     0,     0,     0,  1000,     0,     0,   121,   122,
     123,     0,   124,   125,   126,   127,   128,   129,   130,   131,
    1001,   133,  1002,  1003,     0,   136,   137,   138,   139,   140,
     141,  1004,   602,   142,   143,  1005,  1006,   146,     0,   147,
     148,   149,   150,   603,     0,   604,     0,  1007,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,   169,   170,  2890,   172,   173,
     174,   175,   176,   177,   178,   179,  1008,  1009,   182,  1010,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   767,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,  1011,   211,   212,   213,   214,   215,
     605,  1012,   217,     0,   218,   219,  1013,   221,     0,   222,
       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,
       0,   231,     0,  2891,  1015,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,  1016,  1017,     0,
    1018,     0,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,     0,     0,   277,   278,   279,   280,     0,
     281,   282,   283,   284,   285,   286,   287,   288,  1019,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,  1020,   309,  1021,
     311,   312,   313,   314,  1022,   315,   316,   317,   318,  1023,
     607,   320,  1024,   322,   323,   324,     0,   325,   326,     0,
       0,  1025,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,   609,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   610,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,  1026,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,  2892,  1027,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,  1028,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   612,   432,
       0,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,     0,   442,  1029,  1030,     0,     0,   445,   446,   613,
     448,   614,  1031,   450,   451,   615,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,  1032,     0,
     472,   473,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,  1033,     0,     0,     0,     0,     0,     0,
    1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,  2893,
       0,     0,     0,     0,  1039,  1040,  1041,  1042,   109,   994,
     632,   995,   996,   997,   998,   999,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,  1000,     0,     0,   121,   122,   123,
       0,   124,   125,   126,   127,   128,   129,   130,  3329,  1001,
     133,  1002,  1003,     0,   136,   137,   138,   139,   140,   141,
    1004,   602,   142,   143,  1005,  1006,   146,     0,   147,   148,
     149,   150,   603,     0,   604,     0,  1007,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,   169,   170,   171,  3330,   173,   174,
     175,   176,   177,   178,   179,  1008,  1009,   182,  1010,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   767,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,  1011,   211,   212,   213,   214,   215,   605,
    1012,   217,     0,   218,   219,  1013,   221,     0,   222,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
     231,     0,  1014,  1015,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,  1016,  1017,     0,  1018,
       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   278,   279,   280,     0,   281,
     282,   283,   284,   285,   286,   287,   288,  1019,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,  1020,   309,  1021,   311,
     312,   313,   314,  1022,   315,   316,   317,   318,  1023,   607,
     320,  1024,   322,   323,   324,     0,   325,   326,     0,     0,
    1025,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,   609,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   610,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,  1026,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,  1027,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
    1028,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   612,   432,     0,
     433,   434,     0,   435,   436,   437,   438,   439,   440,   441,
       0,   442,  1029,  1030,     0,     0,   445,   446,   613,   448,
     614,  1031,   450,   451,   615,   453,   454,  3331,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,  1032,     0,   472,
     473,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,  1033,     0,     0,     0,     0,     0,     0,  1034,
    1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,     0,
       0,     0,     0,  1039,  1040,  1041,  1042,   109,   994,   632,
     995,   996,   997,   998,   999,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,     0,     0,  1000,     0,     0,   121,   122,   123,     0,
     124,   125,   126,   127,   128,   129,   130,   131,  1001,   133,
    1002,  1003,     0,   136,   137,   138,   139,   140,   141,  1004,
     602,   142,   143,  1005,  1006,   146,     0,   147,   148,   149,
     150,   603,     0,   604,     0,  1007,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,   169,   170,   171,  3330,   173,   174,   175,
     176,   177,   178,   179,  1008,  1009,   182,  1010,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   767,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,  1011,   211,   212,   213,   214,   215,   605,  1012,
     217,     0,   218,   219,  1013,   221,     0,   222,     0,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
       0,  1014,  1015,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,  1016,  1017,     0,  1018,     0,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,     0,     0,   277,   278,   279,   280,     0,   281,   282,
     283,   284,   285,   286,   287,   288,  1019,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,  1020,   309,  1021,   311,   312,
     313,   314,  1022,   315,   316,   317,   318,  1023,   607,   320,
    1024,   322,   323,   324,     0,   325,   326,     0,     0,  1025,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
     609,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   610,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,  1026,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,  1027,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,  1028,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   612,   432,     0,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,     0,
     442,  1029,  1030,     0,     0,   445,   446,   613,   448,   614,
    1031,   450,   451,   615,   453,   454,  3331,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,  1032,     0,   472,   473,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,  1033,     0,     0,     0,     0,     0,     0,  1034,  1035,
    1036,     0,     0,     0,     0,  1037,     0,  1038,     0,     0,
       0,     0,  1039,  1040,  1041,  1042,   109,   994,   632,   995,
     996,   997,   998,   999,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
       0,     0,  1000,     0,     0,   121,   122,   123,     0,   124,
     125,   126,   127,   128,   129,   130,   131,  1001,   133,  1002,
    1003,     0,   136,   137,   138,   139,   140,   141,  1004,   602,
     142,   143,  1005,  1006,   146,     0,   147,   148,   149,   150,
     603,     0,   604,     0,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,  1008,  1009,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   767,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,  1011,   211,   212,   213,   214,   215,   605,  1012,   217,
       0,   218,   219,  1013,   221,     0,   222,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   231,     0,
    1014,  1015,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,  1016,  1017,     0,  1018,     0,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   278,   279,   280,     0,   281,   282,   283,
     284,   285,   286,   287,   288,  1019,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,  1020,   309,  1021,   311,   312,   313,
     314,     0,   315,   316,   317,   318,  1023,   607,   320,  1024,
     322,   323,   324,     0,   325,   326,     0,     0,  1025,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,   609,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   610,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,  1026,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,  1027,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,  1028,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   612,   432,     0,   433,   434,
       0,   435,   436,   437,   438,   439,   440,   441,     0,   442,
    1029,  1030,     0,     0,   445,   446,   613,   448,   614,  1031,
     450,   451,   615,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,  1032,     0,   472,   473,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
       0,     0,     0,     0,     0,     0,     0,  1447,  1448,     0,
       0,     0,     0,     0,  1037,     0,  1038,     0,     0,     0,
       0,  1039,  1040,  1041,  1042,   109,   994,   632,   995,   996,
     997,   998,   999,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,  1000,     0,     0,   121,   122,   123,     0,   124,   125,
     126,   127,   128,   129,   130, -1965,  1001,   133,  1002,  1003,
       0,   136,   137,   138,   139,   140,   141,  1004,   602,   142,
     143,  1005,  1006,   146,     0,   147,   148,   149,   150,   603,
       0,   604,     0,  1007,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,   169,   170,   171,  3330,   173,   174,   175,   176,   177,
     178,   179,  1008,  1009,   182,  1010,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   767,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
    1011,   211,   212,   213,   214,   215,   605,  1012,   217,     0,
     218,   219,  1013,   221,     0,   222,     0,   223,   224,     0,
     225,   226,   227,   228, -1965,   230,     0,   231,     0,  1014,
    1015,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242, -1965,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,  1016,  1017,     0,  1018,     0,   266,     0,
       0,   269,   270,   271,   272,   273,   274,   275,   276,     0,
       0,   277,   278,   279, -1965,     0,   281,   282,   283,   284,
     285,   286,   287,   288,  1019,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,  1020,   309,  1021,   311,   312,   313,   314,
       0,   315,   316,     0,   318,  1023,   607,   320,  1024,   322,
     323,   324,     0,   325,   326,     0,     0,  1025,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,   609,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   610,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,  1026,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
    1027,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411, -1965,   413,   414,  1028,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   612,   432,     0,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,     0,   442,  1029,
    1030,     0,     0,   445,   446,   613,   448,   614,  1031,   450,
     451,   615,   453,   454,  3331,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,  1032,     0,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500, -1965,
       0,     0,     0,     0,     0,     0,  1034,  1035,  1036,     0,
       0,     0,     0,  1037,     0,  1038,     0,     0,     0,     0,
    1039,  1040,  1041,  1042,   109,   994,   632,   995,   996,     0,
     998,   999,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
    1000,     0,     0,   121,   122,   123,     0,   124,   125,   126,
     127,   128,   129,   130,   131,  1001,   133,  1002,  1003,     0,
     136,   137,   138,   139,   140,   141,  1004,   602,   142,   143,
    1005,  1006,   146,     0,   147,   148,   149,   150,   603,     0,
     604,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,  1008,  1009,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   767,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,  1011,
     211,   212,   213,   214,   215,   605,  1012,   217,     0,   218,
     219,  1013,   221,     0,   222,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,   231,     0,  1014,  1015,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,  1016,  1017,     0,  1018,     0,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,   287,   288,  1019,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,  1020,   309,  1021,   311,   312,   313,   314,     0,
     315,   316,   317,   318,  1023,   607,   320,  1024,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,   609,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   610,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,  1026,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,  2093,
    2094,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,  1028,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   612,   432,     0,   433,   434,     0,   435,
     436,   437,   438,   439,   440,   441,     0,   442,  1029,  1030,
       0,     0,   445,   446,   613,   448,   614,  1031,   450,   451,
     615,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,  1032,     0,   472,   473,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,     0,     0,
       0,     0,     0,     0,     0,  2095,  2096,     0,     0,     0,
       0,     0,  1037,     0,  1038,     0,     0,     0,     0,  1039,
    1040,  1041,  1042,   109,   994,   632,   995,   996,   997,   998,
     999,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,     0,     0,  1000,
       0,     0,   121,   122,   123,     0,   124,   125,   126,   127,
     128,   129,   130,   131,  1001,   133,  1002,  1003,     0,   136,
     137,   138,   139,   140,   141,  1004,   602,   142,   143,  1005,
    1006,   146,     0,   147,   148,   149,   150,   603,     0,   604,
       0,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
    1008,  1009,   182,     0,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   767,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,  1011,   211,
     212,   213,   214,   215,   605,  1012,   217,     0,   218,   219,
    1013,   221,     0,   222,     0,   223,   224,     0,   225,   226,
     227,   228,   229,   230,     0,   231,     0,  1014,  1015,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,  1016,  1017,     0,  1018,     0,   266,     0,   268,   269,
     270,   271,   272,   273,   274,   275,   276,     0,     0,   277,
     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,
     287,   288,  1019,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,  1020,   309,  1021,   311,   312,   313,   314,     0,   315,
     316,   317,   318,  1023,   607,   320,  1024,   322,   323,   324,
       0,   325,   326,     0,     0,  1025,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,   609,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   610,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,  1026,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,  1027,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,  1028,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   612,   432,     0,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,     0,   442,  1029,  1030,     0,
       0,   445,   446,   613,   448,   614,  1031,   450,   451,   615,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,  1032,     0,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,     0,     0,     0,
       0,     0,     0,     0,  1447,  1448,     0,     0,     0,     0,
       0,  1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,
    1041,  1042,   109,   994,   632,   995,   996,     0,   998,   999,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,  1000,     0,
       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,
     129,   130,   131,  1001,   133,  1002,  1003,     0,   136,   137,
     138,   139,   140,   141,  1004,   602,   142,   143,  1005,  1006,
     146,     0,   147,   148,   149,   150,   603,     0,   604,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,  1008,
    1009,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   767,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,  1011,   211,   212,
     213,   214,   215,   605,  1012,   217,     0,   218,   219,  1013,
     221,     0,   222,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,   231,     0,  1014,  1015,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
    1016,  1017,     0,  1018,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,
     288,  1019,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    1020,   309,  1021,   311,   312,   313,   314,     0,   315,   316,
     317,   318,  1023,   607,   320,  1024,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,   609,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   610,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,  1026,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,  1027,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,  1028,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   612,   432,     0,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,     0,   442,  1029,  1030,     0,     0,
     445,   446,   613,   448,   614,  1031,   450,   451,   615,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,  1032,     0,   472,   473,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,     0,     0,     0,     0,
       0,     0,   109,   994,   632,   995,   996,   997,   998,   999,
    1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,
    1042,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,  1000,     0,
       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,
     129,   130,     0,  1001,   133,  1002,  1003,     0,   136,   137,
     138,   139,   140,   141,  1004,   602,   142,   143,  1005,  1006,
     146,     0,   147,   148,   149,   150,   603,     0,   604,     0,
    1007,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,  1008,
    1009,   182,  1010,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   767,   198,   199,     0,   200,   201,   202,     0,   203,
       0,   205,     0,   206,   207,   208,   209,  1011,   211,   212,
     213,   214,   215,   605,  1012,   217,     0,   218,   219,  1013,
     221,     0,   222,     0,   223,   224,     0,   225,   226,   227,
     228,     0,   230,     0,   231,     0,  1014,  1015,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
    1016,  1017,     0,  1018,     0,   266,     0,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   278,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,  1019,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    1020,   309,  1021,   311,   312,   313,   314,     0,   315,   316,
       0,   318,  1023,   607,   320,  1024,   322,   323,   324,     0,
     325,   326,     0,     0,  1025,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,   609,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   610,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,  1026,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,  1027,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   413,   414,  1028,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   612,   432,     0,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,     0,   442,  1029,  1030,     0,     0,
     445,   446,   613,   448,   614,  1031,   450,   451,   615,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,  1032,     0,   472,   473,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,     0,     0,     0,     0,
       0,     0,     0,  1034,  1035,  1036,     0,   837,  1407,   632,
    1037,     0,  1038,   998,     0,     0,     0,  1039,  1040,  1041,
    1042,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,   838,     0,     0,     0,     0,   839,   122,   123,     0,
     124,   125,   126,   840,   128,   129,   130,   841,   842,   843,
     844,   845,     0,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   846,   847,   146,     0,   147,   148,   149,
     150,   848,     0,   849,     0,   850,   154,   155,   156,   157,
     158,   851,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,   852,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   853,   854,   182,     0,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,   855,   211,   212,   213,   214,   215,   856,  1408,
     217,     0,   218,   219,   857,   221,     0,   222,     0,   223,
     858,     0,   859,   226,   227,   860,   861,   230,     0,   231,
       0,   862,   863,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   864,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   865,   866,
     258,   259,   260,   261,   262,   867,   868,     0,   869,     0,
     266,   870,   871,   269,   872,   271,   272,   273,   274,   275,
     276,     0,     0,   277,   873,   279,   874,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   875,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   876,   877,   878,   311,   312,
     313,   879,     0,   315,   316,   880,   318,     0,   881,   320,
     882,   322,   323,   324,     0,   325,   326,  1409,     0,   327,
     328,   329,     0,     0,   330,   331,   883,   884,   334,   885,
     886,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   887,   888,   351,
     352,   889,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   890,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   891,   387,
     388,   389,   892,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,   893,   402,   403,   404,   405,
     406,   407,   894,   409,   410,   411,   895,   413,   414,   896,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   897,   430,   898,   432,     0,   433,
     434,     0,   435,   899,   437,   438,   439,   440,   441,     0,
     442,   900,   901,     0,     0,   445,   446,   902,   448,   903,
    1410,   450,   451,   904,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,  1253,   906,     0,   472,   907,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   908,   909,   910,   911,
     912,   913,   914,   915,   916,   917,   918,   497,   498,   499,
     500,     0,     0,     0,     0,     0,     0,     0,  1411,  1412,
    2278,     0,   109,   994,   632,   995,   996,  2279,   998,     0,
       0,     0,     0,     0,     0,  1042,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,  1000,     0,
       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,
     129,   130,   131,  1001,   133,  1002,  1003,     0,   136,   137,
     138,   139,   140,   141,  1004,     0,   142,   143,  1005,  1006,
     146,     0,   147,   148,   149,   150,   151,     0,   152,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,  1008,
    1009,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   767,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,  1011,   211,   212,
     213,   214,   215,   216,  1012,   217,     0,   218,   219,  1013,
     221,     0,   222,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,   231,  2910,  1014,  1015,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
    1016,  1017,     0,  1018,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    1020,   309,  1021,   311,   312,   313,   314,     0,   315,   316,
     317,   318,  1023,   319,   320,  1024,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,  1026,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,  1028,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,     0,   442,  1029,  1030,     0,     0,
     445,   446,   447,   448,   449,  1031,   450,   451,   452,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,  1032,     0,   472,   473,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,     0,     0,     0,     0,
     109,   994,   632,   995,   996,     0,   998,     0,     0,     0,
    1037,     0,  2630,     0,     0,     0,     0,  1039,  1040,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,  1000,     0,     0,   121,
     122,   123,     0,   124,   125,   126,   127,   128,   129,   130,
     131,  1001,   133,  1002,  1003,     0,   136,   137,   138,   139,
     140,   141,  1004,     0,   142,   143,  1005,  1006,   146,     0,
     147,   148,   149,   150,   151,     0,   152,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,  1008,  1009,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   767,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,  1011,   211,   212,   213,   214,
     215,   216,  1012,   217,     0,   218,   219,  1013,   221,     0,
     222,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   231,     0,  1014,  1015,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,  1016,  1017,
       0,  1018,     0,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,  1020,   309,
    1021,   311,   312,   313,   314,     0,   315,   316,   317,   318,
    1023,   319,   320,  1024,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,  1026,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,  1028,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,   433,   434,     0,   435,   436,   437,   438,   439,
     440,   441,     0,   442,  1029,  1030,     0,     0,   445,   446,
     447,   448,   449,  1031,   450,   451,   452,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,  1032,
       0,   472,   473,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,     0,     0,     0,     0,   751,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1037,     0,
    2630,     0,     0,     0,     0,  1039,  1040,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,   752,     0,     0,     0,     0,   753,   122,   123,
       0,   124,   125,   126,   754,   128,   129,   130,     0,   755,
     756,   757,   758,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   759,   760,   146,     0,   147,   148,
     149,   150,     0,     0,   761,     0,   762,   154,   155,   156,
     157,   158,   763,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,   764,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   765,   766,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   767,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,     0,   211,   212,   213,   214,   215,     0,
       0,   217,     0,   218,   219,   768,   221,     0,   222,     0,
     223,   769,     0,   770,   226,   227,     0,   771,   230,     0,
     231,     0,     0,     0,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   773,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   774,
       0,   258,   259,   260,   261,   262,   775,   776,     0,   777,
       0,   266,   778,   779,   269,   780,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   781,   279,   782,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   783,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   784,   785,   786,   311,
     312,   313,     0,     0,   315,   316,   787,   318,     0,     0,
     320,   788,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,     0,   789,   334,
     790,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,     0,   791,
     351,   352,     0,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   792,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   793,
     387,   388,   389,   794,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,   795,   402,   403,   404,
     405,   406,   407,   796,   409,   410,   411,   797,   413,   414,
     798,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   799,   430,     0,   432,     0,
     433,   434,     0,   435,   800,   437,   438,   439,   440,   441,
       0,   442,   801,   802,     0,     0,   445,   446,     0,   448,
       0,     0,   450,   451,   803,   453,   454,   455,   456,   457,
     804,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,     0,   805,     0,   472,
     806,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   497,   498,
     499,   500,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0, -1048,
       0,     0, -1048,     0,   953,     0,     0,   122,   123,     0,
     124,   125,   126,     0,   128,   129,   130,   131,   132,     0,
     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,
     150,   151,     0,     0,     0,   153,   154,   155,   156,   157,
     158,     0,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,   -57,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   -57,   218,   219,   220,   221,   -57,   222,     0,   223,
       0,     0,     0,   226,   227,   509,     0,   230,     0,   231,
       0,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,
     258,   259,   260,   261,   262,   263,   264,   -57,   265,     0,
     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,
     276,     0,     0,   277,     0,   279,     0,   -57,   281,   282,
     283,   284,   285,   286,   287,   288,   510,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,
     321,   322,   323,   324,   -57,   325,   326,     0,     0,   327,
     328,   329,     0,   -57,   330,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   349,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   511,   430,   431,   432,     0,   433,
     434,     0,   435,     0,   437,   438,   439,   440,   441,     0,
     442,   443,   444,     0,     0,   445,   446,   447,   448,   449,
       0,   450,   451,   452,   453,   454,   455,   456,   457,   -57,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,     0,   472,     0,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   508,     0,   530,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1107,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,     0,   124,   125,   126,     0,   128,   129,
     130,   131,   132,     0,   134,   135,     0,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,
       0,   147,   148,   149,   150,   151,     0,     0,     0,   153,
     154,   155,   156,   157,   158,     0,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,
       0,   222,     0,   223,     0,     0,     0,   226,   227,   509,
       0,   230,     0,   231,     0,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,
     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,
       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     510,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   511,   430,
     431,   432,     0,   433,   434,     0,   435,     0,   437,   438,
     439,   440,   441,     0,   442,   443,   444,     0,     0,   445,
     446,   447,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,     0,   472,     0,   474,   475,   476,   477,   478,     0,
       0,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   837,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2363,  3080,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     3,     4,     0,   838,
       0,     0,     0,     0,   839,   122,   123,     0,   124,   125,
     126,   840,   128,   129,   130,   841,   842,   843,   844,   845,
       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   846,   847,   146,     0,   147,   148,   149,   150,   848,
       0,   849,     0,   850,   154,   155,   156,   157,   158,   851,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,   852,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   853,   854,   182,     0,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
     855,   211,   212,   213,   214,   215,   856,     0,   217,     0,
     218,   219,   857,   221,     0,   222,     0,   223,   858,    21,
     859,   226,   227,   860,   861,   230,     0,   231,     0,   862,
     863,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   864,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   865,   866,   258,   259,
     260,   261,   262,   867,   868,     0,   869,     0,   266,   870,
     871,   269,   872,   271,   272,   273,   274,   275,   276,     0,
       0,   277,   873,   279,   874,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   875,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   876,   877,   878,   311,   312,   313,   879,
       0,   315,   316,   880,   318,     0,   881,   320,   882,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,   883,   884,   334,   885,   886,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    25,
      26,    27,     0,   347,   348,   887,   888,   351,   352,   889,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   890,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   891,   387,   388,   389,
     892,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    32,   893,   402,   403,   404,   405,   406,   407,
     894,   409,   410,   411,   895,   413,   414,   896,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   897,   430,   898,   432,     0,   433,   434,    37,
     435,   899,   437,   438,   439,   440,   441,     0,   442,   900,
     901,     0,     0,   445,   446,   902,   448,   903,     0,   450,
     451,   904,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,    39,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   905,   906,     0,   472,   907,   474,   475,
     476,   477,   478,     0,     0,   479,     0,    43,   480,   481,
     482,   483,   484,   485,   908,   909,   910,   911,   912,   913,
     914,   915,   916,   917,   918,   497,   498,   499,   500,     0,
     109,    44,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,     0,     0,     0,   121,
     122,   123,     0,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,     0,   602,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   603,     0,   604,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   605,     0,   217,     0,   218,   219,   220,   221,     0,
     222,     0,   223,   224,    21,   225,   226,   227,   228,   229,
     230,     0,   231,     0,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   606,     0,   277,   278,   279,   280,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,     0,   315,   316,   317,   318,
       0,   607,   320,   321,   322,   323,   324,     0,   325,   326,
       0,   608,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,   609,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    25,    26,    27,     0,   347,   348,
     610,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   611,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    32,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   612,
     432,     0,   433,   434,    37,   435,   436,   437,   438,   439,
     440,   441,     0,   442,   443,   444,     0,     0,   445,   446,
     613,   448,   614,     0,   450,   451,   615,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,    39,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   616,   471,
       0,   472,   473,   474,   475,   476,   477,   478,     0,     0,
     479,     0,    43,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,     0,   109,    44,   530,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     617,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,     0,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
       0,   136,   137,   138,   139,   140,   141,     0,   602,   142,
     143,   144,   145,   146,     0,   147,   148,   149,   150,   603,
       0,   604,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   605,     0,   217,     0,
     218,   219,   220,   221,     0,   222,     0,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   606,
       0,   277,   278,   279,   280,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
       0,   315,   316,   317,   318,     0,   607,   320,   321,   322,
     323,   324,     0,   325,   326,     0,   608,   327,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,   609,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   610,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   611,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   612,   432,     0,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,     0,   442,   443,
     444,     0,     0,   445,   446,   613,   448,   614,     0,   450,
     451,   615,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   616,   471,     0,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   109,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   617,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,
     123,     0,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,     0,   136,   137,   138,   139,   140,
     141,     0,   602,   142,   143,   144,   145,   146,     0,   147,
     148,   149,   150,   603,     0,   604,     0,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     605,     0,   217,     0,   218,   219,   220,   221,     0,   222,
       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,
       0,   231,     0,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,     0,     0,   277,   278,   279,   280,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,     0,   315,   316,   317,   318,     0,
     607,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,   609,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   610,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   611,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   612,   432,
       0,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,     0,   442,   443,   444,     0,     0,   445,   446,   613,
     448,   614,     0,   450,   451,   615,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,     0,
     472,   473,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   109,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,
       0,     0,   121,   122,   123,     0,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,     0,   136,
     137,   138,   139,   140,   141,     0,   602,   142,   143,   144,
     145,   146,     0,   147,   148,   149,   150,   603,     0,   604,
       0,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   605,     0,   217,     0,   218,   219,
     220,   221,     0,   222,     0,   223,   224,     0,   225,   226,
     227,   228,   229,   230,     0,   231,     0,   232,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,     0,     0,   277,
     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,     0,   315,
     316,   317,   318,     0,   607,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,   609,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   610,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   612,   432,     0,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,     0,   442,   443,   444,     0,
       0,   445,   446,   613,   448,   614,     0,   450,   451,   615,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,     0,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3162,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,   702,   118,   119,   120,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,     0,
     124,   125,   126,     0,   128,   129,   130,   131,   132,     0,
     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,
     150,   151,     0,     0,     0,   153,   154,   155,   156,   157,
     158,     0,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,
       0,    21,     0,   226,   227,   509,     0,   230,     0,   231,
       0,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,
     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   510,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,
     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    25,    26,    27,     0,   347,   348,   349,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    32,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   511,   430,   431,   432,     0,   433,
     434,    37,   435,     0,   437,   438,   439,   440,   441,     0,
     442,   703,   444,     0,     0,   704,   446,   447,   448,   449,
       0,   450,   451,   452,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,    39,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   616,   471,     0,   472,     0,
     474,   475,   476,   477,   478,     0,     0,   479,     0,    43,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   508,     0,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,     0,   124,   125,   126,     0,   128,   129,
     130,   131,   132,     0,   134,   135,     0,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,
       0,   147,   148,   149,   150,   151,     0,     0,     0,   153,
     154,   155,   156,   157,   158,     0,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,
       0,   222,     0,   223,     0,    21,     0,   226,   227,   509,
       0,   230,     0,   231,     0,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,
     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,
       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     510,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    25,    26,    27,     0,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    32,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   511,   430,
     431,   432,     0,   433,   434,    37,   435,     0,   437,   438,
     439,   440,   441,     0,   442,   443,   444,     0,     0,   445,
     446,   447,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,    39,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   616,
     471,     0,   472,     0,   474,   475,   476,   477,   478,     0,
       0,   479,     0,    43,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   508,    44,   530,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,     0,   124,
     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,
     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,
     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,
       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,
       0,     0,   226,   227,   509,     0,   230,     0,   231,     0,
     232,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   510,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   511,   430,   431,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,     0,   472,     0,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     508,     0,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   938,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,
     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,
     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,
     222,     0,   223,     0,     0,     0,   226,   227,   509,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   510,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   511,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
       0,   472,     0,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   508,     0,   530,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1499,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,
       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,
       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,
     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,
     226,   227,   509,     0,   230,     0,   231,     0,   232,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   510,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   511,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,     0,   472,     0,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   508,     0,
     530,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2119,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,
       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,
     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,
     223,     0,     0,     0,   226,   227,   509,     0,   230,     0,
     231,     0,   232,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   510,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   511,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,     0,   472,
       0,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   508,     0,   530,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2363,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,
     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,
     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,
     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,
     509,     0,   230,     0,   231,     0,   232,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   510,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   511,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,     0,   472,     0,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   508,     0,   530,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2471,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,     0,   124,
     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,
     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,
     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,
       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,
       0,     0,   226,   227,   509,     0,   230,     0,   231,     0,
     232,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   510,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   511,   430,   431,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,     0,   472,     0,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     508,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3074,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,
     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,
     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,
     222,     0,   223,     0,     0,     0,   226,   227,   509,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   510,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   511,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
       0,   472,     0,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   508,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1977,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,
       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,
       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,
     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,
     226,   227,   509,     0,   230,     0,   231,     0,   232,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   510,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   511,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,     0,   472,     0,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   508,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2079,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,
       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,
     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,
     223,     0,     0,     0,   226,   227,   509,     0,   230,     0,
     231,     0,   232,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   510,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   511,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,     0,   472,
       0,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,     0,  2776,  1407,   632,     0,     0,  1957,   998,
       0,     0,     0,     0,     0,  1958,  1959,     0,  2943,  1960,
    1961,  1962,   110,   111,   112,   113,   114,   115,   116,   117,
    1186,   118,   119,   120,  1187,  1188,  1189,  2777,  1190,  1191,
    1192,  1193,  2778,   122,   123,  1194,   124,   125,   126,  2779,
     128,   129,   130,     0,   755,  2780,   757,   758,  1195,   136,
     137,   138,   139,   140,   141,  1196,  1197,   142,   143,   759,
     760,   146,  1198,   147,   148,   149,   150,     0,  1199,  2781,
    1200,  2782,   154,   155,   156,   157,   158,  2783,   160,   161,
     162,  1201,   163,   164,   165,   166,   167,   168,  1202,  2784,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     765,   766,   182,  1203,   183,  1204,   184,   185,   186,   187,
     188,   189,  1205,   190,   191,   192,   193,   194,  1206,  1207,
     195,   196,   767,   198,   199,  1208,   200,   201,   202,  1209,
     203,   204,   205,  1210,   206,   207,   208,   209,     0,   211,
     212,   213,   214,   215,     0,  1211,   217,  1212,   218,   219,
     768,   221,  1213,   222,  1214,   223,  2785,  1215,  2786,   226,
     227,  2787,  2788,   230,  1216,   231,  1217,     0,     0,   234,
     235,  1218,   236,   237,   238,   239,   240,   241,   242,  2789,
     244,   245,   246,   247,  1219,   248,   249,   250,   251,   252,
     253,   254,  1220,   255,  2790,     0,   258,   259,   260,   261,
     262,   775,   776,  1221,   777,  1222,   266,  2791,  2792,   269,
    2793,   271,   272,   273,   274,   275,   276,  1223,  1224,   277,
    2794,   279,  2795,  1225,   281,   282,   283,   284,   285,   286,
     287,   288,  2796,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   784,  2797,   786,   311,   312,   313,  2798,  1226,   315,
     316,  2799,   318,  1227,     0,   320,   788,   322,   323,   324,
    1228,   325,   326,  1229,  1230,  2800,   328,   329,  1231,  1232,
     330,   331,     0,  2801,   334,  2802,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,  1233,  1234,  1235,
    1236,   347,   348,     0,  2803,   351,   352,     0,   354,   355,
     356,  1237,   357,   358,   359,   360,   361,   362,  1238,   363,
     364,   365,   792,   367,   368,   369,   370,  1239,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,  1240,   384,   385,  2804,   387,   388,   389,   794,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
    1241,  2805,   402,   403,   404,   405,   406,   407,  2806,   409,
     410,   411,  2807,   413,   414,   798,   416,  1242,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
    2808,   430,     0,   432,  1243,   433,   434,  1244,   435,  2809,
     437,   438,   439,   440,   441,  1245,   442,   801,   802,  1246,
    1247,   445,   446,     0,   448,     0,  1248,   450,   451,  2810,
     453,   454,   455,   456,   457,  2811,  1250,   458,   459,   460,
    1251,   461,   462,   463,   464,  1252,   465,   466,   467,   468,
     469,     0,   805,  1254,   472,  2812,   474,   475,   476,   477,
     478,  1255,  1256,   479,  1257,  1258,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   497,   498,   499,   500,     0,   508,     0,
    1963,  1964,  1965,  1957,  2813,  2814,  1968,  1969,  1970,  1971,
    1958,  1959,     0,     0,  1960,  1961,  1962,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,
       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,
     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,
     223,     0,     0,     0,   226,   227,   509,     0,   230,     0,
     231,     0,   232,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   510,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   511,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,     0,   472,
       0,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,     0,     0,     0,  1963,  1964,  1965,     0,  1966,
    1967,  1968,  1969,  1970,  1971,  1553,     0,     0,  1554,     0,
       0,     0,  1555,  1556,  1557,  1558,  1559,  1560,  1561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1562,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1564,     0,  1553,     0,     0,  1554,     0,
    1565,     0,  1555,  1556,  1557,  1558,  1559,  1560,  1561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1562,     0,  1566,     0,     0,     0,     0,
       0,     0,     0,  1564,     0,  1553,     0,     0,  1554,     0,
    1565,     0,  1555,  1556,  1557,  1558,  1559,  1560,  1561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1562,     0,  1566,     0,     0,     0,     0,
       0,     0,     0,  1564,     0,  1553,     0,     0,  1554,     0,
    1565,     0,  1555,  1556,  1557,  1558,  1559,  1560,  1561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1562,     0,  1566,     0,     0,     0,     0,
       0,     0,     0,  1564,     0,  1553,     0,     0,  1554,  1567,
    1565,     0,  1555,  1556,  1557,  1558,  1559,  1560,  1561,     0,
       0,     0,     0,     0,     0,     0,  1568,     0,     0,     0,
       0,  1569,     0,  1562,     0,  1566,     0,     0,     0,     0,
       0,     0,     0,  1564,     0,     0,     0,     0,     0,  1567,
    1565,     0,     0,     0,  1570,  1571,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1568,     0,     0,  1572,
       0,  1569,     0,     0,     0,  1566,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1567,
       0,     0,     0,     0,  1570,  1571,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1573,  1568,     0,  1574,  1572,
       0,  1569,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1575,     0,     0,  1576,     0,     0,     0,  1567,
       0,     0,     0,     0,  1570,  1571,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1573,  1568,     0,  1574,  1572,
       0,  1569,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1575,     0,     0,  1576,     0,     0,     0,  1567,
       0,     0,     0,     0,  1570,  1571,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1573,  1568,     0,  1574,  1572,
       0,  1569,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1575,     0,     0,  1576,     0,     0,     0,     0,
       0,     0,     0,     0,  1570,  1571,     0,     0,     0,  1577,
       0,     0,     0,     0,     0,  1573,     0,     0,  1574,  1572,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1575,     0,     0,  1576,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1577,
       0,     0,     0,     0,     0,  1573,     0,     0,  1574,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1575,     0,     0,  1576,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1577,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1578,     0,     0,  1579,  1580,  1581,
       0,  1582,  1583,  1584,  1585,  1586,  1587,     0,     0,  1577,
       0,  2380,     0,     0,     0,     0,     0,     0,     0,  1553,
       0,     0,  1554,     0,     0,     0,  1555,  1556,  1557,  1558,
    1559,  1560,  1561,     0,  1578,     0,     0,  1579,  1580,  1581,
       0,  1582,  1583,  1584,  1585,  1586,  1587,  1562,     0,  1577,
       0,  2397,     0,     0,     0,     0,     0,  1564,     0,  1553,
       0,     0,  1554,     0,  1565,     0,  1555,  1556,  1557,  1558,
    1559,  1560,  1561,     0,  1578,     0,     0,  1579,  1580,  1581,
       0,  1582,  1583,  1584,  1585,  1586,  1587,  1562,     0,  1566,
       0,  2603,     0,     0,     0,     0,     0,  1564,     0,  1553,
       0,     0,  1554,     0,  1565,     0,  1555,  1556,  1557,  1558,
    1559,  1560,  1561,     0,  1578,     0,     0,  1579,  1580,  1581,
       0,  1582,  1583,  1584,  1585,  1586,  1587,  1562,     0,  1566,
       0,  2655,     0,     0,     0,     0,     0,  1564,     0,  1553,
       0,     0,  1554,     0,  1565,     0,  1555,  1556,  1557,  1558,
    1559,  1560,  1561,     0,  1578,     0,     0,  1579,  1580,  1581,
       0,  1582,  1583,  1584,  1585,  1586,  1587,  1562,     0,  1566,
       0,  2722,     0,     0,     0,     0,     0,  1564,     0,  1553,
       0,     0,  1554,  1567,  1565,     0,  1555,  1556,  1557,  1558,
    1559,  1560,  1561,     0,     0,     0,     0,     0,     0,     0,
    1568,     0,     0,     0,     0,  1569,     0,  1562,     0,  1566,
       0,     0,     0,     0,     0,     0,     0,  1564,     0,     0,
       0,     0,     0,  1567,  1565,     0,     0,     0,  1570,  1571,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1568,     0,     0,  1572,     0,  1569,     0,     0,     0,  1566,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1567,     0,     0,     0,     0,  1570,  1571,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1573,
    1568,     0,  1574,  1572,     0,  1569,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1575,     0,     0,  1576,
       0,     0,     0,  1567,     0,     0,     0,     0,  1570,  1571,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1573,
    1568,     0,  1574,  1572,     0,  1569,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1575,     0,     0,  1576,
       0,     0,     0,  1567,     0,     0,     0,     0,  1570,  1571,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1573,
    1568,     0,  1574,  1572,     0,  1569,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1575,     0,     0,  1576,
       0,     0,     0,     0,     0,     0,     0,     0,  1570,  1571,
       0,     0,     0,  1577,     0,     0,     0,     0,     0,  1573,
       0,     0,  1574,  1572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1575,     0,     0,  1576,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1577,     0,     0,     0,     0,     0,  1573,
       0,     0,  1574,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1575,     0,     0,  1576,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1577,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,
       0,  1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,  1586,
    1587,     0,     0,  1577,     0,  2936,     0,     0,     0,     0,
       0,     0,     0,  1553,     0,     0,  1554,     0,     0,     0,
    1555,  1556,  1557,  1558,  1559,  1560,  1561,     0,  1578,     0,
       0,  1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,  1586,
    1587,  1562,     0,  1577,     0,  2942,     0,     0,     0,     0,
       0,  1564,     0,  1553,     0,     0,  1554,     0,  1565,     0,
    1555,  1556,  1557,  1558,  1559,  1560,  1561,     0,  1578,     0,
       0,  1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,  1586,
    1587,  1562,     0,  1566,     0,  3091,     0,     0,     0,     0,
       0,  1564,     0,  1553,     0,     0,  1554,     0,  1565,     0,
    1555,  1556,  1557,  1558,  1559,  1560,  1561,     0,  1578,     0,
       0,  1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,  1586,
    1587,  1562,     0,  1566,     0,  3113,     0,     0,     0,     0,
       0,  1564,     0,  1553,     0,     0,  1554,     0,  1565,     0,
    1555,  1556,  1557,  1558,  1559,  1560,  1561,     0,  1578,     0,
       0,  1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,  1586,
    1587,  1562,     0,  1566,     0,  3211,     0,     0,     0,     0,
       0,  1564,     0,  1553,     0,     0,  1554,  1567,  1565,     0,
    1555,  1556,  1557,  1558,  1559,  1560,  1561,     0,     0,     0,
       0,     0,     0,     0,  1568,     0,     0,     0,     0,  1569,
       0,  1562,     0,  1566,     0,     0,     0,     0,     0,     0,
       0,  1564,     0,     0,     0,     0,     0,  1567,  1565,     0,
       0,     0,  1570,  1571,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1568,     0,     0,  1572,     0,  1569,
       0,     0,     0,  1566,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1567,     0,     0,
       0,     0,  1570,  1571,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1573,  1568,     0,  1574,  1572,     0,  1569,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1575,     0,     0,  1576,     0,     0,     0,  1567,     0,     0,
       0,     0,  1570,  1571,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1573,  1568,     0,  1574,  1572,     0,  1569,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1575,     0,     0,  1576,     0,     0,     0,  1567,     0,     0,
       0,     0,  1570,  1571,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1573,  1568,     0,  1574,  1572,     0,  1569,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1575,     0,     0,  1576,     0,     0,     0,     0,     0,     0,
       0,     0,  1570,  1571,     0,     0,     0,  1577,     0,     0,
       0,     0,     0,  1573,     0,     0,  1574,  1572,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1575,     0,     0,  1576,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1577,     0,     0,
       0,     0,     0,  1573,     0,     0,  1574,     0,     0,     0,
       0,     0,     0,     0,  1553,     0,     0,  1554,     0,     0,
    1575,  1555,  1556,  1576,     0,  1559,  1560,  1561,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1577,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1564,     0,     0,     0,     0,     0,     0,  1565,
       0,     0,  1578,     0,     0,  1579,  1580,  1581,     0,  1582,
    1583,  1584,  1585,  1586,  1587,     0,     0,  1577,     0,  3266,
       0,     0,     0,     0,  1566,     0,     0,     0,  1553,     0,
       0,  1554,     0,     0,     0,  1555,  1556,  1557,  1558,  1559,
    1560,  1561,  1578,     0,     0,  1579,  1580,  1581,     0,  1582,
    1583,  1584,  1585,  1586,  1587,     0,  1562,  1577,     0,  3288,
       0,     0,     0,     0,     0,     0,  1564,     0,     0,     0,
       0,     0,     0,  1565,     0,     0,     0,     0,     0,     0,
       0,     0,  1578,     0,     0,  1579,  1580,  1581,     0,  1582,
    1583,  1584,  1585,  1586,  1587,     0,     0,  1738,  1566,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1567,     0,
       0,     0,  1578,     0,     0,  1579,  1580,  1581,     0,  1582,
    1583,  1584,  1585,  1586,  1587,  1568,     0,  2676,     0,     0,
    1569,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1578, -1965, -1965,  1579,  1580,  1581,     0,  1582,
    1583,  1584,  1585,  1586,  1587,     0,     0,  3083,  1572,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1567,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1568,
       0,     0,     0,     0,  1569,     0,     0, -1965,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1575,     0,     0,     0,     0,     0,  1570,  1571,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1572,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1573,     0,
       0,  1574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1575,     0,     0,  1576,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1577,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1577,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1578,     0,     0,  1579,  1580,  1581,     0,
    1582,  1583,  1584,  1585,  1586,  1587,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1185,     0,     0,  1578,     0,     0,
    1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,  1586,  1587,
       0,     0,  3252,   110,   111,   112,   113,   114,   115,   116,
     117,  1186,   118,   119,   120,  1187,  1188,  1189,   838,  1190,
    1191,  1192,  1193,   839,   122,   123,  1194,   124,   125,   126,
     840,   128,   129,   130,   841,   842,   843,   844,   845,  1195,
     136,   137,   138,   139,   140,   141,  1196,  1197,   142,   143,
     846,   847,   146,  1198,   147,   148,   149,   150,   848,  1199,
     849,  1200,   850,   154,   155,   156,   157,   158,   851,   160,
     161,   162,  1201,   163,   164,   165,   166,   167,   168,  1202,
     852,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   853,   854,   182,  1203,   183,  1204,   184,   185,   186,
     187,   188,   189,  1205,   190,   191,   192,   193,   194,  1206,
    1207,   195,   196,   197,   198,   199,  1208,   200,   201,   202,
    1209,   203,   204,   205,  1210,   206,   207,   208,   209,   855,
     211,   212,   213,   214,   215,   856,  1211,   217,  1212,   218,
     219,   857,   221,  1213,   222,  1214,   223,   858,  1215,   859,
     226,   227,   860,   861,   230,  1216,   231,  1217,   862,   863,
     234,   235,  1218,   236,   237,   238,   239,   240,   241,   242,
     864,   244,   245,   246,   247,  1219,   248,   249,   250,   251,
     252,   253,   254,  1220,   255,   865,   866,   258,   259,   260,
     261,   262,   867,   868,  1221,   869,  1222,   266,   870,   871,
     269,   872,   271,   272,   273,   274,   275,   276,  1223,  1224,
     277,   873,   279,   874,  1225,   281,   282,   283,   284,   285,
     286,   287,   288,   875,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   876,   877,   878,   311,   312,   313,   879,  1226,
     315,   316,   880,   318,  1227,   881,   320,   882,   322,   323,
     324,  1228,   325,   326,  1229,  1230,   327,   328,   329,  1231,
    1232,   330,   331,   883,   884,   334,   885,   886,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,  1233,  1234,
    1235,  1236,   347,   348,   887,   888,   351,   352,   889,   354,
     355,   356,  1237,   357,   358,   359,   360,   361,   362,  1238,
     363,   364,   365,   890,   367,   368,   369,   370,  1239,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,  1240,   384,   385,   891,   387,   388,   389,   892,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,  1241,   893,   402,   403,   404,   405,   406,   407,   894,
     409,   410,   411,   895,   413,   414,   896,   416,  1242,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   897,   430,   898,   432,  1243,   433,   434,  1244,   435,
     899,   437,   438,   439,   440,   441,  1245,   442,   900,   901,
    1246,  1247,   445,   446,   902,   448,   903,  1248,   450,   451,
     904,   453,   454,   455,   456,   457,  1249,  1250,   458,   459,
     460,  1251,   461,   462,   463,   464,  1252,   465,   466,   467,
     468,   469,  1253,   906,  1254,   472,   907,   474,   475,   476,
     477,   478,  1255,  1256,   479,  1257,  1258,   480,   481,   482,
     483,   484,   485,   908,   909,   910,   911,   912,   913,   914,
     915,   916,   917,   918,   497,   498,   499,   500,   508,     0,
       0,     0,     0,     0,     0,     0,     0,  1988,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,
       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,
     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,
     223,     0,     0,     0,   226,   227,   509,     0,   230,     0,
     231,     0,   232,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   510,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   511,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,     0,   472,
       0,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   508,     0,     0,     0,     0,     0,     0,     0,
       0,  2596,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,
     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,
     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,
     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,
     509,     0,   230,     0,   231,     0,   232,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   510,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   511,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,     0,   472,     0,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   837,  1407,   632,     0,
       0,     0,   998,     0,     0,  2599,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
     838,     0,     0,     0,     0,   839,   122,   123,     0,   124,
     125,   126,   840,   128,   129,   130,   841,   842,   843,   844,
     845,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   846,   847,   146,     0,   147,   148,   149,   150,
     848,     0,   849,     0,   850,   154,   155,   156,   157,   158,
     851,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,   852,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   853,   854,   182,  1610,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,   855,   211,   212,   213,   214,   215,   856,  1408,   217,
       0,   218,   219,   857,   221,     0,   222,     0,   223,   858,
       0,   859,   226,   227,   860,   861,   230,     0,   231,     0,
     862,   863,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   864,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   865,   866,   258,
     259,   260,   261,   262,   867,   868,     0,   869,     0,   266,
     870,   871,   269,   872,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   873,   279,   874,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   875,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   876,   877,   878,   311,   312,   313,
     879,     0,   315,   316,   880,   318,     0,   881,   320,   882,
     322,   323,   324,     0,   325,   326,  1409,     0,   327,   328,
     329,     0,     0,   330,   331,   883,   884,   334,   885,   886,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   887,   888,   351,   352,
     889,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   890,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   891,   387,   388,
     389,   892,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,   893,   402,   403,   404,   405,   406,
     407,   894,   409,   410,   411,   895,   413,   414,   896,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   897,   430,   898,   432,     0,   433,   434,
       0,   435,   899,   437,   438,   439,   440,   441,     0,   442,
     900,   901,     0,     0,   445,   446,   902,   448,   903,  1410,
     450,   451,   904,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,  1253,   906,     0,   472,   907,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   908,   909,   910,   911,   912,
     913,   914,   915,   916,   917,   918,   497,   498,   499,   500,
     837,  1407,   632,     0,     0,     0,   998,  1411,  1412,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,   838,     0,     0,     0,     0,   839,
     122,   123,     0,   124,   125,   126,   840,   128,   129,   130,
     841,   842,   843,   844,   845,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   846,   847,   146,     0,
     147,   148,   149,   150,   848,     0,   849,     0,   850,   154,
     155,   156,   157,   158,   851,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,   852,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   853,   854,   182,
    1612,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   855,   211,   212,   213,   214,
     215,   856,  1408,   217,     0,   218,   219,   857,   221,     0,
     222,     0,   223,   858,     0,   859,   226,   227,   860,   861,
     230,     0,   231,     0,   862,   863,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   864,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   865,   866,   258,   259,   260,   261,   262,   867,   868,
       0,   869,     0,   266,   870,   871,   269,   872,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   873,   279,   874,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   875,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   876,   877,
     878,   311,   312,   313,   879,     0,   315,   316,   880,   318,
       0,   881,   320,   882,   322,   323,   324,     0,   325,   326,
    1409,     0,   327,   328,   329,     0,     0,   330,   331,   883,
     884,   334,   885,   886,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     887,   888,   351,   352,   889,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   890,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   891,   387,   388,   389,   892,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,   893,   402,
     403,   404,   405,   406,   407,   894,   409,   410,   411,   895,
     413,   414,   896,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   897,   430,   898,
     432,     0,   433,   434,     0,   435,   899,   437,   438,   439,
     440,   441,     0,   442,   900,   901,     0,     0,   445,   446,
     902,   448,   903,  1410,   450,   451,   904,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,  1253,   906,
       0,   472,   907,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   908,
     909,   910,   911,   912,   913,   914,   915,   916,   917,   918,
     497,   498,   499,   500,   837,  1407,   632,     0,     0,     0,
     998,  1411,  1412,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,   838,     0,
       0,     0,     0,   839,   122,   123,     0,   124,   125,   126,
     840,   128,   129,   130,   841,   842,   843,   844,   845,     0,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
     846,   847,   146,     0,   147,   148,   149,   150,   848,     0,
     849,     0,   850,   154,   155,   156,   157,   158,   851,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
     852,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   853,   854,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,   855,
     211,   212,   213,   214,   215,   856,  1408,   217,     0,   218,
     219,   857,   221,     0,   222,     0,   223,   858,     0,   859,
     226,   227,   860,   861,   230,     0,   231,     0,   862,   863,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     864,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   865,   866,   258,   259,   260,
     261,   262,   867,   868,     0,   869,     0,   266,   870,   871,
     269,   872,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   873,   279,   874,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   875,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   876,   877,   878,   311,   312,   313,   879,     0,
     315,   316,   880,   318,     0,   881,   320,   882,   322,   323,
     324,     0,   325,   326,  1409,     0,   327,   328,   329,     0,
       0,   330,   331,   883,   884,   334,   885,   886,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   887,   888,   351,   352,   889,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   890,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   891,   387,   388,   389,   892,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,   893,   402,   403,   404,   405,   406,   407,   894,
     409,   410,   411,   895,   413,   414,   896,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   897,   430,   898,   432,     0,   433,   434,     0,   435,
     899,   437,   438,   439,   440,   441,     0,   442,   900,   901,
       0,     0,   445,   446,   902,   448,   903,  1410,   450,   451,
     904,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,  1253,   906,     0,   472,   907,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   908,   909,   910,   911,   912,   913,   914,
     915,   916,   917,   918,   497,   498,   499,   500,     0,     0,
    1553,     0,     0,  1554,     0,  1411,  1412,  1555,  1556,  1557,
    1558,  1559,  1560,  1561,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1562,     0,
       0,     0,     0,  2085,     0,     0,     0,     0,  1564,     0,
    1553,     0,     0,  1554,     0,  1565,     0,  1555,  1556,  1557,
    1558,  1559,  1560,  1561,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1562,     0,
    1566,     0,     0,     0,     0,     0,     0,     0,  1564,     0,
    1553,     0,     0,  1554,     0,  1565,     0,  1555,  1556,  1557,
    1558,  1559,  1560,  1561,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1562,     0,
    1566,     0,  1844,     0,  2086,     0,     0,     0,  1564,     0,
    1553,     0,     0,  1554,     0,  1565,     0,  1555,  1556,  1557,
    1558,  1559,  1560,  1561,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1562,     0,
    1566,     0,     0,     0,     0,     0,     0,     0,  1564,     0,
       0,     0,     0,     0,  1567,  1565,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1568,     0,     0,     0,     0,  1569,     0,     0,     0,
    1566,     0,     0,  3357,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1567,     0,     0,     0,     0,  1570,
    1571,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1568,     0,     0,  1572,     0,  1569,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1567,     0,     0,     0,     0,  1570,
    1571,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1573,  1568,     0,  1574,  1572,     0,  1569,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1575,     0,     0,
    1576,     0,     0,     0,  1567,     0,     0,     0,     0,  1570,
    1571,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1573,  1568,     0,  1574,  1572,     0,  1569,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1575,     0,     0,
    1576,     0,     0,     0,     0,     0,     0,     0,     0,  1570,
    1571,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1573,     0,     0,  1574,  1572,     0,     0,     0,  3358,     0,
       0,     0,     0,     0,     0,     0,     0,  1575,     0,     0,
    1576,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1577,     0,     0,     0,     0,     0,
    1573,     0,     0,  1574,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1575,     0,     0,
    1576,     0,     0,     0,     0,     0,     0,     0,  1553,     0,
       0,  1554,     0,     0,  1577,  1555,  1556,  1557,  1558,  1559,
    1560,  1561,  1851,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1562,  2089,     0,     0,
    1886,     0,     0,     0,     0,     0,  1564,     0,     0,     0,
       0,     0,     0,  1565,  1577,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1566,  1578,
       0,     0,  1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,
    1586,  1587,     0,     0,  1577,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,
       0,     0,  1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,
    1586,  1587,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1553,     0,     0,  1554,     0,
       0,     0,  1555,  1556,  1557,  1558,  1559,  1560,  1561,  1578,
       0,     0,  1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,
    1586,  1587,  1567,  1562,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1564,     0,     0,     0,     0,     0,  1568,
    1565,     0,     0,     0,  1569,     0,     0,     0,     0,  1578,
       0,     0,  1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,
    1586,  1587,     0,     0,     0,  1566,     0,  1570,  1571,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1572,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1553,     0,     0,  1554,     0,
       0,     0,  1555,  1556,  1557,  1558,  1559,  1560,  1561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1573,     0,
       0,  1574,     0,  1562,     0,     0,     0,  1893,     0,     0,
       0,     0,     0,  1564,     0,  1575,     0,     0,  1576,     0,
    1565,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1891,     0,     0,     0,     0,  1567,
       0,     0,     0,     0,     0,  1566,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1553,  1568,     0,  1554,     0,
       0,  1569,  1555,  1556,  1557,  1558,  1559,  1560,  1561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1562,  1570,  1571,     0,     0,     0,     0,
       0,     0,     0,  1564,     0,     0,     0,     0,     0,  1572,
    1565,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1577,     0,     0,     0,     0,     0,     0,  1553,
       0,     0,  1554,     0,     0,  1566,  1555,  1556,  1557,  1558,
    1559,  1560,  1561,     0,     0,  1573,     0,     0,  1574,  1567,
       0,     0,     0,     0,     0,     0,     0,  1562,     0,     0,
       0,     0,  1575,     0,     0,  1576,  1568,  1564,     0,     0,
       0,  1569,     0,     0,  1565,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1570,  1571,     0,     0,     0,  1566,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1572,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1981,
       0,     0,     0,     0,     0,     0,     0,  1578,     0,  1567,
    1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,  1586,  1587,
       0,     0,     0,     0,     0,  1573,  1568,     0,  1574,     0,
       0,  1569,     0,     0,     0,     0,     0,     0,     0,  1577,
       0,     0,  1575,     0,     0,  1576,     0,     0,     0,     0,
       0,     0,     0,     0,  1570,  1571,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1572,
       0,     0,     0,  1567,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1568,     0,     0,     0,     0,  1569,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1573,     0,     0,  1574,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1570,  1571,
       0,     0,  1575,     0,     0,  1576,     0,     0,     0,     0,
       0,     0,     0,  1572,     0,     0,     0,     0,     0,  1577,
       0,     0,     0,     0,  1578,     0,     0,  1579,  1580,  1581,
       0,  1582,  1583,  1584,  1585,  1586,  1587,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1573,
       0,     0,  1574,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1575,     0,     0,  1576,
       0,     0,  1553,     0,     0,  1554,     0,     0,     0,  1555,
    1556,  1557,  1558,  1559,  1560,  1561,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1577,
    1562,     0,     0,     0,  2653,     0,     0,     0,     0,     0,
    1564,     0,     0,     0,     0,     0,     0,  1565,     0,     0,
       0,     0,     0,     0,  1578,     0,     0,  1579,  1580,  1581,
       0,  1582,  1583,  1584,  1585,  1586,  1587,     0,     0,     0,
       0,     0,  1566,     0,     0,     0,     0,  1553,     0,     0,
    1554,     0,     0,     0,  1555,  1556,  1557,  1558,  1559,  1560,
    1561,     0,     0,  1577,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1562,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1564,     0,     0,     0,     0,
       0,     0,  1565,     0,     0,     0,  2642,     0,     0,     0,
       0,     0,     0,     0,  1578,     0,     0,  1579,  1580,  1581,
       0,  1582,  1583,  1584,  1585,  1586,  1587,  1566,     0,  1553,
       0,     0,  1554,     0,     0,     0,  1555,  1556,  1557,  1558,
    1559,  1560,  1561,     0,     0,     0,  1567,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1562,     0,     0,
       0,     0,     0,  1568,     0,     0,     0,  1564,  1569,     0,
       0,     0,     0,     0,  1565,     0,     0,     0,  1578,     0,
       0,  1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,  1586,
    1587,  1570,  1571,     0,     0,     0,     0,     0,     0,  1566,
       0,     0,     0,     0,     0,     0,  1572,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1553,     0,     0,  1554,
       0,  1567,     0,  1555,  1556,     0,     0,  1559,  1560,  1561,
       0,     0,     0,     0,     0,     0,     0,     0,  1568,     0,
       0,     0,  1573,  1569,  1562,  1574,     0,     0,     0,     0,
       0,     0,     0,     0,  1564,     0,     0,     0,     0,  1575,
       0,  1565,  1576,     0,     0,     0,  1570,  1571,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1572,     0,     0,     0,     0,  1566,     0,     0,     0,
       0,     0,     0,  1567,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1568,     0,     0,     0,     0,  1569,     0,  1573,     0,     0,
    1574,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1575,     0,     0,  1576,  1570,  1571,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1572,     0,     0,  1577,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1567,     0,     0,     0,     0,     0,     0,     0,     0,  1573,
       0,     0,  1574,     0,     0,     0,     0,  1568,     0,     0,
       0,     0,  1569,     0,     0,     0,  1575,     0,     0,  1576,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1570,  1571,     0,     0,     0,
       0,  1577,     0,     0,     0,     0,     0,     0,     0,     0,
    1572,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1578,     0,     0,  1579,  1580,  1581,     0,  1582,  1583,
    1584,  1585,  1586,  1587,     0,     0,  1573,     0,     0,  1574,
       0,     0,     0,     0,     0,     0,     0,  1553,     0,     0,
    1554,     0,     0,  1575,  1555,  1556,  1576,     0,  1559,  1560,
    1561,     0,     0,  1577,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1562,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1564,     0,     0,     0,     0,
       0,     0,  1565,     0,     0,     0,  1578,     0,     0,  1579,
    1580,  1581,     0,  1582,  1583,  1584,  1585,  1586,  1587,     0,
       0,  1553,     0,     0,  1554,     0,     0,  1566,  1555,  1556,
       0,     0,  1559,  1560,  1561,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1564,
    1577,     0,     0,     0,     0,     0,  1565,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,
       0,  1579,  1580,  1581,     0,  1582,  1583,  1584,  1585,  2106,
    1587,  1566,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1567,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1568,     0,
       0,     0,     0,  1569,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1578,  1570,  1571,  1579,  1580,
    1581,     0,  1582,  1583,  1584,  1585,  1586,  1587,     0,     0,
       0,  1572,     0,     0,     0,  1567,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1568,     0,     0,     0,     0,  1569,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1573,     0,     0,
    1574,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1570,  1571,     0,     0,  1575,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1572,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1573,     0,     0,  1574,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1575,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1577,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1577,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1578,     0,     0,  1579,
    1580,  1581,     0,  1582,  1583,  1584,  1585,  1586,  1587,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1185,     0,  2003,     0,     0,     0,
    1578,     0,     0,  1579,  1580,  1581,     0,  1582,  1583,  1584,
    1585,  1586,  1587,   110,   111,   112,   113,   114,   115,   116,
     117,  1186,   118,   119,   120,  1187,  1188,  1189,   838,  1190,
    1191,  1192,  1193,   839,   122,   123,  1194,   124,   125,   126,
     840,   128,   129,   130,   841,   842,   843,   844,   845,  1195,
     136,   137,   138,   139,   140,   141,  1196,  1197,   142,   143,
     846,   847,   146,  1198,   147,   148,   149,   150,   848,  1199,
     849,  1200,   850,   154,   155,   156,   157,   158,   851,   160,
     161,   162,  1201,   163,   164,   165,   166,   167,   168,  1202,
     852,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   853,   854,   182,  1203,   183,  1204,   184,   185,   186,
     187,   188,   189,  1205,   190,   191,   192,   193,   194,  1206,
    1207,   195,   196,   197,   198,   199,  1208,   200,   201,   202,
    1209,   203,   204,   205,  1210,   206,   207,   208,   209,   855,
     211,   212,   213,   214,   215,   856,  1211,   217,  1212,   218,
     219,   857,   221,  1213,   222,  1214,   223,   858,  1215,   859,
     226,   227,   860,   861,   230,  1216,   231,  1217,   862,   863,
     234,   235,  1218,   236,   237,   238,   239,   240,   241,   242,
     864,   244,   245,   246,   247,  1219,   248,   249,   250,   251,
     252,   253,   254,  1220,   255,   865,   866,   258,   259,   260,
     261,   262,   867,   868,  1221,   869,  1222,   266,   870,   871,
     269,   872,   271,   272,   273,   274,   275,   276,  1223,  1224,
     277,   873,   279,   874,  1225,   281,   282,   283,   284,   285,
     286,   287,   288,   875,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   876,   877,   878,   311,   312,   313,   879,  1226,
     315,   316,   880,   318,  1227,   881,   320,   882,   322,   323,
     324,  1228,   325,   326,  1229,  1230,   327,   328,   329,  1231,
    1232,   330,   331,   883,   884,   334,   885,   886,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,  1233,  1234,
    1235,  1236,   347,   348,   887,   888,   351,   352,   889,   354,
     355,   356,  1237,   357,   358,   359,   360,   361,   362,  1238,
     363,   364,   365,   890,   367,   368,   369,   370,  1239,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,  1240,   384,   385,   891,   387,   388,   389,   892,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,  1241,   893,   402,   403,   404,   405,   406,   407,   894,
     409,   410,   411,   895,   413,   414,   896,   416,  1242,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   897,   430,   898,   432,  1243,   433,   434,  1244,   435,
     899,   437,   438,   439,   440,   441,  1245,   442,   900,   901,
    1246,  1247,   445,   446,   902,   448,   903,  1248,   450,   451,
     904,   453,   454,   455,   456,   457,  1249,  1250,   458,   459,
     460,  1251,   461,   462,   463,   464,  1252,   465,   466,   467,
     468,   469,  1253,   906,  1254,   472,   907,   474,   475,   476,
     477,   478,  1255,  1256,   479,  1257,  1258,   480,   481,   482,
     483,   484,   485,   908,   909,   910,   911,   912,   913,   914,
     915,   916,   917,   918,   497,   498,   499,   500,  1185,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,  1186,   118,   119,   120,  1187,
    1188,  1189,   838,  1190,  1191,  1192,  1193,   839,   122,   123,
    1194,   124,   125,   126,   840,   128,   129,   130,   841,   842,
     843,   844,   845,  1195,   136,   137,   138,   139,   140,   141,
    1196,  1197,   142,   143,   846,   847,   146,  1198,   147,   148,
     149,   150,   848,  1199,   849,  1200,   850,   154,   155,   156,
     157,   158,   851,   160,   161,   162,  1201,   163,   164,   165,
     166,   167,   168,  1202,   852,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   853,   854,   182,  1203,   183,
    1204,   184,   185,   186,   187,   188,   189,  1205,   190,   191,
     192,   193,   194,  1206,  1207,   195,   196,   197,   198,   199,
    1208,   200,   201,   202,  1209,   203,   204,   205,  1210,   206,
     207,   208,   209,   855,   211,   212,   213,   214,   215,   856,
    1211,   217,  1212,   218,   219,   857,   221,  1213,   222,  1214,
     223,   858,  1215,   859,   226,   227,   860,   861,   230,  1216,
     231,  1217,   862,   863,   234,   235,  1218,   236,   237,   238,
     239,   240,   241,   242,   864,   244,   245,   246,   247,  1219,
     248,   249,   250,   251,   252,   253,   254,  1220,   255,   865,
     866,   258,   259,   260,   261,   262,   867,   868,  1221,   869,
    1222,   266,   870,   871,   269,   872,   271,   272,   273,   274,
     275,   276,  1223,  1224,   277,   873,   279,   874,  1225,   281,
     282,   283,   284,   285,   286,   287,   288,   875,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   876,   877,   878,   311,
     312,   313,   879,  1226,   315,   316,   880,   318,  1227,   881,
     320,   882,   322,   323,   324,  1228,   325,   326,  1229,  1230,
     327,   328,   329,  1231,  1232,   330,   331,   883,   884,   334,
     885,   886,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,  1233,  1234,  1235,  1236,   347,   348,   887,   888,
     351,   352,   889,   354,   355,   356,  1237,   357,   358,   359,
     360,   361,   362,  1238,   363,   364,   365,   890,   367,   368,
     369,   370,  1239,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,  1240,   384,   385,   891,
     387,   388,   389,   892,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,  1241,   893,   402,   403,   404,
     405,   406,   407,   894,   409,   410,   411,   895,   413,   414,
     896,   416,  1242,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   897,   430,   898,   432,  1243,
     433,   434,  1244,   435,   899,   437,   438,   439,   440,   441,
    1245,   442,   900,   901,  1246,  1247,   445,   446,   902,   448,
     903,  1248,   450,   451,   904,   453,   454,   455,   456,   457,
    1249,  1250,   458,   459,   460,  1251,   461,   462,   463,   464,
    1252,   465,   466,   467,   468,   469,  1253,   906,  1254,   472,
     907,   474,   475,   476,   477,   478,  1255,  1256,   479,  1257,
    1258,   480,   481,   482,   483,   484,   485,   908,   909,   910,
     911,   912,   913,   914,   915,   916,   917,   918,   497,   498,
     499,   500,  1185,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,  2151,   115,   116,   117,  1186,
     118,   119,   120,  1187,  1188,  1189,   838,  1190,  1191,  1192,
    1193,   839,   122,   123,  1194,   124,   125,   126,   840,   128,
     129,   130,   841,   842,   843,   844,   845,  1195,   136,   137,
     138,   139,   140,   141,  1196,  1197,   142,   143,   846,   847,
     146,  1198,   147,   148,   149,   150,   848,  1199,   849,  1200,
     850,   154,   155,   156,   157,   158,   851,   160,   161,   162,
    1201,   163,   164,   165,   166,   167,   168,  1202,   852,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   853,
     854,   182,  1203,   183,  1204,   184,   185,   186,   187,   188,
     189,  1205,   190,   191,   192,   193,   194,  1206,  1207,   195,
     196,   197,  2152,   199,  1208,   200,   201,   202,  1209,   203,
     204,   205,  1210,   206,   207,   208,   209,   855,   211,   212,
     213,   214,   215,   856,  1211,   217,  1212,   218,   219,   857,
     221,  1213,   222,  1214,   223,   858,  1215,   859,   226,   227,
     860,   861,   230,  1216,   231,  1217,   862,   863,   234,   235,
    1218,   236,   237,   238,   239,   240,   241,   242,   864,   244,
     245,   246,   247,  1219,   248,   249,   250,   251,   252,   253,
     254,  1220,   255,   865,   866,   258,   259,   260,   261,   262,
     867,   868,  1221,   869,  1222,   266,   870,   871,   269,   872,
     271,   272,   273,   274,   275,   276,  1223,  1224,   277,   873,
     279,   874,  1225,   281,   282,   283,   284,   285,   286,   287,
     288,   875,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     876,   877,   878,   311,   312,   313,   879,  1226,   315,   316,
     880,   318,  1227,   881,   320,   882,   322,   323,   324,  1228,
     325,   326,  1229,  1230,   327,   328,   329,  1231,  1232,   330,
     331,   883,   884,   334,   885,   886,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,  1233,  1234,  1235,  1236,
     347,   348,   887,   888,   351,   352,   889,   354,   355,   356,
    1237,   357,   358,   359,   360,   361,   362,  1238,   363,   364,
     365,   890,   367,   368,   369,   370,  1239,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
    1240,   384,   385,   891,   387,   388,   389,   892,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,  1241,
     893,   402,   403,   404,   405,   406,  2153,   894,   409,   410,
     411,   895,   413,   414,   896,   416,  1242,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   897,
     430,   898,   432,  1243,   433,   434,  1244,   435,   899,   437,
     438,   439,   440,   441,  1245,   442,   900,   901,  1246,  1247,
     445,   446,   902,   448,   903,  1248,   450,   451,   904,   453,
     454,   455,   456,   457,  1249,  1250,   458,   459,   460,  1251,
     461,   462,   463,   464,  1252,   465,   466,   467,   468,   469,
    1253,   906,  1254,   472,   907,   474,   475,   476,   477,   478,
    1255,  1256,   479,  1257,  1258,   480,   481,   482,   483,   484,
     485,   908,   909,   910,   911,   912,   913,   914,   915,   916,
     917,   918,   497,   498,   499,   500,   837,     0,   632,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
     838,     0,     0,     0,     0,   839,   122,   123,     0,   124,
     125,   126,   840,   128,   129,   130,   841,   842,   843,   844,
     845,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   846,   847,   146,     0,   147,   148,   149,   150,
     848,     0,   849,     0,   850,   154,   155,   156,   157,   158,
     851,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,   852,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   853,   854,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,   855,   211,   212,   213,   214,   215,   856,  1408,   217,
       0,   218,   219,   857,   221,     0,   222,     0,   223,   858,
       0,   859,   226,   227,   860,   861,   230,     0,   231,     0,
     862,   863,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   864,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   865,   866,   258,
     259,   260,   261,   262,   867,   868,     0,   869,     0,   266,
     870,   871,   269,   872,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   873,   279,   874,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   875,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   876,   877,   878,   311,   312,   313,
     879,     0,   315,   316,   880,   318,     0,   881,   320,   882,
     322,   323,   324,     0,   325,   326,  1409,     0,   327,   328,
     329,     0,     0,   330,   331,   883,   884,   334,   885,   886,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   887,   888,   351,   352,
     889,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   890,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   891,   387,   388,
     389,   892,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,   893,   402,   403,   404,   405,   406,
     407,   894,   409,   410,   411,   895,   413,   414,   896,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   897,   430,   898,   432,     0,   433,   434,
       0,   435,   899,   437,   438,   439,   440,   441,     0,   442,
     900,   901,     0,     0,   445,   446,   902,   448,   903,  1410,
     450,   451,   904,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,  1253,   906,     0,   472,   907,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   908,   909,   910,   911,   912,
     913,   914,   915,   916,   917,   918,   497,   498,   499,   500,
     837,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     3,     4,     0,   838,     0,     0,     0,     0,   839,
     122,   123,     0,   124,   125,   126,   840,   128,   129,   130,
     841,   842,   843,   844,   845,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   846,   847,   146,     0,
     147,   148,   149,   150,   848,     0,   849,     0,   850,   154,
     155,   156,   157,   158,   851,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,   852,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   853,   854,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   855,   211,   212,   213,   214,
     215,   856,     0,   217,     0,   218,   219,   857,   221,     0,
     222,     0,   223,   858,     0,   859,   226,   227,   860,   861,
     230,     0,   231,     0,   862,   863,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   864,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   865,   866,   258,   259,   260,   261,   262,   867,   868,
       0,   869,     0,   266,   870,   871,   269,   872,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   873,   279,   874,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   875,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   876,   877,
     878,   311,   312,   313,   879,     0,   315,   316,   880,   318,
       0,   881,   320,   882,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   883,
     884,   334,   885,   886,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     887,   888,   351,   352,   889,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   890,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   891,   387,   388,   389,   892,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,   893,   402,
     403,   404,   405,   406,   407,   894,   409,   410,   411,   895,
     413,   414,   896,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   897,   430,   898,
     432,     0,   433,   434,     0,   435,   899,   437,   438,   439,
     440,   441,     0,   442,   900,   901,     0,     0,   445,   446,
     902,   448,   903,     0,   450,   451,   904,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,  1253,   906,
       0,   472,   907,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   908,
     909,   910,   911,   912,   913,   914,   915,   916,   917,   918,
     497,   498,   499,   500,   109,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
       0,     0,     0,   121,   122,   123,     0,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,     0,   602,   142,   143,
     144,   145,   146,     0,   147,   148,   149,   150,   603,     0,
     604,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   605,     0,   217,     0,   218,
     219,   220,   221,     0,   222,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,   231,     0,   232,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     315,   316,   317,   318,     0,   607,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,   609,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   610,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   612,   432,     0,   433,   434,     0,   435,
     436,   437,   438,   439,   440,   441,     0,   442,   443,   444,
       0,     0,   445,   446,   613,   448,   614,     0,   450,   451,
     615,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,     0,   472,   473,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   109,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,     0,     0,     0,   121,   122,   123,
       0,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,     0,   152,     0,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
     231,     0,   232,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   278,   279,   280,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,     0,   315,   316,   317,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
     433,   434,     0,   435,   436,   437,   438,   439,   440,   441,
       0,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,     0,   472,
     473,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   508,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,
     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,
     146,  1683,   147,   148,   149,   150,   151,     0,     0,  1684,
     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,
    1685,   163,   164,   165,   166,   167,   168,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,
     221,     0,   222,  1686,   223,     0,     0,     0,   226,   227,
     509,     0,   230,     0,   231,     0,   232,   233,   234,   235,
       0,   236,   237,   238,   239,   240,  1687,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   510,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
    1688,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   511,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,   457,     0,  1689,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,     0,   472,     0,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   508,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,     0,   124,
     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,
     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   144,   145,   146,  1683,   147,   148,   149,   150,
     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,
       0,   160,   161,   162,  1685,   163,   164,   165,   166,   167,
     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
       0,   218,   219,   220,   221,     0,   222,  1686,   223,     0,
       0,     0,   226,   227,   509,     0,   230,     0,   231,     0,
     232,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,  2224,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   510,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,  1688,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   511,   430,   431,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,   457,     0,  1689,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,     0,   472,     0,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     508,     0,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     3,     4,     0,     0,     0,     0,     0,     0,     0,
     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,
     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,
     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,
     222,     0,   223,     0,     0,     0,   226,   227,   509,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   510,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   511,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
       0,   472,     0,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   508,     0,   530,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,   531,   118,   119,   120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,
       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,
       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,
     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,
     226,   227,   509,     0,   230,     0,   231,     0,   232,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   510,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   532,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   511,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,     0,   472,     0,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   508,     0,
     530,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,
       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,
     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,
     223,     0,     0,     0,   226,   227,   509,     0,   230,     0,
     231,     0,   232,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   510,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,   608,
     327,   328,   329,     0,     0,   330,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   511,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,     0,   472,
       0,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   508,     0,   530,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,
     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,
     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,
     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,
     509,     0,   230,     0,   231,     0,   232,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   712,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   510,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,   608,   327,   328,   329,     0,     0,   330,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   511,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,     0,   472,     0,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   508,     0,   530,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,   740,   118,   119,   120,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,     0,   124,
     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,
     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,
     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,
       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,
       0,     0,   226,   227,   509,     0,   230,     0,   231,     0,
     232,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   510,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   511,   430,   431,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,     0,   472,     0,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     508,  1897,     0,     0,     0,     0,  1898,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,
     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,
     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,
     222,     0,   223,     0,     0,     0,   226,   227,   509,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   510,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   511,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
       0,   472,     0,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   508,     0,   530,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,
       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,
       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,
     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,
     226,   227,   509,     0,  1905,     0,   231,     0,   232,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,  1906,   284,   285,
     286,   287,   288,   510,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   511,   430,   431,   432,     0,   433,   434,  1907,   435,
       0,   437,  1908,   439,  1909,   441,     0,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,   457,     0,     0,   458,   459,
    1910,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,     0,   472,     0,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   508,     0,
     530,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,
       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,
     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,
     223,     0,     0,     0,   226,   227,   509,     0,   230,     0,
     231,     0,   232,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   510,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   511,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,     0,   472,
       0,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   508,     0,   632,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,
     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,
     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,
     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,
     509,     0,   230,     0,   231,     0,   232,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   510,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   511,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,     0,   472,     0,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   508,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,   639,   118,   119,   120,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,     0,   124,
     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,
     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,
     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,
       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,
       0,     0,   226,   227,   509,     0,   640,     0,   231,     0,
     232,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   641,
     284,   285,   286,   287,   288,   510,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   642,
     407,   408,   409,   410,   411,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   511,   430,   431,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   442,
     643,   444,     0,     0,   644,   446,   447,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,     0,   472,     0,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     508,     0,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,
     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,
     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,
     222,     0,   223,     0,     0,     0,   226,   227,   509,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   510,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   676,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   511,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
       0,   472,     0,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   508,     0,   530,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,
       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,
       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,
     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,
     226,   227,   509,     0,   230,     0,   231,     0,   232,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   707,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   510,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   511,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,     0,   472,     0,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   508,     0,
     530,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,
       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,
     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,
     223,     0,     0,     0,   226,   227,   509,     0,   230,     0,
     231,     0,   232,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   710,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   510,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   511,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,     0,   472,
       0,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   508,     0,   530,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,
     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,
     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,
     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,
     509,     0,   230,     0,   231,     0,   232,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   714,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   510,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   511,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,     0,   472,     0,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   508,     0,   530,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,     0,   124,
     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,
     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,
     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,
       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,
       0,     0,   226,   227,   509,     0,   230,     0,   231,     0,
     232,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     729,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   510,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   511,   430,   431,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,     0,   472,     0,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     508,     0,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,
     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,
     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,
     222,     0,   223,     0,     0,     0,   226,   227,   509,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   829,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   510,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   511,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
       0,   472,     0,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   508,     0,   530,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,
       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,
       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,
     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,
     226,   227,   509,     0,   230,     0,   231,     0,   232,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   832,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   510,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   511,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,     0,   472,     0,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   508,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,     0,   953,     0,     0,   122,   123,
       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,
       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,
     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,
     223,     0,     0,     0,   226,   227,   509,     0,   230,     0,
     231,     0,   232,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   510,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   511,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,     0,   472,
       0,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   508,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,     0,   976,
       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,
     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,
     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,
     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,
     509,     0,   230,     0,   231,     0,   232,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   510,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   511,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,     0,   472,     0,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   508,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,   639,   118,   119,   120,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,     0,   124,
     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,
     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,
     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,
       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,
       0,     0,   226,   227,   509,     0,   230,     0,   231,     0,
     232,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   510,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   511,   430,   431,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   442,
     643,   444,     0,     0,   644,   446,   447,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,     0,   472,     0,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     508,     0,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,
     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,
     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,
     222,     0,   223,     0,     0,     0,   226,   227,   509,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,  1318,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   510,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   511,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
       0,   472,     0,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   508,     0,   530,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,
       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,
       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,
     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,
     226,   227,   509,     0,   230,     0,   231,     0,   232,   233,
     234,   235,     0,   236,   237,   238,   239,   240,  1320,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   510,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   511,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,     0,   472,     0,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   508,     0,
     530,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,
       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,
     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,
     223,     0,     0,     0,   226,   227,   509,     0,   230,     0,
     231,     0,   232,   233,   234,   235,     0,   236,   237,   238,
     239,   240,  1323,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   510,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   511,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,     0,   472,
       0,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   508,     0,   530,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,
     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,
     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,
     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,
     509,     0,   230,     0,   231,     0,   232,   233,   234,   235,
       0,   236,   237,   238,   239,   240,  1325,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   510,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   511,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,     0,   472,     0,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   508,     0,   530,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,     0,   124,
     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,
     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,
     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,
       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,
       0,     0,   226,   227,   509,     0,   230,     0,   231,     0,
     232,   233,   234,   235,     0,   236,   237,   238,   239,   240,
    2147,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   510,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   511,   430,   431,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,     0,   472,     0,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     508,     0,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,
     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,
     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,
     222,     0,   223,     0,     0,     0,   226,   227,   509,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,  2848,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   510,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   511,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
       0,   472,     0,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   508,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,
       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,
       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,
     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,
     226,   227,   509,     0,   230,     0,   231,     0,   232,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   510,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   511,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,     0,   472,     0,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   508,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,
       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,
     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,
     223,     0,     0,     0,   226,   227,   509,     0,   654,     0,
     231,     0,   232,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   655,   284,   285,   286,   287,   288,   510,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   656,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   657,   407,   408,   409,   410,   411,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   511,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   658,   444,     0,     0,   445,   446,   447,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,     0,   472,
       0,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   508,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,
     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,
     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,
     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,
     509,     0,   230,     0,   231,     0,   232,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   825,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   510,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   511,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,     0,   472,     0,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   508,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,     0,   124,
     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,
     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,
     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,
       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,
       0,     0,   226,   227,   509,     0,   230,     0,   231,     0,
     232,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   510,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   656,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   511,   430,   431,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   442,
     658,   444,     0,     0,   445,   446,   447,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,     0,   472,     0,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     508,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,     0,  1615,     0,     0,
     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,
     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,
     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,
     222,     0,   223,     0,     0,     0,   226,   227,   509,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   510,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,     0,   408,   409,   410,   411,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   511,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
       0,   472,     0,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   508,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,
       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,
       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,
     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,
     226,   227,   509,     0,   230,     0,   231,     0,   232,   233,
     234,   235,     0,   236,   237,   238,   239,   240,  1782,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   510,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   511,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,     0,   472,     0,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   508,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,
       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,
     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,
     223,     0,     0,     0,   226,   227,   509,     0,   230,     0,
     231,     0,   232,   233,   234,   235,     0,   236,   237,   238,
     239,   240,  2134,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   510,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   511,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,     0,   472,
       0,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   508,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,
     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,
     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,
     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,
     509,     0,   230,     0,   231,     0,   232,   233,   234,   235,
       0,   236,   237,   238,   239,   240,  2149,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   510,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   511,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,     0,   472,     0,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   751,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
     752,     0,     0,     0,     0,   753,   122,   123,     0,   124,
     125,   126,   754,   128,   129,   130,     0,   755,   756,   757,
     758,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   759,   760,   146,     0,   147,   148,   149,   150,
       0,     0,   761,     0,   762,   154,   155,   156,   157,   158,
     763,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,   764,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   765,   766,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   767,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,     0,   211,   212,   213,   214,   215,     0,     0,   217,
       0,   218,   219,   768,   221,     0,   222,     0,   223,   769,
       0,   770,   226,   227,     0,   771,   230,     0,   231,     0,
       0,     0,   234,   235,     0,   236,   237,   238,   239,   240,
     772,   242,   773,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   774,     0,   258,
     259,   260,   261,   262,   775,   776,     0,   777,     0,   266,
     778,   779,   269,   780,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   781,   279,   782,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   783,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   784,   785,   786,   311,   312,   313,
       0,     0,   315,   316,   787,   318,     0,     0,   320,   788,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,     0,   789,   334,   790,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,     0,   791,   351,   352,
       0,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   792,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   793,   387,   388,
     389,   794,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,   795,   402,   403,   404,   405,   406,
     407,   796,   409,   410,   411,   797,   413,   414,   798,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   799,   430,     0,   432,     0,   433,   434,
       0,   435,   800,   437,   438,   439,   440,   441,     0,   442,
     801,   802,     0,     0,   445,   446,     0,   448,     0,     0,
     450,   451,   803,   453,   454,   455,   456,   457,   804,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,     0,   805,     0,   472,   806,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   751,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   497,   498,   499,   500,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,   752,
       0,     0,     0,     0,   753,   122,   123,     0,   124,   125,
     126,   754,   128,   129,   130,     0,   755,   756,   757,   758,
       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   759,   760,   146,     0,   147,   148,   149,   150,     0,
       0,   761,     0,   762,   154,   155,   156,   157,   158,   763,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,   764,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   765,   766,   182,     0,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   767,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
       0,   211,   212,   213,   214,   215,     0,     0,   217,     0,
     218,   219,   768,   221,     0,   222,     0,   223,   769,     0,
     770,   226,   227,     0,   771,   230,     0,   231,     0,     0,
       0,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   773,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   774,     0,   258,   259,
     260,   261,   262,   775,   776,     0,   777,     0,   266,   778,
     779,   269,   780,   271,   272,   273,   274,   275,   276,     0,
       0,   277,   781,   279,   782,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   783,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   784,   785,   786,   311,   312,   313,     0,
       0,   315,   316,   787,   318,     0,     0,   320,   788,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,     0,   789,   334,   790,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,     0,   791,   351,   352,     0,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   792,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   793,   387,   388,   389,
     794,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,   795,   402,   403,   404,   405,   406,   407,
     796,   409,   410,   411,   797,   413,   414,   798,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   799,   430,     0,   432,     0,   433,   434,     0,
     435,   800,   437,   438,   439,   440,   441,     0,   442,   801,
     802,     0,     0,   445,   446,     0,   448,     0,     0,   450,
     451,   803,   453,   454,   455,   456,   457,   804,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,     0,   805,     0,   472,   806,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   751,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   497,   498,   499,   500,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,   752,     0,
       0,     0,     0,   753,   122,   123,     0,   124,   125,   126,
     754,   128,   129,   130,     0,   755,   756,   757,   758,     0,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
     759,   760,   146,     0,   147,   148,   149,   150,     0,     0,
     761,     0,   762,   154,   155,   156,   157,   158,   763,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
     764,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   765,   766,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   767,   198,   199,     0,   200,   201,   202,
       0,  1767,   204,   205,     0,   206,   207,   208,   209,     0,
     211,   212,   213,   214,   215,     0,     0,   217,     0,   218,
     219,   768,   221,     0,   222,     0,   223,   769,     0,   770,
     226,   227,     0,   771,   230,     0,   231,     0,     0,     0,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     773,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   774,     0,   258,   259,   260,
     261,   262,   775,   776,     0,   777,     0,   266,   778,   779,
     269,   780,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   781,   279,   782,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   783,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   784,   785,   786,   311,   312,   313,     0,     0,
     315,   316,   787,   318,     0,     0,   320,   788,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,     0,   789,   334,   790,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,     0,   791,   351,   352,     0,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   792,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   793,   387,   388,   389,   794,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,   795,   402,   403,   404,   405,   406,   407,   796,
     409,   410,   411,   797,   413,   414,   798,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   799,   430,     0,   432,     0,   433,   434,     0,   435,
     800,   437,   438,   439,   440,   441,     0,   442,   801,   802,
       0,     0,   445,   446,     0,   448,     0,     0,   450,   451,
     803,   453,   454,   455,   456,   457,   804,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,     0,   805,     0,   472,   806,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,  2776,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   497,   498,   499,   500,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,  2777,     0,     0,
       0,     0,  2778,   122,   123,     0,   124,   125,   126,  2779,
     128,   129,   130,     0,   755,  2780,   757,   758,     0,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   759,
     760,   146,     0,   147,   148,   149,   150,     0,     0,  2781,
       0,  2782,   154,   155,   156,   157,   158,  2783,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,  2784,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     765,   766,   182,     0,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   767,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,     0,   211,
     212,   213,   214,   215,     0,     0,   217,     0,   218,   219,
     768,   221,     0,   222,     0,   223,  2785,     0,  2786,   226,
     227,  2787,  2788,   230,     0,   231,     0,     0,     0,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,  2789,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,  2790,     0,   258,   259,   260,   261,
     262,   775,   776,     0,   777,     0,   266,  2791,  2792,   269,
    2793,   271,   272,   273,   274,   275,   276,     0,     0,   277,
    2794,   279,  2795,     0,   281,   282,   283,   284,   285,   286,
     287,   288,  3011,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   784,  2797,   786,   311,   312,   313,     0,     0,   315,
     316,  2799,   318,     0,     0,   320,   788,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,     0,  2801,   334,  2802,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,     0,  2803,   351,   352,     0,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   792,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,  2804,   387,   388,   389,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,  2805,   402,   403,   404,   405,   406,   407,     0,   409,
     410,   411,  2807,   413,   414,   798,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
    3012,   430,     0,   432,     0,   433,   434,     0,   435,  2809,
     437,   438,   439,   440,   441,     0,   442,   801,   802,     0,
       0,   445,   446,     0,   448,     0,     0,   450,   451,  2810,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,     0,   805,     0,   472,  2812,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   508,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   497,   498,   499,   500,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,
     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,
     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,
     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,
     509,     0,   230,     0,   231,     0,   232,   233,     0,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   510,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,     0,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,     0,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,     0,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   511,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,     0,   472,     0,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   751,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
     752,     0,     0,     0,     0,   753,   122,   123,     0,   124,
     125,   126,   754,   128,   129,   130,     0,   755,   756,   757,
     758,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   759,   760,   146,     0,   147,   148,   149,   150,
       0,     0,   761,     0,   762,   154,   155,   156,   157,   158,
     763,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,   764,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   765,   766,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   767,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,     0,   211,   212,   213,   214,   215,     0,     0,   217,
       0,   218,   219,   768,   221,     0,   222,     0,   223,   769,
       0,   770,   226,   227,     0,   771,   230,     0,   231,     0,
       0,     0,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   773,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   774,     0,   258,
     259,   260,   261,   262,   775,   776,     0,   777,     0,   266,
     778,   779,   269,   780,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   781,   279,   782,     0,   281,   282,   283,
     284,   285,   286,   287,   288,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   784,   785,   786,   311,   312,   313,
       0,     0,   315,   316,   787,   318,     0,     0,   320,   788,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,     0,   789,   334,   790,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,     0,   791,   351,   352,
       0,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   792,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   793,   387,   388,
     389,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,   795,   402,   403,   404,   405,   406,
     407,     0,   409,   410,   411,   797,   413,   414,   798,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,   430,     0,   432,     0,   433,   434,
       0,   435,   800,   437,   438,   439,   440,   441,     0,   442,
     801,   802,     0,     0,   445,   446,     0,   448,     0,     0,
     450,   451,   803,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,     0,   805,     0,   472,   806,   474,
     475,   476,   477,   478,     0,     1,   479,     0,     0,   480,
     481,   482,   483,   484,   485,     2,     0,     3,     4,     0,
       0,     0,     1,     0,     0,     0,   497,   498,   499,   500,
       0,     0,     2,     0,     0,     6,     0,     0,     0,     0,
       0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
       0,     0,     6,     0,     0,     0,     8,     0,     0,     0,
       0,     7,     0,     0,     0,     0,     0,     9,     0,     0,
       0,     0,     0,     8,     0,     0,     0,     0,     0,    10,
       0,    11,     0,     0,     9,     0,     0,     0,     0,     0,
       0,     0,    12,     0,     0,     0,    10,     0,    11,     0,
       0,     0,     0,     0,     0,     0,    13,     0,     0,    12,
       0,     0,     0,     0,     0,     0,    15,     0,     0,     0,
       0,     0,    16,    13,     0,     0,     0,     0,     0,     0,
      17,     0,     0,    15,     0,     0,     0,     0,     0,    16,
       0,     0,     0,     0,     0,     0,    20,    17,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    20,     0,     0,     0,    21,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    23,
       0,     0,     0,     0,     0,     0,     0,     0,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      25,    26,    27,     0,     0,     0,     0,     0,    28,     0,
       0,    29,     0,     0,     0,     0,     0,    25,    26,    27,
       0,     0,     0,     0,     0,    28,     0,     0,    29,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,    31,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,    32,     0,     0,    31,     0,     0,     0,
      33,     0,     0,     0,    34,     0,     0,     0,     0,     0,
      32,     0,     0,     0,    35,     0,     0,    33,     0,     0,
       0,    34,     0,     0,     0,     0,    36,     0,     0,     0,
      37,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,    37,     0,     0,
      38,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    39,     0,     0,     0,    38,     0,    41,
       0,     0,     0,     0,    42,     0,     0,     0,   565,     0,
      39,     0,     0,     0,     0,     0,    41,     0,    43,     0,
       0,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,     0,     0,     0,     0,
       0,     0,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   566,     0,     0,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45
};

static const yytype_int16 yycheck[] =
{
       7,   560,     0,   711,     7,   501,   699,   626,   558,   566,
      82,   652,     0,     0,    21,   719,   796,   925,    21,     0,
       0,     0,     0,  1170,  1182,   723,  1105,   675,     0,    12,
     943,  1597,  1637,     0,    17,     0,    45,  1169,    36,    18,
    1455,  1144,    86,    18,   802,  1739,    29,  2090,    37,   728,
     565,  1501,  1146,     7,  1299,  1346,   984,   934,    21,  1351,
      43,    44,  1110,   925,    86,  1523,  1149,    21,   711,   934,
     713,   827,   715,  2145,   830,   934,   566,    84,    85,  2080,
    1174,    84,    85,   934,  2191,  2192,  2193,  2513,  1040,   561,
    2545,  2025,  2059,     0,  2061,   622,  1550,  1551,    96,  2513,
     627,  2141,     0,    44,  1072,  1395,  2543,     0,     0,  1077,
       0,  2565,    23,    24,     0,   104,     0,     0,    33,   102,
       0,    84,    85,   619,     0,  1038,     0,  2079,     0,  2388,
      84,    85,   584,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2204,    13,    14,  1754,    24,  2558,    21,  1757,
       5,     0,     0,     5,  1601,     5,     9,  1655,    13,    14,
      63,    13,    14,    13,    14,  1657,   759,   760,     5,  2469,
       3,   667,  2844,  2473,    13,    14,    63,   694,     5,    78,
      55,  2221,     9,   694,     5,     5,   834,     5,  2860,    84,
      85,     5,  2857,   786,    45,  1915,   107,     5,  2211,    13,
      14,    34,    35,     5,  1882,    13,    14,     9,  1928,     5,
       5,    84,    85,   689,    45,     5,    72,     5,     5,  2215,
       5,  1083,   135,     5,  2362,    30,     5,     5,     5,     5,
       5,    30,   176,    38,   115,    63,     5,    30,   120,    38,
      63,   186,   143,   168,   925,    38,    80,   118,   952,    98,
      98,  2291,  2292,    11,  2294,    11,   281,    91,    16,   105,
      16,   941,     4,   240,   284,   283,    88,     9,  2751,   240,
     289,     9,  1030,     3,     4,     5,   240,  2823,   102,     9,
    2705,   289,   766,  3015,   932,   222,   128,   269,    46,     4,
     167,  2686,   188,  2688,     9,   306,  1158,   240,   222,  1161,
    1162,   240,   983,   125,   788,   118,    13,    14,   164,   240,
    1339,   118,   213,   155,   115,  3166,   935,   157,   161,   188,
      78,    80,  1908,  1909,  1910,  2432,   133,    40,    40,   266,
     168,   105,    91,   166,   240,   168,    11,   208,  1266,   272,
     824,  2483,   266,   445,   306,    11,   379,  1275,   359,    15,
      16,  2431,   176,  2433,  2048,  3135,   116,   445,   465,    64,
     370,   397,   106,   113,  3036,  3329,   492,    72,   925,    11,
     179,   116,    41,    15,    16,  1056,    30,  1157,  2345,   505,
    2806,  3240,   489,   113,  1088,     4,   363,  2756,   289,  1037,
       9,  1470,   363,   233,    11,  2764,   104,  2852,    15,    16,
     106,   503,  1083,    78,  1085,  1086,  3370,   331,  2863,   936,
    2482,   926,  1005,  1006,  2457,   503,    73,  2854,   128,  3197,
     363,   948,  1501,   459,   363,   411,   983,   413,  1021,    46,
     190,   273,   363,  2575,   283,   283,   278,  3288,   358,  2479,
     280,  2481,   266,   380,   106,   190,  3226,   350,    26,  3229,
    2384,   384,   348,   122,    32,   162,   380,   363,   171,   171,
     442,    78,   439,   350,   302,   321,  3325,  3013,   439,  3134,
     503,  1423,   273,   316,   128,   439,   345,  1158,   503,   301,
    1161,  1162,  1932,   503,   214,   503,  1515,   498,   507,  2884,
    1138,  2974,   266,  1134,  1135,  2633,   439,   507,  1743,   507,
     439,   445,   351,   351,     8,   442,   236,    11,   439,  3287,
    2993,    15,    16,   320,   106,    19,    20,    21,   442,   517,
     167,   330,   350,   273,  1814,  1009,   503,   350,  1085,  1086,
    3262,   236,   503,   439,   435,  2960,   498,  2617,   246,   503,
    1024,  2554,   419,  3323,   503,   383,   254,  1043,   461,   532,
     359,   558,   209,   404,  2594,   133,  3228,   566,   503,   566,
     503,   407,  3227,   445,   503,    11,   447,  2025,   278,    15,
      16,   442,   503,   404,   159,  2571,   394,   395,   503,   562,
     436,  1684,   387,   503,   426,   419,   565,  1852,   387,  3015,
     412,   566,   416,   144,   387,   437,   128,   503,  2096,   606,
      46,  3015,   501,   606,   507,  2097,   505,  2216,   617,  2063,
     617,  1563,  1305,  3024,   617,  2223,   465,   465,  1883,  1136,
     507,   665,   455,  2301,  1771,  1136,  1324,   699,   503,   442,
     498,  2089,    78,   503,   454,  1111,  2083,   505,  2358,    30,
     407,   226,   159,   665,   195,   652,   653,  1099,   503,   502,
    2722,   503,   606,   503,   617,   504,   504,   506,   506,   511,
     419,  2920,  1343,   617,   503,  2965,   503,  2729,   675,  1827,
    2970,  1599,   467,  1354,   511,  1356,   503,   467,  3133,   507,
     501,   670,   503,   503,   505,  1366,   684,  3141,   599,   503,
     601,  1339,  1937,   676,   489,   503,   684,   684,   673,   489,
     689,   503,  1383,   684,   684,   684,   684,   503,   503,   287,
     717,   718,   684,   503,   721,   503,   503,   684,   503,   684,
     631,   503,   617,   601,   503,   503,   503,   503,   503,  3140,
    1411,  1412,  2839,   606,   503,   676,   268,   128,   157,   654,
     655,   499,   657,   499,   617,   656,   278,  1699,   265,  1701,
     465,  2703,   494,   495,  1347,  1348,   494,   495,   421,  2049,
    2346,  2347,  2348,  2349,   494,   495,  1316,  1447,  1448,   347,
      33,   506,   419,  1453,   489,  2709,     0,   684,   115,   494,
     495,   285,    26,  3238,   455,   268,   684,  3224,    32,   796,
     273,   684,   684,   259,   684,  1345,    59,    63,   684,   377,
     684,   684,  2842,   169,   684,   468,     5,  2946,   684,  2948,
     684,  1361,   684,  1461,   233,   113,  1895,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   507,   834,   494,   495,
     496,   497,   498,   499,  1475,  1394,  3262,  3094,  1397,  3096,
    1544,  1545,  1546,  3280,  1403,   492,   329,   313,  3262,  1406,
    1491,  1713,  1780,  1932,   496,   497,   498,   499,   505,  3190,
    3191,  1723,   406,   145,  1726,   202,  1514,  1515,   504,    72,
     448,   507,   143,   349,    26,   241,  1524,   494,   495,   496,
     497,   498,   499,    53,   957,   467,   157,   503,   186,   133,
    1405,   162,   492,    11,  3349,   252,   253,   467,  1977,  1547,
     444,   377,   975,   503,  2976,   345,   979,   489,  2323,    26,
     113,  3242,    80,  3170,   196,    32,  1406,   245,   925,   489,
    1828,   503,  3061,    91,   931,   932,  2384,  1399,    46,   266,
     937,   268,  1809,   940,   941,  1903,   943,   944,   945,   946,
     268,  1468,   213,  2397,  1809,  1810,  1811,   926,   962,  2194,
    1809,  1810,   959,  1449,   968,  2956,   959,  1808,  2250,   966,
      78,    80,   233,   966,   498,  2257,  1828,  2259,   167,   335,
     268,   505,    91,  1654,  1655,  1835,   983,   984,   985,  1839,
       4,   133,  1842,  2677,     4,     9,   490,   491,   492,     9,
     494,   495,   496,   497,   498,   499,   959,  1004,   128,    59,
     266,  1709,   172,   966,  1554,   959,   372,  1566,     4,   280,
     367,   368,   966,     9,   925,  1022,   133,  2065,   289,   189,
    2068,  2168,   335,   934,   194,   155,  1033,  1034,  1035,  1038,
    1037,  1038,  1713,  1040,  1790,     5,    37,  3109,    37,  1682,
    2119,   407,  1723,   287,   198,  1726,   247,  1740,  1741,  1742,
     496,   497,   498,   499,   501,  2513,  1812,   198,   505,   372,
    1816,  1068,   232,  1819,   959,   268,  1709,    30,   424,    26,
     273,   966,   983,  1117,  1118,    32,  1120,  3184,  1085,  1086,
      69,    70,  1761,  2177,   350,  1728,   959,   640,   641,   642,
    1733,   457,   157,   966,   407,  1117,  1118,   162,  1120,   343,
     501,   501,   503,   347,   505,   505,   187,   167,   307,   308,
     309,   377,  1119,   501,     3,   503,  1123,  1124,   321,  2410,
      83,  1104,  1111,  1804,  1805,   457,  1133,  1134,  1135,    92,
     411,  1138,   413,   377,   337,   287,  1047,   501,   268,  1787,
    1690,   505,  2055,   273,   457,  1056,   407,  1828,   278,  2232,
    1157,   114,   967,    13,    14,  2238,   971,   173,   366,   504,
    1719,  2611,   507,  1074,   435,  1724,   489,   168,   233,   168,
     287,   370,  1083,   167,  1085,  1086,   133,  1857,  1858,  1859,
    1860,  1861,  1862,   503,  1173,  1865,  1866,  1867,  1868,  1869,
    1870,  1871,  1872,  1873,  1874,   347,   465,   349,   467,  2151,
    2152,  2153,   335,   204,   448,   204,   503,   169,   407,   363,
     503,  1460,   382,  1462,  1463,   280,    13,    14,   372,   220,
     236,   220,   157,   186,   162,   377,   343,   162,   558,   230,
     347,   230,   173,   436,   467,   503,   199,   654,   655,   372,
     657,   440,   445,  1891,   184,   185,   503,   307,   308,   309,
    1800,  2709,   451,   407,  1935,   504,   489,   503,   507,  1266,
     377,   504,     6,   503,   507,     9,   465,   503,  1275,  3341,
     503,  1828,    16,   504,   407,   504,   507,   504,   507,   241,
     507,  2360,   503,  3326,  2363,  3328,   504,    31,   503,   507,
     489,    35,  1299,   503,  1844,   236,   426,   504,   233,   504,
     507,   496,   507,   457,   503,    26,  1856,   437,     8,  1316,
     370,    32,   252,   253,   503,    15,    16,  2608,   219,    19,
      20,    21,    13,    14,   457,  3292,  3369,  1315,  2008,  2009,
     287,   448,  1339,  2285,  1315,  1315,  1886,  1315,  1345,  1346,
      26,  3308,    26,  1893,   486,   280,    32,   407,    32,  2496,
     411,   283,   413,   354,  1361,   354,   504,   504,   504,   507,
     507,   507,   411,  2495,   413,  2013,   504,  2060,   505,   507,
     371,  2279,   371,   335,  2665,    13,    14,  2480,  1935,  1929,
     440,  2062,   504,  1933,   504,   507,   343,   507,  1395,  1939,
     347,   451,  2148,   486,  2150,   411,  3363,   413,   505,  1406,
     504,  3368,   504,   507,   504,   507,  2538,   507,    13,    14,
     372,  2494,   133,  2496,  2095,  2096,  1423,  1400,   166,  1402,
     377,  1428,   363,   439,    13,    14,  1405,   367,   368,   504,
     393,  1406,   507,   396,   504,   504,   504,   507,   507,   507,
    1447,  1448,  2151,   503,  2153,   407,  1453,   133,  1455,   133,
      13,    14,  1455,  1460,  1461,  1462,  1463,   504,   504,   504,
     507,   507,   507,  2479,   504,  2481,   796,   507,  1475,  1476,
     411,   507,   413,   504,  1481,  2388,   507,  1484,  1481,    13,
      14,  1484,  1489,  2124,  1491,  1492,  1489,    13,    14,  1492,
    1497,   448,    13,    14,  1497,   457,  2254,  2255,   439,   504,
     504,  1455,   507,   507,    13,    14,   504,  1514,  1515,   507,
     503,  1422,  1519,  1511,  1521,   167,  2214,  1524,  1481,   504,
     504,  1484,   507,   504,  1511,   288,  1489,  1481,    59,  1492,
    1484,  3097,  1511,   408,  1497,  1489,  1543,   503,  1492,  1511,
    1547,   486,  1549,  1497,  1511,   219,  1511,  1554,  1555,  1556,
    1557,  1558,  1559,  1560,  1561,  1562,  1563,  3015,  2510,   343,
    1567,  1568,  2514,    40,  2516,  1572,   287,    13,    14,  1576,
    2251,   148,  1579,  1580,  1581,  1582,  1583,  1584,  1585,  1586,
    1587,   148,  1455,  1590,   148,   285,  1481,  2878,   148,  1484,
    1597,   504,  1599,   691,  1489,   693,  1640,  1492,    13,    14,
     503,   287,  1497,   287,    13,    14,    13,    14,  1481,    13,
      14,  1484,   268,  1620,    13,    14,  1489,    40,  1640,  1492,
    2723,   457,   343,  2770,  1497,    87,   347,    72,    13,    14,
      13,    14,   148,    78,    13,    14,  1643,  3052,    13,    14,
     558,    13,    14,  1618,    13,    14,    91,  1654,  1655,    13,
      14,  2513,    13,    14,   469,   985,   377,   343,   454,   343,
     503,   347,   317,   347,   358,   359,   358,   359,   113,   503,
     115,   256,   257,   358,   359,  2225,   148,   367,   368,   358,
     359,   503,  2840,  1690,   503,  3290,   450,   451,    39,  3294,
     503,   377,  1699,   377,  1701,   503,  1607,  3303,  3304,  3335,
    3336,   148,  1685,  1085,  1086,   505,   148,   148,   283,   419,
     503,   503,  1695,   503,  1697,   504,  2275,  1700,   503,   215,
     409,   220,  2279,  1706,   293,  1708,   503,   448,   220,   220,
     503,   290,  1739,    40,  2414,  2415,  1743,  1720,    40,  1746,
    1747,    40,  1725,   231,  2448,  3350,  1729,  1730,  1731,  1732,
    2678,  1734,  1735,  1083,   503,     5,     5,   202,    60,     5,
     503,    60,   448,   503,   448,   503,   503,     5,   503,     5,
     503,     5,     9,  1780,   144,   503,   295,   507,  1776,   466,
    1787,   102,  3197,   507,   504,    40,   215,   377,   162,   162,
     490,   491,   492,  1800,   494,   495,   496,   497,   498,   499,
     280,    59,   104,   278,  3262,   104,   231,  1814,   503,   419,
     503,    91,   419,   419,    59,    59,   259,   419,   419,   507,
      40,  1828,   465,   268,  3239,   148,    98,  1157,   273,   268,
    2471,  2587,  2513,   513,   268,   503,    40,  1844,  2531,   503,
     268,  1848,  1849,     3,  1851,   503,   268,     9,    40,  1856,
    1857,  1858,  1859,  1860,  1861,  1862,    39,   501,  1865,  1866,
    1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,    60,  2548,
    2568,   417,  3287,  1880,  1881,   417,   321,  1884,   796,  1886,
     501,   101,   419,   103,  1891,   105,  1893,   419,   505,  3021,
     419,   419,   337,   504,   167,   197,   504,   462,   197,  2761,
     504,   504,   220,   220,   504,   504,  1913,   113,   504,  1916,
     507,  1918,   104,  1916,   507,  1922,   504,  1828,   275,  1922,
     503,   275,  1929,  1834,   503,  2605,  1933,   503,  1935,    11,
    1937,   461,  1939,   345,   502,   507,   507,   503,   417,   513,
     273,  1948,   512,   419,   246,   503,   176,   246,   158,   167,
     507,   504,   254,  1916,   213,   254,   445,   507,   259,  1922,
     380,   167,  1916,  2513,   266,   222,  2874,   266,  1922,   284,
     143,   306,  1979,  3131,   306,   176,   215,  1984,  1985,   171,
    2893,   504,   507,   507,   157,  2913,  1316,   222,   503,   162,
     268,   436,   289,   222,   281,   326,   298,  3076,   457,   298,
     445,  2008,  2009,   503,  2013,   197,  2013,   148,   503,   148,
     148,   465,   148,    40,   268,  1345,  1346,  2773,  2774,   283,
    2027,  1916,   504,  2030,  1935,  2032,  2806,  1922,   501,   486,
     504,  1361,   283,  2583,   486,   504,   504,   504,   504,    40,
     213,  2048,  2049,  1916,    59,   167,    11,   349,  2055,  1922,
     349,  2058,    40,   162,   246,  2058,   504,   176,   162,   503,
     233,   512,   254,   503,  2744,   502,   504,   985,  2075,   504,
     372,   504,  2075,   372,   266,   507,   503,   167,   504,  2638,
    2761,  2088,   419,   486,   505,  2766,   504,  2070,   504,   391,
     504,   297,   391,   503,   151,  2058,   245,   503,  2105,  2106,
     462,   307,   308,   309,  2058,   503,   298,   280,   503,   503,
      40,    59,  2075,   284,   507,  2122,   289,  2124,  3265,   284,
     442,  2075,   488,   507,   492,   239,  2133,   558,    59,   259,
      59,   419,  2813,  2814,   268,   148,   503,   198,   148,   148,
     419,   504,   419,   419,  2151,  2152,  2153,   502,   419,   275,
     275,   503,    40,  3015,   345,   504,   283,   349,  3110,   507,
     281,   465,    40,   148,   370,   504,   502,   143,    37,   167,
     273,   162,   502,    42,    59,   504,   503,   503,   181,   504,
     372,   157,    78,  2742,   504,  2058,   162,  2194,   504,   139,
       7,     8,   504,   504,   194,    12,   167,  2877,   167,   391,
      17,   407,  2075,   503,    21,   504,    23,    24,   504,   503,
    2219,    28,    29,    30,   294,   513,    33,   507,  2225,    36,
      37,  2209,  2772,    40,  1554,   284,    43,    44,  2209,  2209,
      99,  2209,   176,   351,   440,   504,  2243,   213,   503,  1157,
     148,   504,   504,   503,   171,   451,   507,  2158,   430,    40,
      40,   504,  2235,   167,    84,   507,   504,   233,   445,   465,
     502,   504,   435,   503,   464,   451,   507,    84,    85,   194,
     492,   504,  2279,   504,    59,   503,   503,   283,  2285,    96,
     504,   504,   507,   489,   101,   102,   103,   104,   105,   504,
     504,  2202,   504,   504,   200,   504,  2994,   503,   518,   168,
      96,   504,   522,   113,   280,   525,   504,     8,  2219,   504,
      11,   465,  3264,   289,    15,    16,  2323,  2874,    40,   503,
    2323,   222,    86,  3004,  3005,   187,   273,   273,   501,   505,
     505,   504,   505,   505,  3015,   204,   307,   308,   309,   505,
    3253,   505,   173,   419,   505,    46,   505,   505,   505,   505,
     505,   220,    53,  2425,   505,  2362,   419,   505,   505,  2362,
    1690,   230,   505,   505,   492,   796,    40,   198,  2279,  2323,
    2377,   167,   505,   505,  2381,  2382,  2287,    78,  2289,  2388,
     504,  2388,  2293,   503,  2295,  3078,   268,   105,   608,   505,
     505,  2398,   505,   262,  2401,  3099,  2403,   505,  1316,   370,
    3262,   465,    40,  2410,  2411,   236,   505,  2414,  2415,   505,
     505,  2420,  2419,  2420,  3062,   283,  3064,   505,   505,  2426,
     505,   505,   505,     9,   505,   503,   505,  1345,  1346,   344,
     503,   503,   507,  3074,  2441,   328,   407,   507,   307,   504,
     141,  2439,    59,  1361,  2451,   314,   504,  2445,   194,   187,
    2323,   502,  2439,   507,   450,    89,   504,   288,  3077,   435,
    2439,  3080,  2471,   337,  2471,  3015,   686,  2439,   503,   440,
    1800,   172,  2439,    40,  2439,   148,   504,   120,   148,    40,
     451,   504,   359,   359,   504,   354,    40,   503,   189,   503,
      40,  2474,  2475,   194,   445,   507,  3189,   303,   503,   503,
    3208,  3199,   371,  2510,   273,   244,  2513,  2514,   186,  2516,
     445,   307,   308,   309,  1844,   735,   736,   737,   738,  2502,
     430,   503,     9,    72,   286,   501,  1856,    72,   503,   505,
      78,   232,   503,   361,  2517,  2518,  2519,  2520,  2521,  2522,
    2523,  2524,  2525,  2526,  3185,   504,  2544,   504,   504,    59,
      91,   129,   492,   266,   985,   283,  1886,   430,    40,  2547,
     503,   286,   286,  1893,   503,   200,  2547,  2547,   504,  2547,
     504,   440,  2570,   283,   370,  2573,  2583,   283,   504,   450,
     411,  3262,   413,   504,   285,   504,   118,   442,   377,   144,
     358,    25,    36,   358,   291,   684,  2766,  2497,  2605,  1929,
    2510,  2608,  2513,  1933,  1707,   436,  2146,  1619,   439,  1939,
      14,   407,  2208,   600,  2874,  2285,  3214,  2540,  2625,  2626,
    2987,  2630,  3318,  2630,  3266,  3275,  2633,  3311,  3038,  2540,
    2633,   427,  1144,  2139,  2152,  2642,  1554,  2559,  3264,  3273,
    2136,  3261,  2489,  1313,   440,  1406,  2450,  2654,  1394,  1345,
    3101,  3161,  2659,  2660,     3,   451,     5,  2664,  2665,  2516,
    2449,  3239,  2669,  3193,  3340,  2672,  2673,  3163,  2439,   465,
    2677,  2678,  2122,   958,  2681,   958,   167,  3236,  2685,  2088,
    1104,   382,  2685,  2344,    40,  2692,  3248,  1679,  1643,  2105,
    2699,  1127,  3172,   489,  3066,  1678,  1126,    21,  2075,  2633,
    2917,   518,  1927,   606,    60,   522,   617,   503,   525,  2323,
    1129,  2322,  3262,  2369,  3008,   532,  1363,     0,   938,   936,
    1828,   934,  2685,  3176,  2635,  3175,  1157,   934,  1986,  2736,
    2382,  2685,   934,  1949,  2089,    18,  2031,  2744,    21,  2028,
     934,  2692,  1476,   560,   561,   562,  1988,  2395,   104,   105,
    1618,  1935,    96,    36,    -1,    -1,  2763,   113,   107,   108,
    2743,    -1,    45,    -1,    -1,  2772,    -1,    -1,    -1,    55,
      -1,    -1,  1690,    -1,    -1,    -1,    -1,    -1,  2689,    -1,
      -1,    -1,   599,   600,   601,    -1,   487,    -1,    -1,   606,
    2685,   608,    -1,   494,   495,   496,   497,   498,   499,  2806,
     617,    84,    85,    86,   621,   622,   297,    -1,    -1,   626,
     627,    -1,  2685,    96,   100,   171,   307,   308,   309,    -1,
      -1,    -1,    -1,   640,   641,   642,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,    -1,   184,   185,   654,   655,  2846,
     657,   197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   137,    -1,   670,    -1,   141,    -1,  2855,    -1,   676,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2874,    -1,   686,
    2877,  2878,   689,    -1,    -1,    -1,    -1,   163,    -1,   370,
     166,    -1,  1800,    -1,  2893,  1316,  2893,    -1,    -1,    -1,
     246,    -1,    -1,    -1,    -1,  2225,   182,    -1,   254,   248,
     249,   250,   251,   252,   253,    -1,  2913,   256,   257,    -1,
     266,    -1,   268,  2920,  1345,  1346,   407,    -1,   735,   736,
     737,   738,    -1,  1143,  2931,  2932,  1844,    -1,  2935,    -1,
    1361,    -1,    -1,    -1,    -1,    -1,  1156,    -1,  1856,    -1,
    2851,    -1,   298,    -1,    -1,    37,    -1,    -1,    -1,   440,
      42,    -1,    -1,    -1,  2961,    -1,    -1,  1177,    -1,    -1,
     451,    -1,    -1,  2874,    -1,    -1,    -1,    -1,  1886,    -1,
      -1,    -1,    -1,    -1,   465,  1893,    -1,    -1,  2985,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,    -1,    -1,
      -1,    -1,    -1,   349,    -1,   281,    -1,    -1,   489,    -1,
      -1,    -1,   558,    -1,    -1,    -1,    -1,    99,  3015,    -1,
      -1,  1929,   503,  2996,    -1,  1933,   372,   303,   367,   368,
      -1,  1939,    -1,    -1,    -1,    -1,    -1,    -1,  3026,  3027,
      -1,    -1,    -1,  3016,  3017,   391,  2947,   393,    -1,    -1,
     396,  3048,    -1,   329,    -1,  3052,    -1,    -1,    -1,  3052,
      -1,    -1,  3035,    -1,    -1,  3062,    -1,  3064,    -1,  3066,
      -1,    -1,    -1,  3070,    -1,  3072,    -1,  3074,   107,   108,
      -1,    -1,    -1,    -1,    -1,    -1,   168,  3084,    -1,    -1,
    2410,    -1,    -1,    -1,   176,    -1,    -1,     0,    -1,    -1,
    3097,    -1,  1312,    -1,    -1,    -1,    -1,  1317,  3052,    -1,
    3098,    -1,  3100,  3110,  3015,    -1,    -1,    -1,  3115,    -1,
      -1,    -1,   204,    -1,    -1,    -1,    -1,    -1,   935,   936,
      -1,   938,    -1,  1554,   941,    -1,    -1,    -1,   220,    -1,
     947,   948,    -1,    -1,   483,   484,   953,    -1,   230,    -1,
      -1,  3139,   959,    -1,    -1,   184,   185,   503,    -1,   966,
      -1,    -1,    -1,    -1,    -1,  3162,    -1,  3155,    -1,   976,
      -1,  3159,    -1,    -1,    -1,  3172,    -1,    -1,    -1,    -1,
     262,    -1,    -1,    -1,    -1,   992,    -1,    -1,  3185,  3052,
      -1,    -1,    -1,  2513,    -1,    98,    -1,    -1,    -1,    -1,
    3197,   283,    -1,    -1,  3197,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3215,   248,
     249,   250,   251,   252,   253,   307,    -1,   256,   257,    -1,
      -1,  3132,   314,    -1,    -1,  1042,    -1,    -1,    -1,    -1,
     143,    -1,  3239,    -1,   517,    -1,  3239,    -1,    -1,    -1,
     796,    -1,    -1,  3197,   157,    -1,  3253,    -1,    -1,   162,
      -1,    -1,    -1,  2583,   167,  3262,    -1,  3264,  1478,  1690,
      -1,    -1,   354,   176,    -1,    -1,    -1,    -1,   181,    -1,
    1087,    -1,    -1,  1090,    -1,  3258,    -1,    -1,  2608,   371,
    3287,  3279,   565,   566,  3287,  3239,    -1,  1104,  1105,    -1,
      -1,    -1,    -1,    -1,  1111,  3302,  3303,  3304,    -1,    -1,
     213,    -1,    -1,    -1,    -1,    -1,    -1,  2225,  3306,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1133,    -1,    -1,    -1,
     233,    -1,  3329,   606,  3197,    -1,  1143,  1144,   367,   368,
      -1,    -1,    37,  3287,   617,  2665,    -1,    42,    -1,  1156,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,   440,    15,
      16,  3262,   147,   445,    -1,    -1,  1173,    -1,    -1,    -1,
    1177,    -1,    -1,  3370,  1181,    -1,  3239,   280,    -1,  1800,
     283,    -1,   167,    -1,    -1,    -1,   289,    -1,    -1,    -1,
      46,    -1,   665,     8,    -1,    -1,    11,    53,  3299,    -1,
      15,    16,    -1,    -1,    99,    -1,    -1,  1617,    -1,  1619,
      -1,   684,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
    1630,    -1,    78,  1844,  3287,   328,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,  1856,    -1,    -1,    53,   985,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,    -1,
      -1,    -1,  2772,    -1,   483,   484,    -1,    -1,  1668,    -1,
      -1,    -1,    -1,    78,    -1,  1886,    -1,   173,    -1,    -1,
      -1,    -1,  1893,   168,   503,    -1,    99,    -1,    -1,    -1,
      -1,    -1,    12,    -1,    -1,   141,  2806,    17,    -1,    -1,
      -1,    -1,   198,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,  2410,  1310,   407,  1312,    -1,    -1,  1929,   204,
    1317,    -1,  1933,    43,    44,    -1,   172,    -1,  1939,    -1,
      -1,  1328,   307,   308,   309,   220,   141,    -1,    -1,    -1,
     236,    -1,   435,   189,    -1,   230,    -1,    -1,   194,    -1,
      -1,    -1,   445,    -1,    -1,   168,  1756,  1757,  1758,  1759,
    1760,  1358,    -1,    -1,    -1,    -1,  1363,   172,  2878,   462,
      -1,   464,   465,    -1,    -1,    -1,    -1,   262,    -1,    -1,
      -1,    -1,   102,    -1,   189,    -1,   232,    -1,    -1,   194,
      -1,   204,   288,    -1,    -1,   370,    -1,  1394,   283,    -1,
    1397,    -1,  1399,  1400,    -1,  1402,  1403,   220,   501,    -1,
      -1,   504,   505,   506,    -1,  2513,    -1,   230,    -1,    -1,
      -1,  1157,   307,    -1,    -1,    -1,    -1,   232,    -1,   314,
      -1,    -1,   407,    -1,    -1,    -1,    -1,   147,    -1,   285,
      -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,   262,
    1447,  1448,    -1,    -1,    -1,    -1,  1453,   167,  1455,    -1,
      -1,    -1,    -1,   926,    -1,   440,   167,   363,    -1,   354,
     283,  1468,    -1,  1470,  1471,    -1,   451,    -1,    -1,    -1,
     285,  1478,    -1,    -1,  1481,  2583,   371,  1484,    -1,    -1,
     465,    -1,  1489,    -1,   307,  1492,   959,    -1,    -1,    -1,
    1497,   314,  1499,   966,  1501,  3015,    -1,  1907,    -1,    -1,
    2608,    -1,    -1,    -1,   489,   411,    -1,   413,   558,    -1,
      -1,   184,   185,    -1,    -1,    -1,  1523,    -1,   503,    -1,
      -1,  1528,    -1,    -1,   430,    -1,   382,  1000,    -1,    -1,
     436,   354,    -1,   439,    -1,    -1,    -1,    -1,  1011,     8,
      -1,    -1,    11,    -1,    -1,   440,    15,    16,   371,    -1,
      19,    20,    21,    -1,    -1,    -1,    -1,  2665,    -1,  1566,
      -1,    -1,    -1,    -1,    -1,  1038,    -1,   382,    -1,    -1,
    1316,    -1,    -1,    -1,    -1,   248,   249,   250,   251,   252,
     253,    -1,    -1,   256,   257,    -1,    -1,   307,   308,   309,
      -1,    -1,    -1,    -1,    -1,    -1,   307,   308,   309,  1345,
    1346,    -1,    -1,    -1,  2225,    -1,    -1,    -1,  1615,    -1,
    1617,    -1,  1619,    -1,    -1,  1361,    -1,   440,    -1,    -1,
      -1,    -1,   445,  1630,  1631,    -1,    -1,    -1,    -1,    -1,
      -1,   487,    -1,    -1,    -1,    -1,  1643,    -1,   494,   495,
     496,   497,   498,   499,  1117,  1118,    -1,  1120,    -1,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,
      -1,  1668,    -1,  1670,  2772,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   487,    -1,    -1,    -1,    -1,  1684,  1685,   494,
     495,   496,   497,   498,   499,    -1,    -1,   407,  1695,  1696,
    1697,  1698,    -1,  1700,   367,   368,   407,    -1,  2806,  1706,
      -1,  1708,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1719,  1720,    -1,    -1,    -1,  1724,  1725,    -1,
     440,    -1,  1729,  1730,  1731,  1732,    -1,  1734,  1735,   440,
      -1,   451,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     451,    -1,  3262,    -1,    -1,   465,   796,    -1,   217,  1756,
    1757,  1758,  1759,  1760,   465,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1774,    -1,   489,
    2878,    -1,    -1,    -1,    -1,    -1,    -1,   558,   489,    -1,
      -1,    -1,    -1,   503,    -1,    -1,    -1,    -1,    -1,  2410,
      -1,    -1,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2210,    -1,   532,    -1,    -1,   558,    -1,    -1,  1554,    -1,
     483,   484,  2222,  2223,  2224,    -1,   285,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2237,     0,    -1,
    2240,   561,   562,    -1,    -1,  2245,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1857,  1858,  1859,  1860,  1861,  1862,    -1,    -1,  1865,  1866,
    1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1895,    -1,
      -1,    -1,  2513,   941,    -1,    -1,    -1,    -1,    -1,    -1,
    1907,    -1,    -1,    -1,    -1,    -1,    -1,  3015,    -1,  1916,
      -1,    -1,    -1,    -1,    -1,  1922,     0,    -1,    -1,    -1,
    1927,    -1,    -1,    -1,    -1,  1932,    98,    -1,    -1,    -1,
      -1,    -1,  1405,    -1,    -1,   985,    -1,    -1,    -1,    -1,
      -1,  2351,  2352,  2353,  1690,    -1,   676,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2583,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1977,   143,    -1,    -1,  1981,    -1,    -1,    -1,    -1,  1986,
      -1,    -1,    -1,    -1,    -1,   157,    -1,  2608,    -1,    -1,
     162,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,
      -1,  2008,  2009,    -1,   176,    -1,    -1,    -1,  1481,   181,
      -1,  1484,    -1,    -1,    98,   796,  1489,    -1,  2025,  1492,
      -1,   490,   491,   492,  1497,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1511,    -1,
      -1,   213,    -1,   796,  2665,    -1,    -1,    -1,    -1,    -1,
      -1,  2058,    -1,    -1,  1800,  2465,    -1,    -1,    -1,   143,
      -1,   233,    -1,  2070,    -1,    -1,    -1,    -1,  2075,    -1,
      -1,    -1,  2079,   157,    -1,    -1,  1124,    -1,   162,    -1,
      -1,    -1,    -1,   167,    -1,  1133,    -1,    -1,    -1,    -1,
      -1,    -1,   176,    -1,    -1,    -1,  1569,   181,  1844,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1157,   280,    -1,
    1856,   283,  2119,    -1,    -1,  2122,    -1,   289,  2125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   213,
      -1,    -1,    -1,    -1,  2141,    -1,    -1,    -1,    -1,  2549,
    1886,    -1,    -1,    -1,    -1,    -1,    -1,  1893,    -1,   233,
      -1,  2772,    -1,    -1,  3262,    -1,   328,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,  1640,    15,    16,
      -1,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,   351,
      -1,    -1,    -1,  1929,    -1,  2806,    -1,  1933,    -1,    -1,
      -1,    -1,    -1,  1939,    -1,    -1,   280,  2204,    -1,   283,
      -1,    -1,    -1,  2210,   985,   289,    -1,    -1,  2618,  2619,
    2620,  2621,    -1,    -1,  2221,  2222,  2223,  2224,    -1,    -1,
      -1,    -1,    -1,   953,    -1,    -1,    -1,    -1,  2235,    -1,
    2237,    -1,   985,  2240,    -1,   407,    -1,    -1,  2245,    -1,
      -1,    -1,    -1,    -1,   328,    -1,   976,    -1,    -1,    -1,
      -1,  2258,    -1,    -1,    -1,    -1,    -1,  2878,    -1,    -1,
      -1,    -1,    -1,   435,    -1,    -1,  1316,   351,  2275,    -1,
      -1,    -1,    -1,   445,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2291,  2292,    -1,  2294,    -1,    -1,
     462,    -1,   464,   465,  1767,  1345,  1346,    -1,    -1,    -1,
      -1,    -1,    -1,  1776,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1361,  1042,    -1,    -1,    -1,  2323,    -1,    -1,    -1,
      -1,    -1,    -1,   407,    -1,    -1,    -1,    -1,    -1,   501,
      -1,    -1,   504,   505,   506,    -1,  2343,    -1,    -1,    -1,
    2750,    -1,    -1,    -1,  2351,  2352,  2353,   194,    -1,    -1,
      -1,   435,    -1,  2360,    -1,  2362,  2363,    -1,    -1,    -1,
      -1,   445,  2369,    -1,    -1,     8,    -1,    -1,    11,    -1,
     217,    -1,    15,    16,  1104,  1105,  1157,  2384,   462,   941,
     464,   465,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3015,    -1,    -1,    -1,    -1,  1447,
    1448,    -1,    -1,    46,  1157,  1453,    -1,  2414,  2415,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    -1,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    78,  2443,    -1,   285,    -1,
      -1,    -1,  2449,  1916,    -1,    -1,    -1,    -1,    -1,  1922,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2465,    -1,
      -1,    -1,  2469,    -1,    -1,    -1,  2473,  2474,  2475,    -1,
      -1,    -1,  2479,  2480,  2481,    -1,  2483,    -1,    -1,  2225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2502,    -1,  2504,   141,    -1,
      -1,    -1,    -1,    -1,  1554,    -1,    -1,    -1,    -1,    -1,
    2517,  2518,  2519,  2520,  2521,  2522,  2523,  2524,  2525,  2526,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,    -1,  1316,  2543,    -1,    -1,    -1,
    2013,    -1,  2549,    -1,    -1,    -1,   189,    -1,    -1,    -1,
      -1,   194,  2559,    -1,    -1,    -1,    -1,    -1,  2031,    -1,
      -1,    -1,    -1,  1316,  1345,  1346,    -1,    -1,  2575,    -1,
      -1,  1133,    -1,    -1,  2047,    -1,    -1,    -1,    -1,    -1,
    1361,    -1,    -1,    -1,    -1,  2058,    -1,  2594,    -1,   232,
      -1,    -1,  1345,  1346,    -1,  1643,    -1,    -1,  2605,    -1,
      -1,    -1,  2075,    -1,  2611,    -1,    -1,    -1,  1361,    -1,
      -1,  2618,  2619,  2620,  2621,    -1,    -1,    -1,    -1,  3029,
      -1,    -1,    -1,  2630,    -1,    -1,  2633,    -1,    -1,    -1,
    2637,  2638,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3049,
    1690,  3262,   285,   490,   491,   492,  2653,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2410,    -1,    -1,    -1,    -1,  1399,
    1400,    -1,  1402,    -1,    -1,    -1,  2683,    -1,  2685,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2699,    -1,    -1,    -1,  2703,    -1,  3108,    -1,
      -1,    -1,  2709,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2723,    -1,    -1,    -1,
      -1,    -1,  2729,    -1,    -1,    -1,    -1,    -1,  3138,    -1,
      -1,    -1,    -1,    -1,    -1,  2742,  2743,  2744,    -1,   382,
    1470,    -1,    -1,  2750,    -1,    -1,  2219,    -1,    -1,    -1,
    1800,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2767,    -1,    -1,    -1,    -1,    -1,    -1,  2513,    -1,  1499,
      -1,  1501,    -1,  1554,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,
      -1,    -1,    -1,    -1,  1844,    -1,    -1,    -1,    -1,    -1,
      -1,  1554,    -1,    -1,    -1,    -1,  1856,    -1,    -1,  1857,
    1858,  1859,  1860,  1861,  1862,    -1,    -1,  1865,  1866,  1867,
    1868,  1869,  1870,  1871,  1872,  1873,  1874,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2842,  1886,  2583,    -1,    -1,
      -1,    -1,    -1,  1893,   487,    -1,    -1,  2854,    -1,    -1,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,  2868,  2608,    -1,    -1,    -1,    -1,    -1,     8,    -1,
    2877,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,  1929,
      -1,    -1,    -1,  1933,    -1,  1447,  1448,    -1,    -1,  1939,
      -1,  1453,    -1,    -1,    -1,    -1,  2903,    -1,    -1,    -1,
      -1,    -1,  2909,    -1,    -1,    -1,    46,    -1,    -1,  1690,
    2917,    -1,    -1,    53,     8,  2388,    -1,    11,    -1,  2665,
      -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2943,  1690,    78,    -1,
    1670,    -1,    36,     8,    -1,    -1,    11,  2420,    -1,    -1,
      15,    16,    -1,    -1,    -1,  1685,    -1,    -1,  2965,    -1,
    2008,  2009,   194,  2970,    -1,  1695,  2439,  1697,    -1,    -1,
    1700,    -1,  2445,    -1,    -1,    -1,  1706,    -1,  1708,    -1,
      -1,    46,    -1,    -1,    -1,   217,    -1,    -1,    53,  2996,
    1720,    -1,    -1,   652,   653,  1725,    -1,    -1,  2471,  1729,
    1730,  1731,  1732,    -1,  1734,  1735,    -1,    -1,    -1,  3016,
    3017,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,  1800,
      -1,    -1,  3029,    -1,  3031,    -1,  2772,    -1,  3035,    -1,
      -1,    -1,   172,  1595,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3049,    -1,    -1,  3052,    -1,  1800,    -1,   189,
      -1,    -1,    -1,   285,   194,    -1,    -1,    -1,   717,    -1,
    2806,    -1,   721,  1844,    -1,  3072,    -1,    -1,    -1,  3076,
    3077,  2544,    -1,  3080,  2122,  1856,   141,    -1,    -1,    -1,
      -1,  1643,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1844,   232,    -1,  3101,    -1,    -1,  2570,    -1,    -1,
    2573,  3108,    -1,  1856,    -1,  1886,     8,   172,    -1,    11,
      -1,    -1,  1893,    15,    16,    -1,    -1,    19,    20,    21,
      -1,    -1,    -1,   217,   189,    -1,    -1,    -1,    -1,   194,
      -1,  3138,  2878,  1886,    36,    -1,    -1,    -1,    -1,    -1,
    1893,    -1,    -1,    -1,    -1,   285,    -1,    -1,  1929,    -1,
      -1,    -1,  1933,    -1,    -1,    -1,    -1,  2630,  1939,    -1,
      -1,    -1,    -1,    -1,    -1,  1895,    -1,   232,    -1,  3176,
      -1,    -1,    -1,    -1,    -1,  2225,  1929,    -1,    -1,    -1,
    1933,    -1,    -1,    -1,    -1,    -1,  1939,    -1,    -1,    -1,
    3197,   285,    -1,    -1,    -1,    -1,    -1,  1927,    -1,    -1,
      -1,    -1,  1932,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2685,    -1,    -1,    -1,    -1,  3224,    -1,    -1,
     285,    -1,    -1,    -1,    -1,    -1,  2699,    -1,    -1,  3236,
    3237,    -1,  3239,  3240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3248,   382,    -1,    -1,    -1,    -1,  1977,    -1,    -1,
      -1,  3258,    -1,    -1,    -1,    -1,  1986,    -1,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,  3015,
      -1,    -1,   931,  3280,    -1,    -1,    -1,    -1,   937,    -1,
    3287,   940,    -1,    -1,   943,   944,   945,   946,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1857,  1858,  1859,  1860,  1861,
    1862,    -1,    -1,  1865,  1866,  1867,  1868,  1869,  1870,  1871,
    1872,  1873,  1874,    -1,    -1,   217,    -1,   382,  3325,    -1,
      -1,    -1,    -1,    -1,    -1,   984,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3340,    -1,    -1,    -1,    -1,    -1,    -1,
    2070,    -1,    -1,    -1,    -1,  1004,    -1,   487,    -1,    -1,
      -1,    -1,    -1,    -1,   494,   495,   496,   497,   498,   499,
    2410,    -1,    -1,  1022,    -1,    -1,  2414,  2415,    -1,    -1,
      -1,    -1,    -1,    -1,  1033,  1034,  1035,    -1,  1037,  1038,
      -1,    -1,  2855,   285,    -1,    -1,    -1,    -1,    -1,  2119,
      -1,    -1,    -1,    -1,    -1,  2125,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,  1068,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2893,    -1,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2225,    -1,  2008,  2009,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1119,    -1,    -1,  2513,  1123,  1124,    -1,    -1,    -1,    -1,
      -1,    -1,  2225,    -1,    -1,  1134,  1135,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,  2235,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,  3262,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,  2583,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3026,  3027,    -1,    -1,  2605,  2608,    -1,
    2122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    -1,  2630,    19,    20,    21,    -1,    -1,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,  2654,  1266,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2665,  1275,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3098,    -1,  3100,    -1,  2410,
    2360,    -1,    -1,  2363,    -1,    -1,    -1,    -1,    -1,  2369,
    1299,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2410,    -1,    -1,
      -1,    -1,    -1,   172,    -1,     8,  3139,    -1,    11,    -1,
      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,
     189,    -1,  3155,    -1,    -1,   194,  3159,    -1,    -1,   217,
      -1,    -1,    -1,    36,    -1,    -1,  2744,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2772,   232,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2513,    -1,    -1,    -1,    -1,    -1,    -1,  2469,
      -1,    -1,    -1,  2473,  2474,  2475,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2806,   285,    -1,   268,
    2513,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,  1428,
      -1,    -1,  2502,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,   217,    -1,    -1,    -1,    -1,    -1,  2517,  2518,  2519,
    2520,  2521,  2522,  2523,  2524,  2525,  2526,    -1,    -1,    -1,
      -1,  1460,  2583,  1462,  1463,    -1,  3279,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,  1475,  1476,    -1,    15,
      16,    -1,    -1,    -1,    -1,    -1,    -1,  2608,  2878,  2877,
    2583,    -1,  1491,  3306,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      46,    -1,  2414,  2415,    -1,  2608,    -1,    53,    -1,    -1,
    1519,    -1,  1521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   382,   217,    -1,    -1,    -1,    -1,    -1,
      -1,  2611,    78,    -1,  2665,    -1,    -1,    -1,    -1,    -1,
    1549,    -1,    -1,    -1,    -1,    -1,  1555,  1556,  1557,  1558,
    1559,  1560,  1561,  1562,    -1,    -1,    -1,  2637,  1567,  1568,
      -1,    -1,  2665,  1572,    -1,    -1,    -1,  1576,    -1,    -1,
    1579,  1580,  1581,  1582,  1583,  1584,  1585,  1586,  1587,    -1,
      -1,  1590,    -1,    -1,    -1,    -1,    -1,    -1,  1597,    -1,
    1599,    -1,   285,    -1,    -1,   141,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1620,   490,   491,   492,  3015,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,   172,    -1,   487,    -1,
      -1,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,  2772,    -1,   189,    -1,  1654,  1655,    -1,   194,    -1,
      -1,    -1,    -1,    -1,   513,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2743,    -1,    -1,    -1,    -1,    -1,  2772,
      -1,    -1,    -1,    -1,  3072,  2806,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,
      -1,    -1,    -1,  2605,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2806,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,  2630,    -1,
      -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,    -1,
    1739,    -1,    -1,    -1,  1743,    -1,    -1,  1746,  1747,   285,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2878,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1780,   941,    -1,    -1,  2878,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    95,    -1,     0,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,  2909,
      34,    35,  2744,    -1,    -1,    -1,   382,  2917,    -1,  1848,
    1849,   142,  1851,    47,    -1,    -1,    -1,    -1,    52,    -1,
      -1,   152,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,
      -1,    -1,  3262,   164,    -1,    -1,    -1,    -1,   169,    73,
      -1,  1880,  1881,    -1,    -1,  1884,    -1,    -1,    -1,    -1,
      84,    -1,    -1,    -1,  3015,  2965,    -1,    -1,  1057,    -1,
    2970,    -1,    96,    -1,    98,    -1,    -1,   198,    -1,    -1,
      -1,    -1,    -1,    -1,  1913,   109,    -1,    -1,    -1,  1918,
      -1,    -1,  3015,    -1,    -1,    -1,  2996,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1937,   133,
      -1,  1100,    -1,    -1,    -1,   139,  3016,  3017,    -1,  1948,
     241,   487,    -1,   147,   245,   149,   150,    -1,   494,   495,
     496,   497,   498,   499,    -1,  3035,    -1,    -1,    -1,   163,
      -1,    -1,    -1,   167,  1133,  2877,    -1,    -1,    -1,    -1,
    1979,    -1,    -1,    -1,    -1,  1984,  1985,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,
       8,    -1,    -1,    11,    -1,    -1,  3076,    15,    16,    -1,
      -1,    19,    20,    21,    -1,   209,    -1,    -1,    -1,    -1,
      -1,   312,    -1,    -1,  1183,    -1,    -1,    -1,  2027,    -1,
      -1,  2030,    -1,  2032,    -1,    -1,   327,    -1,    46,    -1,
      -1,   235,    -1,    -1,    -1,    53,    -1,    -1,    -1,  2048,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,   360,
      78,    -1,   363,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,   372,    -1,    -1,   375,    -1,    -1,    -1,    46,  2088,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,   393,    -1,    -1,    -1,  2105,  2106,    -1,    -1,
      -1,    -1,    -1,   307,   308,   309,   407,    -1,    -1,    -1,
      78,   315,    -1,   414,   318,  2124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   424,  2133,    -1,    -1,    -1,    -1,   430,
      -1,  3262,    -1,    -1,    -1,  1304,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,    -1,   172,    -1,   457,    -1,    -1,  3262,
    3072,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,    -1,
      -1,   189,    -1,   377,    -1,    -1,   194,   381,  3258,    -1,
      -1,    -1,    -1,    -1,    -1,  2194,    -1,   391,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,   407,   172,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,   427,    -1,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2243,    -1,   440,    -1,    -1,   443,
      -1,    -1,   446,    -1,    -1,    -1,    -1,   451,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,  1426,    -1,    -1,
      -1,   465,    -1,    -1,   232,    -1,    -1,   285,    -1,    -1,
      -1,    -1,    -1,    -1,  1443,    -1,  1445,    -1,  1447,  1448,
      -1,  1450,    -1,    -1,  1453,   489,    -1,  1456,    -1,    -1,
    1459,    -1,    -1,    -1,    -1,  1464,    -1,    -1,  1467,   503,
     268,    -1,   506,   271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    26,    -1,   285,    -1,    -1,
     288,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1517,    60,
      -1,    -1,    -1,  1522,    -1,    -1,  1525,  1526,  1527,    -1,
      -1,    -1,  1531,    -1,   382,    -1,  1535,    -1,  2377,    -1,
      -1,    -1,  2381,  2382,    -1,    -1,    -1,    -1,    -1,  2388,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2398,
      -1,    -1,  2401,   104,  2403,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2411,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2419,  2420,    -1,    -1,   382,    -1,    -1,  2426,    -1,    -1,
      -1,    -1,   133,    -1,    -1,    -1,    -1,  1596,    -1,    -1,
      -1,    -1,  2441,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2451,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2471,    -1,    -1,    -1,    -1,    -1,  1637,   487,
      -1,    -1,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,  1653,    -1,   197,    -1,    -1,  1658,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1675,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,
      -1,    -1,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,   246,    -1,    -1,    -1,   507,
      -1,    -1,    -1,   254,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,     3,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2625,  2626,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    78,   343,  2642,    -1,    -1,   347,    -1,   349,    -1,
      -1,    -1,    -1,    -1,    -1,  2654,    -1,    -1,    -1,    -1,
    2659,  2660,    -1,    -1,    -1,  2664,    -1,    -1,    -1,    -1,
    2669,   372,    -1,  2672,  2673,    -1,   377,    -1,  2677,  2678,
      -1,    -1,  2681,    26,    -1,    -1,    -1,  1846,    -1,    32,
     391,    -1,    -1,  2692,    -1,  1854,  1855,    40,  1857,  1858,
    1859,  1860,  1861,  1862,    -1,    -1,  1865,  1866,  1867,  1868,
    1869,  1870,  1871,  1872,  1873,  1874,  1875,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    -1,  2736,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   448,    -1,    -1,
      -1,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,   104,    -1,    -1,  2763,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     133,    -1,  1951,  1952,    -1,   232,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,  1991,    -1,   271,    -1,  1995,  1996,  1997,  1998,
    1999,  2000,  2001,  2002,    -1,    -1,    -1,  2846,   285,  2008,
    2009,   288,  2011,  2012,   197,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2023,    -1,    -1,  2026,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2034,  2035,  2036,  2037,  2038,
    2039,  2040,  2041,  2042,  2043,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2893,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   246,    -1,    -1,    -1,    -1,    -1,    -1,
    2069,   254,    -1,    -1,  2913,    -1,    -1,    -1,    -1,    -1,
      -1,  2920,    -1,   266,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2931,  2932,    -1,    -1,  2935,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   287,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   298,    -1,    -1,    -1,    -1,
      -1,    -1,  2961,  2122,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2985,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     343,    -1,    -1,    -1,   347,    -1,   349,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   372,
    2189,    -1,    -1,    -1,   377,    -1,    -1,    -1,    -1,    -1,
    2199,  2200,    -1,    -1,    -1,    -1,    -1,    -1,   391,  3048,
     487,    -1,    -1,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,  3066,    -1,    -1,
      -1,  3070,    -1,    -1,    -1,  3074,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3084,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3097,    -1,
      -1,    -1,    -1,    -1,    -1,   448,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3115,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2298,
    2299,  2300,    -1,    -1,  2303,  2304,  2305,  2306,  2307,  2308,
      -1,    -1,    -1,  2312,  2313,  2314,  2315,  2316,  2317,  2318,
    2319,  2320,  2321,  3162,    -1,    -1,    -1,  2326,  2327,    -1,
      -1,    -1,    -1,  3172,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,  3185,    15,    16,    17,
      18,    19,    20,    21,    -1,  2354,    -1,    -1,    -1,    -1,
    2359,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    -1,  3215,  2376,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
    2389,    -1,    -1,  2392,  2393,    -1,    -1,    -1,    -1,    -1,
    2399,  2400,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      78,    -1,    -1,    -1,  2413,  2414,  2415,  2416,    -1,  2418,
      -1,    -1,    -1,  2422,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3302,  3303,  3304,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,  2476,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
    3329,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,  3370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2574,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,    -1,    -1,   271,    -1,    36,  2605,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,   285,    -1,    -1,
     288,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2643,    -1,  2645,    78,    -1,    -1,
    2649,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,  2658,
      -1,    -1,  2661,    -1,  2663,    -1,    -1,    -1,  2667,    -1,
      -1,  2670,  2671,    -1,    -1,  2674,  2675,    -1,    -1,    -1,
     217,   218,    -1,  2682,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2691,    -1,    -1,   232,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2706,     8,    -1,
      -1,    11,    -1,    -1,   382,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,    -1,    -1,   271,    -1,    36,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,  2744,    46,    -1,   285,    -1,
      -1,   288,    -1,    53,    -1,    -1,    -1,    -1,   189,    -1,
      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,
      -1,    -1,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,   504,   268,    -1,    -1,
     271,    -1,    -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,   162,    -1,    -1,    -1,    -1,   167,    -1,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,  2876,  2877,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,
      -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2901,  2902,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,
    2919,    -1,    -1,    -1,  2923,    -1,  2925,  2926,  2927,    -1,
      -1,  2930,   232,    -1,  2933,  2934,    -1,    -1,    -1,    -1,
      -1,    -1,  2941,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     487,   382,    -1,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,   504,   268,    -1,
      -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2982,    -1,   285,    -1,    -1,   288,  2988,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3001,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3028,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3054,   487,    -1,    -1,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,   504,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   382,    -1,    -1,    -1,    -1,  3086,  3087,  3088,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3116,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3160,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,  3187,    -1,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,  3210,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,  3235,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,  3277,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,  3332,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,   489,    -1,    -1,
      -1,    -1,   494,   495,   496,    -1,    -1,    -1,    -1,   501,
      -1,   503,   504,    -1,    -1,    -1,   508,   509,   510,   511,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,    -1,   489,    -1,    -1,    -1,
      -1,   494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,
     503,    -1,    -1,    -1,    -1,   508,   509,   510,   511,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,   128,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,
     494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,   503,
     504,    -1,    -1,    -1,   508,   509,   510,   511,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,   228,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,   409,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,
     495,   496,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,
      -1,    -1,    -1,   508,   509,   510,   511,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
     496,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,    -1,
      -1,    -1,   508,   509,   510,   511,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,
      -1,    -1,    -1,    -1,   501,    -1,   503,   504,    -1,    -1,
      -1,   508,   509,   510,   511,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,
      -1,    -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,
     508,   509,   510,   511,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,    -1,
      -1,    -1,   501,    -1,   503,   504,    -1,    -1,    -1,   508,
     509,   510,   511,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
      -1,    -1,    -1,    -1,   494,   495,   496,    -1,    -1,    -1,
      -1,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,   509,
     510,   511,     3,     4,     5,     6,     7,    -1,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,    -1,    -1,   489,    -1,
      -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
     501,    -1,   503,    -1,    -1,    -1,    -1,   508,   509,   510,
     511,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,    -1,
      -1,    -1,    -1,   494,   495,   496,    -1,    -1,    -1,    -1,
     501,    -1,   503,    -1,    -1,    -1,    -1,   508,   509,   510,
     511,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,    -1,    -1,
      -1,    -1,   494,   495,   496,    -1,    -1,    -1,    -1,   501,
      -1,   503,    -1,    -1,    -1,    -1,   508,   509,   510,   511,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,
      -1,   494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,
     503,    -1,    -1,    -1,    -1,   508,   509,   510,   511,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,
     494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,   503,
     504,    -1,    -1,    -1,   508,   509,   510,   511,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,
     495,   496,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,
      -1,    -1,    -1,   508,   509,   510,   511,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
     496,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,    -1,
      -1,    -1,   508,   509,   510,   511,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,
      -1,    -1,    -1,    -1,   501,    -1,   503,    -1,    -1,    -1,
      -1,   508,   509,   510,   511,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,
      -1,    -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,
     508,   509,   510,   511,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,    -1,
      -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,
     509,   510,   511,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
      -1,    -1,    -1,    -1,   494,   495,   496,    -1,    -1,    -1,
      -1,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,   509,
     510,   511,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,    -1,
      -1,    -1,    -1,   494,   495,   496,    -1,    -1,    -1,    -1,
     501,    -1,   503,    -1,    -1,    -1,    -1,   508,   509,   510,
     511,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,    -1,    -1,
      -1,    -1,   494,   495,   496,    -1,    -1,    -1,    -1,   501,
      -1,   503,    -1,    -1,    -1,    -1,   508,   509,   510,   511,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,
      -1,   494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,
     503,    -1,    -1,    -1,    -1,   508,   509,   510,   511,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,
     494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,   503,
      -1,    -1,    -1,    -1,   508,   509,   510,   511,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,   409,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,
     495,   496,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,
      -1,    -1,    -1,   508,   509,   510,   511,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
     496,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,    -1,
      -1,    -1,   508,   509,   510,   511,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,    -1,
      -1,    -1,    -1,    -1,   501,    -1,   503,    -1,    -1,    -1,
      -1,   508,   509,   510,   511,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,
      -1,    -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,
     508,   509,   510,   511,     3,     4,     5,     6,     7,    -1,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,   495,    -1,    -1,    -1,
      -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,
     509,   510,   511,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   494,   495,    -1,    -1,    -1,    -1,
      -1,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,   509,
     510,   511,     3,     4,     5,     6,     7,    -1,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,    -1,    -1,    -1,    -1,
      -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
     501,    -1,   503,    -1,    -1,    -1,    -1,   508,   509,   510,
     511,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
      -1,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,   495,   496,    -1,     3,     4,     5,
     501,    -1,   503,     9,    -1,    -1,    -1,   508,   509,   510,
     511,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,   283,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
     496,    -1,     3,     4,     5,     6,     7,   503,     9,    -1,
      -1,    -1,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,    -1,    -1,    -1,    -1,
       3,     4,     5,     6,     7,    -1,     9,    -1,    -1,    -1,
     501,    -1,   503,    -1,    -1,    -1,    -1,   508,   509,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,    -1,    -1,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,
     503,    -1,    -1,    -1,    -1,   508,   509,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    -1,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,    -1,   172,   173,    -1,
     175,    -1,    -1,    -1,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,    -1,   269,   270,   271,   272,    -1,    -1,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,    -1,   293,   294,
     295,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,    -1,   314,
     315,   316,    -1,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,    -1,
     405,   406,    -1,   408,   409,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,    -1,   424,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,    -1,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,
     485,   486,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,   504,
      -1,    -1,   507,    -1,    40,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,   280,   281,   282,    -1,    -1,   285,
     286,   287,    -1,   289,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,    -1,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   503,   504,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    34,    35,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,    -1,
       3,   489,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,   284,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,    -1,     3,   489,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     503,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,   284,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,    -1,   269,   270,   271,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   503,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,   167,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,    -1,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,     3,    -1,   489,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,   167,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,    -1,     3,   489,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   503,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     503,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   503,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   503,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     503,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   503,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,    -1,     3,     4,     5,    -1,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    15,    16,    -1,   503,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,    -1,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,    -1,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,    -1,   293,   294,   295,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,    -1,   314,   315,   316,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,    -1,   424,    -1,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,    -1,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   483,   484,   485,   486,    -1,     3,    -1,
     490,   491,   492,     8,   494,   495,   496,   497,   498,   499,
      15,    16,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,    -1,    -1,    -1,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,   172,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,
      -1,   194,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   172,
      53,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,   232,
      -1,   194,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,   382,
      -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,   271,   232,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,
      -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,   271,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,   382,
      -1,   504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    36,    -1,   382,
      -1,   504,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,
      -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    36,    -1,    78,
      -1,   504,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,
      -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    36,    -1,    78,
      -1,   504,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,
      -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    36,    -1,    78,
      -1,   504,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,
      -1,    -1,    11,   172,    53,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,    -1,    36,    -1,    78,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,   172,    53,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     189,    -1,    -1,   232,    -1,   194,    -1,    -1,    -1,    78,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
     189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
     189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
     189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,   232,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    -1,
      -1,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,    -1,   382,    -1,   504,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   487,    -1,
      -1,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    36,    -1,   382,    -1,   504,    -1,    -1,    -1,    -1,
      -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   487,    -1,
      -1,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    36,    -1,    78,    -1,   504,    -1,    -1,    -1,    -1,
      -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   487,    -1,
      -1,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    36,    -1,    78,    -1,   504,    -1,    -1,    -1,    -1,
      -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   487,    -1,
      -1,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    36,    -1,    78,    -1,   504,    -1,    -1,    -1,    -1,
      -1,    46,    -1,     8,    -1,    -1,    11,   172,    53,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
      -1,    36,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,   172,    53,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   189,    -1,    -1,   232,    -1,   194,
      -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,   194,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,   194,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,   194,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,   382,    -1,    -1,
      -1,    -1,    -1,   268,    -1,    -1,   271,   232,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,    -1,    -1,
      -1,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
     285,    15,    16,   288,    -1,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,    -1,   487,    -1,    -1,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,   382,    -1,   504,
      -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,   487,    -1,    -1,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    36,   382,    -1,   504,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   487,    -1,    -1,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,   502,    78,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,
      -1,    -1,   487,    -1,    -1,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,   189,    -1,   502,    -1,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   487,   217,   218,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,   502,   232,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,
      -1,    -1,    -1,    -1,   194,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,
      -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   487,    -1,    -1,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,   487,    -1,    -1,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,    -1,   502,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,     4,     5,    -1,
      -1,    -1,     9,    -1,    -1,   496,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,     4,     5,    -1,    -1,    -1,     9,   494,   495,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,     4,     5,    -1,    -1,    -1,
       9,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,   283,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,    -1,    -1,
       8,    -1,    -1,    11,    -1,   494,   495,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      78,    -1,    40,    -1,   122,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,   172,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      78,    -1,    -1,   161,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,    -1,   232,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,    -1,    -1,   271,   232,    -1,    -1,    -1,   316,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,
     268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,   382,    15,    16,    17,    18,    19,
      20,    21,   310,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,   445,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    -1,    53,   382,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,   487,
      -1,    -1,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,
      -1,    -1,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,   487,
      -1,    -1,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,   172,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   189,
      53,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,   487,
      -1,    -1,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    78,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,
      -1,   271,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    -1,    46,    -1,   285,    -1,    -1,   288,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,   189,    -1,    11,    -1,
      -1,   194,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   232,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    78,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,   268,    -1,    -1,   271,   172,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,   189,    46,    -1,    -1,
      -1,   194,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    78,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    -1,   172,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,   268,   189,    -1,   271,    -1,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,   271,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,   382,
      -1,    -1,    -1,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,
      36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,    78,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,   415,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    78,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,   172,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,   189,    -1,    -1,    -1,    46,   194,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,   487,    -1,
      -1,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    78,
      -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,   172,    -1,    15,    16,    -1,    -1,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,    -1,   268,   194,    36,   271,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,   285,
      -1,    53,   288,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   232,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,    -1,   268,    -1,    -1,
     271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,    -1,    -1,   382,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,   189,    -1,    -1,
      -1,    -1,   194,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,
      -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   487,    -1,    -1,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,   268,    -1,    -1,   271,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,   285,    15,    16,   288,    -1,    19,    20,
      21,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,   487,    -1,    -1,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    78,    15,    16,
      -1,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
     382,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    -1,
      -1,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   487,   217,   218,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,   232,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,
     271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,     5,    -1,    -1,    -1,
     487,    -1,    -1,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,   409,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,   164,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,   164,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,   284,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,   284,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,     4,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,   407,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      -1,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,    -1,   172,   173,    -1,   175,    -1,
      -1,    -1,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,    -1,   269,   270,   271,   272,    -1,    -1,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,    -1,   293,   294,   295,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,    -1,   314,   315,   316,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,    -1,   424,    -1,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,   485,   486,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    -1,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,    -1,   172,   173,    -1,   175,    -1,    -1,
      -1,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,    -1,
      -1,   269,   270,   271,   272,    -1,    -1,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,    -1,   293,   294,   295,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,    -1,   314,   315,   316,    -1,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,    -1,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,    -1,   424,    -1,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,    -1,   452,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,   485,   486,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    -1,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,    -1,   172,   173,    -1,   175,    -1,    -1,    -1,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,    -1,
     269,   270,   271,   272,    -1,    -1,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,    -1,   293,   294,   295,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,    -1,   314,   315,   316,    -1,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,    -1,   424,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,    -1,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,   485,   486,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    -1,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,    -1,    -1,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,    -1,    -1,   269,
     270,   271,   272,    -1,    -1,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,    -1,   293,   294,   295,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,    -1,   314,   315,   316,    -1,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,    -1,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,    -1,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,    -1,   424,    -1,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,    -1,   452,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   483,   484,   485,   486,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,    -1,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      -1,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,    -1,   172,   173,    -1,   175,    -1,
      -1,    -1,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,    -1,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,    -1,   269,   270,   271,   272,    -1,    -1,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,    -1,   293,   294,   295,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,    -1,   314,   315,   316,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,    -1,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,    -1,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,    -1,   424,    -1,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    22,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,    32,    -1,    34,    35,    -1,
      -1,    -1,    22,    -1,    -1,    -1,   483,   484,   485,   486,
      -1,    -1,    32,    -1,    -1,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    -1,    -1,    -1,    73,    -1,    -1,    -1,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,
      -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    96,
      -1,    98,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,    -1,    -1,    -1,    96,    -1,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,   109,
      -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,
      -1,    -1,   139,   123,    -1,    -1,    -1,    -1,    -1,    -1,
     147,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    -1,   163,   147,    -1,    -1,
     167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   163,    -1,    -1,    -1,   167,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     307,   308,   309,    -1,    -1,    -1,    -1,    -1,   315,    -1,
      -1,   318,    -1,    -1,    -1,    -1,    -1,   307,   308,   309,
      -1,    -1,    -1,    -1,    -1,   315,    -1,    -1,   318,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   347,    -1,    -1,
      -1,    -1,    -1,   370,    -1,    -1,   356,    -1,    -1,    -1,
     377,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,
     370,    -1,    -1,    -1,   391,    -1,    -1,   377,    -1,    -1,
      -1,   381,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
     407,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,   407,    -1,    -1,
     427,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   440,    -1,    -1,    -1,   427,    -1,   446,
      -1,    -1,    -1,    -1,   451,    -1,    -1,    -1,   455,    -1,
     440,    -1,    -1,    -1,    -1,    -1,   446,    -1,   465,    -1,
      -1,   451,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   465,    -1,    -1,    -1,    -1,
      -1,    -1,   489,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,   489,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   503
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    73,    84,
      96,    98,   109,   123,   124,   133,   139,   147,   149,   150,
     163,   167,   193,   209,   235,   307,   308,   309,   315,   318,
     347,   356,   370,   377,   381,   391,   403,   407,   427,   440,
     443,   446,   451,   465,   489,   503,   515,   516,   517,   518,
     519,   526,   537,   538,   539,   542,   543,   552,   569,   617,
     620,   623,   633,   635,   638,   639,   643,   650,   652,   659,
     663,   664,   665,   672,   677,   693,   695,   696,   699,   701,
     702,   703,   704,   706,   708,   709,   713,   766,   767,   929,
     931,   932,   933,   938,   941,   947,   948,   952,   421,   468,
     930,   198,   363,   372,   407,   457,   106,   540,   930,     3,
      22,    23,    24,    25,    26,    27,    28,    29,    31,    32,
      33,    42,    43,    44,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    59,    60,    61,    62,
      63,    64,    67,    68,    69,    70,    71,    73,    74,    75,
      76,    77,    79,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    92,    93,    94,    95,    96,    97,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   114,   116,   117,   118,   119,   120,   121,
     123,   124,   125,   126,   127,   130,   131,   132,   133,   134,
     136,   137,   138,   140,   141,   142,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   156,   158,   159,
     160,   161,   163,   165,   166,   168,   169,   170,   171,   172,
     173,   175,   177,   178,   179,   180,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   195,   196,
     197,   198,   199,   200,   201,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   214,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   229,   230,   231,
     232,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   269,   270,   271,   272,   274,
     275,   276,   277,   278,   279,   281,   282,   285,   286,   287,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   322,   323,   324,
     325,   326,   327,   329,   330,   331,   332,   333,   334,   335,
     336,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   405,   406,   408,   409,   410,   411,   412,
     413,   414,   416,   417,   418,   421,   422,   423,   424,   425,
     427,   428,   429,   430,   431,   432,   433,   434,   437,   438,
     439,   441,   442,   443,   444,   446,   447,   448,   449,   450,
     451,   452,   454,   455,   456,   457,   458,   459,   460,   463,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   546,   626,   627,   628,   837,   918,   922,     3,   171,
     242,   400,   544,   546,   626,   930,    55,   503,   564,   173,
     236,   288,   363,   411,   413,   430,   436,   439,   615,   671,
       5,    30,   318,   546,   547,   917,   106,   540,    24,    79,
      95,   142,   152,   164,   169,   198,   241,   245,   312,   327,
     360,   363,   372,   375,   393,   407,   414,   424,   430,   457,
     644,   645,   648,   930,   917,   455,   503,   518,   519,   526,
     542,   543,   552,   569,   617,   620,   623,   633,   635,   638,
     639,   643,   650,   655,   659,   665,   672,   693,   695,   696,
     699,   701,   929,   931,   933,   938,   941,   947,   952,   106,
      73,   209,    66,    77,    79,   154,   227,   274,   284,   296,
     313,   359,   402,   423,   425,   429,   451,   503,   545,   546,
     547,   702,   767,   769,   771,   781,   788,   789,   837,   839,
     840,   106,     5,   546,   548,   694,   694,   546,   917,    30,
     173,   236,   376,   417,   421,   546,   939,   940,   950,   930,
      30,   128,   722,   723,   173,   236,   363,   376,   417,   942,
     943,   950,   930,   546,   701,   713,   951,   546,   788,   407,
     719,   545,   168,   503,   935,   503,   335,   714,   715,   917,
     714,   702,   703,     0,   506,   455,   653,   118,   208,   442,
     143,   213,   289,   435,   725,   726,   771,   771,   702,   704,
     706,   507,    30,   417,   421,   701,   951,   187,   545,   917,
     187,   545,   187,   788,   187,   545,   548,   501,   505,   549,
     896,   503,   701,   545,   411,   413,   411,   413,   345,   187,
     545,   545,   169,   241,   335,   372,   407,   457,   621,   198,
      30,   917,   187,     3,   247,   424,   105,   407,   407,   457,
     366,     3,    37,    42,    49,    54,    55,    56,    57,    69,
      70,    79,    81,    87,    99,   110,   111,   132,   160,   166,
     168,   172,   187,   189,   204,   211,   212,   214,   217,   218,
     220,   230,   232,   242,   261,   262,   263,   271,   276,   293,
     295,   314,   332,   354,   358,   371,   378,   382,   385,   400,
     409,   417,   418,   429,   435,   452,   455,   626,   629,   649,
     799,   801,   803,   805,   807,   809,   811,   812,   813,   815,
     816,   817,   819,   820,   923,   187,   546,   646,   924,   187,
     914,   917,   187,   917,   503,   651,   655,     3,    37,    42,
      49,    53,    54,    55,    56,    57,    69,    70,    77,    79,
      81,    87,    99,   110,   111,   148,   154,   160,   166,   168,
     171,   172,   177,   178,   189,   204,   205,   211,   212,   214,
     217,   218,   220,   230,   232,   242,   261,   262,   263,   267,
     271,   274,   276,   292,   293,   295,   296,   313,   314,   317,
     332,   354,   358,   371,   378,   382,   385,   400,   402,   409,
     417,   418,   423,   425,   429,   451,   452,   455,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   626,
     630,   656,   658,   659,   661,   662,   653,   546,   548,   544,
     694,   503,   503,   162,   503,   702,   789,   503,   503,   545,
     503,   503,   167,   503,   503,   503,   503,   702,   767,   771,
     781,   496,   549,    40,   546,   782,   783,   782,   370,   507,
     705,    37,    42,    99,   168,   204,   220,   230,   262,   307,
     314,   354,   371,   440,   785,   783,    40,   546,   782,   784,
     489,   793,   548,   492,   503,   503,   697,   940,   940,   940,
     486,   219,   505,   283,     4,     6,     7,     8,     9,    10,
      39,    54,    56,    57,    65,    69,    70,    81,   110,   111,
     113,   148,   155,   160,   177,   178,   211,   212,   214,   242,
     261,   263,   268,   273,   276,   285,   332,   358,   385,   417,
     418,   426,   452,   487,   494,   495,   496,   501,   503,   508,
     509,   510,   511,   546,   548,   702,   756,   804,   807,   810,
     811,   812,   814,   815,   816,   819,   820,   831,   833,   834,
     835,   836,   837,   838,   840,   841,   856,   857,   868,   890,
     895,   904,   905,   906,   918,   919,   920,   903,   905,   942,
     942,   548,   942,   486,   167,   419,   492,   505,   549,   640,
     788,     3,   166,   168,   455,   659,   934,   936,   166,   937,
     831,   874,   875,   714,   507,   503,   926,   504,   504,   517,
     545,   167,   288,   680,   640,    30,   128,   720,   720,    59,
     720,   157,   162,   233,   280,   731,   733,   734,   759,   761,
     762,   763,   176,   283,   445,   283,   725,   726,   503,   408,
     949,   486,   219,   148,    26,    32,   133,   287,   343,   347,
     377,   448,   531,   534,   535,   343,   148,    40,    60,   104,
     197,   246,   254,   266,   298,   343,   349,   372,   377,   391,
     520,   523,   534,   148,   343,   377,   534,   148,   343,   377,
     534,    40,   541,   831,   897,     3,    30,    34,    35,    36,
      38,    39,    40,    41,    45,    58,    65,    66,    72,    78,
      80,    91,    98,   113,   115,   122,   128,   129,   135,   139,
     143,   155,   157,   162,   164,   167,   174,   176,   181,   194,
     202,   213,   215,   227,   228,   233,   268,   273,   280,   283,
     284,   288,   289,   307,   308,   309,   310,   321,   328,   337,
     351,   370,   387,   404,   407,   415,   419,   420,   426,   435,
     436,   440,   445,   451,   453,   461,   462,   464,   465,   550,
     551,   626,   630,   632,   896,     3,    30,    37,    42,    49,
      55,    79,    81,    87,    99,   128,   166,   168,   171,   172,
     189,   204,   217,   218,   220,   230,   232,   242,   262,   271,
     293,   295,   314,   354,   371,   382,   400,   409,   429,   453,
     455,   504,   626,   631,   831,   877,   878,   921,   927,   504,
     503,   604,   363,   615,   268,   624,    40,   457,   187,   545,
     187,   545,   619,   187,   545,   187,   545,    87,   668,   148,
     469,    88,   125,   301,   412,   454,   818,   818,   818,   503,
     806,   806,   317,   503,   808,   148,   503,    69,    70,   818,
     806,   803,   467,   489,   503,   821,   503,   821,   503,    63,
     350,   507,   647,   503,    39,   802,   503,   107,   108,   184,
     185,   248,   249,   250,   251,   252,   253,   256,   257,   367,
     368,   483,   484,   503,   822,   823,   824,   825,   826,   827,
     828,   829,   830,   806,   148,   505,   925,   507,   647,   148,
     507,   647,   148,   283,   875,   504,   507,     4,   155,   283,
     426,   494,   495,   522,   525,   548,   654,   656,   657,   660,
     920,   655,   419,   503,   559,   563,   831,   875,   503,     3,
     548,   822,   823,   824,   825,   826,   827,   828,   829,   880,
     881,   783,   784,   831,   545,   831,   882,   494,   495,   546,
     832,   833,   857,   868,   884,   503,   831,   874,   885,   831,
      58,   167,   228,   420,   831,   875,   888,   831,   504,   547,
     503,   409,   739,   740,   740,   722,   723,   771,   215,   717,
      37,   220,   371,   785,   220,   293,   786,   771,   786,   220,
     785,   503,   220,   786,   144,   195,   773,   220,   740,   503,
     547,   503,   740,   290,   522,   660,   944,   946,   877,   801,
     879,    40,   231,   546,   503,   501,   702,   831,   894,   503,
     702,   511,   831,   503,   503,   831,   831,   831,   144,   907,
     908,   831,   875,   876,   702,   831,   874,     9,   551,   547,
     858,   859,   860,   505,   549,   898,   549,   503,   548,   503,
     548,   920,     3,     8,    11,    15,    16,    17,    18,    19,
      20,    21,    36,    40,    46,    53,    78,   172,   189,   194,
     217,   218,   232,   268,   271,   285,   288,   382,   487,   490,
     491,   492,   494,   495,   496,   497,   498,   499,   866,   867,
     868,   870,   901,   466,   842,   295,   831,   507,   717,   503,
     548,   717,     3,   113,   236,   522,   548,   820,   945,   102,
     113,   946,   113,   946,   546,    40,   546,   504,   507,   653,
     507,   504,   715,   914,   915,    40,   926,   640,   188,   345,
     215,   377,   704,   704,    30,   727,   728,   831,    59,   704,
     721,   159,   265,   747,   222,   266,   331,   380,   442,     4,
       9,    30,   742,   831,   494,   495,   743,   744,   831,   833,
     759,   760,   734,   733,   731,   732,   162,   762,   278,   764,
      59,   710,   711,   712,   774,   832,   905,   905,   731,   759,
     875,   231,   545,    72,    80,    91,   164,   187,   321,   436,
     546,   586,   596,   611,    80,    91,   700,    91,   700,   503,
     419,   503,   584,   240,   439,   584,    91,   507,   419,   545,
     803,   522,    59,   524,   522,   522,   104,   246,   254,    59,
     419,   465,   489,   521,   259,   363,   521,   523,   788,    91,
     419,   700,   363,   545,   419,   363,   546,   559,   502,   513,
     877,   877,   878,   507,   725,   726,    13,    14,   419,   546,
     603,   608,   465,   562,   545,   335,   372,   407,   457,   621,
     148,    98,   569,   625,   633,   665,   952,   140,   801,   545,
     268,   520,   634,   268,   503,   604,    40,   268,   604,   268,
     503,   622,   187,   546,   598,   669,     3,   503,   876,   920,
     649,   879,   818,   818,    39,   802,   417,   417,   920,   920,
     546,   798,   801,   798,   501,   501,   920,   920,   419,   419,
     419,   419,   646,   550,   505,   924,   914,   917,   917,   924,
     504,   655,   661,     4,   920,     4,   920,   548,   551,   561,
     568,    55,   100,   119,   137,   141,   163,   166,   182,   273,
     281,   303,   329,   565,    40,   504,   831,   504,   167,   507,
     504,   310,   883,   504,   832,   832,    11,    15,    16,    19,
      20,    21,   194,   217,   285,   490,   491,   492,   494,   495,
     496,   497,   498,   499,   868,   832,   504,   790,   791,   839,
     162,   167,   886,   887,   507,   504,    40,   888,   875,   888,
     888,   167,   504,    40,   782,   503,   915,     4,     9,   546,
     735,   737,   738,   905,   903,   173,   236,   407,   411,   413,
     439,   545,   718,   462,   794,   771,   220,   771,   283,   445,
     787,   771,   220,   905,   771,   275,   275,   503,   771,   547,
     795,   796,   503,   547,   795,   507,   504,   507,   504,   507,
     552,   639,   672,   698,   701,   931,   875,   876,   461,   891,
     892,   831,   831,   861,   862,   863,   864,     8,    15,    16,
      19,    20,    21,   490,   491,   492,   494,   495,   496,   497,
     498,   499,   546,   866,   871,   504,   875,   503,   546,   345,
     912,   162,   502,   504,   507,   513,   507,   512,   496,   896,
     875,   831,   830,   830,   801,   831,   831,   831,   831,   831,
     831,   831,   831,     5,   551,   928,   417,    45,   404,   902,
     924,   831,   831,   503,   702,   889,   128,   155,   268,   273,
     278,   426,   437,   831,   273,   503,   831,   419,    53,   172,
     189,   194,   232,   382,   831,   831,   831,   831,   831,   831,
     831,   831,   831,   831,    30,    38,   387,   865,   501,   505,
     900,   176,   158,   843,   358,   503,   857,   906,   167,   768,
     877,   768,   503,   548,   546,   545,   934,   537,   545,   831,
     507,   504,   245,   268,   716,   445,   642,   545,   674,   503,
     546,   679,   689,   690,   692,    41,   122,   729,   507,   445,
     729,   259,   704,   358,   359,   494,   495,   744,   746,   833,
     380,   222,   284,   306,   306,   507,   498,     4,   745,   920,
     745,   358,   359,   746,   545,   913,   272,   384,   765,   503,
     915,   916,   507,   176,   445,   194,   176,   215,   760,   732,
     504,   343,   534,   503,   187,   596,   917,   222,   268,   222,
     445,   503,   589,   800,   801,   917,   546,   187,   917,   187,
     546,    26,   133,   377,   530,   533,   551,   580,   594,   917,
     551,   588,   607,   917,   531,   917,   343,   377,   520,   534,
     522,   924,   917,   522,   924,   917,   522,   343,   377,   534,
     917,   917,   917,   917,   343,   377,   534,   917,   917,   831,
     897,   725,   725,   725,   453,   878,   188,   348,   724,   831,
     831,   326,   558,   504,   507,   281,   167,   419,   553,   624,
     457,   545,   545,   619,   545,   545,   545,   288,   615,   503,
     702,   503,   148,   148,   232,   546,   586,   596,   599,   602,
     612,   614,   465,   467,   591,   147,   701,   148,   465,   670,
     148,   504,   877,    40,   268,   283,   875,   504,   504,   647,
     504,   501,   486,   486,   504,   504,   801,   504,   507,   504,
     920,   502,   920,   504,   504,   823,   825,   826,   827,   826,
     827,   827,   647,   550,   647,   283,   647,   559,   496,   503,
     522,   560,   660,   836,   504,   507,    40,   557,   548,   557,
     268,   273,   329,   557,    59,   557,   801,   504,   831,   831,
     831,   886,   801,   832,   832,   832,   832,   832,   832,   128,
     268,   278,   832,   832,   832,   832,   832,   832,   832,   832,
     832,   832,   504,   507,    40,   792,   831,   831,   887,   886,
     801,   504,   504,   504,   875,   801,   915,   504,   306,   498,
     306,   359,   498,   503,   503,   717,   411,   413,   411,   413,
     545,   719,   719,   719,   831,   176,   748,   787,   771,   831,
     503,   771,   162,   503,   547,   778,   787,   801,   504,   507,
     795,   504,   944,   801,   504,   502,   831,   135,   892,   893,
     504,   513,   507,   512,   505,   504,   504,   915,   503,   831,
     909,   546,   831,   831,   858,   908,   504,   504,   486,   832,
     832,   141,   875,   167,   128,   155,   273,   278,   426,   437,
     503,   141,   871,   831,   404,   902,   831,   889,   831,   419,
     503,   702,   831,   897,   550,   503,   503,   151,   844,   769,
     770,   794,   725,   794,   920,   830,   926,   926,   245,   503,
     770,   462,   641,    40,    59,   675,   685,   692,   898,   507,
     768,   492,   488,   730,   728,   285,   866,   869,   730,     4,
     920,   746,   284,   442,   743,   507,   239,   915,   710,    59,
     905,   503,   547,    59,   259,   419,   831,   268,   611,   503,
     148,   503,   589,   198,   608,   609,   570,    40,   171,   579,
     605,   570,    26,   133,   347,   349,   377,   527,   528,   529,
     535,   536,   148,   647,   148,   647,   580,   594,   580,   504,
     507,   548,   573,   492,   505,   504,   507,   419,   363,    91,
     419,   700,   363,   419,   419,   419,   363,   502,   724,   724,
     724,   878,   275,   275,   504,   394,   395,   548,   567,   603,
     558,   545,   634,   503,    40,   604,   622,   624,   345,   407,
     548,   636,   637,   608,   545,   545,   619,   545,   504,   507,
     281,   584,   281,   283,   583,   917,   465,   618,   545,   584,
      40,   545,   504,   407,   831,   148,   545,   504,   802,   920,
     821,   821,   802,   546,   802,   502,   502,   924,   555,   566,
     660,   561,   548,   548,   273,   608,   496,   608,   548,   496,
     608,   548,   504,   504,   887,   167,   128,   278,   503,   793,
     790,   503,   504,   504,   504,   546,   735,   794,   719,   719,
     719,   719,   545,   545,   545,    59,   181,   757,   787,   915,
     503,   775,   776,   777,   834,   918,   915,   162,    78,   797,
     796,   504,   415,   831,   139,   831,   861,   871,   504,   831,
     909,   910,   911,    40,   194,   504,   912,   830,   831,    36,
      36,   831,   504,   831,   167,   503,   879,   831,   504,   141,
     832,   832,   141,   141,   831,   831,   502,   513,   503,   899,
     726,   462,   831,   294,   848,   507,   748,   724,   748,   504,
     698,   831,   351,   683,   546,   259,   313,   113,   297,   503,
     673,   701,   504,   507,   679,   641,   831,   159,   226,   503,
     730,   284,   545,   504,   916,   176,   702,   703,   905,   916,
     917,   917,   504,   148,   609,   596,   609,   570,   598,   507,
     504,   115,   202,   266,   268,   595,   503,    33,    59,   616,
     605,    72,    78,    91,   113,   115,   202,   268,   273,   321,
     337,   436,   445,   575,   576,   590,   171,   113,   186,   268,
     584,   521,   105,   113,   171,   268,   393,   396,   523,   584,
     377,   529,   430,   917,   546,   533,     3,    37,    42,    49,
      55,    79,    81,    87,    99,   166,   168,   171,   172,   189,
     204,   217,   218,   220,   230,   232,   242,   262,   267,   271,
     285,   293,   295,   314,   354,   371,   378,   382,   400,   409,
     429,   435,   455,   494,   495,   522,   548,   571,   610,   626,
     632,   801,   869,   921,   551,   607,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   504,   504,   504,   725,
     521,   567,   503,   602,   701,   670,    40,   615,   187,   545,
     504,   507,   504,   634,   503,    40,   593,   591,   599,    84,
     651,   105,   266,   604,   701,   622,   701,   598,   445,   667,
     502,   801,   647,   504,   507,   608,   832,   167,   503,   879,
     795,   504,   507,   504,   748,   545,   545,   545,   545,    30,
     101,   177,   357,   503,   749,   750,   751,   752,   753,   754,
     755,   831,   831,   464,   845,   504,   833,   872,   873,   194,
     176,   772,   776,   503,   504,   778,   779,   780,   924,   831,
     507,   504,   546,   831,   833,   831,   831,   831,   879,   504,
     831,    36,    36,   831,   831,   141,   504,   897,   504,   877,
     504,   831,   504,   503,   546,   849,   757,   504,   757,   548,
     504,   904,   451,   406,   444,   684,   546,   678,   688,   283,
     681,   492,   692,   683,   871,    59,   504,   504,   450,   451,
     707,   570,   596,   504,   504,   465,   601,   116,   190,   200,
     115,   447,   831,   113,    40,   503,   924,   917,   832,   116,
     190,   115,   273,   222,   545,   601,    86,   616,   187,   273,
     522,   831,   616,   273,   494,   495,   525,   546,   801,   647,
     647,   242,   400,   921,   925,   492,   419,   419,   724,   559,
     445,   554,   556,   608,   504,   618,    40,   407,   831,   407,
     268,   503,   548,   670,   602,   147,   701,   145,   196,   583,
     118,   133,   320,   618,   105,   670,   465,   953,    40,   283,
     546,   666,   503,   566,   832,   879,   504,   504,     9,   344,
     741,   757,   503,   379,   503,   504,   507,   546,   846,   847,
     328,   758,   507,   504,   503,   547,    59,   504,   877,   194,
     504,   779,   909,   502,   187,   504,   831,   831,   831,   502,
     504,   504,   546,   850,   845,   548,   845,   507,   450,   898,
     504,   507,    89,   683,   831,   504,   916,   916,   337,   601,
     503,   592,   570,   504,   186,   503,   831,   268,   576,   601,
     604,   917,    40,   148,   797,   925,   498,   571,   917,   917,
     504,   521,   120,   504,   591,   701,   701,   545,   148,    40,
     504,   917,   618,    30,    83,    92,   114,   186,   199,   393,
     396,   587,   587,   359,   359,    40,    64,    72,   236,   407,
     831,   545,   503,   546,   682,   691,   839,   504,   504,   503,
     845,   875,   503,   875,   751,    40,   507,   831,   445,   736,
     833,   905,   915,   783,   725,   503,   783,   831,   303,   851,
     758,   758,   701,   297,   701,   678,   283,   503,   676,   545,
     570,   551,   597,   600,   397,   459,   577,   578,   503,   572,
     831,   504,   244,   613,   186,   445,   532,   498,   430,   559,
     548,   670,   583,   953,   503,   545,   701,   591,   651,   701,
      72,   286,    72,   701,   667,   831,    78,   686,   504,   507,
     686,     9,   758,   504,   750,   504,   849,   847,   361,   504,
     724,   905,   502,    59,   725,   736,   736,   684,    91,   691,
     129,   604,   492,   504,   507,   520,   504,   266,   585,   168,
     302,   383,   283,   581,   582,   606,   572,   831,   430,    40,
     503,   953,   583,   618,   953,   286,   286,   503,   504,   924,
     687,   924,   670,   682,   687,   504,   736,   504,   738,   504,
     504,   874,   179,   330,   359,   852,   450,   917,   504,   269,
     442,   613,   571,   600,   504,   578,   200,   118,   442,   283,
     606,   283,   581,   701,   691,   686,   729,   794,   729,    53,
     102,   432,   831,   853,   854,   853,   853,   504,   701,   794,
     377,   582,    63,   266,   350,   377,   574,   574,   953,   504,
     687,   730,   730,   854,   358,   161,   316,   161,   316,   144,
     855,   855,   855,   690,   570,    25,   113,   273,   670,   729,
      36,   102,   176,   266,   416,   794,   794,   730,   854,   358,
     291
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   514,   515,   516,   516,   517,   517,   517,   517,   517,
     517,   517,   517,   517,   517,   517,   517,   517,   517,   517,
     517,   517,   517,   517,   517,   517,   517,   517,   517,   517,
     517,   517,   517,   517,   517,   517,   517,   517,   517,   517,
     517,   517,   517,   931,   701,   701,   702,   702,   703,   703,
     703,   703,   703,   703,   703,   703,   704,   704,   705,   705,
     706,   706,   706,   706,   706,   706,   706,   706,   706,   706,
     706,   706,   706,   706,   706,   706,   706,   706,   706,   707,
     707,   708,   708,   709,   709,   710,   710,   710,   711,   711,
     712,   712,   713,   713,   713,   714,   714,   715,   716,   716,
     716,   717,   717,   718,   718,   718,   718,   718,   718,   718,
     718,   718,   719,   719,   720,   720,   720,   721,   722,   722,
     723,   723,   724,   724,   724,   725,   725,   726,   726,   727,
     727,   728,   728,   729,   729,   729,   730,   730,   730,   731,
     731,   731,   731,   732,   732,   733,   733,   733,   733,   734,
     734,   735,   735,   735,   735,   735,   735,   736,   736,   737,
     737,   738,   738,   738,   738,   739,   740,   740,   741,   741,
     742,   742,   742,   742,   742,   743,   744,   744,   744,   745,
     745,   746,   746,   747,   747,   748,   748,   748,   749,   749,
     750,   750,   751,   751,   751,   751,   751,   752,   753,   754,
     755,   756,   756,   757,   757,   758,   758,   759,   759,   760,
     760,   761,   761,   762,   763,   763,   763,   763,   764,   764,
     765,   765,   765,   766,   766,   767,   767,   768,   768,   769,
     769,   770,   770,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   772,   772,   773,   773,   773,   774,   774,
     775,   775,   776,   776,   777,   777,   778,   778,   779,   780,
     780,   781,   781,   781,   781,   781,   781,   781,   781,   781,
     781,   781,   782,   782,   782,   782,   783,   783,   784,   784,
     784,   784,   784,   785,   785,   785,   785,   785,   785,   786,
     786,   787,   787,   788,   788,   788,   788,   789,   789,   790,
     791,   791,   792,   792,   793,   793,   794,   794,   795,   795,
     796,   797,   797,   798,   798,   799,   799,   800,   800,   801,
     801,   801,   801,   801,   801,   801,   801,   801,   802,   802,
     802,   803,   803,   803,   803,   803,   803,   803,   804,   804,
     804,   804,   805,   806,   806,   807,   807,   807,   807,   807,
     807,   807,   807,   807,   807,   807,   808,   808,   809,   809,
     810,   810,   811,   812,   813,   813,   814,   814,   815,   816,
     817,   817,   817,   817,   817,   817,   818,   818,   819,   819,
     819,   819,   820,   821,   821,   821,   822,   822,   823,   823,
     824,   824,   825,   825,   826,   826,   827,   827,   828,   828,
     829,   829,   830,   830,   830,   830,   830,   830,   830,   830,
     830,   830,   830,   830,   830,   830,   830,   830,   831,   831,
     831,   831,   831,   831,   831,   831,   831,   831,   831,   831,
     831,   831,   831,   831,   831,   831,   831,   831,   831,   831,
     831,   831,   831,   831,   831,   831,   831,   831,   831,   831,
     831,   831,   831,   831,   831,   831,   831,   831,   831,   831,
     831,   831,   831,   831,   831,   831,   831,   831,   831,   831,
     831,   831,   831,   831,   831,   831,   831,   831,   831,   831,
     831,   831,   831,   831,   831,   831,   831,   831,   832,   832,
     832,   832,   832,   832,   832,   832,   832,   832,   832,   832,
     832,   832,   832,   832,   832,   832,   832,   832,   832,   832,
     832,   832,   832,   833,   833,   833,   834,   834,   834,   834,
     834,   834,   834,   834,   834,   834,   834,   834,   834,   835,
     835,   835,   835,   835,   835,   836,   837,   837,   837,   837,
     837,   837,   838,   838,   839,   839,   840,   840,   840,   840,
     840,   840,   840,   840,   840,   840,   840,   840,   840,   840,
     841,   841,   842,   842,   843,   843,   843,   844,   844,   845,
     845,   846,   846,   847,   848,   848,   848,   849,   850,   850,
     851,   851,   852,   852,   852,   852,   853,   853,   854,   854,
     854,   854,   854,   855,   855,   855,   855,   855,   856,   856,
     857,   857,   858,   859,   859,   860,   860,   861,   862,   862,
     863,   863,   864,   864,   865,   865,   865,   866,   866,   867,
     867,   867,   867,   867,   867,   867,   867,   867,   867,   867,
     867,   867,   867,   868,   868,   869,   869,   870,   870,   870,
     870,   870,   870,   870,   870,   871,   871,   872,   872,   873,
     873,   874,   874,   875,   875,   876,   876,   877,   877,   878,
     878,   878,   879,   879,   880,   880,   881,   881,   881,   881,
     881,   881,   881,   881,   881,   881,   882,   882,   883,   884,
     884,   885,   885,   885,   885,   885,   885,   886,   887,   888,
     888,   888,   889,   889,   890,   891,   891,   892,   893,   893,
     894,   894,   895,   895,   896,   896,   897,   897,   898,   898,
     899,   899,   899,   900,   900,   900,   901,   901,   902,   902,
     903,   903,   904,   904,   905,   905,   906,   906,   906,   907,
     907,   908,   908,   909,   910,   910,   911,   911,   912,   912,
     912,   913,   913,   914,   914,   915,   915,   916,   916,   917,
     918,   918,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   920,   921,   921,   921,
     922,   922,   922,   923,   923,   923,   924,   924,   925,   925,
     926,   926,   927,   928,   928,   639,   639,   640,   640,   640,
     641,   641,   642,   642,   617,   617,   617,   618,   618,   618,
     619,   947,   947,   947,   947,   947,   947,   947,   947,   948,
     948,   949,   949,   950,   950,   951,   951,   941,   941,   941,
     941,   942,   942,   942,   942,   943,   943,   943,   943,   944,
     944,   945,   945,   945,   945,   945,   945,   945,   946,   946,
     932,   552,   552,   553,   553,   554,   554,   555,   555,   556,
     556,   557,   557,   558,   558,   559,   559,   560,   560,   560,
     560,   560,   560,   561,   562,   562,   563,   563,   564,   564,
     565,   565,   565,   565,   565,   565,   565,   565,   565,   565,
     565,   565,   565,   565,   565,   565,   566,   567,   567,   567,
     568,   568,   693,   693,   693,   694,   694,   633,   633,   633,
     634,   634,   672,   673,   673,   673,   673,   673,   674,   674,
     675,   675,   675,   676,   676,   676,   677,   677,   678,   679,
     679,   680,   680,   680,   681,   681,   681,   682,   682,   682,
     683,   683,   684,   684,   685,   685,   686,   686,   687,   687,
     688,   688,   689,   689,   690,   690,   691,   691,   692,   569,
     569,   569,   570,   570,   571,   571,   571,   571,   571,   571,
     572,   572,   573,   574,   574,   574,   574,   574,   575,   575,
     575,   575,   576,   576,   576,   576,   576,   576,   576,   576,
     577,   577,   578,   578,   579,   579,   579,   580,   581,   582,
     582,   582,   582,   582,   583,   583,   583,   583,   584,   585,
     585,   586,   586,   587,   587,   587,   587,   587,   587,   587,
     587,   588,   588,   589,   590,   590,   590,   590,   591,   591,
     591,   591,   592,   593,   593,   593,   594,   595,   595,   595,
     595,   595,   595,   596,   596,   597,   597,   598,   599,   599,
     599,   600,   600,   601,   601,   602,   602,   602,   603,   604,
     604,   605,   605,   606,   607,   607,   607,   607,   608,   608,
     609,   609,   610,   610,   610,   611,   611,   611,   611,   611,
     611,   612,   612,   613,   613,   613,   613,   614,   615,   615,
     615,   615,   615,   615,   615,   615,   616,   616,   638,   638,
     638,   638,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   700,   700,   537,   537,   665,
     665,   666,   667,   667,   668,   668,   669,   669,   670,   670,
     671,   671,   652,   652,   652,   652,   653,   653,   654,   654,
     654,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   656,   656,   656,   657,   657,   658,   658,   659,   659,
     660,   660,   660,   660,   661,   662,   662,   650,   650,   650,
     651,   651,   545,   545,   546,   546,   546,   547,   547,   548,
     549,   549,   896,   550,   551,   551,   551,   551,   929,   929,
     929,   929,   929,   929,   930,   930,   930,   696,   697,   697,
     698,   698,   698,   698,   698,   526,   526,   526,   526,   526,
     526,   526,   526,   527,   527,   528,   528,   529,   529,   529,
     529,   530,   530,   531,   531,   531,   531,   531,   531,   531,
     531,   531,   531,   531,   531,   531,   531,   531,   531,   531,
     531,   531,   531,   531,   531,   531,   531,   531,   531,   531,
     531,   531,   532,   532,   533,   533,   533,   533,   534,   534,
     535,   536,   536,   536,   938,   938,   938,   938,   939,   939,
     940,   940,   940,   519,   519,   520,   520,   521,   521,   521,
     522,   522,   522,   522,   523,   523,   523,   523,   523,   523,
     523,   523,   523,   523,   523,   523,   523,   523,   524,   524,
     525,   525,   525,   543,   543,   544,   544,   695,   695,   695,
     542,   518,   518,   518,   518,   518,   518,   538,   539,   539,
     540,   540,   541,   541,   643,   643,   643,   643,   643,   643,
     643,   643,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   645,
     645,   645,   645,   645,   645,   646,   646,   647,   647,   647,
     648,   648,   648,   649,   649,   635,   635,   635,   636,   636,
     637,   637,   620,   620,   620,   620,   620,   620,   621,   621,
     622,   622,   952,   952,   952,   952,   952,   953,   953,   953,
     953,   663,   663,   664,   933,   933,   933,   933,   933,   934,
     934,   934,   934,   934,   935,   935,   936,   936,   937,   937,
     623,   623,   623,   624,   624,   625,   625,   625,   625,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     8,     1,     1,     3,     3,     1,     2,
       4,     4,     2,     3,     5,     5,     1,     1,     3,     0,
      11,    11,    10,    12,     1,     2,     5,     4,     4,     4,
       4,     7,     5,     4,     7,     6,     9,     9,     4,     1,
       1,     1,     1,     1,     1,     1,     5,     1,     1,     3,
       1,     2,     2,     2,     3,     1,     3,     7,     1,     2,
       0,     2,     0,     3,     3,     4,     4,     4,     4,     3,
       2,     1,     1,     0,     1,     1,     0,     2,     1,     5,
       1,     0,     2,     2,     0,     1,     0,     3,     5,     1,
       3,     4,     3,     1,     1,     0,     2,     2,     0,     2,
       2,     1,     1,     1,     0,     2,     4,     5,     4,     2,
       3,     2,     2,     2,     2,     1,     2,     3,     0,     1,
       0,     5,     1,     4,     6,     2,     1,     0,     4,     0,
       1,     1,     2,     2,     2,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     1,     3,     3,     0,     1,     3,
       1,     2,     1,     1,     1,     1,     1,     2,     4,     4,
       5,     1,     1,     2,     0,     2,     0,     1,     3,     1,
       0,     1,     2,     3,     2,     4,     2,     3,     2,     0,
       1,     2,     0,     4,     5,     1,     2,     2,     0,     1,
       3,     1,     2,     3,     3,     3,     3,     3,     3,     1,
       4,     9,     9,     3,     0,     2,     2,     0,     5,     3,
       1,     3,     5,     3,     1,     2,     1,     3,     5,     1,
       2,     3,     4,     5,     4,     5,     4,     6,     5,     4,
       5,     5,     5,     2,     4,     1,     1,     0,     1,     4,
       5,     4,     0,     2,     2,     2,     1,     1,     1,     1,
       0,     4,     2,     1,     2,     2,     4,     2,     6,     2,
       1,     3,     4,     0,     2,     0,     2,     0,     1,     3,
       3,     2,     0,     2,     4,     1,     1,     1,     0,     2,
       3,     5,     6,     2,     3,     5,     5,     5,     3,     4,
       0,     1,     1,     1,     1,     1,     2,     4,     1,     1,
       1,     1,     2,     3,     0,     1,     1,     1,     1,     1,
       2,     2,     2,     2,     2,     1,     3,     0,     1,     1,
       1,     1,     5,     2,     1,     1,     1,     1,     4,     1,
       2,     2,     1,     3,     3,     2,     1,     0,     5,     2,
       5,     2,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     3,     3,     3,     3,     3,     0,     1,     3,
       3,     5,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     3,     3,     2,     2,     3,     3,     5,     4,     6,
       3,     5,     4,     6,     4,     6,     5,     7,     3,     2,
       4,     3,     2,     3,     3,     3,     3,     4,     3,     4,
       3,     4,     5,     6,     6,     7,     6,     7,     6,     7,
       3,     4,     4,     6,     1,     4,     3,     5,     1,     3,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     5,
       6,     6,     7,     1,     1,     2,     1,     1,     2,     2,
       3,     1,     2,     4,     1,     1,     2,     2,     4,     1,
       1,     3,     1,     4,     1,     3,     3,     6,     7,     9,
       7,     7,     5,     1,     1,     1,     5,     6,     6,     4,
       4,     4,     4,     6,     5,     5,     5,     4,     6,     4,
       7,     9,     5,     0,     5,     4,     0,     1,     0,     2,
       0,     1,     3,     3,     2,     2,     0,     6,     1,     0,
       3,     0,     3,     3,     3,     0,     1,     4,     2,     2,
       2,     2,     2,     3,     2,     2,     3,     0,     4,     3,
       1,     5,     3,     1,     3,     1,     2,     3,     1,     3,
       1,     2,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     1,     4,     1,     4,     1,
       2,     1,     2,     1,     2,     1,     3,     1,     3,     1,
       2,     1,     3,     1,     2,     1,     0,     1,     3,     1,
       3,     3,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     3,     2,     3,
       0,     3,     3,     2,     2,     1,     0,     2,     2,     3,
       2,     1,     1,     3,     5,     1,     2,     4,     2,     0,
       1,     0,     1,     2,     3,     5,     1,     0,     0,     2,
       0,     2,     3,     3,     3,     5,     0,     2,     1,     0,
       1,     0,     1,     3,     1,     2,     3,     2,     1,     4,
       2,     1,     0,     3,     1,     3,     1,     2,     4,     2,
       0,     1,     3,     1,     3,     1,     2,     1,     3,     1,
       1,     2,     1,     1,     2,     1,     1,     2,     7,     2,
       5,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       3,     0,     1,     1,     1,     7,     3,     1,     2,     3,
       2,     0,     2,     0,     7,    10,     9,     2,     3,     0,
       4,     2,     2,     2,     2,     3,     4,     3,     1,     1,
       1,     1,     0,     1,     3,     1,     3,     2,     3,     3,
       3,     1,     3,     3,     2,     3,     3,     3,     3,     1,
       1,     1,     1,     3,     5,     1,     1,     1,     1,     3,
       2,    11,     9,     1,     1,     3,     0,     1,     3,     1,
       0,     1,     0,     1,     0,     1,     3,     1,     1,     1,
       3,     1,     0,     2,     2,     0,     2,     0,     1,     0,
       1,     1,     1,     3,     3,     1,     1,     3,     3,     3,
       3,     3,     3,     4,     3,     2,     1,     1,     1,     1,
       1,     3,     2,     2,     3,     1,     1,     5,     8,     7,
       1,     0,     9,     1,     4,     4,     7,     2,     1,     3,
       2,     2,     0,     4,     3,     0,     1,     0,     2,     3,
       5,     2,     2,     0,     8,     5,     0,     5,     5,     7,
       2,     0,     1,     1,     1,     3,     2,     0,     1,     0,
       1,     3,     1,     3,     1,     2,     1,     3,     2,     9,
      12,    11,     0,     2,     1,     1,     1,     1,     1,     1,
       3,     0,     1,     2,     1,     1,     2,     2,     3,     1,
       1,     2,     2,     1,     2,     3,     5,     3,     2,     5,
       1,     1,     1,     0,     5,     7,     5,     2,     3,     1,
       1,     2,     2,     0,     3,     4,     4,     0,     3,     2,
       0,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     1,     2,     2,     2,     2,     2,
       2,     0,     3,     3,     3,     0,     1,     2,     1,     2,
       2,     2,     2,     3,     4,     1,     3,     1,     1,     1,
       1,     3,     1,     2,     0,     1,     2,     0,     1,     3,
       0,     2,     0,     3,     3,     1,     5,     3,     1,     3,
       1,     2,     1,     4,     5,     5,     6,     3,     7,     4,
      11,     1,     3,     2,     2,     2,     0,     3,     1,     1,
       2,     2,     2,     2,     1,     0,     1,     2,     2,     3,
       2,     3,     6,     6,     8,     6,     8,     6,     8,     6,
       8,     8,    10,     8,    10,     1,     0,     2,     4,    13,
      16,     1,     2,     0,     1,     0,     1,     0,     2,     0,
       1,     0,     2,     4,     3,     5,     1,     0,     1,     1,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     3,     9,    12,
       3,     0,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     1,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     0,     5,     3,     0,
       1,     1,     1,     1,     1,     4,     6,     4,     6,     4,
       6,     4,     6,     1,     2,     3,     2,     1,     3,     2,
       3,     1,     3,     2,     5,     3,     6,     4,     6,     6,
       6,     5,     5,     6,     9,     4,     5,     7,     6,     4,
       8,     4,     2,     4,     3,     6,     4,     2,     2,     2,
       2,     1,     2,     0,     1,     2,     2,     2,     1,     3,
       4,     2,     1,     0,     2,     3,     3,     3,     1,     1,
       1,     2,     3,     4,     6,     1,     2,     1,     1,     0,
       1,     2,     2,     1,     2,     2,     1,     2,     3,     2,
       2,     2,     2,     3,     3,     3,     1,     3,     1,     0,
       1,     2,     2,     3,     2,     1,     0,     2,     4,     5,
       2,     6,     8,     6,     8,     6,     8,     5,     3,     5,
       1,     0,     2,     0,     6,     4,     6,     4,     6,     8,
       4,     6,     1,     1,     1,     1,     2,     1,     2,     1,
       2,     1,     1,     1,     1,     3,     3,     3,     3,     2,
       2,     1,     3,     1,     1,     1,     3,     1,     1,     0,
       1,     1,     1,     1,     3,     6,     8,     5,     1,     0,
       1,     3,     8,    11,    10,     7,    10,     9,     1,     1,
       2,     3,     9,    12,    11,    12,    14,     3,     4,     4,
       0,     4,     6,     3,     4,     6,     5,     4,     6,     1,
       1,     1,     1,     1,     1,     0,     1,     3,     1,     0,
       4,     7,     6,     2,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 492 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 17769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 508 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 17785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 520 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 17796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 42: /* stmt: %empty  */
#line 566 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 17802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 17817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 17823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 17829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 17846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 17858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 17870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 17882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 17894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 17906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 17918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 17938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 17947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 17965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 17984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 18050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 18058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 18066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 18074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 18082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* pivot_column_entry: b_expr  */
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 18224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 389 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 18235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* pivot_column_entry: single_pivot_value  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* pivot_column_list_internal: pivot_column_entry  */
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* pivot_column_list: pivot_column_list_internal  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* pivot_column_list: pivot_column_list_internal ','  */
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* with_clause: WITH cte_list  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 18276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* with_clause: WITH_LA cte_list  */
#line 427 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 18287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* with_clause: WITH RECURSIVE cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 18298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* cte_list: common_table_expr  */
#line 443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* cte_list: cte_list ',' common_table_expr  */
#line 444 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 18324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* opt_materialized: MATERIALIZED  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 18330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* opt_materialized: NOT MATERIALIZED  */
#line 461 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 18336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* opt_materialized: %empty  */
#line 462 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 18342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* into_clause: INTO OptTempTableName  */
#line 467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 18356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* into_clause: %empty  */
#line 477 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 18362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 506 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 522 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 18431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* OptTempTableName: TABLE qualified_name  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 18440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* OptTempTableName: qualified_name  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 18449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* opt_table: TABLE  */
#line 538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 18455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* opt_table: %empty  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 18461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* all_or_distinct: ALL  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 18467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* all_or_distinct: DISTINCT  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* all_or_distinct: %empty  */
#line 545 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* by_name: BY NAME_P  */
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 18485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* distinct_clause: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 18491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* opt_all_clause: ALL  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 18503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* opt_all_clause: %empty  */
#line 562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 18515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 567 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 18521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* opt_ignore_nulls: %empty  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* opt_sort_clause: sort_clause  */
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 18533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* opt_sort_clause: %empty  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* sort_clause: ORDER BY sortby_list  */
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 18562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* sortby_list: sortby  */
#line 594 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 18568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* sortby_list: sortby_list ',' sortby  */
#line 595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 18574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 18587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 18600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* opt_asc_desc: ASC_P  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 18606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* opt_asc_desc: DESC_P  */
#line 619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 18612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* opt_asc_desc: %empty  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 18618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 18624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 18630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* opt_nulls_order: %empty  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 18636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* select_limit: limit_clause offset_clause  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 18642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* select_limit: offset_clause limit_clause  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 18648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* select_limit: limit_clause  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 18654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* select_limit: offset_clause  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 18660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* opt_select_limit: select_limit  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_select_limit: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 18672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* limit_clause: LIMIT select_limit_value  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 18691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 18697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 18703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* offset_clause: OFFSET select_offset_value  */
#line 667 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 18715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* sample_count: FCONST '%'  */
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 18723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* sample_count: ICONST '%'  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 18731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* sample_count: FCONST PERCENT  */
#line 686 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 18739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* sample_count: ICONST PERCENT  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 18747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* sample_count: ICONST  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 18755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* sample_count: ICONST ROWS  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 18763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 18771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* sample_clause: %empty  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 18777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_sample_func: ColId  */
#line 716 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 18783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_sample_func: %empty  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 18789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 18798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* tablesample_entry: sample_count  */
#line 727 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 18806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 18814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 735 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 18823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 18831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* opt_tablesample_clause: tablesample_clause  */
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* opt_tablesample_clause: %empty  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 18843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 18849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* opt_repeatable_clause: %empty  */
#line 756 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 18855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* select_limit_value: a_expr  */
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* select_limit_value: ALL  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 18870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* select_limit_value: a_expr '%'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 18876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* select_limit_value: FCONST PERCENT  */
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 18882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* select_limit_value: ICONST PERCENT  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 18888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* select_offset_value: a_expr  */
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* select_fetch_first_value: c_expr  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* select_fetch_first_value: '+' I_or_F_const  */
#line 797 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* select_fetch_first_value: '-' I_or_F_const  */
#line 799 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 18912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* I_or_F_const: Iconst  */
#line 803 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 18918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* I_or_F_const: FCONST  */
#line 804 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 18924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* row_or_rows: ROW  */
#line 808 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 18930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* row_or_rows: ROWS  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 18936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* first_or_next: FIRST_P  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 18942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* first_or_next: NEXT  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 18948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* group_clause: GROUP_P BY ALL  */
#line 840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 18963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* group_clause: %empty  */
#line 844 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* group_by_list: group_by_item  */
#line 848 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* group_by_list: group_by_list ',' group_by_item  */
#line 849 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 18981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* group_by_list_opt_comma: group_by_list  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* group_by_list_opt_comma: group_by_list ','  */
#line 854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 18993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* group_by_item: a_expr  */
#line 858 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* group_by_item: empty_grouping_set  */
#line 859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* group_by_item: cube_clause  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* group_by_item: rollup_clause  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* group_by_item: grouping_sets_clause  */
#line 862 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* empty_grouping_set: '(' ')'  */
#line 867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 19031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* grouping_or_grouping_id: GROUPING  */
#line 900 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 19061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* grouping_or_grouping_id: GROUPING_ID  */
#line 901 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 19067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* having_clause: HAVING a_expr  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* having_clause: %empty  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* qualify_clause: QUALIFY a_expr  */
#line 910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* qualify_clause: %empty  */
#line 911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* for_locking_clause: for_locking_items  */
#line 915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* for_locking_clause: FOR READ_P ONLY  */
#line 916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* opt_for_locking_clause: for_locking_clause  */
#line 920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* opt_for_locking_clause: %empty  */
#line 921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 19115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* for_locking_items: for_locking_item  */
#line 925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* for_locking_items: for_locking_items for_locking_item  */
#line 926 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 19139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* for_locking_strength: FOR UPDATE  */
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 19145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 942 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 19151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* for_locking_strength: FOR SHARE  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 19157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* for_locking_strength: FOR KEY SHARE  */
#line 944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 19163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* locked_rels_list: OF qualified_name_list  */
#line 948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* locked_rels_list: %empty  */
#line 949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 19175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* opt_nowait_or_skip: NOWAIT  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 19181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 19187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* opt_nowait_or_skip: %empty  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 19193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 19203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 972 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 19213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* values_clause_opt_comma: values_clause  */
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* values_clause_opt_comma: values_clause ','  */
#line 981 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 19225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* from_clause: FROM from_list_opt_comma  */
#line 994 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* from_clause: %empty  */
#line 995 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* from_list: table_ref  */
#line 999 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* from_list: from_list ',' table_ref  */
#line 1000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 19249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* from_list_opt_comma: from_list  */
#line 1004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* from_list_opt_comma: from_list ','  */
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 19271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1018 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 19283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1026 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 19296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 19308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1043 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 19321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1052 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 19334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* table_ref: joined_table  */
#line 1061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 19342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 19351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 19365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1080 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 19379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1092 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 19385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* opt_pivot_group_by: %empty  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 19391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 19397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1097 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 19403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* opt_include_nulls: %empty  */
#line 1098 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 19409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1102 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 19420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 19431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* pivot_header: d_expr  */
#line 1119 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1120 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 19454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1132 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 19465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* pivot_value_list: pivot_value  */
#line 1141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 19481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* unpivot_header: ColIdOrString  */
#line 1151 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 19493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1157 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 19504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* unpivot_value_list: unpivot_value  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 19520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* joined_table: '(' joined_table ')'  */
#line 1195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 19528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 19545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1212 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 19563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 19582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 19598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 19615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 19633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1280 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 19651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 19668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1307 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 19687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 19707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 19717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* alias_clause: AS ColIdOrString  */
#line 1347 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 19726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 19736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* alias_clause: ColId  */
#line 1358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 19745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* opt_alias_clause: alias_clause  */
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 19751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* opt_alias_clause: %empty  */
#line 1365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 19757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* func_alias_clause: alias_clause  */
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 19765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 19773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 19783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 19793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* func_alias_clause: %empty  */
#line 1394 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 19801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* join_type: FULL join_outer  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 19807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* join_type: LEFT join_outer  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 19813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* join_type: RIGHT join_outer  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 19819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* join_type: SEMI  */
#line 1402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 19825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* join_type: ANTI  */
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 19831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* join_type: INNER_P  */
#line 1404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 19837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* join_outer: OUTER_P  */
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 19843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* join_outer: %empty  */
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 19855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* join_qual: ON a_expr  */
#line 1422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* relation_expr: qualified_name  */
#line 1428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 19872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* relation_expr: qualified_name '*'  */
#line 1435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 19883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* relation_expr: ONLY qualified_name  */
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 19894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 19905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* func_table: func_expr_windowless opt_ordinality  */
#line 1481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 19920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1492 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 19935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1505 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 19941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* rowsfrom_list: rowsfrom_item  */
#line 1509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 19947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1510 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 19953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1513 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* opt_col_def_list: %empty  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 19971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* opt_ordinality: %empty  */
#line 1518 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 19977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* where_clause: WHERE a_expr  */
#line 1523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* where_clause: %empty  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* TableFuncElementList: TableFuncElement  */
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1540 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 20027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* opt_collate_clause: COLLATE any_name  */
#line 1561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* opt_collate_clause: %empty  */
#line 1568 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 20045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* colid_type_list: ColId Typename  */
#line 1581 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 20053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1584 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 20061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* opt_Typename: Typename  */
#line 1591 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* opt_Typename: %empty  */
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 20073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* Typename: SimpleTypename opt_array_bounds  */
#line 1595 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 20082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 20092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 20101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 20111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* Typename: SimpleTypename ARRAY  */
#line 1618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 20120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 20130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1628 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 20141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1634 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 20152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1640 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 20163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 20169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1652 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 20175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* opt_array_bounds: %empty  */
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 20181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* SimpleTypename: GenericType  */
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* SimpleTypename: Numeric  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* SimpleTypename: Bit  */
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* SimpleTypename: Character  */
#line 1661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* SimpleTypename: ConstDatetime  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* SimpleTypename: ConstInterval opt_interval  */
#line 1664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 20220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 20230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* ConstTypename: Numeric  */
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* ConstTypename: ConstBit  */
#line 1689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* ConstTypename: ConstCharacter  */
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* ConstTypename: ConstDatetime  */
#line 1691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* GenericType: type_name_token opt_type_modifiers  */
#line 1703 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* opt_type_modifiers: %empty  */
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 20276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* Numeric: INT_P  */
#line 1724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* Numeric: INTEGER  */
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* Numeric: SMALLINT  */
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* Numeric: BIGINT  */
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* Numeric: REAL  */
#line 1744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* Numeric: FLOAT_P opt_float  */
#line 1749 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* Numeric: DOUBLE_P PRECISION  */
#line 1754 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* Numeric: DEC opt_type_modifiers  */
#line 1765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* Numeric: BOOLEAN_P  */
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* opt_float: '(' Iconst ')'  */
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 20403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* opt_float: %empty  */
#line 1805 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 20411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* Bit: BitWithLength  */
#line 1815 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* Bit: BitWithoutLength  */
#line 1819 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* ConstBit: BitWithLength  */
#line 1827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* ConstBit: BitWithoutLength  */
#line 1831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 20444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 20457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* BitWithoutLength: BIT opt_varying  */
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* Character: CharacterWithLength  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* Character: CharacterWithoutLength  */
#line 1876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* ConstCharacter: CharacterWithLength  */
#line 1882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* ConstCharacter: CharacterWithoutLength  */
#line 1886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 20514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 20524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* CharacterWithoutLength: character  */
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* character: CHARACTER opt_varying  */
#line 1917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* character: CHAR_P opt_varying  */
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* character: VARCHAR  */
#line 1921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 20554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* character: NATIONAL CHARACTER opt_varying  */
#line 1923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* character: NATIONAL CHAR_P opt_varying  */
#line 1925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* character: NCHAR opt_varying  */
#line 1927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* opt_varying: VARYING  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 20578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* opt_varying: %empty  */
#line 1932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 20584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 20597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1949 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1957 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 20622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* ConstDatetime: TIME opt_timezone  */
#line 1966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* ConstInterval: INTERVAL  */
#line 1977 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 20649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1985 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 20655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* opt_timezone: %empty  */
#line 1986 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 20661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* opt_interval: year_keyword  */
#line 2015 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 20667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* opt_interval: month_keyword  */
#line 2017 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 20673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* opt_interval: day_keyword  */
#line 2019 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 20679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* opt_interval: hour_keyword  */
#line 2021 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 20685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* opt_interval: minute_keyword  */
#line 2023 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 20691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* opt_interval: second_keyword  */
#line 2025 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 20697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* opt_interval: millisecond_keyword  */
#line 2027 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 20703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* opt_interval: microsecond_keyword  */
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 20709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* opt_interval: year_keyword TO month_keyword  */
#line 2031 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 20718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* opt_interval: day_keyword TO hour_keyword  */
#line 2036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 20727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* opt_interval: day_keyword TO minute_keyword  */
#line 2041 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 20737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* opt_interval: day_keyword TO second_keyword  */
#line 2047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 20748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 20757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* opt_interval: hour_keyword TO second_keyword  */
#line 2059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 20767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* opt_interval: minute_keyword TO second_keyword  */
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 20776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* opt_interval: %empty  */
#line 2070 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 20782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* a_expr: c_expr  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* a_expr: a_expr TYPECAST Typename  */
#line 2104 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 20794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* a_expr: a_expr COLLATE any_name  */
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2114 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 20816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* a_expr: '+' a_expr  */
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 20822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* a_expr: '-' a_expr  */
#line 2131 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 20828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* a_expr: a_expr '+' a_expr  */
#line 2133 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* a_expr: a_expr '-' a_expr  */
#line 2135 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* a_expr: a_expr '*' a_expr  */
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* a_expr: a_expr '/' a_expr  */
#line 2139 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2141 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* a_expr: a_expr '%' a_expr  */
#line 2143 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* a_expr: a_expr '^' a_expr  */
#line 2145 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* a_expr: a_expr POWER_OF a_expr  */
#line 2147 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* a_expr: a_expr '<' a_expr  */
#line 2149 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* a_expr: a_expr '>' a_expr  */
#line 2151 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* a_expr: a_expr '=' a_expr  */
#line 2153 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2155 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2157 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2159 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* a_expr: a_expr qual_Op a_expr  */
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* a_expr: qual_Op a_expr  */
#line 2164 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 20924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* a_expr: a_expr qual_Op  */
#line 2166 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 20930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* a_expr: a_expr AND a_expr  */
#line 2169 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* a_expr: a_expr OR a_expr  */
#line 2171 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* a_expr: NOT a_expr  */
#line 2173 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 20948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* a_expr: NOT_LA a_expr  */
#line 2175 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 20954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* a_expr: a_expr GLOB a_expr  */
#line 2177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 20963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* a_expr: a_expr LIKE a_expr  */
#line 2182 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 20972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 20983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 20992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 21003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* a_expr: a_expr ILIKE a_expr  */
#line 2206 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 21023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 21032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 21043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 21055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 21067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 21079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 21091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* a_expr: a_expr IS NULL_P  */
#line 2273 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* a_expr: a_expr ISNULL  */
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* a_expr: a_expr IS NOT NULL_P  */
#line 2289 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 21127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* a_expr: a_expr NOT NULL_P  */
#line 2297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* a_expr: a_expr NOTNULL  */
#line 2305 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2313 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 21163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2321 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 21171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* a_expr: row OVERLAPS row  */
#line 2325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 21191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* a_expr: a_expr IS TRUE_P  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* a_expr: a_expr IS FALSE_P  */
#line 2357 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* a_expr: a_expr IS UNKNOWN  */
#line 2373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2381 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2389 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 21271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 21279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 21287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 21295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2405 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 21307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 21319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2421 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 21331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2429 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 21343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* a_expr: a_expr IN_P in_expr  */
#line 2437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 21367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 21393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 21408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2490 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 21419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* a_expr: DEFAULT  */
#line 2497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 21449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2519 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 21461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 21474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* b_expr: c_expr  */
#line 2547 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* b_expr: b_expr TYPECAST Typename  */
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 21486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* b_expr: '+' b_expr  */
#line 2551 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 21492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* b_expr: '-' b_expr  */
#line 2553 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 21498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* b_expr: b_expr '+' b_expr  */
#line 2555 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* b_expr: b_expr '-' b_expr  */
#line 2557 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* b_expr: b_expr '*' b_expr  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* b_expr: b_expr '/' b_expr  */
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2563 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* b_expr: b_expr '%' b_expr  */
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* b_expr: b_expr '^' b_expr  */
#line 2567 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* b_expr: b_expr POWER_OF b_expr  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* b_expr: b_expr '<' b_expr  */
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* b_expr: b_expr '>' b_expr  */
#line 2573 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* b_expr: b_expr '=' b_expr  */
#line 2575 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2581 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* b_expr: b_expr qual_Op b_expr  */
#line 2583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* b_expr: qual_Op b_expr  */
#line 2585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 21594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* b_expr: b_expr qual_Op  */
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 21600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2589 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 21608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2593 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 21616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2597 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 21624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 21632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* c_expr: row  */
#line 2615 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 21641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* c_expr: indirection_expr opt_extended_indirection  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 21657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* d_expr: columnref  */
#line 2633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* d_expr: AexprConst  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* d_expr: '#' ICONST  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* d_expr: '$' ColLabel  */
#line 2643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 21688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* d_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 21697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* d_expr: list_comprehension  */
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 21705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* d_expr: ARRAY select_with_parens  */
#line 2654 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* d_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2664 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 21730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* d_expr: case_expr  */
#line 2670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* d_expr: select_with_parens  */
#line 2672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* d_expr: select_with_parens indirection  */
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 21779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* d_expr: EXISTS select_with_parens  */
#line 2707 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2718 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 21805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* indirection_expr: '?'  */
#line 2729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 21813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* indirection_expr: PARAM  */
#line 2733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 21824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* indirection_expr: '(' a_expr ')'  */
#line 2740 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 21832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* indirection_expr: struct_expr  */
#line 2744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 21840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2748 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 21861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* indirection_expr: func_expr  */
#line 2765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 21869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 21878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* func_application: func_name '(' ')'  */
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 21886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 21897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2793 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 21909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 21921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2809 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 21936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2820 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 21988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* func_expr: func_expr_common_subexpr  */
#line 2876 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* func_expr_windowless: func_application  */
#line 2886 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2887 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 22016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2901 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 22022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2903 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 22028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 22088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2945 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 22099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 22107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 22115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2960 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 22131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 22142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 22155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 22174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3008 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* within_group_clause: %empty  */
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 22192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3014 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 22198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* filter_clause: %empty  */
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 22204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* export_clause: EXPORT_STATE  */
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 22210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* export_clause: %empty  */
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 22216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* window_clause: WINDOW window_definition_list  */
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* window_clause: %empty  */
#line 3028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* window_definition_list: window_definition  */
#line 3032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 22234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3034 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 22240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* window_definition: ColId AS window_specification  */
#line 3039 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 22250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* over_clause: OVER window_specification  */
#line 3047 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 22256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* over_clause: OVER ColId  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 22273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* over_clause: %empty  */
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 22279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3067 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 22297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* opt_existing_window_name: ColId  */
#line 3092 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* opt_existing_window_name: %empty  */
#line 3093 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 22309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3096 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* opt_partition_clause: %empty  */
#line 3097 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef  *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 22333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3114 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef  *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 22345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3122 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef  *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 22357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* opt_frame_clause: %empty  */
#line 3130 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef  *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* frame_extent: frame_bound  */
#line 3141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef  *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 22392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef  *n1 = (yyvsp[-2].windef);
					PGWindowDef  *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 22434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef  *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3214 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef  *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* frame_bound: CURRENT_P ROW  */
#line 3223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef  *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* frame_bound: a_expr PRECEDING  */
#line 3232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef  *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* frame_bound: a_expr FOLLOWING  */
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef  *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 22505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 22511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3254 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 22517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3255 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 22523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* opt_window_exclusion_clause: %empty  */
#line 3256 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 22529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* qualified_row: ROW '(' ')'  */
#line 3271 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 22541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* row: qualified_row  */
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 22547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* row: '(' expr_list ',' a_expr ')'  */
#line 3275 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 22553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3279 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 22566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* dict_arguments: dict_arg  */
#line 3289 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* dict_arguments_opt_comma: dict_arguments  */
#line 3294 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3295 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* map_arg: a_expr ':' a_expr  */
#line 3300 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 22598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* map_arguments: map_arg  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* map_arguments: map_arguments ',' map_arg  */
#line 3307 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* map_arguments_opt_comma: map_arguments  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* map_arguments_opt_comma: map_arguments ','  */
#line 3313 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3318 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* opt_map_arguments_opt_comma: %empty  */
#line 3319 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 22634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* sub_type: ANY  */
#line 3322 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 22640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* sub_type: SOME  */
#line 3323 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 22646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* sub_type: ALL  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 22652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* all_Op: Op  */
#line 3327 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* all_Op: MathOp  */
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 22664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* MathOp: '+'  */
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 22670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* MathOp: '-'  */
#line 3332 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 22676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* MathOp: '*'  */
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 22682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* MathOp: '/'  */
#line 3334 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 22688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* MathOp: INTEGER_DIVISION  */
#line 3335 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 22694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* MathOp: '%'  */
#line 3336 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 22700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* MathOp: '^'  */
#line 3337 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 22706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* MathOp: POWER_OF  */
#line 3338 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 22712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* MathOp: '<'  */
#line 3339 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 22718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* MathOp: '>'  */
#line 3340 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 22724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* MathOp: '='  */
#line 3341 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 22730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* MathOp: LESS_EQUALS  */
#line 3342 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 22736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* MathOp: GREATER_EQUALS  */
#line 3343 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 22742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* MathOp: NOT_EQUALS  */
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 22748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* qual_Op: Op  */
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3350 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* qual_all_Op: all_Op  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3357 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* subquery_Op: all_Op  */
#line 3362 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* subquery_Op: LIKE  */
#line 3366 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 22790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* subquery_Op: NOT_LA LIKE  */
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 22796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* subquery_Op: GLOB  */
#line 3370 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 22802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* subquery_Op: NOT_LA GLOB  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 22808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* subquery_Op: ILIKE  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 22814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* subquery_Op: NOT_LA ILIKE  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 22820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* any_operator: all_Op  */
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* any_operator: ColId '.' any_operator  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 22832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* c_expr_list: c_expr  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* c_expr_list_opt_comma: c_expr_list  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 22856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 22864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* expr_list: a_expr  */
#line 3419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* expr_list: expr_list ',' a_expr  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* expr_list_opt_comma: expr_list  */
#line 3430 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 22888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* expr_list_opt_comma: expr_list ','  */
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 22896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 22904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* opt_expr_list_opt_comma: %empty  */
#line 3446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 22912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* func_arg_list: func_arg_expr  */
#line 3455 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* func_arg_expr: a_expr  */
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 22936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 22949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 22962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* type_list: Typename  */
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 22968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* type_list: type_list ',' Typename  */
#line 3489 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 22974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* extract_list: extract_arg FROM a_expr  */
#line 3494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 22982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* extract_list: %empty  */
#line 3497 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* extract_arg: IDENT  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* extract_arg: year_keyword  */
#line 3505 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 23000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* extract_arg: month_keyword  */
#line 3506 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 23006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* extract_arg: day_keyword  */
#line 3507 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 23012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* extract_arg: hour_keyword  */
#line 3508 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 23018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* extract_arg: minute_keyword  */
#line 3509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 23024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* extract_arg: second_keyword  */
#line 3510 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 23030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* extract_arg: millisecond_keyword  */
#line 3511 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 23036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* extract_arg: microsecond_keyword  */
#line 3512 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 23042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* extract_arg: Sconst  */
#line 3513 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3524 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 23056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3528 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 23064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* overlay_placing: PLACING a_expr  */
#line 3535 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* position_list: b_expr IN_P b_expr  */
#line 3541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 23076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* position_list: %empty  */
#line 3542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* substr_list: a_expr substr_from substr_for  */
#line 3559 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 23090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* substr_list: a_expr substr_for substr_from  */
#line 3563 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 23099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* substr_list: a_expr substr_from  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 23107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* substr_list: a_expr substr_for  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 23126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* substr_list: expr_list  */
#line 3587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 23134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* substr_list: %empty  */
#line 3591 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 23140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* substr_from: FROM a_expr  */
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* substr_for: FOR a_expr  */
#line 3598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 23158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* trim_list: FROM expr_list_opt_comma  */
#line 3602 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* trim_list: expr_list_opt_comma  */
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* in_expr: select_with_parens  */
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 23181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 23187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 23201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* when_clause_list: when_clause  */
#line 3637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* when_clause_list: when_clause_list when_clause  */
#line 3638 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 23225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* case_default: ELSE a_expr  */
#line 3653 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* case_default: %empty  */
#line 3654 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* case_arg: a_expr  */
#line 3657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* case_arg: %empty  */
#line 3658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* columnref: ColId  */
#line 3662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 23257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* columnref: ColId indirection  */
#line 3666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 23265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* indirection_el: '[' a_expr ']'  */
#line 3673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 23277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3681 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 23289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* opt_slice_bound: a_expr  */
#line 3691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* opt_slice_bound: %empty  */
#line 3692 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* opt_indirection: %empty  */
#line 3697 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* opt_indirection: opt_indirection indirection_el  */
#line 3698 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* opt_func_arguments: %empty  */
#line 3702 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 23319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* opt_func_arguments: '(' ')'  */
#line 3703 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 23325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3704 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3709 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 23344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* extended_indirection_el: '[' a_expr ']'  */
#line 3718 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 23356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3726 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 23368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* opt_extended_indirection: %empty  */
#line 3741 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 23374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3742 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3758 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* opt_target_list_opt_comma: %empty  */
#line 3759 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 23392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* target_list: target_el  */
#line 3763 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 23398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* target_list: target_list ',' target_el  */
#line 3764 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 23404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* target_list_opt_comma: target_list  */
#line 3768 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* target_list_opt_comma: target_list ','  */
#line 3769 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* target_el: a_expr AS ColLabelOrString  */
#line 3773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 23428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* target_el: a_expr IDENT  */
#line 3789 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 23440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* target_el: a_expr  */
#line 3797 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 23452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3806 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* except_list: EXCLUDE ColId  */
#line 3807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* opt_except_list: except_list  */
#line 3810 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* opt_except_list: %empty  */
#line 3811 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 23476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* replace_list_el: a_expr AS ColId  */
#line 3814 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 23482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* replace_list: replace_list_el  */
#line 3818 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* replace_list: replace_list ',' replace_list_el  */
#line 3819 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 23494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* replace_list_opt_comma: replace_list  */
#line 3823 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* replace_list_opt_comma: replace_list ','  */
#line 3824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3827 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* opt_replace_list: REPLACE replace_list_el  */
#line 3828 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* opt_replace_list: %empty  */
#line 3829 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 23524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* qualified_name_list: qualified_name  */
#line 3839 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 23530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3840 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 23536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* name_list: name  */
#line 3845 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* name_list: name_list ',' name  */
#line 3847 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 23548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* name_list_opt_comma: name_list  */
#line 3852 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* name_list_opt_comma: name_list ','  */
#line 3853 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3857 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3858 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* name: ColIdOrString  */
#line 3861 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* func_name: function_name_token  */
#line 3873 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* func_name: ColId indirection  */
#line 3876 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 23593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* AexprConst: Iconst  */
#line 3887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 23601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* AexprConst: FCONST  */
#line 3891 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 23609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* AexprConst: Sconst opt_indirection  */
#line 3895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 23625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* AexprConst: BCONST  */
#line 3907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 23633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* AexprConst: XCONST  */
#line 3911 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 23646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* AexprConst: func_name Sconst  */
#line 3920 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 23657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3927 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 23699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* AexprConst: ConstTypename Sconst  */
#line 3965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 23707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 3969 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 23715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 3973 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 23723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 3977 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 23731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* AexprConst: TRUE_P  */
#line 3981 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 23739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* AexprConst: FALSE_P  */
#line 3985 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 23747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* AexprConst: NULL_P  */
#line 3989 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 23755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* Iconst: ICONST  */
#line 3994 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 23761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* type_function_name: IDENT  */
#line 4011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* type_function_name: unreserved_keyword  */
#line 4012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* type_function_name: type_func_name_keyword  */
#line 4013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* function_name_token: IDENT  */
#line 4016 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* function_name_token: unreserved_keyword  */
#line 4017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* function_name_token: func_name_keyword  */
#line 4018 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* type_name_token: IDENT  */
#line 4021 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* type_name_token: unreserved_keyword  */
#line 4022 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* type_name_token: type_name_keyword  */
#line 4023 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* any_name: ColId  */
#line 4026 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* any_name: ColId attrs  */
#line 4027 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 23827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* attrs: '.' attr_name  */
#line 4031 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* attrs: attrs '.' attr_name  */
#line 4033 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 23839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4037 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* opt_name_list: %empty  */
#line 4038 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* ColLabelOrString: ColLabel  */
#line 4045 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* ColLabelOrString: SCONST  */
#line 4046 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 23877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 23891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 23899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 23910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 23921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 23933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 23945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 24002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 24008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 24014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 24028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 24040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 24052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 24063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 24074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 24085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 24096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 24107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 24118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* var_name: ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* var_name: var_name '.' ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 24130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* table_id: ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 24136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* table_id: table_id '.' ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 24142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 24152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 24162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 24172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 24182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 24188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 24199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 24214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 24226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 24238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 24250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 24261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 24272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 24278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 24284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 24292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 24300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 24319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 24330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 24336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 24342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 24348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 24370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 24402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 24425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 24431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 24437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 24445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 24491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 24497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 24503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 24527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 24533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 24539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* copy_generic_opt_arg: struct_expr  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 24545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* copy_generic_opt_arg: %empty  */
#line 107 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 24551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 113 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* opt_oids: WITH OIDS  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 24567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* opt_oids: %empty  */
#line 124 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 24579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* copy_opt_list: %empty  */
#line 130 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 24585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* opt_binary: BINARY  */
#line 136 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 24593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_binary: %empty  */
#line 139 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* copy_opt_item: BINARY  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 24607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* copy_opt_item: OIDS  */
#line 149 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* copy_opt_item: FREEZE  */
#line 153 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 157 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 161 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* copy_opt_item: CSV  */
#line 165 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 24647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* copy_opt_item: HEADER_P  */
#line 169 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 173 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 177 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* copy_opt_item: FORCE QUOTE columnList  */
#line 181 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* copy_opt_item: FORCE QUOTE '*'  */
#line 185 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 24687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* copy_opt_item: PARTITION BY columnList  */
#line 189 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* copy_opt_item: PARTITION BY '*'  */
#line 193 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 24703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 197 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 24711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* copy_opt_item: FORCE NULL_P columnList  */
#line 201 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* copy_opt_item: ENCODING Sconst  */
#line 205 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 24727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 212 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* copy_file_name: Sconst  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* copy_file_name: STDIN  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 24745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* copy_file_name: STDOUT  */
#line 220 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 24751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 226 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 24759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 230 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 24767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 24778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* LoadStmt: INSTALL file_name  */
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 24789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* LoadStmt: FORCE INSTALL file_name  */
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 24800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* file_name: Sconst  */
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* file_name: ColId  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 24812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 24866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 24880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 24890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 24901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 24911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 24922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 24932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 24940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 24949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 24955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 24961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 24967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 24979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 24991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 24999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 25005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 25011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 25023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 25032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 25057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 25065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 25073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 25081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 25094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 25107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 25115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 25172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 25178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 25184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 25190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 25196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 25208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 25220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 25226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 25232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 25244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 25262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 25268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 25280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 25337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 25365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 25371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 25377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 25383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 25389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 25395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 25401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 25413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 25419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 25425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 25431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 25437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 25443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 25449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 25460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 25525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 25539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 25567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 25580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 25605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 25611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 25617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 25623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 25636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 25663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 25677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 25691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 25697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 25703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 25709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 25715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 25721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 25727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 25733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 25739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 25745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 25757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 25763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 25774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 25786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 25792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 25798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 25804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 25810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 25816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 25822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 25828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 25834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 25840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 25902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 25908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 25914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 25926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 25932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 25938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 25950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 25956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 25962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 25968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 25974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 25980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 26003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 26033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 26039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 26045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 26051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 26077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 26085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 26097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 26109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 26115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 26123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 26135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 26141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 26147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 26153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 26161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 26169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 26178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 26186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 26198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 26226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 26237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 26254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 26271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 26289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 26306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 26324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 26346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 26362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 26370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 26382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 26390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 26398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 26409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 26415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 26421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 26427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 26433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 26444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 26455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 26461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 26467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 26473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 26479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 26489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 26499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 26509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 26519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 26708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 26714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 26728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 26742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 26769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 26796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 26808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 26814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 26820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 26826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 26838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 26850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 26856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 26862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 26873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 26887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 26898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 26909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 26915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 26921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 26927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 26933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 26939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 26951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 26957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 26963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 26977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 26985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 26991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 26997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 27003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 27009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 27015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 27041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 27052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 27072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 27092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* execute_param_clause: '(' expr_list_opt_comma ')'  */
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* execute_param_clause: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 27104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 27112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 27142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 27154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 27160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 27190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 27198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 27216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 27222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 27228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 27239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 27249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 27259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 27270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 27281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 27292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 27298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 27304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 27310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 27322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 27334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 27444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 27450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 27462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 27470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 27478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 27493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 27501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 27509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 27517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 27577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 27588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 27599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 27611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 27623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 27635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 27647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 27667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 27679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 27747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 27759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 27770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 27788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 27799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 27835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 27845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 27856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 27867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 27878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 27890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 27898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 27907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 27916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 27924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 27948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 27954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 27960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 27969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 27978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 27987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 27996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 28007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 28017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 28023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 28034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 28045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 28075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 28081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 28087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 28093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 28099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 28105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 28111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 28120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 28126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 28134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 28142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 28150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 28158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 28166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 28174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 28182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 28190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 28198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 28206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 28215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 28223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 28231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 28239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 28245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 28251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 28257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 28263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 28269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 28303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 28326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 28338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 28348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 28438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* DetachStmt: DETACH opt_database IDENT  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* opt_database: DATABASE  */
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 28466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* opt_database: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 28472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* opt_database_alias: AS ColId  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* opt_database_alias: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 28484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 28554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 28568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 28582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 28596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 28602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* drop_type_any_name: SEQUENCE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 28608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* drop_type_any_name: FUNCTION  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 28614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* drop_type_any_name: MACRO  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 28620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* drop_type_any_name: MACRO TABLE  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 28626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* drop_type_any_name: VIEW  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 28632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 28638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* drop_type_any_name: INDEX  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 28644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* drop_type_any_name: FOREIGN TABLE  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 28650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* drop_type_any_name: COLLATION  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 28656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* drop_type_any_name: CONVERSION_P  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 28662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* drop_type_any_name: SCHEMA  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 28668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* drop_type_any_name: STATISTICS  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 28674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 28680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 28686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 28692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 28698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* drop_type_name: ACCESS METHOD  */
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 28704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* drop_type_name: EVENT TRIGGER  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 28710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* drop_type_name: EXTENSION  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 28716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 28722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* drop_type_name: PUBLICATION  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 28728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* drop_type_name: SERVER  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 28734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* any_name_list: any_name  */
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* any_name_list: any_name_list ',' any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* opt_drop_behavior: CASCADE  */
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 28752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* opt_drop_behavior: RESTRICT  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 28758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* opt_drop_behavior: %empty  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 28764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* drop_type_name_on_any_name: POLICY  */
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 28770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* drop_type_name_on_any_name: RULE  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 28776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* drop_type_name_on_any_name: TRIGGER  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 28782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* type_name_list: Typename  */
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 28788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* type_name_list: type_name_list ',' Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 28794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 28807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 28820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 28839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 28845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 28851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 28859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 28867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 28882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 28898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 28914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 28929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 28944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 28959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 28967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 28975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 28991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 29007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 29023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 29044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 29065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 29071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 29077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 29083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 29089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 29181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 29207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 29213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 29219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 29225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 29231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 29245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 29263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 29269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 29365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 29371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 29375 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 101 "third_party/libpg_query/grammar/statements/create_schema.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
