/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 68,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 69,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 70,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 71,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 72,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 73,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 74,                     /* CLASS  */
  YYSYMBOL_CLOSE = 75,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 76,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 77,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 78,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 79,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 80,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 81,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 82,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 83,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 84,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 85,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 86,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 87,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 88,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 89,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 90,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 91,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 92,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 93,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 94,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 95,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 96,                      /* COPY  */
  YYSYMBOL_COST = 97,                      /* COST  */
  YYSYMBOL_CREATE_P = 98,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 99,                     /* CROSS  */
  YYSYMBOL_CSV = 100,                      /* CSV  */
  YYSYMBOL_CUBE = 101,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 102,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 103,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 104,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 105,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 106,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 107,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 108,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 109,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 110,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 111,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 112,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 113,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 114,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 115,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 116,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 117,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 118,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 119,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 120,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 121,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 122,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 123,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 124,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 125,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 126,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 127,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 128,                 /* DISTINCT  */
  YYSYMBOL_DO = 129,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 130,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 131,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 132,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 133,                     /* DROP  */
  YYSYMBOL_EACH = 134,                     /* EACH  */
  YYSYMBOL_ELSE = 135,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 136,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 137,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 138,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 139,                    /* END_P  */
  YYSYMBOL_ENUM_P = 140,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 141,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 142,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 143,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 144,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 145,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 146,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 147,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 148,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 149,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 150,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 151,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 152,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 153,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 154,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 155,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 156,                   /* FAMILY  */
  YYSYMBOL_FETCH = 157,                    /* FETCH  */
  YYSYMBOL_FILTER = 158,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 159,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 160,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 161,                /* FOLLOWING  */
  YYSYMBOL_FOR = 162,                      /* FOR  */
  YYSYMBOL_FORCE = 163,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 164,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 165,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 166,                   /* FREEZE  */
  YYSYMBOL_FROM = 167,                     /* FROM  */
  YYSYMBOL_FULL = 168,                     /* FULL  */
  YYSYMBOL_FUNCTION = 169,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 170,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 171,                /* GENERATED  */
  YYSYMBOL_GLOB = 172,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 173,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 174,                    /* GRANT  */
  YYSYMBOL_GRANTED = 175,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 176,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 177,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 178,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 179,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 180,                  /* HANDLER  */
  YYSYMBOL_HAVING = 181,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 182,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 183,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 184,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 185,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 186,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 187,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 188,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 189,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 190,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 191,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 192,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 193,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 194,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 195,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 196,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 197,                /* INCREMENT  */
  YYSYMBOL_INDEX = 198,                    /* INDEX  */
  YYSYMBOL_INDEXES = 199,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 200,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 201,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 202,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 203,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 204,                  /* INNER_P  */
  YYSYMBOL_INOUT = 205,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 206,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 207,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 208,                   /* INSERT  */
  YYSYMBOL_INSTALL = 209,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 210,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 211,                    /* INT_P  */
  YYSYMBOL_INTEGER = 212,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 213,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 214,                 /* INTERVAL  */
  YYSYMBOL_INTO = 215,                     /* INTO  */
  YYSYMBOL_INVOKER = 216,                  /* INVOKER  */
  YYSYMBOL_IS = 217,                       /* IS  */
  YYSYMBOL_ISNULL = 218,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 219,                /* ISOLATION  */
  YYSYMBOL_JOIN = 220,                     /* JOIN  */
  YYSYMBOL_JSON = 221,                     /* JSON  */
  YYSYMBOL_KEY = 222,                      /* KEY  */
  YYSYMBOL_LABEL = 223,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 224,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 225,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 226,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 227,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 228,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 229,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 230,                     /* LEFT  */
  YYSYMBOL_LEVEL = 231,                    /* LEVEL  */
  YYSYMBOL_LIKE = 232,                     /* LIKE  */
  YYSYMBOL_LIMIT = 233,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 234,                   /* LISTEN  */
  YYSYMBOL_LOAD = 235,                     /* LOAD  */
  YYSYMBOL_LOCAL = 236,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 237,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 238,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 239,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 240,                   /* LOGGED  */
  YYSYMBOL_MACRO = 241,                    /* MACRO  */
  YYSYMBOL_MAP = 242,                      /* MAP  */
  YYSYMBOL_MAPPING = 243,                  /* MAPPING  */
  YYSYMBOL_MATCH = 244,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 245,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 246,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 247,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 248,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 249,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 250,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 251,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 252,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 253,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 254,                 /* MINVALUE  */
  YYSYMBOL_MODE = 255,                     /* MODE  */
  YYSYMBOL_MONTH_P = 256,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 257,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 258,                     /* MOVE  */
  YYSYMBOL_NAME_P = 259,                   /* NAME_P  */
  YYSYMBOL_NAMES = 260,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 261,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 262,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 263,                    /* NCHAR  */
  YYSYMBOL_NEW = 264,                      /* NEW  */
  YYSYMBOL_NEXT = 265,                     /* NEXT  */
  YYSYMBOL_NO = 266,                       /* NO  */
  YYSYMBOL_NONE = 267,                     /* NONE  */
  YYSYMBOL_NOT = 268,                      /* NOT  */
  YYSYMBOL_NOTHING = 269,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 270,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 271,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 272,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 273,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 274,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 275,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 276,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 277,                 /* OBJECT_P  */
  YYSYMBOL_OF = 278,                       /* OF  */
  YYSYMBOL_OFF = 279,                      /* OFF  */
  YYSYMBOL_OFFSET = 280,                   /* OFFSET  */
  YYSYMBOL_OIDS = 281,                     /* OIDS  */
  YYSYMBOL_OLD = 282,                      /* OLD  */
  YYSYMBOL_ON = 283,                       /* ON  */
  YYSYMBOL_ONLY = 284,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 285,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 286,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 287,                  /* OPTIONS  */
  YYSYMBOL_OR = 288,                       /* OR  */
  YYSYMBOL_ORDER = 289,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 290,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 291,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 292,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 293,                  /* OUTER_P  */
  YYSYMBOL_OVER = 294,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 295,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 296,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 297,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 298,                    /* OWNED  */
  YYSYMBOL_OWNER = 299,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 300,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 301,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 302,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 303,                /* PARTITION  */
  YYSYMBOL_PASSING = 304,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 305,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 306,                  /* PERCENT  */
  YYSYMBOL_PIVOT = 307,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 308,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 309,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 310,                  /* PLACING  */
  YYSYMBOL_PLANS = 311,                    /* PLANS  */
  YYSYMBOL_POLICY = 312,                   /* POLICY  */
  YYSYMBOL_POSITION = 313,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 314,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 315,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 316,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 317,                /* PRECISION  */
  YYSYMBOL_PREPARE = 318,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 319,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 320,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 321,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 322,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 323,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 324,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 325,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 326,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 327,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 328,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 329,                    /* QUOTE  */
  YYSYMBOL_RANGE = 330,                    /* RANGE  */
  YYSYMBOL_READ_P = 331,                   /* READ_P  */
  YYSYMBOL_REAL = 332,                     /* REAL  */
  YYSYMBOL_REASSIGN = 333,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 334,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 335,                /* RECURSIVE  */
  YYSYMBOL_REF = 336,                      /* REF  */
  YYSYMBOL_REFERENCES = 337,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 338,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 339,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 340,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 341,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 342,                  /* RELEASE  */
  YYSYMBOL_RENAME = 343,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 344,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 345,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 346,                  /* REPLICA  */
  YYSYMBOL_RESET = 347,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 348,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 349,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 350,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 351,                /* RETURNING  */
  YYSYMBOL_RETURNS = 352,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 353,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 354,                    /* RIGHT  */
  YYSYMBOL_ROLE = 355,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 356,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 357,                   /* ROLLUP  */
  YYSYMBOL_ROW = 358,                      /* ROW  */
  YYSYMBOL_ROWS = 359,                     /* ROWS  */
  YYSYMBOL_RULE = 360,                     /* RULE  */
  YYSYMBOL_SAMPLE = 361,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 362,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 363,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 364,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 365,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 366,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 367,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 368,                /* SECONDS_P  */
  YYSYMBOL_SECURITY = 369,                 /* SECURITY  */
  YYSYMBOL_SELECT = 370,                   /* SELECT  */
  YYSYMBOL_SEMI = 371,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 372,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 373,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 374,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 375,                   /* SERVER  */
  YYSYMBOL_SESSION = 376,                  /* SESSION  */
  YYSYMBOL_SET = 377,                      /* SET  */
  YYSYMBOL_SETOF = 378,                    /* SETOF  */
  YYSYMBOL_SETS = 379,                     /* SETS  */
  YYSYMBOL_SHARE = 380,                    /* SHARE  */
  YYSYMBOL_SHOW = 381,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 382,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 383,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 384,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 385,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 386,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 387,                     /* SOME  */
  YYSYMBOL_SQL_P = 388,                    /* SQL_P  */
  YYSYMBOL_STABLE = 389,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 390,             /* STANDALONE_P  */
  YYSYMBOL_START = 391,                    /* START  */
  YYSYMBOL_STATEMENT = 392,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 393,               /* STATISTICS  */
  YYSYMBOL_STDIN = 394,                    /* STDIN  */
  YYSYMBOL_STDOUT = 395,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 396,                  /* STORAGE  */
  YYSYMBOL_STORED = 397,                   /* STORED  */
  YYSYMBOL_STRICT_P = 398,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 399,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 400,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 401,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 402,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 403,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 404,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 405,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 406,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 407,                    /* TABLE  */
  YYSYMBOL_TABLES = 408,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 409,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 410,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 411,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 412,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 413,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 414,                   /* TEXT_P  */
  YYSYMBOL_THEN = 415,                     /* THEN  */
  YYSYMBOL_TIES = 416,                     /* TIES  */
  YYSYMBOL_TIME = 417,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 418,                /* TIMESTAMP  */
  YYSYMBOL_TO = 419,                       /* TO  */
  YYSYMBOL_TRAILING = 420,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 421,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 422,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 423,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 424,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 425,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 426,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 427,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 428,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 429,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 430,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 431,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 432,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 433,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 434,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 435,                    /* UNION  */
  YYSYMBOL_UNIQUE = 436,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 437,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 438,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 439,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 440,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 441,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 442,                   /* UPDATE  */
  YYSYMBOL_USE_P = 443,                    /* USE_P  */
  YYSYMBOL_USER = 444,                     /* USER  */
  YYSYMBOL_USING = 445,                    /* USING  */
  YYSYMBOL_VACUUM = 446,                   /* VACUUM  */
  YYSYMBOL_VALID = 447,                    /* VALID  */
  YYSYMBOL_VALIDATE = 448,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 449,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 450,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 451,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 452,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 453,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 454,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 455,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 456,                /* VERSION_P  */
  YYSYMBOL_VIEW = 457,                     /* VIEW  */
  YYSYMBOL_VIEWS = 458,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 459,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 460,                 /* VOLATILE  */
  YYSYMBOL_WHEN = 461,                     /* WHEN  */
  YYSYMBOL_WHERE = 462,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 463,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 464,                   /* WINDOW  */
  YYSYMBOL_WITH = 465,                     /* WITH  */
  YYSYMBOL_WITHIN = 466,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 467,                  /* WITHOUT  */
  YYSYMBOL_WORK = 468,                     /* WORK  */
  YYSYMBOL_WRAPPER = 469,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 470,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 471,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 472,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 473,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 474,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 475,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 476,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 477,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 478,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 479,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 480,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 481,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 482,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 483,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 484,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 485,                    /* YES_P  */
  YYSYMBOL_ZONE = 486,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 487,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 488,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 489,                  /* WITH_LA  */
  YYSYMBOL_490_ = 490,                     /* '<'  */
  YYSYMBOL_491_ = 491,                     /* '>'  */
  YYSYMBOL_492_ = 492,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 493,                /* POSTFIXOP  */
  YYSYMBOL_494_ = 494,                     /* '+'  */
  YYSYMBOL_495_ = 495,                     /* '-'  */
  YYSYMBOL_496_ = 496,                     /* '*'  */
  YYSYMBOL_497_ = 497,                     /* '/'  */
  YYSYMBOL_498_ = 498,                     /* '%'  */
  YYSYMBOL_499_ = 499,                     /* '^'  */
  YYSYMBOL_UMINUS = 500,                   /* UMINUS  */
  YYSYMBOL_501_ = 501,                     /* '['  */
  YYSYMBOL_502_ = 502,                     /* ']'  */
  YYSYMBOL_503_ = 503,                     /* '('  */
  YYSYMBOL_504_ = 504,                     /* ')'  */
  YYSYMBOL_505_ = 505,                     /* '.'  */
  YYSYMBOL_506_ = 506,                     /* ';'  */
  YYSYMBOL_507_ = 507,                     /* ','  */
  YYSYMBOL_508_ = 508,                     /* '#'  */
  YYSYMBOL_509_ = 509,                     /* '$'  */
  YYSYMBOL_510_ = 510,                     /* '?'  */
  YYSYMBOL_511_ = 511,                     /* '{'  */
  YYSYMBOL_512_ = 512,                     /* '}'  */
  YYSYMBOL_513_ = 513,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 514,                 /* $accept  */
  YYSYMBOL_stmtblock = 515,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 516,                /* stmtmulti  */
  YYSYMBOL_stmt = 517,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 518,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 519,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 520,               /* SeqOptList  */
  YYSYMBOL_opt_with = 521,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 522,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 523,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 524,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 525,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 526,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 527, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 528,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 529, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 530, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 531,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 532,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 533, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 534,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 535,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 536,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 537,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 538,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 539,               /* DetachStmt  */
  YYSYMBOL_opt_database = 540,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 541,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 542,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 543,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 544,               /* opt_col_id  */
  YYSYMBOL_qualified_name = 545,           /* qualified_name  */
  YYSYMBOL_ColId = 546,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 547,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 548,                   /* Sconst  */
  YYSYMBOL_indirection = 549,              /* indirection  */
  YYSYMBOL_attr_name = 550,                /* attr_name  */
  YYSYMBOL_ColLabel = 551,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 552,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 553,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 554,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 555, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 556,                /* opt_using  */
  YYSYMBOL_opt_as = 557,                   /* opt_as  */
  YYSYMBOL_opt_program = 558,              /* opt_program  */
  YYSYMBOL_copy_options = 559,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 560,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 561,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 562,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 563,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 564,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 565,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 566, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 567,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 568,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 569,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 570,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 571,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 572, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 573,       /* generic_option_arg  */
  YYSYMBOL_key_action = 574,               /* key_action  */
  YYSYMBOL_ColConstraint = 575,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 576,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 577,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 578,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 579,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 580,      /* generic_option_elem  */
  YYSYMBOL_key_update = 581,               /* key_update  */
  YYSYMBOL_key_actions = 582,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 583,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 584,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 585,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 586,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 587,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 588,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 589,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 590,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 591,                  /* OptWith  */
  YYSYMBOL_definition = 592,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 593,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 594,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 595,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 596,                /* columnDef  */
  YYSYMBOL_def_list = 597,                 /* def_list  */
  YYSYMBOL_index_name = 598,               /* index_name  */
  YYSYMBOL_TableElement = 599,             /* TableElement  */
  YYSYMBOL_def_elem = 600,                 /* def_elem  */
  YYSYMBOL_opt_definition = 601,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 602,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 603,               /* columnElem  */
  YYSYMBOL_opt_column_list = 604,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 605,              /* ColQualList  */
  YYSYMBOL_key_delete = 606,               /* key_delete  */
  YYSYMBOL_reloption_elem = 607,           /* reloption_elem  */
  YYSYMBOL_columnList = 608,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 609,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 610,                /* func_type  */
  YYSYMBOL_ConstraintElem = 611,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 612,         /* TableElementList  */
  YYSYMBOL_key_match = 613,                /* key_match  */
  YYSYMBOL_TableLikeClause = 614,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 615,                  /* OptTemp  */
  YYSYMBOL_generated_when = 616,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 617,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 618,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 619,         /* create_as_target  */
  YYSYMBOL_CreateFunctionStmt = 620,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 621,              /* macro_alias  */
  YYSYMBOL_param_list = 622,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 623,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 624,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 625,              /* schema_stmt  */
  YYSYMBOL_unreserved_keyword = 626,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 627,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 628,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 629,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 630,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 631,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 632,         /* reserved_keyword  */
  YYSYMBOL_CreateSeqStmt = 633,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 634,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 635,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 636,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 637,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 638,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 639,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 640,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 641,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 642,             /* using_clause  */
  YYSYMBOL_DropStmt = 643,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 644,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 645,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 646,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 647,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 648, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 649,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 650,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 651,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 652,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 653,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 654,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 655,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 656,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 657,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 658,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 659, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 660,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 661,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 662,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 663,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 664,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 665,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 666,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 667,                /* IndexStmt  */
  YYSYMBOL_access_method = 668,            /* access_method  */
  YYSYMBOL_access_method_clause = 669,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 670,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 671,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 672,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 673,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 674,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 675,              /* insert_rest  */
  YYSYMBOL_insert_target = 676,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 677,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 678,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 679,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 680,       /* insert_column_item  */
  YYSYMBOL_set_clause = 681,               /* set_clause  */
  YYSYMBOL_opt_or_action = 682,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 683,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 684,               /* index_elem  */
  YYSYMBOL_returning_clause = 685,         /* returning_clause  */
  YYSYMBOL_override_kind = 686,            /* override_kind  */
  YYSYMBOL_set_target_list = 687,          /* set_target_list  */
  YYSYMBOL_opt_collate = 688,              /* opt_collate  */
  YYSYMBOL_opt_class = 689,                /* opt_class  */
  YYSYMBOL_insert_column_list = 690,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 691,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 692, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 693,             /* index_params  */
  YYSYMBOL_set_target = 694,               /* set_target  */
  YYSYMBOL_LoadStmt = 695,                 /* LoadStmt  */
  YYSYMBOL_file_name = 696,                /* file_name  */
  YYSYMBOL_PragmaStmt = 697,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 698,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 699,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 700,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 701,               /* RenameStmt  */
  YYSYMBOL_opt_column = 702,               /* opt_column  */
  YYSYMBOL_SelectStmt = 703,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 704,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 705,         /* select_no_parens  */
  YYSYMBOL_select_clause = 706,            /* select_clause  */
  YYSYMBOL_opt_select = 707,               /* opt_select  */
  YYSYMBOL_simple_select = 708,            /* simple_select  */
  YYSYMBOL_value_or_values = 709,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 710,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 711,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 712,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 713, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 714,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 715,              /* with_clause  */
  YYSYMBOL_cte_list = 716,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 717,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 718,         /* opt_materialized  */
  YYSYMBOL_into_clause = 719,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 720,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 721,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 722,          /* all_or_distinct  */
  YYSYMBOL_by_name = 723,                  /* by_name  */
  YYSYMBOL_distinct_clause = 724,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 725,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 726,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 727,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 728,              /* sort_clause  */
  YYSYMBOL_sortby_list = 729,              /* sortby_list  */
  YYSYMBOL_sortby = 730,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 731,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 732,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 733,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 734,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 735,             /* limit_clause  */
  YYSYMBOL_offset_clause = 736,            /* offset_clause  */
  YYSYMBOL_sample_count = 737,             /* sample_count  */
  YYSYMBOL_sample_clause = 738,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 739,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 740,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 741,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 742,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 743,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 744,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 745,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 746, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 747,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 748,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 749,            /* first_or_next  */
  YYSYMBOL_group_clause = 750,             /* group_clause  */
  YYSYMBOL_group_by_list = 751,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 752,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 753,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 754,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 755,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 756,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 757,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 758,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 759,            /* having_clause  */
  YYSYMBOL_qualify_clause = 760,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 761,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 762,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 763,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 764,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 765,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 766,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 767,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 768,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 769,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 770,              /* from_clause  */
  YYSYMBOL_from_list = 771,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 772,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 773,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 774,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 775,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 776,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 777,             /* pivot_header  */
  YYSYMBOL_pivot_value = 778,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 779,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 780,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 781,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 782,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 783,             /* joined_table  */
  YYSYMBOL_alias_clause = 784,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 785,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 786,        /* func_alias_clause  */
  YYSYMBOL_join_type = 787,                /* join_type  */
  YYSYMBOL_join_outer = 788,               /* join_outer  */
  YYSYMBOL_join_qual = 789,                /* join_qual  */
  YYSYMBOL_relation_expr = 790,            /* relation_expr  */
  YYSYMBOL_func_table = 791,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 792,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 793,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 794,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 795,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 796,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 797,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 798,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 799,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 800,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 801,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 802,             /* opt_Typename  */
  YYSYMBOL_Typename = 803,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 804,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 805,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 806,            /* ConstTypename  */
  YYSYMBOL_GenericType = 807,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 808,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 809,                  /* Numeric  */
  YYSYMBOL_opt_float = 810,                /* opt_float  */
  YYSYMBOL_Bit = 811,                      /* Bit  */
  YYSYMBOL_ConstBit = 812,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 813,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 814,         /* BitWithoutLength  */
  YYSYMBOL_Character = 815,                /* Character  */
  YYSYMBOL_ConstCharacter = 816,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 817,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 818,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 819,                /* character  */
  YYSYMBOL_opt_varying = 820,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 821,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 822,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 823,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 824,             /* year_keyword  */
  YYSYMBOL_month_keyword = 825,            /* month_keyword  */
  YYSYMBOL_day_keyword = 826,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 827,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 828,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 829,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 830,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 831,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 832,             /* opt_interval  */
  YYSYMBOL_a_expr = 833,                   /* a_expr  */
  YYSYMBOL_b_expr = 834,                   /* b_expr  */
  YYSYMBOL_c_expr = 835,                   /* c_expr  */
  YYSYMBOL_d_expr = 836,                   /* d_expr  */
  YYSYMBOL_indirection_expr = 837,         /* indirection_expr  */
  YYSYMBOL_struct_expr = 838,              /* struct_expr  */
  YYSYMBOL_func_application = 839,         /* func_application  */
  YYSYMBOL_func_expr = 840,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 841,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 842, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 843,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 844,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 845,            /* filter_clause  */
  YYSYMBOL_export_clause = 846,            /* export_clause  */
  YYSYMBOL_window_clause = 847,            /* window_clause  */
  YYSYMBOL_window_definition_list = 848,   /* window_definition_list  */
  YYSYMBOL_window_definition = 849,        /* window_definition  */
  YYSYMBOL_over_clause = 850,              /* over_clause  */
  YYSYMBOL_window_specification = 851,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 852, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 853,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 854,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 855,             /* frame_extent  */
  YYSYMBOL_frame_bound = 856,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 857, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 858,            /* qualified_row  */
  YYSYMBOL_row = 859,                      /* row  */
  YYSYMBOL_dict_arg = 860,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 861,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 862, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 863,                  /* map_arg  */
  YYSYMBOL_map_arguments = 864,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 865,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 866, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 867,                 /* sub_type  */
  YYSYMBOL_all_Op = 868,                   /* all_Op  */
  YYSYMBOL_MathOp = 869,                   /* MathOp  */
  YYSYMBOL_qual_Op = 870,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 871,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 872,              /* subquery_Op  */
  YYSYMBOL_any_operator = 873,             /* any_operator  */
  YYSYMBOL_c_expr_list = 874,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 875,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 876,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 877,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 878,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 879,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 880,            /* func_arg_expr  */
  YYSYMBOL_type_list = 881,                /* type_list  */
  YYSYMBOL_extract_list = 882,             /* extract_list  */
  YYSYMBOL_extract_arg = 883,              /* extract_arg  */
  YYSYMBOL_overlay_list = 884,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 885,          /* overlay_placing  */
  YYSYMBOL_position_list = 886,            /* position_list  */
  YYSYMBOL_substr_list = 887,              /* substr_list  */
  YYSYMBOL_substr_from = 888,              /* substr_from  */
  YYSYMBOL_substr_for = 889,               /* substr_for  */
  YYSYMBOL_trim_list = 890,                /* trim_list  */
  YYSYMBOL_in_expr = 891,                  /* in_expr  */
  YYSYMBOL_case_expr = 892,                /* case_expr  */
  YYSYMBOL_when_clause_list = 893,         /* when_clause_list  */
  YYSYMBOL_when_clause = 894,              /* when_clause  */
  YYSYMBOL_case_default = 895,             /* case_default  */
  YYSYMBOL_case_arg = 896,                 /* case_arg  */
  YYSYMBOL_columnref = 897,                /* columnref  */
  YYSYMBOL_indirection_el = 898,           /* indirection_el  */
  YYSYMBOL_opt_slice_bound = 899,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 900,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 901,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 902,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 903, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 904,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 905, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 906,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 907,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 908,                /* target_el  */
  YYSYMBOL_except_list = 909,              /* except_list  */
  YYSYMBOL_opt_except_list = 910,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 911,          /* replace_list_el  */
  YYSYMBOL_replace_list = 912,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 913,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 914,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 915,      /* qualified_name_list  */
  YYSYMBOL_name_list = 916,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 917,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 918, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 919,                     /* name  */
  YYSYMBOL_func_name = 920,                /* func_name  */
  YYSYMBOL_AexprConst = 921,               /* AexprConst  */
  YYSYMBOL_Iconst = 922,                   /* Iconst  */
  YYSYMBOL_type_function_name = 923,       /* type_function_name  */
  YYSYMBOL_function_name_token = 924,      /* function_name_token  */
  YYSYMBOL_type_name_token = 925,          /* type_name_token  */
  YYSYMBOL_any_name = 926,                 /* any_name  */
  YYSYMBOL_attrs = 927,                    /* attrs  */
  YYSYMBOL_opt_name_list = 928,            /* opt_name_list  */
  YYSYMBOL_param_name = 929,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 930,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 931,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 932,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 933,               /* UpdateStmt  */
  YYSYMBOL_UseStmt = 934,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 935,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 936,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 937,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 938,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 939,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 940,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 941,            /* generic_reset  */
  YYSYMBOL_reset_rest = 942,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 943,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 944,                 /* set_rest  */
  YYSYMBOL_generic_set = 945,              /* generic_set  */
  YYSYMBOL_var_value = 946,                /* var_value  */
  YYSYMBOL_zone_value = 947,               /* zone_value  */
  YYSYMBOL_var_list = 948,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 949,         /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 950,         /* show_or_describe  */
  YYSYMBOL_opt_tables = 951,               /* opt_tables  */
  YYSYMBOL_var_name = 952,                 /* var_name  */
  YYSYMBOL_table_id = 953,                 /* table_id  */
  YYSYMBOL_ViewStmt = 954,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 955          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  683
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   69066

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  514
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  442
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2044
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3402

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   746


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   508,   509,   498,     2,     2,
     503,   504,   496,   494,   507,   495,   505,   497,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   513,   506,
     490,   492,   491,   510,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   501,     2,   502,   499,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   511,     2,   512,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   493,   500
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   492,   492,   508,   520,   529,   530,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
     554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
     564,   565,   567,     7,    47,    48,    52,    53,    68,    69,
      76,    84,    92,   100,   108,   116,   127,   128,   155,   160,
     168,   184,   201,   218,   235,   236,   255,   259,   263,   267,
     271,   280,   290,   299,   308,   318,   328,   339,   353,   370,
     370,   374,   374,   378,   378,   382,   388,   395,   399,   400,
     404,   405,   419,   426,   433,   443,   444,   447,   460,   461,
     462,   466,   477,   485,   490,   495,   500,   505,   513,   521,
     526,   531,   538,   539,   543,   544,   545,   549,   556,   557,
     561,   562,   566,   567,   568,   572,   573,   577,   578,   594,
     595,   598,   607,   618,   619,   620,   623,   624,   625,   629,
     630,   631,   632,   636,   637,   641,   643,   659,   661,   666,
     669,   677,   681,   685,   689,   693,   697,   704,   709,   716,
     717,   721,   726,   730,   734,   742,   749,   750,   755,   756,
     760,   761,   766,   768,   770,   775,   795,   796,   798,   803,
     804,   808,   809,   812,   813,   838,   839,   844,   848,   849,
     853,   854,   858,   859,   860,   861,   862,   866,   879,   886,
     893,   900,   901,   905,   906,   910,   911,   915,   916,   920,
     921,   925,   926,   930,   941,   942,   943,   944,   948,   949,
     954,   955,   956,   965,   971,   980,   981,   994,   995,   999,
    1000,  1004,  1005,  1011,  1017,  1025,  1034,  1042,  1051,  1060,
    1064,  1069,  1079,  1092,  1093,  1096,  1097,  1098,  1101,  1109,
    1119,  1120,  1123,  1131,  1140,  1144,  1151,  1152,  1156,  1165,
    1169,  1194,  1198,  1211,  1225,  1240,  1252,  1265,  1279,  1293,
    1306,  1321,  1340,  1346,  1351,  1357,  1364,  1365,  1373,  1377,
    1381,  1387,  1394,  1399,  1400,  1401,  1402,  1403,  1404,  1408,
    1409,  1421,  1422,  1427,  1434,  1441,  1448,  1480,  1491,  1504,
    1509,  1510,  1513,  1514,  1517,  1518,  1523,  1524,  1529,  1533,
    1539,  1560,  1568,  1581,  1584,  1588,  1588,  1591,  1592,  1594,
    1599,  1606,  1611,  1617,  1622,  1628,  1634,  1640,  1649,  1651,
    1654,  1658,  1659,  1660,  1661,  1662,  1663,  1668,  1688,  1689,
    1690,  1691,  1702,  1716,  1717,  1723,  1728,  1733,  1738,  1743,
    1748,  1753,  1758,  1764,  1770,  1776,  1783,  1805,  1814,  1818,
    1826,  1830,  1838,  1850,  1871,  1875,  1881,  1885,  1898,  1906,
    1916,  1918,  1920,  1922,  1924,  1926,  1931,  1932,  1939,  1948,
    1956,  1965,  1976,  1984,  1985,  1986,  1990,  1990,  1993,  1993,
    1996,  1996,  1999,  1999,  2002,  2002,  2005,  2005,  2008,  2008,
    2011,  2011,  2014,  2016,  2018,  2020,  2022,  2024,  2026,  2028,
    2030,  2035,  2040,  2046,  2053,  2058,  2064,  2070,  2101,  2103,
    2105,  2113,  2128,  2130,  2132,  2134,  2136,  2138,  2140,  2142,
    2144,  2146,  2148,  2150,  2152,  2154,  2156,  2158,  2161,  2163,
    2165,  2168,  2170,  2172,  2174,  2176,  2181,  2186,  2193,  2198,
    2205,  2210,  2217,  2222,  2230,  2238,  2246,  2254,  2272,  2280,
    2288,  2296,  2304,  2312,  2320,  2324,  2340,  2348,  2356,  2364,
    2372,  2380,  2388,  2392,  2396,  2400,  2404,  2412,  2420,  2428,
    2436,  2456,  2478,  2489,  2496,  2510,  2518,  2526,  2546,  2548,
    2550,  2552,  2554,  2556,  2558,  2560,  2562,  2564,  2566,  2568,
    2570,  2572,  2574,  2576,  2578,  2580,  2582,  2584,  2586,  2588,
    2592,  2596,  2600,  2614,  2615,  2619,  2633,  2634,  2635,  2642,
    2646,  2650,  2653,  2664,  2669,  2671,  2682,  2706,  2717,  2728,
    2732,  2739,  2743,  2747,  2764,  2772,  2781,  2785,  2792,  2800,
    2808,  2819,  2839,  2875,  2886,  2887,  2894,  2900,  2902,  2904,
    2908,  2917,  2922,  2929,  2944,  2951,  2955,  2959,  2963,  2967,
    2977,  2986,  3008,  3009,  3013,  3014,  3015,  3019,  3020,  3027,
    3028,  3032,  3033,  3038,  3046,  3048,  3062,  3065,  3092,  3093,
    3096,  3097,  3105,  3113,  3121,  3130,  3140,  3158,  3204,  3213,
    3222,  3231,  3240,  3252,  3253,  3254,  3255,  3256,  3270,  3271,
    3274,  3275,  3279,  3289,  3290,  3294,  3295,  3299,  3306,  3307,
    3312,  3313,  3318,  3319,  3322,  3323,  3324,  3327,  3328,  3331,
    3332,  3333,  3334,  3335,  3336,  3337,  3338,  3339,  3340,  3341,
    3342,  3343,  3344,  3347,  3349,  3354,  3356,  3361,  3363,  3365,
    3367,  3369,  3371,  3373,  3375,  3389,  3391,  3396,  3400,  3407,
    3412,  3418,  3422,  3429,  3434,  3441,  3446,  3454,  3458,  3464,
    3468,  3477,  3488,  3489,  3493,  3497,  3504,  3505,  3506,  3507,
    3508,  3509,  3510,  3511,  3512,  3513,  3523,  3527,  3534,  3541,
    3542,  3558,  3562,  3567,  3571,  3586,  3591,  3595,  3598,  3601,
    3602,  3603,  3606,  3613,  3623,  3637,  3638,  3642,  3653,  3654,
    3657,  3658,  3661,  3665,  3672,  3680,  3688,  3696,  3706,  3707,
    3712,  3713,  3717,  3718,  3719,  3723,  3732,  3740,  3748,  3757,
    3772,  3773,  3778,  3779,  3789,  3790,  3794,  3795,  3799,  3800,
    3803,  3819,  3827,  3837,  3838,  3841,  3842,  3845,  3849,  3850,
    3854,  3855,  3858,  3859,  3860,  3870,  3871,  3875,  3877,  3883,
    3884,  3888,  3889,  3892,  3903,  3906,  3917,  3921,  3925,  3937,
    3941,  3950,  3957,  3995,  3999,  4003,  4007,  4011,  4015,  4019,
    4025,  4042,  4043,  4044,  4047,  4048,  4049,  4052,  4053,  4054,
    4057,  4058,  4061,  4063,  4068,  4069,  4072,  4076,  4077,     7,
      18,    31,    35,    42,    53,    54,    60,    61,    11,    24,
      37,    54,    55,    56,    61,     3,    10,    17,    24,    31,
      38,    45,    52,    61,    61,    63,    63,    65,    66,    70,
      71,    10,    16,    22,    28,    38,    39,    47,    58,    70,
      78,    86,    93,   103,   105,   111,   115,   119,   134,   141,
     142,   143,   147,   148,     2,     1,    30,    53,    54,    59,
      63,    68,    72,    80,    81,    85,    86,    91,    92,    96,
      97,   102,   103,   104,   105,   106,   107,   112,   120,   124,
     129,   130,   135,   139,   144,   148,   152,   156,   160,   164,
     168,   172,   176,   180,   184,   188,   192,   196,   200,   204,
     212,   218,   219,   220,   225,   229,     7,    14,    20,    28,
      29,     9,    19,    29,    42,    43,     9,    23,    29,    36,
      42,    49,    59,    63,    71,    72,    73,    77,    86,    95,
     102,   103,   108,   120,   125,   150,   155,   160,   166,   176,
     186,   192,   203,   214,   229,   230,   236,   237,   242,   243,
     249,   250,   254,   255,   260,   262,   268,   269,   273,   274,
     277,   278,   283,     7,    21,    36,    56,    57,    84,    85,
      86,    87,    88,    89,    93,    94,    99,   104,   105,   106,
     107,   108,   113,   120,   121,   122,   139,   146,   153,   163,
     173,   185,   193,   202,   220,   221,   225,   226,   230,   239,
     262,   276,   283,   288,   290,   292,   294,   297,   300,   301,
     302,   303,   308,   312,   313,   318,   325,   330,   331,   332,
     333,   334,   335,   336,   337,   343,   344,   348,   353,   360,
     367,   374,   386,   387,   388,   389,   393,   398,   399,   400,
     405,   410,   411,   412,   413,   414,   415,   420,   440,   469,
     470,   474,   478,   479,   480,   484,   488,   496,   497,   502,
     503,   504,   508,   516,   517,   522,   523,   527,   532,   536,
     540,   545,   553,   554,   558,   559,   563,   564,   570,   581,
     594,   608,   622,   636,   650,   673,   677,   684,   688,   696,
     701,   708,   718,   719,   720,   721,   722,   729,   736,   737,
     742,   743,     7,    13,    19,    25,     6,    15,    25,    35,
      45,    55,    65,    75,    85,    95,   106,   117,   127,   140,
     141,     9,    19,     8,    33,    62,    66,    67,    72,    73,
      78,    79,    83,    84,    89,    90,     9,    16,    26,    33,
      44,    45,    50,    51,    52,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    90,    91,    92,    97,    98,
     103,   107,   115,   116,   121,   122,   123,   129,   134,   142,
     143,     7,    14,    31,    51,    55,    65,    69,    75,    76,
       9,    13,    44,    45,    46,    50,    51,    55,    59,    60,
      64,    70,    75,    76,    77,    78,     2,     9,    15,    21,
      28,    35,    45,    46,    47,     7,    18,    19,    23,    24,
      25,    26,    27,     9,    18,    27,    36,    45,    54,    63,
      72,    85,    87,    93,    94,    99,   103,   107,   118,   126,
     130,   139,   148,   157,   166,   175,   184,   192,   200,   209,
     218,   227,   236,   253,   262,   271,   280,   290,   303,   318,
     327,   335,   350,   358,   368,   378,   385,   392,   400,   407,
     418,   419,   424,   428,   433,   438,   446,   447,   452,   456,
     457,   458,     2,     7,    12,    17,    26,    33,    43,    44,
      51,     9,    17,    29,    30,    34,    35,    36,    41,    42,
      43,    48,    52,    56,    60,    64,    68,    72,    76,    80,
      84,    88,    92,    97,   101,   105,   112,   113,   117,   118,
     119,     5,    12,    22,    23,     7,    14,    22,     6,     7,
      16,    25,    34,    43,    52,     7,    18,    25,    34,    35,
      39,    40,     9,    19,    29,    39,    49,    59,    69,    79,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   114,   115,   116,
     117,   118,   119,   124,   125,   130,   131,   132,   137,   138,
     139,   142,   143,     7,    16,    25,    46,    47,    50,    54,
       8,    20,    33,    46,    58,    70,    86,    87,    91,    95,
       8,    21,    34,    47,    65,    87,    88,    89,    90,     7,
      19,    33,     8,    22,    36,    48,    56,    70,    71,    72,
      73,    74,    87,    88,    93,    94,    98,    99,     7,    26,
      50,    73,    80,    85,    86,    87,    88,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
      92,    92,    92,    92,    92,    92,    92,    92,    92,    93,
      93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
      93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
      93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
      93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
      93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
      93,    93,    93,    94,    94,    94,    94,    94,    94,    94,
      94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
      94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
      94,    95,    95,    95,    95,    95,    95,    95,    95,    95,
      95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
      95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    97,    97,    97,    97,    97,    97,    97,    97,    97,
      97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
      97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
      97,    97,    97,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN",
  "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT",
  "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION",
  "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED",
  "COMPRESSION", "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION",
  "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P",
  "COPY", "COST", "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P",
  "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL",
  "ISOLATION", "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
  "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
  "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED",
  "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE",
  "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLISECOND_P",
  "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P",
  "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR",
  "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL",
  "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF",
  "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION",
  "OPTIONS", "OR", "ORDER", "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P",
  "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PIVOT", "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS",
  "POLICY", "POSITION", "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES",
  "PROCEDURAL", "PROCEDURE", "PROGRAM", "PUBLICATION", "QUALIFY", "QUOTE",
  "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE",
  "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE",
  "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P",
  "SECONDS_P", "SECURITY", "SELECT", "SEMI", "SEQUENCE", "SEQUENCES",
  "SERIALIZABLE", "SERVER", "SESSION", "SET", "SETOF", "SETS", "SHARE",
  "SHOW", "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME",
  "SQL_P", "STABLE", "STANDALONE_P", "START", "STATEMENT", "STATISTICS",
  "STDIN", "STDOUT", "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT",
  "SUBSCRIPTION", "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID",
  "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP",
  "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIES", "TIME", "TIMESTAMP",
  "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM",
  "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P",
  "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN",
  "UNLISTEN", "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER",
  "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW",
  "VIEWS", "VIRTUAL", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P",
  "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P",
  "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS",
  "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT",
  "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE",
  "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'",
  "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'",
  "'.'", "';'", "','", "'#'", "'$'", "'?'", "'{'", "'}'", "':'", "$accept",
  "stmtblock", "stmtmulti", "stmt", "AlterObjectSchemaStmt",
  "AlterSeqStmt", "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem",
  "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "CallStmt", "CheckPointStmt", "opt_col_id",
  "qualified_name", "ColId", "ColIdOrString", "Sconst", "indirection",
  "attr_name", "ColLabel", "CopyStmt", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "CreateFunctionStmt", "macro_alias",
  "param_list", "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt",
  "unreserved_keyword", "col_name_keyword", "func_name_keyword",
  "type_name_keyword", "other_keyword", "type_func_name_keyword",
  "reserved_keyword", "CreateSeqStmt", "OptSeqOptList", "CreateTypeStmt",
  "opt_enum_val_list", "enum_val_list", "DeallocateStmt", "DeleteStmt",
  "relation_expr_opt_alias", "where_or_current_clause", "using_clause",
  "DropStmt", "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "type_name_list",
  "ExecuteStmt", "execute_param_expr", "execute_param_list",
  "execute_param_clause", "ExplainStmt", "opt_verbose",
  "explain_option_arg", "ExplainableStmt", "NonReservedWord",
  "NonReservedWord_or_Sconst", "explain_option_list", "analyze_keyword",
  "opt_boolean_or_string", "explain_option_elem", "explain_option_name",
  "ExportStmt", "ImportStmt", "IndexStmt", "access_method",
  "access_method_clause", "opt_concurrently", "opt_index_name",
  "opt_reloptions", "opt_unique", "InsertStmt", "insert_rest",
  "insert_target", "opt_by_name_or_position", "opt_conf_expr",
  "opt_with_clause", "insert_column_item", "set_clause", "opt_or_action",
  "opt_on_conflict", "index_elem", "returning_clause", "override_kind",
  "set_target_list", "opt_collate", "opt_class", "insert_column_list",
  "set_clause_list", "set_clause_list_opt_comma", "index_params",
  "set_target", "LoadStmt", "file_name", "PragmaStmt", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "RenameStmt", "opt_column",
  "SelectStmt", "select_with_parens", "select_no_parens", "select_clause",
  "opt_select", "simple_select", "value_or_values", "pivot_keyword",
  "unpivot_keyword", "pivot_column_entry", "pivot_column_list_internal",
  "pivot_column_list", "with_clause", "cte_list", "common_table_expr",
  "opt_materialized", "into_clause", "OptTempTableName", "opt_table",
  "all_or_distinct", "by_name", "distinct_clause", "opt_all_clause",
  "opt_ignore_nulls", "opt_sort_clause", "sort_clause", "sortby_list",
  "sortby", "opt_asc_desc", "opt_nulls_order", "select_limit",
  "opt_select_limit", "limit_clause", "offset_clause", "sample_count",
  "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_list_opt_comma", "group_by_item",
  "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "qualify_clause", "for_locking_clause", "opt_for_locking_clause",
  "for_locking_items", "for_locking_item", "for_locking_strength",
  "locked_rels_list", "opt_nowait_or_skip", "values_clause",
  "values_clause_opt_comma", "from_clause", "from_list",
  "from_list_opt_comma", "table_ref", "opt_pivot_group_by",
  "opt_include_nulls", "single_pivot_value", "pivot_header", "pivot_value",
  "pivot_value_list", "unpivot_header", "unpivot_value",
  "unpivot_value_list", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr", "struct_expr", "func_application",
  "func_expr", "func_expr_windowless", "func_expr_common_subexpr",
  "list_comprehension", "within_group_clause", "filter_clause",
  "export_clause", "window_clause", "window_definition_list",
  "window_definition", "over_clause", "window_specification",
  "opt_existing_window_name", "opt_partition_clause", "opt_frame_clause",
  "frame_extent", "frame_bound", "opt_window_exclusion_clause",
  "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "map_arg", "map_arguments",
  "map_arguments_opt_comma", "opt_map_arguments_opt_comma", "sub_type",
  "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "c_expr_list", "c_expr_list_opt_comma", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "indirection_el", "opt_slice_bound", "opt_indirection",
  "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "UseStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "VariableResetStmt", "generic_reset", "reset_rest",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "VariableShowStmt", "show_or_describe", "opt_tables",
  "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-2921)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1973)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    6421,   -90,   639, -2921, -2921,   409,   -90, 47838, 61874,   -90,
     100,  1474, 49774, -2921,   434,  5232,   -90, 52678, 68546,   513,
     519, 30614,   533, 53162, 53162, -2921, -2921, -2921, 61874, 52678,
   53646,   -90,   294, 62358, -2921,   -90, 32550, 50258,   282, -2921,
   52678,    44,   -40, 54130, 52678,  2498,   779,   299, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,   415,
   -2921, -2921, -2921, -2921,   193, -2921, -2921, -2921, -2921, -2921,
     149, -2921,   222,   163, 30614, 30614,    78,   382, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, 32066, -2921, -2921, -2921,
   -2921, 54614, 52678, 55098, 50742, 55582, -2921,   915, -2921,   137,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,   155, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,   173,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,   195,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921,   597,   196, -2921, -2921, -2921,   405, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921,  2498, 52678,   610,
     708,   581, 56066, -2921, -2921, 52678, -2921, -2921,   853,   836,
   -2921, -2921, 51226, -2921, -2921, -2921,   748,  1037,   834, -2921,
   -2921,   662, -2921,   121, -2921, -2921,   694,   653, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921,   764, -2921, 65746, -2921,
   62842, 56550, 57034, -2921,   669, 68563, 29644, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921,   415, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, 53162,
   61874, 53162,   689,   712,   990,   727, 31098,   739, 33035,   743,
     768,  1044,   788,   802,   808,   814,   -40, 30129,   770,   597,
   -2921, 57518, 57518,   -88,  2723, -2921, 57518, 58002, -2921,   810,
   -2921,   915, -2921, -2921, -2921, -2921, -2921,  -136,   828, -2921,
   58486, 58486, 58486,   842,  1038, -2921, -2921, -2921,   841, -2921,
   -2921,  1075, 19134, 19134, 63326, 63326,   915, 63326,   881, -2921,
   -2921,    49, -2921, -2921, -2921,    78,   872,   597, -2921, -2921,
   50258, -2921, -2921,   283,  1225, 19134, 52678,   886, -2921,   892,
     886,   912,   925, -2921,  6421, -2921, 52678,  1266,  1147, 50258,
     747,   747,  1387,   747,   811,   926,  4435,  2627, -2921,  1819,
   -2921,   945,  1045,   975,  1236, -2921,   872,  1336,  1021,  1143,
    1361,  7975,  1364,  1083,  1366,  1136,  1476, 19134, 45418,   597,
   -2921, 10500,  1022,  1025, -2921, -2921, -2921, -2921,   693,  1267,
   -2921,  1498, -2921, -2921,  1087, 58970, 59454, 59938, 60422,  1473,
   -2921, -2921,  1400, -2921, -2921, -2921,  1093, -2921, -2921, -2921,
     383, -2921, -2921, -2921, -2921, -2921, -2921,  1116, -2921,  1116,
    1116, -2921, -2921, -2921, -2921,  1082,  1082,  1272,  1089, -2921,
   -2921, -2921,  1446, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921,  1101,   905, -2921,  1116, -2921,  1082, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, 68106, -2921, -2921, -2921,
   -2921,  -127,   547, -2921,  1108, -2921, -2921, -2921, -2921,   102,
    1110, -2921,  1576, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921,  1118, -2921,  3300,  1082,  1478,  1119,   104, -2921,  1484,
     143, -2921,  1488,  1357, 13554, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921,   -40, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921,   649, -2921, -2921, 42783, 68563,  1234,  1141, -2921,
   -2921, 19134, 19134,  1153,  4596, 57518, 58002, 19134, 52678, -2921,
   19134, 23715,  1164, 19134, 19134, 11009, 19134, 28676, 57518,  2723,
    1166, -2921,   668, 52678,  1170, -2921,  1268,  1268,   294, 30614,
    1479, -2921,   812,  1480,  1409, -2921, 30614,  1409,   970,  1221,
    1489,  1409, -2921,   806,  1506,  1268, 33519,  1224, -2921,  1268,
    1438, -2921, -2921, 42783, 13554, 66215,  1690, -2921, -2921, -2921,
   -2921,  1500, 61874,  1229, -2921, -2921, -2921, -2921, -2921, -2921,
     695,  1729,   141,  1731, 19134,   141,   141,  1238,   204,   204,
   -2921,  1241, -2921,   205,  1242,  1245,  1744,  1746,   178,   168,
     905,   141, 19134, -2921,   204,  1250,  1749,  1253,  1752,   198,
     216, -2921,   215, 19134, 19134, 19134,  1616, 19134,  9991,  1755,
   45418, -2921, 52678,   643, -2921,   597,  1262,   915, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921,   189,  6969, -2921, -2921,
   -2921, -2921,  1301, -2921, -2921, -2921, -2921,  1475, 19134, -2921,
   -2921,  1264,  1479, -2921,   217, -2921, -2921,  1479, -2921, -2921,
   -2921, -2921, -2921,   247,  1672, 41815, 42299, 61874,   597, -2921,
   63810, -2921, -2921, -2921, -2921, -2921, -2921,   654, -2921,   415,
   44338,  1273,  1271,   886, 52678, 52678,  1747, -2921, -2921, -2921,
     892, 50258,   142,  1569,  1415, -2921, -2921,    78,    78, 14553,
     832,   156,   122, 15062, 19643,  1631,  1515,   237,   599,  1636,
   -2921,  1521,  1741, 23715, 19134, 19134,   811,   926, 19134, -2921,
   -2921, -2921,  1570, 52678, 48322,   495,   763,  1299,  1384,  1306,
      -5,  1713, -2921,  1300, -2921,  1392, 52678, 68106,   239, -2921,
    1756,   239,   239,   481,  1757,  1395,   323,  1561,    30,   423,
    2825, -2921,  1300, 50258,   139,    52,  1300, 52678,  1402,    53,
    1300, 61874,  1141, 39457,  1309, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921,   172, 13554, -2921,  1041,  1055,
    1123,   357,   157,  1206,  1386, 13554,  1454,  1461,   175,  1468,
    1505,  1527,  1533,  1553,  1560,  1574,  1584,   138,  1586,  1589,
    1593,  1596,  1617,  1621, -2921,  1629,   177,  1645,   182, 13554,
    1647, -2921,   179, -2921, 44338,   -17, -2921, -2921,  1652,  1405,
   61874,  1360, 52678,   977,  1679,  1732, 66684, 52678,  1563,  2825,
    1564,  1326,  1793,  1566,  1025,  1571,  1337, -2921, 64294,  1838,
   -2921, -2921, -2921, -2921, -2921, -2921,  1342, -2921, -2921, 19134,
   -2921, -2921, -2921,  1842, -2921, 66215, 66215,  1116,  1116, -2921,
   -2921,  1813,  1436,  1457,  1842, -2921,  1842, -2921, 61874, -2921,
   -2921, 66215, -2921, 61874,  1376,  1380,  1842, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921,  1842,  1469, -2921,  1471,  1477,  1481, -2921,
   -2921, -2921, -2921, -2921, 61874, 45418,  1388, 61874, -2921, 52678,
   52678, -2921, 52678, 61874, -2921,   703, 44338,  1879, 68563, 46870,
   -2921, -2921, -2921, -2921,   570,   761, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921,   915, 45418, -2921,  5171, 43384,
    1391, 19134, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921,  1393,  1735, -2921, -2921,  6228,  1394, 43431,  1399,
   23715, 23715,   597,  2108, -2921, -2921, 23715,  1401, 47354, 43304,
    1408,  1403, 43672, 15571, 19134, 15571, 15571, 43809, -2921,  1404,
   43933, 57518,  1396, 52678, 51710, -2921, -2921, -2921, 19134, 19134,
    2723, 52194,  1447, -2921, 30614, -2921,  1697, 30614, -2921, -2921,
    5057, -2921, 30614,  1698, 19134, 30614, -2921,  1648,  1650,  1421,
   30614, -2921, 52678,  1425, 52678, -2921, -2921, -2921, -2921, -2921,
    1427,   724, -2921,   728,  2427, -2921, -2921, 19134, 19134, -2921,
   44338,  1482, 19134, -2921, 19134,  6571, 37877, 16080,  6571,  1919,
    1919, 35939, -2921,  1594, 44053, -2921,  1440,  1539,  7667,  1433,
   -2921, -2921,  1431, -2921,  1441,  1435, 40363,   169,   597,   597,
   19134, -2921, 19134,  1814,  1814, -2921,   202, 66215, 19134, 19134,
   19134, 19134, 19134, 19134, 19134, 19134, 44934,  1532,   159, 61874,
   19134, 19134,  1451,   827, -2921, 19134,  1682, -2921,  1453, 19134,
    1538,   201, 19134, 19134, 19134, 19134, 19134, 19134, 19134, 19134,
   19134, -2921, -2921, 26241,   228,   679,  1783,  1802,   -73,   326,
   19134,  1794, 10500, -2921,  1794, -2921, -2921, -2921, -2921, -2921,
     219, -2921, -2921, -2921,  1427, -2921,  1427, -2921, 61874, -2921,
   52678,   283, 49290, 19134, -2921, -2921,  1456,  1462,    89, -2921,
    1522, -2921, -2921, 52678, 36423,  1759, -2921,   292,  1463, -2921,
   43264,  1709,  1759,    78, -2921, -2921, 24733,  1604,  1751,  1701,
   -2921, -2921,  1684,  1688, -2921,  1493, 44456, 20152, 20152, -2921,
    1304, 44338,  1346, -2921, -2921, -2921, -2921, -2921, -2921,   683,
   -2921, 52678,    40, 34003, -2921,  1494,    51, -2921,  2124,  1826,
    1780,  1631,   599,  1499, -2921,  1321,  1501, 64778, 52678,  1786,
    1737,  1787,  -126, 66215, -2921, -2921, -2921, -2921, 52678, 61874,
   60906, 65262, 45902, 52678, 45418, -2921, -2921, -2921, -2921, 52678,
     846, 52678, 39590, -2921, -2921, -2921,   239, -2921, -2921, -2921,
   -2921, -2921, 61874, 52678, -2921, -2921,   239, 61874, 52678,   239,
   -2921,  1331, 52678, 52678, 52678, 52678,  1649, 52678, 52678, -2921,
   -2921, -2921, 20661,   -12,   -12,  1723, 11518,   176, -2921, 19134,
   19134,  1687, -2921, -2921,   733,  1736,    69, -2921,  1559, 52678,
   52678, 52678, 52678, 52678,  1216, -2921, -2921, -2921, -2921, -2921,
    1517, -2921,  1519,  1875,  2825, -2921,  1883, 48806,   848,  1798,
    1886,  1562,  1887, 12027,  1996,  1769, -2921, -2921,  1758, -2921,
   19134,  1535,  1541,   102,   754, -2921, -2921,  1549,  1380,  1565,
    1572,  1555,  1557, 66215,   758, -2921,   766,  1842,   130,  1568,
    1573,  1423,  1255,   796,  1339,   104, -2921, 45418, -2921,   143,
   -2921,  1774,   171, -2921, 13554, 19134, -2921, -2921, -2921, -2921,
   -2921, -2921,  1141, 26736, -2921,   771, -2921, -2921,  2029,   915,
    2029,   486, -2921, -2921,  2029, -2921,  2015,  2029, -2921, 66215,
   -2921,  7801, -2921, 19134, 19134, -2921, 19134,  1909, -2921,  2067,
    2067, 66215, 23715, 23715, 23715, 23715, 23715, 23715,   635,  1250,
   23715, 23715, 23715, 23715, 23715, 23715, 23715, 23715, 23715, 25242,
     494, -2921, -2921,   772,  2039, 19134, 19134,  1918,  1909, 19134,
   -2921, 66215,  1579, -2921,  1585,  1587, 19134, -2921, 66215, -2921,
   52678,  1588,   -18,    -4, -2921,  1590,  1591, -2921,  1479, -2921,
     825,   910, 52678,  4357,  4365,  4798, -2921, -2921, 19134,  1912,
    5057, 30614, -2921, 19134,  1592, -2921, -2921, 30614,  1936, -2921,
   -2921, -2921, 34487,  5057, 66215,   773, -2921, 52678, 66215,   777,
   42783, -2921, 13554, -2921, 66215, -2921, -2921, -2921, -2921, -2921,
   -2921,  1597,  1600, 19134,    88, -2921, 38369,  3492, -2921,  1602,
   -2921,  1598, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921,  1606, -2921,  1609,
   -2921,  1610, 52678, -2921, 21170, -2921, 61874, -2921, -2921, 19134,
   19134, 52678, -2921,  1616, -2921,  1611, 38409, -2921, -2921, -2921,
     191,   854,  3733,   326,  5335,  5335,  5335,  6571, -2921, -2921,
   -2921,  1632, -2921, 23715, 23715, -2921,  2155,  1797,  9991, -2921,
   -2921,  1954, -2921,   830, -2921,  1622, -2921, -2921,  5564, -2921,
   37877,  5665, 19134,   166, -2921, 19134,  1451, 19134,  1707,  5335,
    5335,  5335,   396,   396,   191,   191,   191,   854,   326, -2921,
   -2921, -2921,  1627, 19134, 45418, -2921,  1630,  1633,  1983,  1253,
   19134, -2921, -2921, 30614,  1447,   -17,  1447,  1842,  1814, -2921,
     892, -2921, -2921,   892, 44338, 52678, -2921, -2921,  1892,  1635,
   30614,  1685,  2101,  2087, 61874, -2921, -2921,  1641,  1794,  1660,
   -2921, -2921,  1667, 19134,  1193,  1667, -2921,  1759,   -31,  1874,
    1015,  1015,  1304,  1876, -2921, -2921,  1717, -2921, -2921, -2921,
   19134, 12536,  1353, -2921,  1355, -2921, -2921, -2921, -2921, -2921,
    1655, -2921,  1925, -2921, 52678, -2921, -2921, 23715,  2106, 19134,
   34971,  2113,  1908, -2921, -2921, -2921,  1754,  1300, 19134,  1907,
   -2921,   136,  1674,  2030,  -100,  1982, 61874, -2921,   288,   289,
   -2921,   188,  2035,   171,  2037,   171, 45418, 45418, 45418,   781,
   -2921, -2921, -2921,   915, -2921,  -142,   782, -2921, -2921, -2921,
   -2921,  1767,   590,  2825,  1300, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921,   187,   620,  1300,  1773, -2921,  1775, -2921,  1778,
     621,  1300, -2921, -2921,  8460, 44338,   485,   176,   176,   176,
   13554, -2921,  1913,  1914,  1694, 44338, 44338, -2921,   174, -2921,
   61874, -2921, -2921, -2921,  1687,  1732, 52678,  2825,  1696,  2162,
    1025,  1337, -2921,  1858,   665,   131, -2921, 61874, 52678, 52678,
   52678, 28207, -2921, -2921, -2921,  1700,  1699, -2921,   -26,  1926,
    1927, 52678,  1750, 52678,  1306,  2169, 52678, -2921,   789, 16589,
    2063, 52678,  1710, -2921, -2921, -2921, -2921,  1842, -2921, -2921,
    -121,  -121, -2921, -2921, 61874, -2921,  1714, -2921,  1718, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, 61874, -2921, -2921, 44338, -2921, -2921, 46386, -2921, -2921,
   -2921, -2921, -2921, 45418, -2921,   915, -2921,   915,  1948, 61874,
   40847,   915, 41331,   915,  1719, -2921, 44338, 38449, 44338,  1918,
   -2921,   134,  2067,  3120,  3120,  3120,   753,  2058,   261,  1725,
    3120,  3120,  3120,   249,   249,   134,   134,   134,  2067,   494,
     810, 47354,  1726, -2921, 44338, 44338, -2921, -2921,  1727, -2921,
   -2921, -2921, -2921,  1733,  1739, -2921, -2921, -2921, -2921, -2921,
   -2921, 61874,  1048,  1447,   282,   282,   282,   282, -2921, 52678,
   52678, 52678, 44338,  2171,  2055, -2921,  5057, 44338, 52678, -2921,
   27719, 52678, -2921,  2077, -2921,  2163, -2921, 52678,   799, -2921,
   -2921, -2921, -2921, -2921, 44100, 19134, -2921,  2105, -2921, 19134,
   19134, -2921, 37877, -2921, -2921,  1742,  9991, 44220, -2921,  2046,
   38489, 44338, -2921,  1594, -2921,  1814, 19134,  1770,  2738, 19134,
    1743, 19134,  2078, -2921, -2921,  1745, -2921, -2921, 66215, 19134,
    1748,  6321, 23715, 23715,  7466, -2921,  7834, 19134,  9991, -2921,
   39497,  1740,  1753,  1723, 17098, -2921,  1956,  1763, -2921,  1912,
     176,  1912,  1768, -2921, -2921, -2921, -2921,  2427, -2921, 19134,
    1904, 61874,   503,  3222,   826, -2921,   597, 36423,  1685, 19134,
     557, -2921, -2921,  1771, -2921,  1667, -2921, -2921, -2921,  1973,
   -2921, -2921, -2921, 52678, -2921,  1779, -2921, 34003,  2082,  9991,
   -2921, 34003, 52678, 52678, 38529,  2111, -2921, 61874, 61874, 61874,
   -2921, 61874,  1764,  1781,   651,  1772,   321, -2921,  2940,   651,
    2102,   210,  1306,   323,  3999,   618, -2921, -2921, -2921,  1847,
   52678, -2921, 61874, -2921, -2921, -2921, -2921, -2921, 45902, -2921,
   -2921, 37392, 45418, -2921, 45418, 52678, 52678, 52678, 52678, 52678,
   52678, 52678, 52678, 52678, 52678, 19134, -2921, 19134,  1785,  1796,
    1799,  1723, -2921, -2921, -2921, -2921, -2921, -2921,   423, -2921,
     174,  1801, -2921, 48806,  2498,  1562,  2238,  1732,    86, 61390,
   -2921,  1804,  1805,   844,  2825,  1803,  2242, -2921,   848, 48806,
   -2921, -2921, -2921,  2206, -2921,   669,   190, -2921,  1025, -2921,
    2498,  1337, -2921,  2498, 44338, 61874,  1860, -2921,  1380,  1811,
   -2921, -2921,  1380, 66215,  1380, -2921, -2921,   171,   852, -2921,
   -2921, -2921, -2921, -2921, 61874,  1807, -2921,  1807, -2921, -2921,
    1807, -2921, -2921, -2921, -2921, 23715,  2149,  1817, 66215, -2921,
   -2921, 52678, -2921, -2921, -2921,   858,  1825,  1912, 52678, 52678,
   52678, 52678, -2921, -2921, -2921, 17607, 19134,  1857, -2921,  1827,
   14063,  2129, -2921, 27231, -2921,   220,  1829, 34487, 61874, -2921,
   -2921, -2921, 19134, 44338, -2921, 44338, -2921, -2921, -2921,  7307,
   -2921,  1828,  1830, 61874, 19134, -2921, -2921, -2921,   327, 19134,
   19134,  2155, -2921,  7714, 19134, 66215,   862,  2155,   238, 19134,
    2984,  3417, 19134, 19134, 39625, 38873, -2921, 21679, 13045, -2921,
    1832, 19134, 38913, 36907, -2921, 30614,  2055,  1833,  2055,   915,
    1834, 44338, 19134, -2921, -2921, -2921, -2921,  1889,   429, 32550,
    2062, -2921,  1854, 61874, -2921,  1904, 44338, -2921, -2921, 37877,
   -2921, -2921, -2921, -2921, -2921,  2291,  1999,  1851,  1856, -2921,
    1265, -2921, -2921, 61874,  1861, -2921,  1865,   651, -2921, 61874,
    1897, -2921,   185,  2164,    84, -2921, 19134, -2921,  2257,  2332,
    2940,  1870, 61874, 52678, 23715, -2921,   681,   164, -2921,  2152,
   52678,  1897,  2289, -2921, -2921, -2921,   321, -2921,  2189,  2104,
   -2921,   239, -2921, 19134,   321,  2107,   135, 61874, -2921, -2921,
    2924, -2921, 66215,   171,   171, -2921,  1880,  1881,  1885,  1891,
    1895,  1896,  1900,  1901,  1903,  1905,  1917, -2921,  1923,  1924,
    1928,  1930,  1931,  1932,  1933,  1934,  1101,  1938, -2921,  1939,
    1771,  1940,  1941,  1942,  1943,  1945, 67153,  1946,  1949,  1950,
    1952,  1108,  1960,   570,   761, -2921, -2921, -2921, -2921,  1963,
   -2921, -2921, -2921,  1119,  1899, -2921, -2921, -2921,  1962, -2921,
    1969, -2921, -2921, -2921, -2921, -2921,  1877,  1911, -2921, -2921,
   -2921,   176,  1141,   160, 61874,  1890,  1750,  2357, 18116,   690,
    2150,  1916, -2921,   915,  1562, -2921, 48806,  3215,   824,  1927,
   -2921,   233,  1750, -2921,  2312,  1562,  1958,  2390, -2921,  2158,
   61874,  1929, -2921, -2921, -2921, -2921, 46386,  1807,  3786, 23715,
   66215,   871,   875, -2921,  2444,  2117,  2055, -2921, -2921, -2921,
   -2921, -2921,  1967,   -75,  1970,  9482,  1968, -2921, -2921, -2921,
   -2921, -2921, -2921, 44338, 44338, 61874,  2151, -2921, -2921,  1971,
    1976, 35455,  2418,  1978, -2921, 13554, -2921,  2290, -2921, 29160,
   -2921, 44338, 19134, -2921, -2921, 39537,  2300,  2155,  2155,  7714,
     883, -2921,  2155, 19134, 19134,  2155,  2155, 19134, -2921,  8971,
     492, -2921,   903, -2921, 38953, -2921, 67622, -2921, -2921,  1857,
     915,  1857, -2921, -2921,  1979, -2921, -2921, -2921,  2040, -2921,
   -2921,   904,  2402,  1904, 19134, -2921, -2921,  1988, 34003, -2921,
   -2921, -2921, -2921, 34003,   651, -2921,  2156,  1897,  1991, -2921,
   -2921, -2921, -2921, -2921, -2921, 38993, -2921,    47, 19134, -2921,
    1169,   753, -2921, -2921, -2921, -2921,  1897,  1025, -2921, 52678,
    2455,  2349, -2921, -2921, 44338, -2921, -2921,  1842,  1842, -2921,
   -2921,  2163, -2921, -2921, -2921, -2921,  1119,   609, 37392, 52678,
   52678, -2921, -2921,  1994, -2921, -2921,   423,  2379,   943,   848,
   -2921,  2498,  2498, 44338, 52678,  2353, 48806, -2921,  2462,  2001,
   52678,  1750,   344,   344, -2921,  2147, -2921,  2148, -2921, -2921,
    2468,   271, -2921, 18625, 52678, -2921, -2921, 31582, -2921,  3786,
     958, -2921, -2921,  2005,  2007, -2921,  1857, 19134,  2009, 19134,
   -2921, 22188,  2473,  2011, -2921, 19134,  2071, 25751, -2921, 19134,
   -2921, 52678, 57518,   -12,  2018, 57518, -2921, -2921, -2921, 19134,
   -2921,  2155,  2155,  2155, 19134, -2921, 19134, -2921, -2921, -2921,
    2221,  2151, -2921,  2151, 19134,  2498,   597,  3886, 61874,    14,
   -2921, 44338, -2921, -2921, -2921, 52678, -2921, 45418, -2921,   651,
     379,  2022, 19134, 39033,  2253, -2921, -2921,  2285, -2921,  2345,
   -2921,  2088,   613,  2109, -2921, -2921, -2921, -2921,  1141,   915,
    1562,  1927,  1958, -2921,  2031, 52678,  2498,   848,   669, -2921,
   -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921,  2498,  2463,  2250,  2469,  2498, 44338,  1860, 19134,
      75, -2921,   959,  2464, -2921, -2921,  2534,  2151,  2043, 22188,
    2045, -2921,  2041, 61874, 44338,  2190, -2921, -2921,  2051, -2921,
   -2921,   176, 19134, -2921, 39882,  2048,  2054,  2499,  1723,  2071,
    2071, -2921,   429, -2921, -2921,  2466, 31582,  2430,  1025,   651,
    2068,   969, -2921, -2921, -2921, -2921, -2921,  2825, -2921, 39377,
    2296,   384,  2283,  2022, 19134, -2921,  2137, -2921, -2921, -2921,
    2530, -2921, -2921, 48806,  2069,  1958,  1927,  1750,  1958,  2287,
   -2921,  2288, -2921,  2072, 39417, 61874, 61874,  1562, 31582, 61874,
    2073,  2071, -2921,  2074, -2921, -2921, -2921, 51710, -2921,  2076,
    2079, -2921, -2921, -2921, 19134,   399, -2921, -2921,  2126, 52678,
     987,    34,  2285, 37392, -2921, 45418,  2299,   379,  2381, -2921,
   -2921, -2921, -2921,   165,  2302, -2921,  2304, -2921, 44338, -2921,
    2498, 48806, -2921, -2921, -2921, -2921, -2921, -2921, 31582,  2464,
   -2921,   292, -2921,  1447, -2921,   292, -2921, -2921, -2921, -2921,
     915, -2921,  1408, 22697, 22697, 22697,  2084,  2498, -2921,  1447,
   -2921,  2205,  2283, -2921, -2921, -2921, -2921, -2921,   464,   464,
    2472, -2921,  2153, -2921,  1958,   992, 61874,  1667, -2921,  1667,
   24224,  2233,   200, 43344,  2449, -2921,  2449,  2449, -2921, -2921,
   -2921, 36423, -2921, -2921,  2584, -2921,   194, -2921, -2921, -2921,
    1562,   292, -2921, -2921,  2577, -2921, -2921, -2921, -2921, -2921,
     144, -2921, -2921, -2921,  1447,   651, -2921, -2921, -2921,  1447,
    1667, 23206,  2259, -2921,  2333, -2921, -2921, -2921, -2921, -2921,
   -2921, -2921
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     921,  1214,     0,  1173,  1172,  1339,  1214,     0,  1324,  1214,
     873,  1089,     0,   814,  1339,     0,  1214,     0,   921,     0,
       0,     0,     0,     0,     0,    81,    84,    82,     0,     0,
       0,  1214,   121,     0,   813,  1214,     0,     0,   113,    83,
       0,  1423,     0,     0,     0,     0,     0,     2,     4,     5,
       6,     7,     8,     9,    21,    10,    11,    12,    17,    13,
      14,    15,    16,    18,    19,    20,    22,    23,    24,  1131,
      25,    26,    27,    28,     0,    29,    30,    31,    32,    33,
      57,    44,   126,    56,     0,     0,   920,   225,    64,    34,
      35,    36,    37,    38,    39,    40,   812,    41,  1213,  1212,
    1206,     0,     0,     0,     0,     0,  1338,     0,  1207,  1192,
    1437,  1438,  1439,  1440,  1441,  1442,  1443,  1444,  1445,  1446,
    1447,  1803,  1448,  1449,  1450,  1451,  1452,  1804,  1453,  1454,
    1455,  1749,  1750,  1805,  1751,  1752,  1456,  1457,  1458,  1459,
    1460,  1461,  1462,  1463,  1753,  1754,  1464,  1465,  1466,  1467,
    1468,  1755,  1806,  1756,  1469,  1470,  1471,  1472,  1473,  1807,
    1474,  1475,  1476,  1477,  1478,  1479,  1480,  1481,  1482,  1808,
    1483,  1484,  1485,  1486,  1487,  1488,  1489,  1490,  1491,  1492,
    1757,  1758,  1493,  1494,  1495,  1496,  1497,  1498,  1499,  1500,
    1501,  1502,  1503,  1504,  1505,  1506,  1507,  1508,  1509,  1510,
    1511,  1512,  1513,  1514,  1515,  1516,  1517,  1518,  1519,  1520,
    1759,  1521,  1522,  1523,  1524,  1525,  1760,  1526,  1527,  1528,
    1761,  1529,  1530,  1531,  1809,  1810,  1532,  1533,  1762,  1812,
    1534,  1535,  1763,  1764,  1536,  1537,  1538,  1539,  1540,  1541,
    1542,  1543,  1544,  1813,  1545,  1546,  1547,  1548,  1549,  1550,
    1551,  1552,  1553,  1554,  1555,  1556,  1814,  1765,  1557,  1558,
    1559,  1560,  1561,  1766,  1767,  1768,  1562,  1815,  1816,  1563,
    1817,  1564,  1565,  1566,  1567,  1568,  1569,  1570,  1818,  1571,
    1819,  1572,  1573,  1574,  1575,  1576,  1577,  1578,  1579,  1769,
    1580,  1581,  1582,  1583,  1584,  1585,  1586,  1587,  1588,  1589,
    1590,  1591,  1592,  1593,  1594,  1595,  1596,  1597,  1770,  1821,
    1771,  1598,  1599,  1600,  1772,  1601,  1602,  1822,  1603,  1773,
    1604,  1774,  1605,  1606,  1607,  1608,  1609,  1610,  1611,  1612,
    1613,  1614,  1775,  1823,  1615,  1824,  1776,  1616,  1617,  1618,
    1619,  1620,  1621,  1622,  1623,  1624,  1625,  1626,  1627,  1777,
    1825,  1628,  1629,  1778,  1630,  1631,  1632,  1633,  1634,  1635,
    1636,  1637,  1638,  1639,  1640,  1641,  1779,  1642,  1643,  1644,
    1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,  1658,  1659,  1660,  1826,  1661,  1662,  1663,
    1780,  1664,  1665,  1666,  1667,  1668,  1669,  1670,  1671,  1672,
    1673,  1674,  1675,  1676,  1677,  1678,  1679,  1680,  1781,  1681,
    1682,  1683,  1827,  1684,  1685,  1782,  1686,  1687,  1688,  1689,
    1690,  1691,  1692,  1693,  1694,  1695,  1696,  1697,  1698,  1783,
    1699,  1784,  1700,  1701,  1702,  1703,  1829,  1704,  1705,  1706,
    1707,  1708,  1709,  1785,  1786,  1710,  1711,  1787,  1712,  1788,
    1713,  1714,  1789,  1715,  1716,  1717,  1718,  1719,  1720,  1721,
    1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,  1730,  1731,
    1790,  1791,  1732,  1830,  1733,  1734,  1735,  1736,  1737,  1738,
    1739,  1740,  1741,  1742,  1743,  1744,  1792,  1793,  1794,  1795,
    1796,  1797,  1798,  1799,  1800,  1801,  1802,  1745,  1746,  1747,
    1748,     0,  1193,  1194,   776,  1328,     0,   754,  1192,  1762,
    1769,  1783,  1322,  1323,  1193,  1209,   872,     0,     0,     0,
       0,     0,     0,  1083,  1082,     0,  1124,  1088,     0,     0,
    1196,  1094,  1630,  1195,   753,  1092,  1338,     0,     0,  1359,
    1360,     0,  1369,     0,  1352,  1357,  1353,     0,  1378,  1371,
    1379,  1361,  1351,  1372,  1362,  1350,     0,  1380,     0,  1355,
       0,     0,     0,  1210,  1189,   921,     0,  1135,  1136,  1137,
    1138,  1139,  1140,  1145,  1141,  1142,  1143,  1144,  1146,  1147,
    1148,  1149,  1150,  1126,  1131,  1151,  1152,  1153,  1154,  1155,
    1156,  1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,     0,
    1324,     0,     0,  1755,  1806,  1760,     0,  1773,     0,  1776,
    1777,  1664,  1784,  1787,  1788,  1789,  1790,     0,   293,  1195,
    1190,   277,     0,    59,   229,   239,   277,   282,   544,   305,
     545,     0,  1197,   900,   899,   897,   896,  1325,  1217,  1287,
    1534,  1574,  1679,  1785,  1710,   817,  1288,  1282,  1286,  1211,
     120,   118,     0,   725,  1534,  1574,  1668,  1679,  1785,   821,
     825,     0,  1208,   819,   806,     0,   807,  1195,    65,   112,
       0,   844,  1422,     0,  1427,     0,  1644,    92,    95,   785,
      93,    57,     0,     1,   921,  1130,  1111,     0,   927,     0,
     116,   116,     0,   116,     0,    49,     0,     0,    57,    52,
      56,   226,   816,  1785,  1710,   805,   808,  1543,     0,     0,
    1543,     0,  1543,     0,  1543,     0,  1341,   709,     0,   755,
    1198,     0,     0,  1054,  1087,  1086,  1085,  1084,  1089,  1543,
    1432,     0,  1396,  1397,     0,     0,     0,     0,     0,  1119,
    1095,  1093,     0,  1336,  1367,  1368,     0,  1358,  1354,  1356,
       0,   777,  1831,  1832,  1833,   348,  1834,   377,   355,   377,
     377,  1835,  1836,  1837,  1838,   344,   344,  1508,   357,  1839,
    1840,  1841,  1543,  1842,  1843,   345,   346,   382,  1844,  1845,
    1846,  1847,  1848,     0,     0,  1849,   377,  1850,   344,  1851,
    1852,  1853,   349,  1854,   315,  1855,     0,  1856,   347,   316,
    1857,   385,   385,  1858,     0,   372,  1859,   778,   779,  1377,
       0,  1381,   330,   331,   332,   333,   358,   359,   334,   364,
     365,   369,   335,   417,   344,  1543,   780,  1377,  1373,  1543,
    1377,   747,  1543,     0,     0,  1181,  1128,  1165,  1860,  1861,
    1862,  1863,  1864,  1865,  1866,  1867,  1869,  1868,  1870,  1871,
    1872,  1873,  1874,  1875,  1876,  1877,  1878,  1879,  1880,  1881,
    1882,  1883,  1884,  1885,  1886,  1887,  1888,  1891,  1889,  1890,
    1892,  1893,  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,
    1902,  1903,  1904,  1906,  1905,  1907,  1908,  1909,  1910,  1911,
    1912,  1913,  1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,
    1922,  1923,  1924,  1925,  1926,  1927,  1928,  1929,  1930,  1931,
    1932,  1933,  1934,  1935,  1936,  1937,  1938,  1939,  1940,  1166,
    1167,  1179,     0,  1180,  1170,  1134,   921,     0,   871,  1321,
     898,     0,     0,     0,   665,   277,   282,     0,     0,   295,
       0,   680,     0,   686,     0,     0,     0,   277,    64,     0,
     239,   294,  1191,     0,   275,   276,   167,   167,   121,     0,
     102,   287,     0,     0,   290,   288,     0,   290,     0,     0,
       0,   290,   286,   247,     0,   167,     0,   275,   278,   167,
       0,   297,  1411,     0,     0,     0,     0,  1285,  1283,  1284,
    1289,     0,     0,     0,   757,   759,   760,   633,   770,   530,
       0,  1750,  1751,  1752,   701,  1753,  1754,  1756,  1757,  1758,
     484,  1759,   768,  1761,  1763,  1764,  1766,  1767,  1768,  1769,
    1770,  1771,     0,   769,  1774,  1610,  1779,  1780,  1782,  1785,
    1786,   767,  1791,     0,     0,     0,   736,   656,     0,     0,
       0,   529,     0,   702,   710,   525,     0,     0,   338,   339,
     360,   361,   340,   366,   367,   341,     0,   732,   418,   513,
     720,   532,   563,   534,   543,   521,   600,   514,     0,   524,
     516,   728,   102,   726,     0,   517,   756,   102,   724,   824,
     822,   828,   823,     0,     0,     0,     0,     0,  1191,   790,
     791,  1421,  1419,  1420,  1418,  1417,  1424,     0,  1426,  1131,
     651,   653,     0,    94,     0,     0,     0,    47,    46,     3,
     785,     0,     0,     0,     0,   114,   115,     0,     0,     0,
       0,     0,     0,     0,     0,   210,   141,   142,   144,   207,
     211,   219,     0,     0,     0,     0,     0,    53,     0,   815,
     811,   809,     0,     0,     0,  1110,  1110,     0,     0,     0,
       0,     0,  1276,  1225,  1269,     0,     0,     0,     0,  1304,
    1317,     0,     0,     0,     0,     0,  1314,     0,     0,  1297,
    1291,  1293,  1227,     0,  1110,     0,  1223,     0,     0,     0,
    1229,     0,   871,   708,     0,  1202,  1973,  1974,  1975,  1976,
    1977,  1978,  1979,  1980,  1981,  1982,  1983,  1984,  1985,  1986,
    1987,  1988,  1989,  1990,  1991,  1992,  1993,  1994,  1995,  1996,
    1997,  1998,  1999,  2000,  2001,  2002,  2003,  2004,  2005,  2006,
    2007,  2008,  2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,
    2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,  2025,  2026,
    2027,  2028,  2029,  2030,  2031,  2032,  2033,  2034,  2035,  2036,
    2037,  2038,  2039,  1927,  2040,  2041,  2042,  2043,  2044,  1200,
    1201,  1204,  1203,  1205,  1199,  1192,     0,  1941,  1803,  1804,
    1805,  1806,  1756,  1807,  1808,     0,  1809,  1810,  1762,  1812,
    1813,  1814,  1815,  1816,  1817,  1818,  1819,  1769,  1821,  1822,
    1823,  1824,  1825,  1826,  1967,  1827,  1783,  1829,  1789,     0,
    1830,   536,  1193,   773,   659,   126,   657,   786,     0,     0,
       0,   869,     0,     0,     0,  1428,     0,     0,  1543,   905,
    1543,  1054,     0,  1543,  1054,  1543,     0,  1118,  1121,     0,
    1370,  1366,  1364,  1363,  1365,   376,   363,   371,   370,   656,
     353,   352,   351,     0,   350,     0,     0,   377,   377,   375,
     354,   330,     0,     0,     0,   381,     0,   379,     0,  1375,
    1376,     0,  1348,     0,   323,   319,     0,   390,   391,   392,
     393,   400,   401,   398,   399,   394,   395,   388,   389,   396,
     397,   386,   387,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   336,   342,     0,     0,   781,     0,  1343,     0,
       0,  1345,     0,     0,  1186,     0,  1184,     0,   921,     0,
    1298,  1175,  1176,  1174,     0,     0,  1133,  1301,  1169,  1178,
    1168,  1177,  1132,  1318,  1127,     0,     0,  1409,   859,     0,
       0,     0,   666,   675,   667,   668,   669,   670,   671,   672,
     673,   674,     0,     0,   238,   236,     0,     0,     0,     0,
       0,     0,   702,     0,   488,   514,     0,     0,     0,   651,
     685,     0,     0,     0,     0,     0,     0,   651,   691,     0,
       0,   261,   273,     0,   160,   166,   237,   235,     0,   725,
     230,     0,   307,   287,     0,   286,     0,     0,   289,   283,
       0,   284,     0,     0,     0,     0,   285,     0,     0,     0,
       0,   233,     0,   273,     0,   234,   304,   834,   833,   842,
    1326,     0,   662,     0,   921,  1290,   818,     0,   656,   522,
     700,     0,     0,   527,   613,   443,     0,     0,   444,   422,
     423,     0,   735,   744,   651,   655,     0,   525,   651,     0,
     518,   519,     0,   603,   605,     0,     0,   703,   758,   526,
       0,   763,     0,   417,   417,   731,   633,     0,   623,   626,
       0,     0,   630,   631,   632,     0,     0,     0,   723,     0,
     641,   643,     0,     0,   459,   639,     0,   462,     0,     0,
       0,     0,   627,   628,   629,   619,   620,   621,   622,   624,
     625,   637,   618,   440,     0,   515,     0,   566,     0,   439,
     729,   228,     0,   761,   228,   836,   840,   841,   839,   835,
       0,   827,   826,   831,   829,   832,   830,   820,     0,   792,
    1415,     0,  1412,   654,   223,    96,   749,     0,   100,  1112,
     797,   926,   925,     0,     0,    69,    68,   135,   127,   129,
     135,     0,    67,     0,   183,   184,     0,     0,     0,     0,
     216,   214,   757,   770,   171,   145,   170,     0,     0,   149,
       0,   175,   418,   209,    51,   139,   140,   143,    50,     0,
     212,     0,   222,     0,    88,    90,    73,    87,    85,    70,
      78,   210,   144,     0,   810,     0,     0,     0,     0,     0,
    1543,     0,     0,   318,  1260,  1241,  1006,  1109,     0,     0,
       0,     0,     0,     0,     0,  1268,  1265,  1266,  1267,     0,
       0,     0,     0,  1302,  1303,  1316,     0,  1307,  1308,  1305,
    1309,  1310,     0,     0,  1295,  1296,     0,     0,     0,     0,
    1294,     0,     0,     0,     0,     0,     0,     0,     0,  1340,
    1335,   704,   709,   126,   126,   126,     0,   124,   125,     0,
       0,   858,  1052,  1062,     0,     0,     0,  1432,     0,     0,
       0,     0,     0,     0,  1089,  1433,  1431,  1435,  1434,  1436,
    1514,  1385,     0,     0,   904,   901,     0,  1051,  1025,     0,
       0,  1123,     0,     0,     0,  1543,  1041,  1120,     0,  1337,
       0,     0,     0,  1377,     0,   374,   373,   324,   320,     0,
       0,     0,     0,     0,     0,  1382,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1377,   782,     0,  1374,  1377,
     748,     0,  1377,  1188,     0,     0,  1129,  1171,  1299,  1319,
    1300,  1320,   871,   866,   894,     0,   874,   879,   856,     0,
     856,     0,   876,   880,   856,   875,     0,   856,   870,     0,
     559,     0,   549,     0,     0,   296,     0,     0,   550,   490,
     491,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   508,
     507,   551,   300,     0,   303,     0,     0,   683,   684,     0,
     552,     0,     0,   690,     0,     0,     0,   557,     0,   240,
       0,     0,     0,   155,   159,   162,     0,   165,   102,    58,
    1534,  1574,     0,   113,   113,   113,   111,   101,     0,   187,
       0,     0,   262,     0,     0,   264,   266,     0,     0,   269,
     246,   245,     0,     0,     0,     0,   308,     0,   753,     0,
       0,  1327,     0,  1216,     0,  1221,  1222,  1219,  1215,  1218,
    1220,     0,     0,     0,   699,   695,     0,     0,   608,   610,
     612,     0,   617,   623,   626,   630,   631,   632,   627,   628,
     629,   619,   620,   621,   622,   624,   625,     0,   645,     0,
     599,     0,     0,   734,     0,   486,     0,   520,   531,     0,
       0,   606,   535,   736,   711,     0,     0,   766,   765,   419,
     428,   431,   463,   464,   435,   436,   437,   441,   788,   787,
     730,     0,   722,     0,     0,   420,   445,   450,     0,   692,
     480,     0,   468,     0,   458,     0,   466,   470,   446,   461,
       0,   442,     0,   723,   642,   644,     0,   640,     0,   432,
     433,   434,   424,   425,   426,   427,   429,   430,   438,   616,
     614,   615,     0,   709,     0,   721,     0,     0,   568,     0,
       0,   465,   727,     0,   307,   126,   307,     0,   417,   793,
     785,  1425,  1414,   785,   652,   750,   784,    98,     0,     0,
       0,   795,   912,   916,     0,   710,   946,   948,   228,     0,
     133,   134,   138,     0,     0,   138,   117,    66,  1780,  1664,
       0,     0,     0,     0,   176,   217,     0,   208,   173,   174,
       0,   172,   757,   177,   756,   178,   181,   182,   150,   745,
     218,   220,     0,   213,     0,   751,    72,    91,     0,     0,
       0,     0,     0,    55,    54,   224,     0,  1226,     0,  1543,
    1243,     0,     0,     0,     0,     0,     0,   956,     0,  1056,
     956,  1281,  1543,  1377,  1543,  1377,  1441,  1509,  1680,     0,
    1239,  1030,  1272,     0,  1103,  1059,     0,  1015,  1262,  1277,
    1096,     0,     0,  1292,  1228,  1306,  1311,  1099,  1315,  1312,
    1331,  1313,  1110,     0,  1224,     0,  1097,     0,  1329,     0,
       0,  1230,  1101,  1333,     0,   708,     0,   124,   124,   124,
       0,   658,     0,     0,     0,   660,   661,   857,     0,  1053,
       0,   868,   847,   848,   858,  1430,     0,   905,  1054,     0,
    1054,     0,  1432,     0,     0,  1387,  1383,     0,     0,     0,
       0,   318,  1044,  1042,  1075,     0,  1049,  1043,     0,     0,
    1001,     0,   803,     0,     0,     0,     0,  1398,     0,     0,
       0,     0,     0,   343,   356,  1349,   330,     0,   384,   383,
     385,   385,   313,   330,     0,   330,     0,   328,     0,   368,
     337,   410,   411,   412,   413,   414,   415,   416,  1342,   783,
    1344,     0,  1346,  1187,  1185,  1410,   863,     0,   862,   867,
     861,   865,   860,     0,   855,     0,   889,     0,     0,     0,
       0,     0,     0,     0,     0,   546,   664,     0,   678,   677,
     489,   496,   499,   503,   504,   505,   679,     0,     0,     0,
     500,   501,   502,   492,   493,   494,   495,   497,   498,   506,
     305,     0,     0,   299,   688,   687,   681,   682,     0,   554,
     555,   556,   689,     0,     0,   274,   153,   151,   154,   156,
     152,     0,     0,   307,   113,   113,   113,   113,   110,     0,
       0,     0,   306,     0,   204,   268,     0,   292,     0,   265,
       0,     0,   256,     0,   263,   312,   279,     0,     0,   281,
     843,   663,   119,   523,     0,     0,   696,     0,   485,     0,
     611,   533,     0,   634,   598,     0,     0,     0,   743,     0,
     652,   602,   604,   744,   528,   417,     0,     0,     0,     0,
       0,     0,     0,   469,   460,     0,   467,   471,     0,     0,
       0,   454,     0,     0,   452,   481,   448,     0,     0,   482,
     708,     0,   712,     0,     0,   567,   576,   231,   227,   187,
     124,   187,     0,   837,  1416,  1413,    99,   921,   796,     0,
     935,     0,     0,     0,     0,   938,   952,   949,   795,     0,
       0,   128,   130,     0,   635,   138,   132,   180,   179,     0,
     148,   215,   146,     0,   221,     0,    89,     0,    75,     0,
     249,     0,     0,     0,     0,     0,  1005,     0,     0,     0,
     956,     0,  1064,     0,  1071,     0,     0,  1056,  1037,  1261,
       0,     0,     0,  1235,  1280,  1253,  1245,  1231,  1259,     0,
       0,  1264,     0,  1257,  1274,  1275,  1273,  1278,     0,   966,
     991,     0,     0,  1002,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   709,   705,   709,     0,     0,
       0,   126,   122,   123,   537,   892,   893,   891,  1297,  1063,
       0,     0,   903,  1051,     0,  1123,     0,  1429,  1089,     0,
    1388,     0,  1386,     0,   905,  1054,     0,  1029,  1025,  1050,
    1023,  1022,  1024,     0,   804,  1189,     0,   798,  1054,  1122,
       0,     0,  1399,     0,  1393,     0,  1117,   362,   326,     0,
     380,   378,   327,     0,   325,   321,   329,  1377,     0,   851,
     890,   895,   877,   882,     0,   888,   884,   883,   878,   886,
     885,   881,   547,   558,   676,     0,     0,     0,     0,   298,
     301,     0,   553,   548,   272,     0,     0,   187,     0,     0,
       0,     0,   104,   103,   109,     0,     0,   570,   267,     0,
       0,     0,   254,   244,   250,     0,     0,     0,     0,   310,
     309,   280,     0,   698,   694,   607,   609,   646,   733,   651,
     738,   740,     0,     0,     0,   601,   487,   764,   421,     0,
       0,   451,   693,   472,     0,     0,     0,   447,   634,     0,
       0,     0,     0,     0,   456,     0,   716,   709,     0,   715,
       0,     0,     0,     0,   542,   232,   204,     0,   204,     0,
       0,   794,     0,   789,   913,   914,   915,     0,     0,     0,
     930,   907,     0,     0,   947,   935,   923,   136,   137,     0,
     131,   147,   746,   752,    74,     0,   525,     0,     0,    71,
       0,  1104,   956,     0,     0,  1242,     0,  1073,  1017,  1065,
    1048,  1032,     0,     0,     0,   957,     0,  1090,     0,     0,
    1038,     0,     0,     0,     0,  1018,     0,     0,   977,     0,
       0,  1048,     0,  1055,   973,   974,     0,  1234,  1254,     0,
    1250,     0,  1279,     0,     0,     0,     0,     0,  1237,  1249,
       0,  1232,     0,  1377,  1377,  1240,   777,  1831,  1832,  1833,
    1834,  1835,  1836,  1837,  1838,  1839,  1840,  1951,  1841,  1842,
    1843,  1844,  1845,  1846,  1847,  1848,  1960,  1849,   963,  1850,
    1610,  1851,  1852,  1853,  1854,  1855,     0,  1856,   316,  1857,
    1858,  2036,  1859,   619,   620,   961,   962,  1058,   958,   778,
     959,  1066,   960,     0,  1061,  1016,  1100,  1332,     0,  1098,
       0,  1330,  1107,  1105,  1102,  1334,     0,     0,   540,   541,
     538,   124,   871,   850,     0,     0,   803,     0,     0,     0,
    1543,     0,  1384,     0,  1123,   902,  1051,     0,  1081,  1001,
    1076,     0,   803,   801,     0,  1123,  1408,     0,  1390,     0,
       0,     0,   322,   314,  1347,   864,     0,   887,   509,     0,
       0,     0,     0,   163,     0,   169,   204,   108,   107,   106,
     105,   186,  1484,  1763,  1663,     0,   190,   185,   188,   193,
     195,   194,   196,   192,   203,     0,   206,   291,   647,   649,
       0,     0,     0,     0,   255,     0,   257,     0,   259,     0,
     311,   697,   741,   742,   737,     0,   418,   478,   476,   473,
       0,   474,   455,     0,     0,   453,   449,     0,   483,     0,
       0,   713,     0,   562,     0,   565,   579,   575,   574,   570,
     537,   570,   838,    97,   934,   911,   937,   936,     0,   710,
     944,     0,     0,   935,     0,   939,    43,     0,     0,    86,
     248,    79,    80,     0,  1069,  1244,     0,  1048,     0,   956,
    1034,  1033,  1036,  1031,  1035,     0,  1091,     0,     0,   975,
       0,   982,  1020,  1021,  1019,   976,  1048,  1054,   978,     0,
       0,     0,  1246,  1236,  1233,  1238,  1247,     0,     0,  1248,
    1251,   312,  1263,  1256,  1960,  1969,     0,     0,     0,     0,
       0,   707,   706,     0,   846,   853,  1297,     0,     0,  1025,
     800,     0,     0,  1395,     0,     0,  1051,  1389,     0,     0,
       0,   803,     0,     0,   953,     0,   998,     0,  1182,   802,
       0,     0,  1400,     0,     0,  1115,  1116,     0,   852,   510,
       0,   511,   302,     0,     0,   161,   570,     0,     0,     0,
     197,   191,     0,   569,   571,     0,   158,   650,   251,     0,
     253,     0,   277,   126,     0,   277,   260,   739,   560,     0,
     475,   479,   477,   457,   709,   717,   709,   714,   564,   578,
     581,   206,   762,   206,     0,     0,   922,     0,     0,   919,
     906,   924,   636,    76,    77,     0,   956,     0,  1047,  1070,
     987,   965,     0,     0,     0,   972,   979,  1080,   981,     0,
    1255,  1271,     0,     0,  1060,  1108,  1106,   539,   871,     0,
    1123,  1001,  1408,  1392,     0,     0,     0,  1025,  1189,   799,
    1014,  1007,  1008,  1009,  1010,  1011,  1012,  1013,  1028,  1027,
     999,  1000,     0,     0,     0,     0,     0,  1394,  1117,     0,
     941,   950,     0,   941,   512,   164,     0,   206,     0,     0,
       0,   189,     0,     0,   205,     0,    62,   648,     0,   243,
     241,   124,     0,   242,     0,     0,     0,     0,   126,   158,
     158,   908,     0,   909,   945,     0,     0,     0,  1054,  1072,
    1046,     0,  1039,   985,   984,   986,   990,     0,   988,     0,
    1004,     0,   997,   965,     0,  1258,     0,  1067,   845,   849,
       0,   955,  1402,  1051,     0,  1408,  1001,   803,  1408,     0,
    1405,     0,  1391,     0,     0,     0,   943,  1123,     0,   943,
       0,   158,   199,     0,   198,   573,   572,   160,   252,     0,
       0,   561,   719,   718,     0,   585,    61,    60,     0,     0,
       0,     0,  1080,     0,  1026,     0,     0,   987,     0,   980,
    1077,  1078,  1079,     0,   993,   983,   994,  1252,  1270,  1068,
       0,  1051,  1403,   954,  1183,  1401,  1406,  1407,     0,   941,
     940,   135,   942,   307,   951,   135,   168,    63,   200,   157,
       0,   258,   580,     0,     0,     0,     0,     0,   918,   307,
     929,     0,   997,  1045,  1040,   964,   989,  1003,     0,     0,
       0,   995,     0,   996,  1408,     0,   943,   138,  1113,   138,
    1749,  1485,  1717,     0,   597,   586,   597,   597,   577,   910,
     917,     0,   956,   969,     0,   968,     0,  1057,   992,  1404,
    1123,   135,   931,   932,     0,   590,   589,   588,   592,   591,
       0,   584,   582,   583,   307,  1074,   967,   971,   970,   307,
     138,     0,     0,   594,     0,   595,   928,  1114,   933,   587,
     593,   596
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2921, -2921, -2921,  1947,    91,    94,  -708, -1142,  -852, -1132,
   -2921,  -151,    97, -2921, -2921,   132, -2921,   916, -2921,   112,
    -646,   476, -2921,  1010, -2921, -2921,  2620, -2921,   101,   103,
    2038,  1215,  2685,  3386,   251,  -495, -1297,  -953,    13, -2921,
   -2921, -2921, -2921,  -834,   421, -1159, -2921,   346, -2921, -2921,
   -2921, -2921,  -246,    93, -2921,     4, -2108, -2771,  -592, -2921,
    -695, -2921,  -354, -2921,  -640, -2921,  -814,  -641,  -676, -2701,
   -1089, -2921,  1514,  -393, -2921,   517, -2921, -2442, -2921, -2921,
     509, -2921, -1114, -2921, -2138,   105,  -615, -2474, -2457, -2078,
    -698,   180,  -612,   162, -2058, -1137, -2921,   542, -2921,  -595,
   -2921,  -682, -2030,   106, -2643, -1613,   107,  1385, -2024,   108,
   -1601, -2921,    -7, -2921, -2921, -2921,  -519, -2921, -2437,     7,
   -2002,   109, -2921, -2921,   110,    16,  -513,   231, -2921,   114,
   -2921, -2921,  1305,  -735, -2921,  1356,   115,   880, -2921, -2441,
   -2921,  -443, -2921,  -509,  -498, -2921, -2921,    36,  -893,  1296,
   -2921, -2921, -2921,    11, -2921,  -471, -2921, -2921, -2473, -2921,
      20, -2921, -2921, -2921, -2921, -2921,  -407,   255, -2921, -2921,
    -541, -2487,  -493, -2921, -2786, -2920, -2921, -2921,  -638, -2890,
   -1982,   116,   111,   117,   118, -2921,   273,   119, -1093,     9,
     263,   -30,   -53, -2921,   -47, -2921, -2921, -2921,   600, -2921,
   -2921,    19,    56,  1620, -2921,  -992, -2921, -1470,   680, -2921,
    1782,  1790, -2127,  -668,   -72, -2921,   637, -1612, -2045,  -535,
    1049,  1614,  1618,   385, -2295, -2921,  -524, -2921,   242, -2921,
   -2921,   640,  1099, -1501, -1479, -2921, -2145, -2921,  -438,  -329,
   -2921, -2921, -2921, -2921, -2921, -2407, -2215,  -489,  1080, -2921,
    1634, -2921, -2921, -2921, -2921,     5, -1471,  2741,   684,   -83,
   -2921, -2921, -2921, -2921,   128, -2921,   847,  -156, -2921,  2161,
    -523,  -621,  1844,   -58,   224, -1772,    24,  2176,   460, -2921,
   -2921,   462, -1953, -1456,   416,  -227,  1445, -2921, -2921,    80,
   -1300,  -778, -2921, -2921,   737,  1422, -2921, -2921, -2921,  1439,
    1599, -2921, -2921,  1693,  2175, -2921,  -622,  2314,  -506,  -759,
    1862,  -860,  1864,  -868,  -851,  -871,  1868,  1878, -1478,  4548,
    2013,  4214, -2121, -2921,   966,    37, -2921, -1422,   154, -2921,
   -2921, -2921, -2921, -2153, -2921,  -389, -2921,  -382, -2921, -2921,
   -2921, -1607, -2524, -1637, -2921,  3131,   820, -2921, -2921,   424,
   -2921, -2921, -2921, -2921, -1486, -2921,  5242,   719, -2921, -1937,
   -2921, -2921,  -926,  -596, -1034,  -950, -1240, -1289, -2921, -2921,
   -2921, -2921, -2921, -2921, -1026, -1721,  -239,   780, -2921, -2921,
     861, -2921, -2921, -2921,  -690, -1701, -2023, -2921, -2921, -2921,
     785,  1340,   124,  -631, -1565, -2921,   831, -2266, -2921, -2921,
     417, -2921,  -497, -1081, -2319,   619,   133, -2921,  2767, -2435,
   -2921, -2921,  -552, -2560, -1061,  -779, -2921,   120,  1151,    22,
   -2921,   123,  1200, -2921, -2921, -2921,   125, -2921,   537,   127,
     488, -2921,   885, -2921,   636,   129, -2921, -2921,    98,  2727,
      12, -2783
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    46,    47,    48,   567,   568,  1774,  1726,  1507,  1171,
    1716,  1417,   569,  2505,  2506,  2507,  2159,  1152,  3235,  2160,
    1153,  1154,  2509,    52,    53,    54,   107,  1182,   570,   571,
     512,   618,  1043,   620,  1044,  1549,  1259,  1260,   572,  2214,
    3036,  2598,  3037,  2295,  2208,  1427,  2289,  1834,  1756,  1428,
     518,  1848,  2599,  2548,  1835,   573,  2494,  2827,  3228,  2520,
    3367,  2763,  2764,  3225,  3226,  2497,  2162,  3294,  3295,  2574,
    1708,  3289,  2232,  3168,  2166,  2147,  2765,  2240,  3128,  2868,
    2163,  2745,  2233,  3221,  1787,  2234,  3222,  2989,  2235,  1753,
    1778,  2498,  3296,  2167,  1754,  2493,  2828,  1696,  2236,  3232,
    2237,   528,  2749,   574,  2577,  1322,   575,   738,  1784,   576,
    1315,  1766,   514,   503,   504,   808,  1262,  1303,  1263,   577,
    1775,   578,  2561,  2562,   579,   580,  1089,  2450,  2081,   581,
     560,   561,   827,  1362,   562,   809,   582,  1404,  1405,   835,
      68,   686,  1419,   583,  1420,  1421,   922,    69,  1508,   924,
     925,    70,    71,   585,  3066,  2881,  1328,  1788,  2245,   529,
     586,  2710,  2083,  2453,  3217,    74,  2970,  2086,  1113,  2973,
    3181,  2703,  2968,  2454,  3256,  3311,  2971,  2087,  2088,  3182,
    2089,   587,   635,   588,   589,   986,  1948,   590,  1699,   591,
    1045,    81,    82,   960,    83,  2983,    84,    85,  1674,  1675,
    1676,   665,   677,   678,  2079,  1482,  1917,   670,  1117,  1643,
     652,   653,  2204,   694,  1748,  1638,  1639,  2092,  2461,  1667,
    1668,  1126,  1127,  1905,  3196,  1906,  1907,  1475,  1476,  3075,
    1655,  1659,  1660,  2113,  2103,  1646,  2364,  2906,  2907,  2908,
    2909,  2910,  2911,  2912,  1046,  2637,  3086,  1663,  1664,  1129,
    1130,  1131,  1672,  2123,    87,    88,  2064,  2437,  2438,   624,
    2923,  1499,  1677,  2641,  2642,  2643,  2927,  2928,  2929,   625,
     955,   956,   979,   974,  1489,  1925,   626,   627,  1882,  1883,
    2333,   981,  1919,  1935,  1936,  2649,  1804,   810,  2148,  1512,
    1365,   812,  1047,   813,  1340,  1048,  1344,   815,  1049,  1050,
    1051,   818,  1052,  1053,  1054,   821,  1336,  1055,  1056,  1355,
    1384,  1385,  1386,  1387,  1388,  1389,  1390,  1391,  1392,  1100,
    1678,  1058,  1059,  1060,  1061,  1062,  1063,   629,  1064,  1065,
    1597,  2058,  2436,  2916,  3083,  3084,  2694,  2958,  3110,  3208,
    3326,  3354,  3355,  3381,  1066,  1067,  1543,  1544,  1545,  1958,
    1959,  1960,  1961,  2052,  1591,  1592,  1068,  2832,  1594,  1979,
    2919,  2920,  1101,  1468,  1536,  1305,  1306,  1513,  1442,  1443,
    1449,  1857,  1457,  1461,  1887,  1888,  1469,  2020,  1069,  1954,
    1955,  2387,  1521,  1070,   720,  1184,  1548,  2689,  2055,  1595,
    2014,  1077,  1071,  1078,  1073,  1532,  1533,  2398,  2661,  2662,
    1985,  2120,  1626,  2125,  2126,   831,  1074,  1075,  1076,  1307,
     507,   824,  3312,  1396,  1106,  1308,  2010,   592,   100,   593,
      91,   594,  1096,   674,  1097,  1099,   595,   646,   647,   596,
     659,   660,  1509,  1611,  1510,   597,    96,  1140,   648,   666,
     598,  3062
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     502,   696,   697,  1170,    58,   975,   719,    62,   828,    79,
     695,    72,    97,    57,   502,   682,    65,  1460,  1351,    86,
      73,  1072,    90,  1740,  1627,  1311,   622,  1729,  2095,  1264,
    1695,  1136,  1422,   699,  1511,  2062,  1884,    86,  1730,   700,
    1978,  2196,  2499,  1357,   505,   664,  1313,   920,  1939,  1629,
    2466,  1798,   823,  1701,   584,  1407,   836,  1794,   628,  1745,
    1705,   668,  2456,  1439,   830,  1172,  1437,  1176,   921,  1180,
    2538,  2539,  2540,  1416,  1435,  1997,  1998,   502,   502,  1102,
    1601,  1734,  2857,  1438,  2830,  1604,  2833,  1541,  2492,   622,
     622,    49,  1398,  2420,    50,  1401,  2855,    51,  1816,   957,
     680,    55,  2455,    56,   978,   705,    59,    60,    61,    63,
      64,  2439,  1539,  2441,    66,    67,    75,    76,    77,    78,
      89,   628,   628,    92,   952,    93,  2869,    94,   713,    95,
    2660,   661,  2549,  2066,  2872,   636,   632,  1337,  1338,   998,
     506,   926,  -774, -1820,   998,  1861,  -377,  2219,  2365,   -45,
    1863, -1960, -1960,  3255,   506,   516,  2215,  2115,  2724,  1125,
   -1811,  2374,  2729,   -48,  1349,  1359,  2336,  1359,  3054,  2563,
   -1946, -1946,  1088, -1820,  -755,   630,  1114,  -774, -1820,   632,
   -1811,  2118, -1828,  -382,  -775,  -771,  -771,  -382, -1951, -1951,
   -1969, -1969,  -772,  -772,   632, -1971, -1971,  2556,   998,  2993,
   -1828,  -775,  1557,  -385,  2012,  1128,  1359,  1559,  1686,  -344,
    -357,  2012,   672,  3040,  2500,  2552,  1084,   506,   506,  1697,
    -372,  -385,   632,  2385,   632,   632,   746,  2128,  2976,  3058,
    1732,  1608,  -617,  3131,  1359,  1706,  2212,  1567,   630,   630,
    -617,  2605,  2607,  1410,  2610,    21,  3392,   -45,   998,  2644,
    1605,  1410,   632,  -181,  2033,  2570,   998,  3144,  2049,   519,
    1861,   -48,  1264,    80,  1862,  1863,  2050,  1697,  -638,  1569,
    1706,  1357,   692,  3027,   634,   634,  -638,   692,  2527,  3004,
    -854,    80,   958,  3338,   621,  2059,  1091,  3008,  2346,  2959,
     823,  2961,  1706,  1706,  2696,  2873,  2698,  3215,    21,    80,
    1689,  2990,  2348,  3330,  3078,  1791,  1714,  3387,   681,  1717,
    1718,   687,  2121,  2697,  1444,  1644,  1743,     3,     4,  2145,
    3393,  2501,   520,  2767,   650,  1744,  3280, -1297,  2495,  -317,
    1631,    98, -1297,  2090,  2077,  3173,  1430,  1557,  1557,  3315,
    1352,  1558,  1559,  3174,  1647,  2145,  1352,   621,   621,   698,
    2521,  3055,  2431,  2738,  2747,  2349,   983,  2078,   716,    80,
    1606,  3376,  1353,  2522,  2202,   690,  3056,   984,  1353,  3242,
   -1945, -1945,  1567,  2034,  3160,  2991,  1354,  2146,    99,  1713,
    2748,  3026,  2737,  1337,  1338,    25,    26,    27,  1648,  2616,
    2035,  3048,  1901,  1728,  1121,  2036,  2768,  3259,  1264,  1349,
    2627,   688,  3060,  2489,  1569,  1569,   920,  1557,  3159,  3049,
    3394,  1558,  1559,   978,  2091,  1735,  1738,  1424,  3345,   959,
    2720,  1645,   651,  1901,  2122,   957,  3371,  3161,  -201,  2492,
    2060,  2492,   -45,  2037,  1707,   691,  3162,  3005,    25,    26,
      27,  1535,  1567,  2359,  2360,  2361,   -48,  2879,    32,  1092,
    3241,  1093,  1360,  1649,  1360,  2657,  2874,  1691,  3163,  2496,
    -317,   777,  3302,   675,   920,  3305,  3142,  3388,  1085,  1707,
    1123,  1331,  1527,  1833,  1569,  1147,  3331,  1704,  2769,   823,
    2347,  2378,  2896,  1607,  1952,    37,  3120,  1632,  2213,  3076,
    1746,  1707,  1707,  1360,  2350,  1942,  2129,   523,  1704,   524,
     -45,    32,  1650,  1679,  1680,  1861,  2201,  3175,  1332,  1862,
    1863,   692,  3333,  3126,   -48,   106,  3377,  3216,    39,   933,
    2279,  1360,  2644,  3346,  2203,   527,   722,  3363,   747,    42,
    3164,  2994,  3136,  1704,   949,  2502,   682,  2503,    37,  2617,
     536,  1086,  1683,  3165,  1978,  3303,  2887,   673,  1547,  1953,
    3132,   807,  3290,  3057,   992,  1704,  1704,  2877,  1733,   919,
    3395,  3369,  2865,  2013,  1651,  2504,   920,   920,  2545,  2546,
    2422,    39,  1692,  2140,  1828,  1697,   717,  1610,  3323,   998,
     718,    45,    42,  2038,    86,  1719,  1698,   682,  2614,  -617,
    2443,  2830,   600,  2833,  2638,  1335,    43,  3151,  1630,   502,
    2115,  1681,   923,   517,  3304,  3035,  2528,  3339,  2464,  1361,
     502,  1397,   699,  2009,   -45,  2051,  2566,  2458,   700,   599,
      44,  2557,   948,  2469,  2984,  -638,  1781,  1137,   -48,  3017,
    3018,   535,  2267,  1878,    45,   689,   564,  1747,   811,   631,
    -774, -1820,  1730,   628,  -377,   502,   502,  1682,   638,  1524,
    1400,   823,  2065,   -45,   628,   -45,  1622,   693, -1811,  3123,
    1522,  2549,   679,   679,  3124,  1352,  3097,   -48,   502,   -48,
     717, -1820,  -755,  2285,   718,  -774, -1820,  3240, -1811,  1524,
   -1828,  -382,  -775,  1352,  1333,   946,  3291,  1353,    58,   669,
    1590,    62,  1552,    79,  1090,    72,    97,    57, -1828,  -775,
      65,  1354,  2201,    86,    73,  1353,    90,  1339,  1343,  1095,
     502,  1261,   930,  1090,  1302,  3246,  2717,  3247,  -372,  1356,
    1602,   709,  2067,  2925,  3033,  1795,  1796,  1720,   601,  3324,
    3364,  2975,  1103,  1414,  1415,  1721,  3010,  3166,  1094,   506,
    3167,  1414,  1415,  1535,  3015,  1875,  1876,  1877,  1878,  2161,
     506,  2165,   661,   661,  2298,   661,  1121,  2432,  3325,  2299,
     630,   997,  2705,  2317,  1861,  1830,  2741,  3292,  1862,  1863,
     998,   630,  1864,  1865,  1866,    49,  3223,  1115,    50,   683,
      80,    51,  2977,  2718,  3313,    55,  2855,    56,  1724,   807,
      59,    60,    61,    63,    64,  1334,  3038,  3002,    66,    67,
      75,    76,    77,    78,    89,   684,  3111,    92,  3113,    93,
     823,    94,  1725,    95,  3365,  2300,  2706, -1297, -1297,  2344,
    1585,  1586,  1587,  1588,  1589,  1590,  3374,  1302,    80,   681,
    1706,  2309,  1123,  2248,  2846,  2966,  2847,   101,  3224,   823,
     823,  3366,   828,  1697,  3049,  1818,  2830,  1908,  2833,  1483,
     928,  1822,   634,  2742,  1700,   823,  2344,  1264,  1994,  1264,
    1706,  1706,  2337,  1928,  2175,  1557,   519,  3399,  1893,   935,
     685,  3003,  1144,  2967,  2178,  1116,  1480,  2181,  1145,  1124,
     947,  3129,   982,  1490,  2628,  2629,  2630,  2631,  1724,   701,
     920,  1641,  1587,  1588,  1589,  1590,  3209,  3389,  3210,  1826,
    1567,  2395,  1819,  2318,  1486,  1647,  1978,  1081,   721,  1884,
    1493,   921,  1725,  2319,  3276,  3277,  2353,  2743,   919,  2744,
     632,  1951,  1535,  3187,   502,   502,   728,  2667,   698,   520,
     502,  1981,  1569,   502,   502,   742,   502,   502,   502,   502,
    2290,  2274,  2276,  2277,  2272,    86,  3116,    80,  1899,  1648,
    1497,  2271,   502,  2526,  1995,  2021,  2588,  1547,  2412,   502,
    2541,  2273,  2275,  2592,   622,  2594,  3317,  2503,  1121,  3052,
    1868,   622,  3261,  1122,  1347,  1348,   919,  1302,   807,  1146,
     964,  2288,  2022,  2530,  2534,  2413,  2950,  2536,  1873,  1874,
    1875,  1876,  1877,  1878,  3105,  2780,   628,   502,  2537,    21,
     734,  1498,   102,   628,  2173,  3106,  2297,  1483,   682,  2444,
    2301,   103,  2445,  2303,  1352,   502,   965,  2015,  3219,  2467,
    3053,   724,   732,   725,   998,  1758,   502,   502,   502,  1707,
     502,   502,  1484,  1261,   739,  2464,  1353,   735,  1869,  2137,
     743,  1730,   967,  2475,  1123,  1407,   104,  1144,  1375,  1376,
    1356,   823,  1902,  1145, -1942, -1942,  1312,  1903,  2255,  1707,
    1707,   502,  1759,  1650,  1635,  1636,  2174,  1642, -1943, -1943,
     700,   700,  2559,   700,  3269,  2197,  2198,  2199,   919,   919,
    2278,   744,  2224,  -125,  2280,  2184,   745,  2282,  -125,  2529,
    2191,  1124,   506,  1704,   733,  2023,   105,  3044,   717,   506,
    2024,   748,   718,  2414,   523,  2025,   524,  3143,  2415,  1144,
     749,  3236,   502,   630,  1817,  1145,   502,   502,  1817,   726,
     630,   727,   737,  1704,  1704,  1651,   502,   502,   502,  2676,
     750,   502,   527,  1147,  1539,  1090, -1944, -1944,   964,    25,
      26,    27,  1079,  1080,   717,  1082,   732,  1761,  1546,  2571,
     807,   741,   933,  1408,  1146,  2579,  1409,   108,  1620,  -125,
     515,  1621,  1144,  1379,  1380,  2892,   971,   563,  1145,   717,
    2176,  -755,   834,   718,   965,  2179,  1418,   987,   988,   989,
    2053,   833,   649,  1485,  2054,  1433,   662,   823,   734,    80,
    1492,  1491,   931,  1149,  2252,  1496,  1518,  1731,    45,  1477,
     967,  1962,    32,  2161,  2161,  2161,  -125,  1823,  1963,  1964,
    1824,   942,  1965,  1966,  1967,   932,  1146,  1501,   733, -1947,
   -1947,  1505,   621,  1150,  1892,   735,  1894,  1895,  1941,   621,
     934,  1942,  1943,  1978,  1418,  1944,  2354,  2209,  2355,    37,
    2210,  2751,   937,  1870,  1871,  1872,   940,  1873,  1874,  1875,
    1876,  1877,  1878,  2026,  3385,   671,  2416,   991,  2256,  1302,
     736,  1944,  2263,  1519,  2027,  2264,   951,  2417,  1302,  1146,
    2265,   941,    39,  2264,  1523,  2292,  2330,  2376,  2293,  2331,
    2377,  2379,  2754,    42,  2377,  2517,  2523,  2639,  2518,  2524,
    2646,   943,  1302,  2582,  1151,   679,  1942,   823,  1551,   980,
    2342,  1537,  3372,  2651,  3373,   944,  2377,  1553,  1147,   807,
     737,   945,  1758,  2238,   920,  2239,   708,   946,   711,  1765,
     715,  2356,  1767,  2357,   971,  1603,  1768,  1769,   990,  2891,
    2712,   985,   502,  2713,  1609,    45,  1418,  1418,   807,   807,
    1833,  1485,  2514,   823,  2516,  3398,   992,  1144,  2864,  1759,
    2734,  2210,  2736,  1145,   807,   823,  2885,  1144,   993,  2886,
    3348,  2771,  2893,  1145,  1148,  2894,  2941,  1083,  1149,  1944,
    1147,  1118,  2778,  1120,  2735,  3071,  3360,  1087,  1944,  3072,
     698,   698,  2377,   698,  1760,   823,  2940,  3100,  1261,   519,
    1944,  1098,   823,  1104,  2600,  1105,  1771,  2440,  1150, -1948,
   -1948,  1920,   919,  3205,  1922,  3206,  2852,  3107,  3117,  1926,
    1942,  3118,  1929,  2770, -1125,  2779,  1107,  1933,  2511,  1261,
    2513,   920,  2410,  1147,   502,   811,  1174,    86,   823,  1108,
    1149,  3396,   823,  1111,  1761,  1112,  3397,  3134,   823,  1369,
    1370,  1805,  2758,   502,   502,   923,  1119,  3150,  1138,   502,
    2210,   502,   520,  1139,  1146,  1142,   502,   502,   502,   502,
    1175,  1141,  3184,  3257,  1146,  1944,  3258, -1949, -1949,  1151,
    1539,   502,   502,  3284, -1950, -1950,  3285,   502,  2463,  1178,
     502, -1952, -1952,  1149,  1143,   502,  1155,   502,   502,   622,
    2759,  3329,   622,   502,  3258,   628,  3370,   622,  2478,  3258,
     622,  2590,  2591,  1341,  2223,   622,  2760,  1375,  1376,  1156,
     502,   502,  1173,  1179,  1177,   502,  1181,   502, -1953, -1953,
     502,   628,  2555,  1949,   628,  1350,  1309,  1945,  1310,   628,
    1946,  1151,   628,    86,  1947,  1314,  1950,   628,  1316,  1261,
   -1954, -1954,  2464,   502,  1317,   502, -1955, -1955,  1329,  2062,
     807,   502,   502,   502,   502,   502,   502,   502,   502,  1261,
    1327,  1393,  1330,   502,   502,  2161, -1956, -1956,   502,  2834,
    1335,  2165,   502, -1957, -1957,   502,   502,   502,   502,   502,
     502,   502,   502,   502,  1151,  1339,   502, -1958, -1958,  1342,
    2097,   506,  1343,   502,  1345,  1302,   700, -1959, -1959, -1961,
   -1961,  3070, -1962, -1962,  1346,  2761, -1963, -1963,  1147, -1964,
   -1964,  1358,   630,  1363,  2762,  1364,   502,   506,  1147,  2985,
     506,  1366,  1379,  1380,  1395,   506,  1394,   523,   506,   524,
   -1965, -1965,  1399,   506, -1966, -1966,  1402,  1999,   630,   502,
    1403,   630, -1968, -1968,  1426,  3183,   630,   519,  2778,   630,
     502,   502,   526,  1425,   630,   527,  1431,  1095, -1970, -1970,
   -1972, -1972,  2116,  2117,  2136,  1749,  1750,  1458,  1149,  2825,
    1471,    80, -1125,  1473,  2182,  1144,  1832,  1474,  1149,  1377,
    1378,  1145,   -57,  1968,  1969,  1970,   807,  1971,  1972,  1973,
    1974,  1975,  1976,  3034,  1481,  1261,   -57,  1261,  1150,  3347,
    1487,   -57,  1488,  3349,  -176,  -176,  1379,  1380,  2183,  1495,
     520,  -180,  -180,  -179,  -179,  2981,  2982,  3356,  3357,  3382,
    3383,  1614,  1616,   679,  1494,   823,  1500,  1504,  1506,  2597,
    1514,  1515,  1517,   723,  -348,   502,  -355,   730,  2952,  1302,
     731,  1522,   502,   502,    45,  -201,  1341,   621,  -202,  -345,
     621,  -346,   -57,  1526,  -349,   621,  1527,  -347,   621,  3390,
    1531,  1350,   521,   621,  1540,  1550,  1994,  1596,   920,  1151,
    1598,  1600,   -57,  2149,  1612,  1624,  1302,    80,   997,  1151,
    1623,  1861,  1146,   502,  1633,  1862,  1863,  1628,  2242,  1864,
    1865,  1866,  1634,  1122,  3183,  1124,   807,  2464,  1669,  1671,
    1673,  1684,  1702,  1703,  1709,  1556,  2669,  1710,  1557,  1704,
    1261,  1711,  1558,  1559,  1723,  1715,  1722,  1302,   502,   -57,
    1727,  1737,  1742,   939,  1751,  1755,   919,  1763,   -57,  1777,
    1764,  1773,  1776,  1779,  1780,  2019,  3183,   522,  2366,  1782,
    1783,  1789,   807,  1567,  2369,  1790,   502,   502,  2728,   502,
   -1973,   998,  1797,  1799,   807,   502,   502,   502,   502,   502,
     502,  2068,  2884,   502,   502,   502,   502,   502,   502,   502,
     502,   502,   502,  2851,  1800,  1569,  2859,  1807,   502,   502,
    2875,  1808,   502,  2262,   807,   523,  3183,   524,  1811,   502,
    1812,   807,  1825,  1817,  3148,  1850,  1813,  1852,  1855,  1900,
    1814,  1110,  1853,  1858,   525,  1881,   698,  1890,  1897,  1918,
     526,   502,   823,   527,   502,  1889,   502,  1921,  1927,  3013,
     502,  1367,  1368,  1930,  1932,  1931,   622,   807,  1937,  2304,
    1557,   807,   622,   919,  1940,  1302,  1147,   807,  2409,  1984,
    1989,  2310,  1987,  1953,  1990,  2241,   502,  1992,  1991,  2011,
    1319,  1321,  1324,  1326,  2018,  2029,  2030,  2032,   628,  2056,
    2057,  2063,   690,  2075,   628,    21,  2076,  2080,  2096, -1973,
    2093,  2338,   691,  2106,   -57,  3093,  -126,   502,  2343,  1539,
     814,  -126,   502,   502,  2105,  2107, -1973,  1868,   682,  3238,
    2108, -1973,  2189,  2600,  2109,  2132,  1149,   816,  1369,  1370,
    2110,  2127,  2131,  2135,  2138,  2143,   502,   502,  2142,  2144,
    3199,   502,   692,  2207,  2375,   823,  2216,  2211,  2375,  1820,
    2225,  1821,  2227,  2228,  2381,   502,  2190,  2244,   502, -1973,
     502,  2229,   691,  2226,  2243,  2246,  2249,  2250,  1351,  2253,
     717,  2251,    80,  1107,   718,  2254,   502,  1261,  3022,  3023,
    2257,  2258,  -126,   502,   506,  1869,   502,  2281,  2259,  2260,
     506,  2261,  1371,  1372,  1373,  1374,  1375,  1376,   622,  2294,
    1377,  1378,  2269,   502,  2302,   630,  1886,  2270,  1861,  2332,
    1885,   630,  1578,  2339,  1418,   622,   502,   823,  2363,  2340,
    2296,  2341,  2345,  2351,  2352,  2368,  2930,  1151,  2370,  -126,
     628,  2382,  2383,   502,   502,    25,    26,    27,   692,  2390,
    2391,  2392,   823,  2393,  2394,  2404,   997,   628,  2406,  1861,
     502,  2411,   502,  1862,  1863,  2418,  2427,  1864,  1865,  1866,
    2428,   502,   997,  2433,  2435,  1861,  2434,  2446,  2447,  1862,
    1863,  2451,   -57,  1864,  1865,  1866,  2452,  2449,  2457,  1261,
    1261,  1261,  2459,  1447,  1730,  2460,   -57,   817,  -182,  2471,
    2470,   -57,  2473,  1556,  2474,  2477,  1557,  2482,    32,   823,
    1558,  1559,  2481,  2483,  3220,  2485,  2825,  2487,  2488, -1973,
    2491,  1379,  1380,  2510,   621,  2512,  2525,   502,  2542,  2543,
     621,  1418,  2531,  1302,  2532,   682,   506,  2533,  2544,  2553,
    2999,  1567,  2554,  2558,  2568,    37,  2569,  2572, -1973,  2580,
    2573,  2585,   -57,   506,  2587,  2576,  2595,   630,   814,  1765,
    2596,  2604,  1767,  2612,   807,  2615,  1768,  1769,  2618,  2621,
    2635,  2622,   -57,  1569,   630,   816,  2636,  2623,    39,  2647,
    2664,  2648,   502,  2624,  2654,  2674,  2658,  2672,  2675,    42,
    2693,   819,  2678,  2687,   693,  2702,  2688,  2721,  2725,  2733,
    1870,  1871,  1872,    43,  1873,  1874,  1875,  1876,  1877,  1878,
    2695,  2739,  2699,  2766,  2719,  2746,   823,  2782,  2858,   -57,
     919,  1537,  2867,  2723, -1973,  2740,  1261,    44,   -57,  2848,
    2871,  1585,  1586,  1587,  1588,  1589,  1590,  1381,  1382,  2019,
    2849,    45,  1867,  2850,  2854,  2880,  2866,  2141,  2862,  3137,
     823,  2149,  2863,  2882,  2210,  2429,  2889,  2150,  2130,  2153,
    2890,  2915,  2164,  2921,   502,  1868,   621, -1973,  2168,  2895,
    2170,  2917,  3220,  2926,  2933,  2932,  2953,  2960,  2963,  1157,
    2965,  1868,  2177,   621, -1973,  2972,  2974,  2180,  3322, -1973,
    2978,  2185,  2186,  2187,  2188,  2979,  2192,  2193,  1685,  1158,
    2980,  2690,  2988,   502,  2992,  2986,   682,   920,   628,  2987,
    2996,  1712,  2997,  2998,  3006,  3009,  3011,  3012,   502,  3031,
    3016,  3029,   502,   502,   823,  -771, -1941, -1973,  3030,   502,
   -1942,  3028,  1736,  1869,  3039,   817, -1943,  3041,   682,   502,
   -1944, -1945,   502,  1159,   502, -1946, -1947,   814, -1948,  1869,
   -1949,   807,   502,  3032,  2519,   502,   502,  3059,  3045,  3046,
     502,   502, -1950,  3061,   816,  3201,  1994,   502, -1952, -1953,
    3063,  2825,  3067, -1954,   -57, -1955, -1956, -1957, -1958, -1959,
    1578,  3064,   502, -1961, -1962, -1963, -1964, -1965, -1966,  2727,
   -1967, -1968,   502,  3073, -1969, -1970,  1949, -1971,  3198,  2547,
    1945,  3074,  2711,  1946,   506, -1972,    86,  1947,  -772,  1950,
    3077,  3200,   502,  3079,  3203,  3081,  2560,  3091,  3087,  3085,
    3088,  3188,  3092,  3190,  3094,   630,  3114,  3099,   681,   819,
    3115,  3119,  3122,  3125,  3127,  3139,  1160,  3140,  3147,  3149,
     717,  3155,  3156,  2645,   718,  3157,  3170,  3171,  3172,  3185,
    3186,  1261,  3189,  3192,  2829,  1261,  3195,  1261,  3193,  3286,
    3282,  3202,   823,    10,  3207,  3227,  3005,  1757,   502,  3231,
     502,  3233,  1772,  3234,  3243,  3249,  3250, -1973,  1418,  3237,
    3275,  3251,  3255,  3260,  2956,  1161,  2602,  3262,  2603,  3264,
    3272,  3267,  2608,  1162,  2611,  3268,  3273,  3279,  3274,  3281,
    3283,  1765,  3288,  2856,  1767,  1163,  3293,  3299,  1768,  1769,
    3300,  3270,  3301,  3306,  3307,  3308,  3327,  3316,  3318,   814,
    3320,  3337,  3361,  3321,   817,  3340,   807,  3342,  3358,  2876,
    3338,  3375,  2878,  3380,    21,  3339,   816,  1164,  1870,  1871,
    1872,  2831,  1873,  1874,  1875,  1876,  1877,  1878,   502,  3386,
     682,   807,  1480,  3391,  1870,  1871,  1872,  3400,  1873,  1874,
    1875,  1876,  1877,  1878,  3401,  3019,  2169,  2508,   502,   502,
    2785,  1109,  2072,   502,   537,  2550,   502,  2781,   929,  2601,
    3068,  3297, -1973,  2853,  3368,   502,  3135,  3336,  1166,  1585,
    1586,  1587,  1588,  1589,  1590,  3343,  3362,   502,  1694,  1537,
    3169,  2490,   502,   502,   961,    21,  2515,   502,   807,   962,
    3334,  1167,   502,  2883,  2870,   502,   502,  2750,   819,   682,
     502,  1302,  3341,  2486,   502,   719,  2835,  3332,   502,  2715,
    1169,  1537,   501,   513,  1820,   502,  1916,   533,  1762,  1815,
     622,  1793,   533,  3310,  2283,  1827,   619,  3253,   633,   633,
      80,  3214,  2714,   637,   533,   645,    80,  3314,   645,  3278,
    2700,   663,   667,  3384,  1625,   667,   963,  2476,   533,   533,
    2462,  2134,   628,   820,    25,    26,    27,  2626,   814,   502,
    1478,  1666,  2726,  3319,  1665,  2102,   997,   502,  1479,  1861,
    2472,  3263,  3191,  1862,  1863,   816,   817,  1864,  1865,  1866,
     961,  2133,   623,  1670,  2448,   962,   502,   814,   814,   619,
     619,  2924,  2826,  3096,  2670,   807,  2645,   823,   950,  2373,
    1445,   663,   936,   814,   816,   816,   667,   533,   667,   667,
     667,  2620,  2619,  2650,  3141,   964,  1434,    32,  1436,  2291,
     816,  2547,  1440,  3335,  3266,    25,    26,    27,  1806,  2829,
    3265,  2402,  1441,  2465,  2656,  2386,  2425,    80,  2423,  1909,
    2666,  2071,   963,   706,  2403,  2380,  2964,     0,   506,     0,
       0,   965,     0,     0,    37,  2070,     0,  2073,     0,     0,
       0,     0,     0,    80,     0,     0,    80,   966,  2082,   630,
     819,   502,     0,     0,    38,     0,     0,   967,     0,     0,
    2575,     0,  3021,     0,     0,  1157,     0,    39,    32,     0,
       0,     0,   822,     0,     0,   682,  3051,     0,    42,   919,
       0,     0,   502,   807,     0,  1158,  2119,     0,     0,   968,
       0,   964,    43,     0,     0,     0,  1603,     0,   502,     0,
       0,     0,     0,  1537,     0,    37,     0,     0,     0,     0,
    1135,     0,     0,     0,     0,   817,    44,     0,  1302,     0,
       0,     0,     0,     0,     0,   502,     0,   965,     0,  1159,
      45,     0,     0,     0,   969,     0,   502,   502,    39,     0,
     502,   970,   502,   966,   817,   817,     0,     0,     0,    42,
    2962,     0,     0,   967,  1453,  1868,     0,     0,   621,     0,
     817,     0,     0,    43,  1157,     0,     0,   502,     0,     0,
       0,   820,   681,     0,  2217,  2218,  2220,  2221,  2222,   814,
       0,   971,     0,     0,  1158,   968,     0,    44,     0,     0,
       0,   502,   997,     0,     0,  1861,   816,     0,   972,  1862,
    1863,    45,     0,  1864,  1865,  1866,     0,     0,     0,   819,
       0,     0,  2751,     0,     0,     0,     0,     0,  2752,     0,
    2943,  2829,  1160,  1869,     0,     0,     0,     0,  1159,     0,
     969,  2753,     0,     0,     0,     0,     0,   970,   819,   819,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3152,  3153,     0,  2754,   819,  2755,   502,     0,     0,     0,
     502,     0,     0,     0,     0,     0,     0,   973,     0,     0,
     502,  1161,   502,     0,   502,     0,     0,   971,   502,  1162,
     502,     0,   502,     0,     0,     0,     0,     0,     0,     0,
       0,  1163,   502,     0,   972,  2774,     0,   502,     0,   502,
       0,  2730,  2731,     0,   628,     0,     0,   502,  2831,     0,
     822,     0,     0,     0,  3047,   814,     0,     0,     0,     0,
    1261,  1160,     0,  1164,  3211,   502,  3213,  2358,   997,  2783,
      80,  1861,   816,     0,     0,  1862,  1863,  1418,     0, -1973,
   -1973, -1973,  2756,     0,  2836,  2837,  2838,  2839,  2840,  2841,
    2842,  2843,  2844,  2845,     0,     0,   817,     0,     0,     0,
     820,     0,     0,   973,     0,  3245,     0,     0,  1537,     0,
    1161,     0,   502,     0,  1166,     0,     0,     0,  1162,     0,
       0,  3248,   502,     0,     0,  3252,     0,     0,     0,     0,
    1163,     0,     0,     0,     0,   502,     0,  1167,     0,     0,
     506,  1868,     0,   667,     0,     0,     0,   667,  2757,   502,
     667,  3112,     0,  2758,     0,     0,  1169,   533,     0,     0,
       0,   630,  1164,     0,     0,   814,     0,   502,  1870,  1871,
    1872,     0,  1873,  1874,  1875,  1876,  1877,  1878,     0,     0,
       0,     0,   816,     0,     0,   826,   533,   533,     0,     0,
     819,   502,     0,   628,     0,     0,     0,     0,     0,     0,
       0,  2759,     0,     0,     0,     0,     0,   502,     0,  1869,
       0,   814,     0,  1166,     0,     0,  2829,  2760,  1261,  2826,
       0,     0,     0,   814,   927,   513,   633,     0,   816,     0,
       0,   501,   817,   667,     0,   628,  1167,     0,     0,   822,
     816,   502,   619,     0,    80,    80,   954,   954,     0,  3344,
       0,   954,   977,   814,     0,  1169,   502,   502,   502,     0,
     814,     0,     0,     0,     0,   645,   645,   645,     0,     0,
     816,     0,   820,     0,     0,  2707,  3359,   816,     0,   645,
     645,     0,   645,   502,     0,   628,     0,     0,     0,   506,
       0,     0,     0,     0,     0,   667,   814,     0,     0,     0,
     814,   533,  3050,  2831,     0,     0,   814,     0,     0,     0,
     630,   667,  3000,   816,   667,     0,  2761,   816,    80,     0,
      80,     0,    21,   816,   502,  2762,   819,     0,     0,    21,
       0,   506,     0,     0,     0,     0,     0,     0,   534,     0,
    3239,     0,   817,   534,     0,  1869,     0,  1367,  1368,     0,
       0,     0,   630,     0,     0,   534,     0,     0,     0,    80,
     667,   667,   667,   667,     0,   997,     0,     0,  1861,   534,
     534,  2551,  1862,  1863,     0,    80,  1864,  1865,  1866,    80,
       0,   506,     0,  2564,  2565,  2567,     0,     0,   817,     0,
       0,     0,     0,  2944,     0,     0,     0,     0,  2578,     0,
     817,  2581,   630,  1859,  1860,     0,  2586,     0,     0,  1880,
       0,   822,     0,     0,  1870,  1871,  1872,     0,  1873,  1874,
    1875,  1876,  1877,  1878,  1369,  1370,     0,     0,   534,     0,
     817,   820,     0,     0,     0,     0,   819,   817,     0,     0,
    1556,     0,     0,  1557,     0,     0,     0,  1558,  1559,  1560,
    1561,  1562,  1563,  1564,     0,     0,     0,     0,     0,  2708,
     820,   820,    25,    26,    27,     0,     0,     0,  1565,    25,
      26,    27,     0,   817,  2826,     0,   820,   817,  1567,     0,
       0,     0,   819,   817,     0,  1568,     0,     0,  1371,  1372,
    1373,  1374,  1375,  1376,   819,     0,  1377,  1378,     0,     0,
       0,     0,     0,    80,     0,     0,     0,     0,     0,     0,
    1569,  3112,     0,     0,  2632,  2633,  2634,     0,     0,     0,
       0,     0,     0,     0,   819,    32,     0,     0,     0,     0,
      80,   819,    32,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1973, -1973, -1973,     0,  1873,  1874,  1875,  1876,  1877,  1878,
     954,   977,    37,   667,     0,     0,  1452,   819,  3138,    37,
     822,   819,   954,   954,  1868,     0,     0,   819,   533,     0,
       0,     0,     0,     0,   619,     0,     0,     0,  3145,  3146,
       0,   619,     0,   814,     0,    39,     0,     0,     0,   822,
     822,   533,    39,     0,  1570,     0,    42,  1379,  1380,  3158,
     816,     0,     0,    42,     0,   822,     0,  1516,     0,     0,
      43,  1571,     0,     0,     0,     0,  1572,    43,  2722,     0,
       0,     0,  1423,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1869,     0,    44,     0,     0,     0,     0,  1573,
    1574,    44,     0,     0,     0,     0,     0,     0,    45,     0,
       0,     0,     0,     0,  1575,  2709,     0,   533,     0,     0,
       0,     0,   820,     0,     0,     0,     0,     0,     0,     0,
       0,  1556,     0,     0,  1557,     0,     0,     0,  1558,  1559,
    1423,     0,  1562,  1563,  1564,     0,     0,     0,     0,     0,
    1576,     0,     0,  1577,     0,     0,     0,     0,     0,  1565,
       0,     0,  1617,     0,  2861,  1619,     0,  1578,     0,  1567,
    1579,     0,     0,  1381,  1382,     0,  1568,     0,     0,   533,
     533,     0,     0,     0,   997,     0,   667,  1861,     0,     0,
       0,  1862,  1863,  1383,     0,  1864,  1865,  1866,     0,     0,
       0,  1569,     0,     0,     0,     0,     0,     0,  1452,     0,
       0,     0,     0,  1554,     0,     0,     0,     0,   667,  1693,
     817,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     814,   667,     0,  2897,  2898,  2899,  2900,     0,     0,     0,
    1423,     0,  1423,  1423,     0,     0,     0,   816,   667,     0,
       0,     0,   667,     0,     0,     0,  1739,     0,   820,     0,
       0,   822,     0,     0,  1580,  2311,  2312,  2313,  2314,  2315,
    2316,     0,     0,  2320,  2321,  2322,  2323,  2324,  2325,  2326,
    2327,  2328,  2329,     0,     0,     0,     0,     0,  3328,     0,
       0,     0,     0,     0,     0,  1570,     0,  1870,  1871,  1872,
       0,  1873,  1874,  1875,  1876,  1877,  1878,     0,   534,     0,
       0,     0,  1571,     0,   819,  1423,     0,  1572,  1423,  1423,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   814,     0,     0,     0,   534,   534,     0,
    1573,  1574,     0,     0,     0,     0,     0,     0,     0,     0,
     816,     0,     0,     0,     0,  1575,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3007,     0,     0,   820,  1581,
       0,     0,  1582,  1583,  1584,     0,  1585,  1586,  1587,  1588,
    1589,  1590,     0,     0,     0,  1752,     0,   667,     0,     0,
       0,  1576,   667, -1973,  1577,  2389,     0,   822,     0,     0,
       0,     0,     0,  1786,     0,   814,     0,   817,  1578,     0,
       0,  1579,     0,     0,   820,     0,  2407,  2408,     0,     0,
       0,     0,   816,     0,     0,     0,   820,     0,     0,  1157,
     814,     0,     0,  1803,     0,     0,     0,     0,  1803,     0,
       0,     0,     0,    21,     0,     0,     0,   816,     0,  1158,
       0,     0,   534,     0,     0,     0,   820,     0,     0,     0,
       0,  1869,  1455,   820,     0,     0,     0,     0,     0,   826,
       0,     0,   826,     0,   533,   533,     0,   533,   826,     0,
       0,     0,     0,     0,     0,     0,     0,   814,     0,     0,
       0,     0,     0,  1159,  2772,     0,     0,     0,     0,   820,
    1792,   819,  2773,   820,   816,  1580,     0,   822,     0,   820,
     817,  1801,     0,  1802,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1809,     0,  1452,  1452,     0,     0,     0,
       0,  1452,     0,   501,     0,     0,     0,     0,     0,     0,
    1810,     0,     0,     0,     0,     0,   954,     0,   533,  1904,
       0,     0,     0,   822,     0,     0,   667,     0,     0,   619,
    2774,     0,   619,     0,     0,   822,     0,   619,     0,     0,
     619,  1829,  1831,  3212,     0,   619,     0,   533,     0,   533,
       0,     0,   817,    25,    26,    27,  1160,     0,     0,     0,
       0,     0,     0,     0,   814,   822,     0,     0,     0,     0,
       0,  1977,   822,     0,   819,     0,  1983,   817,     0,     0,
    1581,   816,     0,  1582,  1583,  1584,     0,  1585,  1586,  1587,
    1588,  1589,  1590,     0,     0,     0,     0,     0,   814,     0,
       0,     0,     0,     0,     0,  1161,     0,     0,   822,     0,
       0,     0,   822,  1162,   826,   816,    32,     0,   822,  3154,
       0,     0,     0,     0,  1455,  1163,     0,  2775,     0,     0,
       0,     0,     0,     0,   817,     0,  1870,  1871,  1872,  3178,
    1873,  1874,  1875,  1876,  1877,  1878,   819,     0,     0,     0,
       0,     0,     0,    37,     0,     0,     0,  1164,     0,     0,
       0,     0,     0,  2069,     0,   667,     0,   667,     0,     0,
       0,   819,   814,     0,     0,     0,     0,     0,   667,  2085,
       0,     0,     0,     0,     0,     0,    39,     0,     0,   816,
       0,  1452,     0,     0,     0,     0,     0,    42,     0,  1472,
    3218,     0,     0,     0,     0,     0,     0,     0,  1166,     0,
       0,    43,     0,     0,     0,     0,   667, -1705,   533,     0,
       0,     0,  1503,     0,     0, -1707,     0,     0,   819,     0,
    3244,  1167,  1693,   533,     0,    44,     0,     0,     0,     0,
       0,   817,     0,   533,  2151,   533,  2155,     0,   533,    45,
    1169,     0,  2776,     0,   533,  2777,   533,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   820,   826,   533,     0,
       0,     0,   826,   533,     0,   817,     0,   533,   533,   533,
     533,     0,   533,   533,  2114,  2114,     0,     0,  1542,     0,
       0,     0,     0,     0,     0,  2680,  2681,     0,     0,     0,
       0,     0,     0,     0,   667,   667,   667,   667,   667,     0,
     814,     0,     0,     0,     0, -1705,     0,     0,     0,     0,
       0,     0,  2231, -1707,     0,     0,     0,   816,     0,     0,
       0,     0,   961,     0,     0,   819,     0,   962,     0,     0,
       0,     0,     0,  1423,     0,     0,     0,     0,     0,   817,
     534,   534,     0,  1423,     0,     0,  1423,     0,     0,     0,
   -1705,     0,  1704,     0,     0,     0,     0,     0, -1707,   819,
       0,     0,     0,     0, -1705,     0,     0,     0,     0, -1705,
       0,     0, -1707,     0, -1705,     0,     0, -1707,     0,     0,
       0,     0, -1707, -1705,   963,     0,     0,     0, -1705,     0,
       0, -1707,     0,     0,     0,   822, -1707,  1452,  1452,  1452,
    1452,  1452,  1452,     0,     0,  1452,  1452,  1452,  1452,  1452,
    1452,  1452,  1452,  1452,  1452,     0,     0,     0,     0,     0,
   -1705,     0,     0,     0,  2266,  2268,     0,     0, -1707,     0,
       0,  1455,  1455,   819,     0,   533,     0,  1455,     0,     0,
   -1705,     0,     0,   820,     0,     0,     0,   667, -1707,  1432,
    1423,   632,     0,   964,     0,     0,   619,     0,     0,     0,
       0,  1132,   619,     0,     0,     0,     0,   533,     0,     0,
       0,     0,   533,     0,     0,     0,     0,   817,  2888,     0,
       0,     0,     0,     0,     0,     0,     0, -1705,     0,   965,
   -1705,     0,     0,     0,     0, -1707, -1705,     0, -1707,     0,
       0,     0,     0,     0, -1707,   966,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   967,     0,   533,     0,     0,
       0,  2399,     0,     0,     0,     0,   533,     0,     0,     0,
       0,     0,     0,     0,     0, -1705,     0,     0,     0,     0,
       0,     0,     0, -1707,     0,     0,   820,   968,  1452,  1452,
       0,     0,     0,  1367,  1368,   814,     0,  1423, -1705,     0,
       0,     0,     0,     0,     0,  1977, -1707,     0,  1133,     0,
       0,   819,   816,     0,     0,     0,     0,     0,     0,  2061,
       0,     0,   822,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   969,     0,     0,     0,     0,     0,   619,   970,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     533,     0,     0,     0,   669,   619,     0,  3001,   820,  2085,
       0,     0,   669,     0,     0,     0,     0,  1455,     0,     0,
    1369,  1370,     0,     0,     0,   534,   534,     0,   534,   971,
       0,     0, -1705,   820,     0,     0,     0,     0, -1722,     0,
   -1707,     0, -1705,     0,     0,     0,   972,     0,     0,   533,
   -1707,     0,  1452,     0,     0,   533,     0,     0,     0, -1705,
       0, -1705, -1705,     0,     0,     0,     0, -1707,     0, -1707,
   -1707,  1752,     0,     0,  2442,   822,     0,     0,     0,     0,
       0,     0,     0,     0,  1371,  1372,  1373,  1374,  1375,  1376,
     820,     0,  1377,  1378,     0,     0,     0,     0, -1705,   534,
       0, -1705, -1705, -1705,     0,     0, -1707,  2468,  2468, -1707,
   -1707, -1707,     0,     0,     0,   973,     0,     0,     0,     0,
    1134,     0,   817,     0,     0,     0,     0,     0,  1934,     0,
    1938,     0,     0,     0,     0,  1752, -1722,     0,     0,     0,
       0,   667,  3069,     0,     0,     0,     0,   822,     0,     0,
       0,     0,  1752,   667,   667,   667,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   533,     0,   667,     0,
       0,   667,   822,     0,     0,     0,   667,     0,     0,     0,
       0, -1722,     0,     0,     0,     0,     0,     0,     0,  2593,
       0,     0,     0,     0,     0, -1722,     0,   820,     0,     0,
   -1722,     0,     0,  1379,  1380, -1722,   826,     0,     0,     0,
       0,     0,     0,     0, -1722,     0,   819,     0,     0, -1722,
       0,     0,     0,     0,  1752,  1752,     0,  1752,     0,   822,
       0,   820,     0,  1455,  1455,  1455,  1455,  1455,  1455,     0,
       0,  1455,  1455,  1455,  1455,  1455,  1455,  1455,  1455,  1455,
    1455, -1722,     0,     0,     0,     0,   501,     0,     0,     0,
       0,     0,     0,     0,  2589,     0,     0,     0,     0,     0,
       0, -1722,     0,     0,     0,     0,  2625,     0,     0,     0,
       0,     0,     0,     0,   667,   667,   667,     0,     0,     0,
       0,     0,     0,   533,     0,  1452,   533,     0,     0,   534,
       0,     0,   533,     0,     0,   820,     0,     0,     0,     0,
       0,     0,     0,     0,   534,     0,     0,  1977, -1722,  1381,
    1382, -1722,     0,     0,   534,     0,   534, -1722,     0,   534,
       0,     0,     0,     0,   961,   534,   822,   534,     0,   962,
       0,     0,     0,     0,     0,     0,     0,  1452,  1452,   534,
       0,     0,     0,     0,   534,     0,     0,     0,   534,   534,
     534,   534,     0,   534,   534,     0, -1722,     0,     0,     0,
     822,     0,     0,     0,     0,     0,  2704,     0,     0,     0,
       0,     0,  2085,     0,  1455,  1455,     0,     0,     0, -1722,
       0,     0,     0,     0,     0,  1454,   963,     0,   667,     0,
       0,     0,   533,     0,     0,     0,   533,   533,   533,     0,
       0,     0,  1752,  1693,  1752,     0,  1786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   533,     0,  2784,     0,     0,
    1057,  1057,     0,   820,   822,   669,     0,     0,     0,     0,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
       0,     0,     0,     0,     0,   964,  1836,     0,     0,     0,
       0,     0,     0, -1722,     0,     0,     0,     0,  2231,     0,
       0,     0,     0, -1722,   667,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1693,     0,   538,     0,  1455,     0,
   -1722,   965, -1722, -1722,     0,  1183,     0,     0,     0,  1304,
    1786,  1837,     0,     0,     0,     0,     0,   966,     0,     0,
       0,     0,     0,     0,     0,     0,   534,   967,  1423,  1752,
    1838,     0,     0,     0,     0,     0,     0,     0,     0, -1722,
    1452,     0, -1722, -1722, -1722,     0,   533,     0,  1839,     0,
       0,   539,  1840,   667,   667,   667,   667,     0,  2372,   968,
       0,     0,     0,  1938,     0,  1452,     0,   540,  1452,     0,
       0,     0,   533,   826,  1841,     0,     0,  1842,  1662,     0,
    1923,     0,   822,  1556,     0,     0,  1557,  1454,  2934,     0,
    1558,  1559,     0,  1843, -1973, -1973, -1973,     0,     0,     0,
       0,     0,     0,     0,   969,     0,     0,     0,   534,     0,
       0,   970,     0,     0,   541,     0,     0,  1542,  2957,     0,
     619,  1567,  1406,     0,   542,     0,     0,     0,  1568,     0,
       0,     0,     0,     0,  2969,     0,   543,     0,  2085,     0,
       0,   544,     0,     0,  1977,     0,     0,     0,     0,     0,
       0,   971,     0,  1569,     0,     0,     0,     0,  1693,     0,
       0,     0,     0,     0,  1752,     0,     0,     0,   972,     0,
     545,     0,     0,     0,     0,     0,     0,   826,   533,  1452,
       0,     0,     0,     0,  1844,   667,     0,     0,     0,     0,
       0,     0,  1845,     0,     0,     0,     0,     0,   820,     0,
       0,   534,  3020,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   546,  1846,     0,     0,   547,     0,  1429,
       0,     0,     0,     0,     0,  1446,     0,     0,  1448,     0,
       0,  1459,  1462,  1467,  1470,     0,     0,   973,     0,     0,
    1847,     0,  1924,     0,     0,     0,     0,  1570,     0,     0,
     534,     0,     0,     0,     0,     0,  2480,     0,     0,     0,
       0,     0,     0,     0,  1571,     0,     0,     0,     0,  1572,
       0,     0,  1304,     0,     0,     0,     0,     0,  1423,  1752,
       0,     0,     0,  1423,   548,     0,     0,     0,     0,     0,
       0,  2231,  1520,  1455,  1455,     0,     0,     0,     0,   549,
       0,     0,     0,     0,     0,  3065,     0,  1575,     0,     0,
    1525,     0,  1556,     0,  1452,  1557,     0,     0,     0,  1558,
    1559,  1528,  1529,  1530,     0,  1534,  1538,     0,     0,     0,
    1829,  1831,   550,     0,     0,   551,     0,   822,     0,     0,
    3082,     0,     0,     0,   552,     0,   533,   553,     0,     0,
    1567,     0,     0,     0,   533,     0,  1599, -1973,     0,     0,
    1578,     0,     0,     0,     0,   554,     0,   534,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   555,
       0,  3109,  1569,     0,     0,     0,   556,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   557,     0,     0,     0,
       0,     0,   558,   533,  1454,  1454,     0,  1640,   533,     0,
    1454,  1656,  1661,  1556,     0,     0,  1557,     0,     0,     0,
    1558,  1559,  1057,  1057,  1562,  1563,  1564,     0,     0,   559,
       0,     0,     0,     0,   533,     0,     0,     0,     0,     0,
       0,  1565,     0,     0,     0,  2419,     0,     0,     0,     0,
       0,  1567,     0,     0,   533,   533,     0,  1580,  1568,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   667,
       0,  1693,     0,     0,     0,   533, -1973,     0,     0,     0,
       0,     0,     0,  1569,     0,     0,  1455,     0,     0,   667,
       0,     0,  3180, -1973,   534,     0,     0,   534, -1973,     0,
       0,     0,     0,  1934,     0,     0,     0,     0,     0,     0,
       0,  1455,  1452,     0,     0,     0,   533,   954,     0,     0,
     954,     0,     0,     0,  1829,  1831,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1423, -1973,     0,     0,     0,
       0,     0,     0,  2969,     0,     0,     0,     0,     0,     0,
     667,     0,     0,     0,  1304,     0,     0,     0,     0,     0,
       0,     0,  1581,  1304,     0, -1973, -1973, -1973,     0,  1585,
    1586,  1587,  1588,  1589,  1590,     0,     0,  1570,     0,     0,
     667,     0,     0,     0,     0,     0,     0,  1304,     0,  1578,
       0,     0,     0,     0,  1571,     0,     0,     0,     0,  1572,
    2104,     0,     0,   534,     0,     0,     0,   534,   534,   534,
       0,     0,     0,     0,     0,     0,     0,     0,  3082,     0,
       0,     0,  1573,  1574,     0,  1455,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   534,  1575,     0,     0,
       0,  3180,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   534,   534,   534,   534,   534,   534,   534,   534,   534,
     534,     0,     0,     0,     0,     0,     0,     0,  1693,     0,
       0,     0,     0,  1576,     0,     0,  1577,     0,     0,     0,
     826,   826,     0,  3180,   826,     0, -1973,     0,     0,     0,
    1578,     0,  1904,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   533,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1851,
       0,     0,     0,     0,     0,     0,  1693,     0,     0,     0,
       0,     0,     0,  3180,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1934,     0,     0,
       0,  1467,     0,  1467,  1467,     0,     0,     0,     0,     0,
    1455,     0,     0,     0,     0,     0,  1057,  1057,     0,     0,
       0,   826,     0,  2372,     0,     0,     0,     0,     0,     0,
       0,     0,  1057,     0,     0,     0,  2085,  1580,     0,     0,
    1423, -1973,     0,     0,     0,     0,     0,     0,  1585,  1586,
    1587,  1588,  1589,  1590,     0,     0,     0,     0,     0,     0,
    1956,     0,  1957,     0,     0,     0,  1454,  1454,  1454,  1454,
    1454,  1454,     0,     0,  1454,  1454,  1454,  1454,  1454,  1454,
    1454,  1454,  1454,  1454,     0,     0,     0,     0,     0,     0,
    1996,     0,     0,     0,     0,     0,  2000,  2001,  2002,  2003,
    2004,  2005,  2006,  2007,     0,     0,     0,     0,  2016,  2017,
       0,     0,     0,  2028,     0,     0,     0,  2031,     0,     0,
    2039,  2040,  2041,  2042,  2043,  2044,  2045,  2046,  2047,   534,
       0,  2048,     0,     0,     0,     0,     0,     0,  1057,     0,
    1304,     0,  1581,     0,     0,  1582,  1583,  1584,     0,  1585,
    1586,  1587,  1588,  1589,  1590,     0,     0,     0,     0,     0,
       0,  2074,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1456,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1529,  1530,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1455,     0,
       0,     0,     0,     0,     0,     0,     0,  1454,  1454,     0,
       0,     0,     0,     0,     0,     0,  1556,     0,     0,  1557,
       0,     0,     0,  1558,  1559,  1560,  1561,  1562,  1563,  1564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1565,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1567,     0,     0,     0,     0,     0,
       0,  1568,     0,     0,     0,     0,     0,     0,     0,     0,
    2195,     0,     0,     0,  1304,     0,     0,  2205,  2206,  1593,
       0,     0,     0,     0,     0,     0,  1569,  3090,     0,     0,
       0,     0,     0,     0,     0,  2372,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1556,
       0,  1304,  1557,     0,     0,     0,  1558,  1559,     0,     0,
       0,  1454,  1593,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   534,     0,     0,  1567,     0,   534,
       0,     0,  1406,  2284, -1973,  1456,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   534,     0,     0,     0,  1569,
    1570,  2306,  2307,     0,  2308,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   534,   534,  1571,     0,     0,
       0,   -42,  1572,     0,     0,  1593,     0,     0,     0,     0,
       0,     0,     0,  2334,  2335,     0,   534,  2074,     0,     0,
       0,     0,     0,     1,     0,  1573,  1574,     0,     0,     0,
       0,     0,     0,     2,     0,     3,     4,     0,     0,     0,
    1575,     0,  2679,     0,     0,     0,  2362,     0,     5,     0,
       0,  2367,     0,     6,     0,     0,     0,   534,     0,     0,
       0,     0,     7,     0,     0,     0,     0,     0,     0,     0,
    1304,     0,     0, -1973,     8,     0,  1576,     0,     0,  1577,
       0,  2384,     0,     0,     0,     9,     0,     0,     0,     0,
   -1973,     0,     0,  1578,     0, -1973,  1579,    10,     0,    11,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      12,     0,  2397,     0,     0,     0,     0,  2400,  2401,     0,
       0,     0,     0,     0,    13,    14,  1593,     0,     0,     0,
       0,     0,     0, -1973,    15,     0,     0,     0,     0,     0,
      16,     0,     0,     0,     0,     0,     0,     0,    17,     0,
      18,    19,     0,     0,     0,     0,     0,     0,     0,  1556,
    2421,     0,  1557,  2424,    20,  2426,  1558,  1559,    21,     0,
    1562,  1563,  1564,     0,     0,     0,     0,     0,     0,     0,
       0,  2430,     0,     0,     0,     0,  1578,     0,     0,     0,
    1580,     0,     0,     0,    22,     0,     0,  1567,     0,     0,
       0,     0,     0,     0,  1568,     0,     0,     0,     0,     0,
      23,     0,     0,     0,     0,     0,  1454,  1454,     0,     0,
       0,  1640,     0,     0,     0,     0,     0,     0,  1593,  1569,
       0,     0,     0,     0,     0,     0,    24,     0,  1661,  2046,
       0,     0,     0,     0,     0,   534,     0,     0,     0,     0,
       0,  1593,     0,     0,     0,     0,     0,  1057,     0,     0,
       0,     0,     0,     0,     0,     0,  2484,     0,  1593,     0,
    1593,     0,  1456,  1456,     0,  1879,     0,     0,  1456,     0,
       0,  1593,     0, -1973,  1593,     0,     0,     0,     0,  1593,
       0,     0,  1593,     0,     0,  1581,     0,     0,  1582,  1583,
    1584,     0,  1585,  1586,  1587,  1588,  1589,  1590,    25,    26,
      27,     0,     0,     0,     0,  1854,    28,     0,     0,    29,
       0,     0,  1530,  1570,     0,     0,     0,     0,  1304,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1571,     0,  1593,     0,     0,  1572,     0,  1593,    30,     0,
    1593,  1593,  1593,     0,     0,     0,  1593,    31,     0,     0,
    1593,     0,     0,     0,     0,     0,     0,     0,  1573,  1574,
       0,    32,     0,     0,     0,     0,     0,  2584,    33,     0,
       0,     0,    34,  1575,     0,     0,     0,     0, -1973,     0,
       0,     0,    35,     0,     0,  1585,  1586,  1587,  1588,  1589,
    1590,     0,     0,     0,    36,     0,     0,     0,    37,  1454,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1576,
       0,  1593,  1577,     0,     0,     0,     0,     0,    38,     0,
       0,     0,     0,     0,  2918,     0,  1578,     0,     0,     0,
       0,    39,     0,     0,    40,     0,     0,    41,     0,     0,
       0,     0,    42,     0,     0,     0,     0,     0,  2936,     0,
       0,     0,  1593,     0,     0,     0,    43,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1593,     0,
       0,     0,     0,  1593,     0,     0,     0,     0,     0,     0,
      44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1879,     0,     0,     0,    45,     0,     0,   -42,     0,     0,
       0,     0,     0,  2653,     0,     0,     0,  2655,  1957,     0,
       0,     0,     0,     0,  2659,     0,     0,     0,     0,     0,
       0,     0,     0,  1580,  2668,     0,     0,  2671,     0,  2673,
       0,     0,     0,     0,     0,     0,     0,  2677,  1454,     0,
       0,     0,  1555,     0,     0,  2684,  2685,  1556,     0,     0,
    1557,     0,  2692,     0,  1558,  1559,  1560,  1561,  1562,  1563,
    1564,     0,     0,     0,     0,     0,     0,  2701,     0,     0,
       0,     0,     0,     0,     0,  1565,     0,  2716,     0,  1566,
       0,     0,     0,     0,     0,  1567,     0,     0,     0,     0,
       0,     0,  1568,     0,     0,     0,     0,  1057,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1569,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1581,     0,
       0,  1582,  1583,  1584,     0,  1585,  1586,  1587,  1588,  1589,
    1590,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2195,     0,  2195,     0,     0,     0,     0,
       0,     0,     0,  1593,     0,     0,     0,     0,     0,     0,
       0,  1879,  1879,  1454,  1456,  1456,  1456,  1456,  1456,  1456,
       0,     0,  1456,  1456,  1456,  1456,  1456,  1456,  1456,  1456,
    1456,  1456,  1879,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1570,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1571,     0,
       0,     0,     0,  1572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2913,  2914,     0,  1573,  1574,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1593,  1593,
    2931,  1575,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2935,     0,     0,     0,     0,  2937,  2938,     0,
       0,     0,  2939,     0,     0,     0,     0,  2942,     0,     0,
    2945,  2946,     0,     0,     0,  2195,  1304,  1576,  1593,  2954,
    1577,     0,  1593,  1593,  1593,  1593,  1593,  1593,  1593,  1593,
    1057,     0,     0,     0,  1578,  1456,  1456,  1579,  1593,  1593,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1593,     0,     0,  1593,     0,     0,     0,     0,     0,     0,
       0,  1593,  1593,  1593,  1593,  1593,  1593,  1593,  1593,  1593,
    1593,     0,     0,     0,  2995,     0,     0,     0,     0,     0,
       0,  3197,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1556,  1593,     0,  1557,     0,
       0,  3014,  1558,  1559,  1560,  1561,  1562,  1563,  1564,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1565,     0,     0,     0,  2663,     0,     0,
       0,  1580,     0,  1567,     0,     0,     0,     0,     0,     0,
    1568,     0,     0,     0,     0,     0,     0,     0,     0,  1456,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1569,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3043,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1593,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1593,  1593,     0,
       0,     0,     0,  1538,     0,     0,  1581,     0,     0,  1582,
    1583,  1584,     0,  1585,  1586,  1587,  1588,  1589,  1590,     0,
       0,     0,     0,  1304,  1556,     0,     0,  1557,     0,  1570,
    2397,  1558,  1559,     0,     0,     0,     0,     0,     0,     0,
       0,  3101,  3102,     0,     0,  3103,  1571,  1530,     0,     0,
       0,  1572,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1567,     0,     0,     0,     0,     0,     0, -1973,
       0,     0,  3121,     0,  1573,  1574,  1593,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1575,
       0,     0,     0,     0,  1569,     0,  3133,     0,  1593,  1593,
    1593,     0,     0,  1879,  1879,  1879,  1879,  1879,  1879,     0,
       0,     0,  1879,  1879,  1879,  1879,  1879,  1879,  1879,  1879,
    1879,  1879,     0,     0,     0,  1576,  1593,  1593,  1577,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1578,     0,     0,  1579,     0,     0,     0,     0,
       0,     0,     0,     0,  1593,     0,     0,  2682,     0,  1593,
       0,  3177,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1593,     0,     0,  2913,
       0,     0,     0,  3194,     0,     0,     0,  1057, -1973,  1593,
       0,     0,  1593,  1593,     0,     0,     0,  3204,     0,  1879,
    1879,     0,  2195,     0,  2195, -1973,     0,     0,     0,     0,
   -1973,     0,  1057,  1593,  1456,  1456,  1593,     0,  1593,     0,
       0,     0,  1593,     0,     0,  1556,     0,     0,  1557,     0,
    3229,     0,  1558,  1559,  1560,  1561,  1562,  1563,  1564,  1580,
       0,     0,     0,     0,     0,     0,     0,     0, -1973,     0,
       0,     0,     0,  1565,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1567,     0,     0,     0,     0,     0,     0,
    1568,     0,  1556,     0,     0,  1557,  1593,  3254,     0,  1558,
    1559,     0,     0,  1562,  1563,  1564,     0,  2913,     0,     0,
       0,     0,     0,     0,     0,  1569,     0,     0,     0,     0,
    1057,  1578,     0,     0,     0,     0,     0,     0,     0,     0,
    1567,     0,     0,     0,     0,     0,     0,  1568,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3298,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1569,     0,  1581,     0,     0,  1582,  1583,  1584,
       0,  1585,  1586,  1587,  1588,  1589,  1590,     0,     0,  1556,
       0,  1988,  1557,     0,     0,     0,  1558,  1559,  1560,  1561,
    1562,  1563,  1564,     0,     0,     0,  1593,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1565,     0,  1570,
       0,     0,  1556,     0,     0,  1557,     0,  1567, -1973,  1558,
    1559,     0,     0,     0,  1568,     0,  1571,  1456,     0,     0,
       0,  1572,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3353,  3353,  3353,     0,     0,     0,     0,     0,  1569,
    1567,     0,     0,     0,  1573,  1574,  1570, -1973,     0,     0,
       0,     0,     0,     0,     0,  1593,     0,  1593,  3353,  1575,
       0,  1593,     0,  1571,     0,     0,     0,     0,  1572,     0,
    1593,     0,  1569,  1593,     0,  1593,     0,     0,     0,  1593,
       0,     0,  1879,  1879,     0,     0,  1593,  1593,     0,     0,
       0, -1973, -1973,     0,  1593,  1576,     0,     0,  1577,  3353,
       0,     0,     0,  1593,     0,     0,  1575,     0,     0,     0,
       0,     0,  1578, -1973,     0,  1579,     0,     0,  1593,     0,
    1585,  1586,  1587,  1588,  1589,  1590,     0,     0,     0,     0,
       0,     0,     0,  1570,     0,  2683,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1973,     0,     0,     0,     0,
    1571,     0,     0,     0,     0,  1572,  1456,     0,     0,  1578,
       0,  1144,     0,     0,     0,     0, -1973,  1145,     0,     0,
       0,     0,     0,     0,     0,  1157,     0,     0,  1573,  1574,
       0,     0,     0, -1973,     0,     0,     0,     0, -1973,     0,
       0,     0,     0,  1575,     0,  1158,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1580,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1973,     0,     0,  1576,
       0,     0,  1577,     0,     0,     0,     0,     0,     0,  1159,
       0,     0,     0,     0,     0,     0,  1578,     0,     0,  1579,
       0,     0,     0,     0,     0,     0,  1580,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1146,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1879,  1456,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1581,  1593,  1593,  1582,  1583,  1584,
       0,  1585,  1586,  1587,  1588,  1589,  1590,     0,     0,     0,
       0,  1988,  1160,  1593,     0,     0,     0,  1593,     0,  1593,
    1593,  1593,     0,  1580,  1593,     0,     0,  1593,  1593,     0,
       0,     0,     0,     0,     0,     0,  1593,     0,     0,     0,
       0,  1581,     0,     0,  1582,  1583,  1584,     0,  1585,  1586,
    1587,  1588,  1589,  1590,     0,     0, -1973,     0,     0,     0,
       0,  1161,     0,     0,     0,     0,     0,     0,     0,  1162,
       0,     0,     0,     0,     0,     0,     0,  1593,     0,     0,
       0,  1163,     0,  1879,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1593,     0,     0,     0,
       0,     0,  1147,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1164,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1593,     0,     0,  1581,     0,
       0,  1582,  1583,  1584,     0,  1585,  1586,  1587,  1588,  1589,
    1590,     0,     0,     0,     0,  2305,     0,     0,     0,     0,
       0,  1879,     0,     0,     0,     0,     0,     0,  1165,     0,
       0, -1973,  1149,     0,  1166,     0,     0,     0,  1585,  1586,
    1587,  1588,  1589,  1590,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1593,  1593,  1593,     0,  1167,     0,     0,
       0,     0,  1168,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1593,     0,     0,  1169,     0,     0,     0,
       0,     0,     0,     0,     0,  1593,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1593,
       0,     0,     0,  1151,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1593,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1593,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   109,   994,   632,   995,   996,   997,   998,
     999,  1593,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,  1593,     0,     0,  1000,
       0,     0,   121,   122,   123,     0,   124,   125,   126,   127,
     128,   129,   130,   131,  1001,   133,  1002,  1003,     0,   136,
     137,   138,   139,   140,   141,  1004,   602,   142,   143,  1005,
    1006,   146,     0,   147,   148,   149,   150,   603,     0,   604,
    1593,  1007,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
    1008,  1009,   182,  1010,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   767,   198,   199,  1593,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,  1011,   211,
     212,   213,   214,   215,   605,  1012,   217,     0,   218,   219,
    1013,   221,     0,   222,     0,   223,   224,     0,   225,   226,
     227,   228,   229,   230,     0,   231,     0,  1014,  1015,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,  1016,  1017,     0,  1018,     0,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,     0,     0,   277,
     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,
     287,   288,  1019,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,  1020,   309,  1021,   311,   312,   313,   314,  1022,   315,
     316,   317,   318,  1023,   607,   320,  1024,   322,   323,   324,
       0,   325,   326,     0,     0,  1025,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,   609,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   610,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,  1026,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,  1027,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,  1028,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   612,   432,     0,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,     0,   442,  1029,  1030,     0,
       0,   445,   446,   613,   448,   614,  1031,   450,   451,   615,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,  1032,     0,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,  1033,     0,     0,
       0,     0,     0,     0,  1034,  1035,  1036,     0,     0,     0,
       0,  1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,
    1041,  1042,     0,  2535,   109,   994,   632,   995,   996,   997,
     998,   999,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
    1000,     0,     0,   121,   122,   123,     0,   124,   125,   126,
     127,   128,   129,   130,   131,  1001,   133,  1002,  1003,     0,
     136,   137,   138,   139,   140,   141,  1004,   602,   142,   143,
    1005,  1006,   146,     0,   147,   148,   149,   150,   603,     0,
     604,     0,  1007,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,  1008,  1009,   182,  1010,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   767,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,  1011,
     211,   212,   213,   214,   215,   605,  1012,   217,     0,   218,
     219,  1013,   221,     0,   222,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,   231,     0,  1014,  1015,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,  1016,  1017,     0,  1018,     0,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,   287,   288,  1019,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,  1020,   309,  1021,   311,   312,   313,   314,  1022,
     315,   316,   317,   318,  1023,   607,   320,  1024,   322,   323,
     324,     0,   325,   326,     0,     0,  1025,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,   609,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   610,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,  1026,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,  1027,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,  1028,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   612,   432,     0,   433,   434,     0,   435,
     436,   437,   438,   439,   440,   441,     0,   442,  1029,  1030,
       0,     0,   445,   446,   613,   448,   614,  1031,   450,   451,
     615,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,  1032,     0,   472,   473,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,  1033,     0,
       0,     0,     0,     0,     0,  1034,  1035,  1036,     0,     0,
       0,     0,  1037,     0,  1038,     0,     0,     0,     0,  1039,
    1040,  1041,  1042,     0,  3104,   109,   994,   632,   995,   996,
     997,   998,   999,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,  1000,     0,     0,   121,   122,   123,     0,   124,   125,
     126,   127,   128,   129,   130,   131,  1001,   133,  1002,  1003,
       0,   136,   137,   138,   139,   140,   141,  1004,   602,   142,
     143,  1005,  1006,   146,     0,   147,   148,   149,   150,   603,
       0,   604,     0,  1007,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,  1008,  1009,   182,  1010,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   767,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
    1011,   211,   212,   213,   214,   215,   605,  1012,   217,     0,
     218,   219,  1013,   221,     0,   222,     0,   223,   224,    21,
     225,   226,   227,   228,   229,   230,     0,   231,     0,  1014,
    1015,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,  1016,  1017,     0,  1018,     0,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
       0,   277,   278,   279,   280,     0,   281,   282,   283,   284,
     285,   286,   287,   288,  1019,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,  1020,   309,  1021,   311,   312,   313,   314,
    1022,   315,   316,   317,   318,  1023,   607,   320,  1024,   322,
     323,   324,     0,   325,   326,     0,     0,  1025,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,   609,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    25,
      26,    27,     0,   347,   348,   610,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,  1026,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
    1027,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    32,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,  1028,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   612,   432,     0,   433,   434,    37,
     435,   436,   437,   438,   439,   440,   441,     0,   442,  1029,
    1030,     0,     0,   445,   446,   613,   448,   614,  1031,   450,
     451,   615,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,    39,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   616,  1032,     0,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,     0,    43,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,  1033,
       0,    44,     0,     0,     0,     0,  1034,  1035,  1036,     0,
       0,     0,     0,  1037,     0,  1038,  3080,     0,     0,     0,
    1039,  1040,  1041,  1042,   109,   994,   632,   995,   996,   997,
     998,   999,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
    1000,     0,     0,   121,   122,   123,     0,   124,   125,   126,
     127,   128,   129,   130,   131,  1001,   133,  1002,  1003,     0,
     136,   137,   138,   139,   140,   141,  1004,   602,   142,   143,
    1005,  1006,   146,     0,   147,   148,   149,   150,   603,     0,
     604,     0,  1007,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,  1008,  1009,   182,  1010,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   767,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,  1011,
     211,   212,   213,   214,   215,   605,  1012,   217,     0,   218,
     219,  1013,   221,     0,   222,     0,   223,   224,    21,   225,
     226,   227,   228,   229,   230,     0,   231,     0,  1014,  1015,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,  1016,  1017,     0,  1018,     0,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,   287,   288,  1019,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,  1020,   309,  1021,   311,   312,   313,   314,  1022,
     315,   316,   317,   318,  1023,   607,   320,  1024,   322,   323,
     324,     0,   325,   326,     0,     0,  1025,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,   609,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    25,    26,
      27,     0,   347,   348,   610,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,  1026,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,  1027,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    32,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,  1028,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   612,   432,     0,   433,   434,    37,   435,
     436,   437,   438,   439,   440,   441,     0,   442,  1029,  1030,
       0,     0,   445,   446,   613,   448,   614,  1031,   450,   451,
     615,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,    39,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   616,  1032,     0,   472,   473,   474,   475,   476,
     477,   478,     0,     0,   479,     0,    43,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,  1033,     0,
      44,     0,     0,     0,     0,  1034,  1035,  1036,     0,     0,
       0,     0,  1037,     0,  1038,     0,     0,     0,     0,  1039,
    1040,  1041,  1042,  1265,   994,   632,   995,   996,   997,   998,
     999,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
    1266,   118,   119,   120,     0,     0,     0,  1267,     0,  1000,
       0,     0,  1268,   122,   123,     0,   124,   125,   126,  1269,
     128,   129,   130,   131,  1001,  1270,  1002,  1003,     0,   136,
     137,   138,   139,   140,   141,  1004,   602,   142,   143,  1005,
    1006,   146,     0,   147,   148,   149,   150,   603,     0,  1271,
       0,  1272,   154,   155,   156,   157,   158,  1273,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,  1274,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
    1008,  1009,   182,  1010,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,  1275,     0,
     195,   196,   767,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,  1011,   211,
     212,   213,   214,   215,   605,  1012,   217,     0,   218,   219,
    1013,   221,     0,   222,     0,   223,  1276,     0,  1277,   226,
     227,  1278,  1279,   230,     0,   231,     0,  1014,  1015,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,  1280,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,  1281,   257,   258,   259,   260,   261,
     262,  1016,  1017,     0,  1018,     0,   266,  1282,  1283,   269,
    1284,   271,   272,   273,   274,   275,   276,     0,     0,   277,
    1285,   279,  1286,     0,   281,   282,   283,   284,   285,   286,
     287,   288,  1287,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,  1020,  1288,  1021,   311,   312,   313,   314,  1022,   315,
     316,  1289,   318,  1023,   607,   320,  1024,   322,   323,   324,
       0,   325,   326,     0,     0,  1025,   328,   329,     0,     0,
     330,   331,   332,  1290,   334,  1291,   609,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   610,  1292,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,  1026,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,  1293,   387,   388,   389,  1027,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,  1294,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,  1295,   413,   414,  1028,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
    1296,   430,   612,   432,     0,   433,   434,     0,   435,  1297,
     437,   438,   439,   440,   441,     0,   442,  1029,  1030,     0,
       0,   445,   446,   613,   448,   614,  1031,   450,   451,  1298,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,  1032,  1299,   472,  1300,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,  1033,     0,     0,
       0,     0,     0,     0,  1034,  1035,  1036,     0,     0,     0,
       0,  1037,     0,  1038,  1301,     0,     0,     0,  1039,  1040,
    1041,  1042,   109,   994,   632,   995,   996,   997,   998,   999,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,  1000,     0,
       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,
     129,   130,   131,  1001,   133,  1002,  1003,  1463,   136,   137,
     138,   139,   140,   141,  1004,   602,   142,   143,  1005,  1006,
     146,     0,   147,   148,   149,   150,   603,     0,   604,     0,
    1007,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,  1008,
    1009,   182,  1010,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   767,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,  1011,   211,   212,
     213,   214,   215,   605,  1012,   217,     0,   218,   219,  1013,
     221,     0,   222,     0,   223,   224,  1464,   225,   226,   227,
     228,   229,   230,     0,   231,     0,  1014,  1015,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
    1016,  1017,     0,  1018,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,  1465,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,
     288,  1019,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    1020,   309,  1021,   311,   312,   313,   314,  1022,   315,   316,
     317,   318,  1023,   607,   320,  1024,   322,   323,   324,     0,
     325,   326,     0,     0,  1025,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,   609,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   610,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,  1026,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,  1027,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,  1028,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   612,   432,     0,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,     0,   442,  1029,  1030,     0,  1466,
     445,   446,   613,   448,   614,  1031,   450,   451,   615,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,  1032,     0,   472,   473,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,  1033,     0,     0,     0,
       0,     0,     0,  1034,  1035,  1036,     0,     0,     0,     0,
    1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,
    1042,  1265,   994,   632,   995,   996,   997,   998,   999,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,  1267,     0,  1000,     0,     0,
    1268,   122,   123,     0,   124,   125,   126,  1269,   128,   129,
     130,   131,  1001,  1270,  1002,  1003,     0,   136,   137,   138,
     139,   140,   141,  1004,   602,   142,   143,  1005,  1006,   146,
       0,   147,   148,   149,   150,   603,     0,  1271,     0,  1272,
     154,   155,   156,   157,   158,  1273,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,  1274,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,  1008,  1009,
     182,  1010,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     767,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,  1011,   211,   212,   213,
     214,   215,   605,  1012,   217,     0,   218,   219,  1013,   221,
       0,   222,     0,   223,  1276,     0,  1277,   226,   227,  1278,
    1279,   230,     0,   231,     0,  1014,  1015,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,  1280,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,  1281,   257,   258,   259,   260,   261,   262,  1016,
    1017,     0,  1018,     0,   266,  1282,  1283,   269,  1284,   271,
     272,   273,   274,   275,   276,     0,     0,   277,  1285,   279,
    1286,     0,   281,   282,   283,   284,   285,   286,   287,   288,
    1287,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,  1020,
    1288,  1021,   311,   312,   313,   314,  1022,   315,   316,  1289,
     318,  1023,   607,   320,  1024,   322,   323,   324,     0,   325,
     326,     0,     0,  1025,   328,   329,     0,     0,   330,   331,
     332,  1290,   334,  1291,   609,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   610,  1292,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
    1026,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,  1293,   387,   388,   389,  1027,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,  1294,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
    1295,   413,   414,  1028,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,  1296,   430,
     612,   432,     0,   433,   434,     0,   435,  1297,   437,   438,
     439,   440,   441,     0,   442,  1029,  1030,     0,     0,   445,
     446,   613,   448,   614,  1031,   450,   451,  1298,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
    1032,  2200,   472,  1300,   474,   475,   476,   477,   478,     0,
       0,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,  1033,     0,     0,     0,     0,
       0,     0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,
       0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,  1042,
    1265,   994,   632,   995,   996,   997,   998,   999,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,  1267,     0,  1000,     0,     0,  1268,
     122,   123,     0,   124,   125,   126,  1269,   128,   129,   130,
     131,  1001,  1270,  1002,  1003,     0,   136,   137,   138,   139,
     140,   141,  1004,   602,   142,   143,  1005,  1006,   146,     0,
     147,   148,   149,   150,   603,     0,  1271,     0,  1272,   154,
     155,   156,   157,   158,  1273,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,  1274,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,  1008,  1009,   182,
    1010,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   767,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,  1011,   211,   212,   213,   214,
     215,   605,  1012,   217,     0,   218,   219,  1013,   221,     0,
     222,     0,   223,  1276,     0,  1277,   226,   227,  1278,  1279,
     230,     0,   231,     0,  1014,  1015,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,  1280,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,  1281,   257,   258,   259,   260,   261,   262,  1016,  1017,
       0,  1018,     0,   266,  1282,  1283,   269,  1284,   271,   272,
     273,   274,   275,   276,     0,     0,   277,  1285,   279,  1286,
       0,   281,   282,   283,   284,   285,   286,   287,   288,  1287,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,  1020,  1288,
    1021,   311,   312,   313,   314,  1022,   315,   316,  1289,   318,
    1023,   607,   320,  1024,   322,   323,   324,     0,   325,   326,
       0,     0,  1025,   328,   329,     0,     0,   330,   331,   332,
    1290,   334,  1291,   609,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     610,  1292,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,  1026,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,  1293,   387,   388,   389,  1027,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,  1294,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,  1295,
     413,   414,  1028,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,  1296,   430,   612,
     432,     0,   433,   434,     0,   435,  1297,   437,   438,   439,
     440,   441,     0,   442,  1029,  1030,     0,     0,   445,   446,
     613,   448,   614,  1031,   450,   451,  1298,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,  1032,
       0,   472,  1300,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,  1033,     0,     0,     0,     0,     0,
       0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,
    1038,  2247,     0,     0,     0,  1039,  1040,  1041,  1042,   109,
     994,   632,   995,   996,   997,   998,   999,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,  -624,   118,   119,   120,
       0,     0,     0,     0,  -624,  1000,     0,     0,   121,   122,
     123,     0,   124,   125,   126,   127,   128,   129,   130,   131,
    1001,   133,  1002,  1003,     0,   136,   137,   138,   139,   140,
     141,  1004,   602,   142,   143,  1005,  1006,   146,     0,   147,
     148,   149,   150,   603,     0,   604,     0,  1007,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,  1008,  1009,   182,  1010,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   767,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,  1011,   211,   212,   213,   214,   215,
     605,  1012,   217,     0,   218,   219,  1013,   221,     0,   222,
       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,
       0,   231,     0,  1014,  1015,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,  1016,  1017,     0,
    1018,     0,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,     0,     0,   277,   278,   279,   280,     0,
     281,   282,   283,   284,   285,   286,   287,   288,  1019,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,  1020,   309,  1021,
     311,   312,   313,   314,  1022,   315,   316,   317,   318,  1023,
     607,   320,  1024,   322,   323,   324,     0,   325,   326,     0,
       0,  1025,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,   609,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   610,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,  1026,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,  1027,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,  1028,   416,  -624,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   612,   432,
       0,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,     0,   442,  1029,  1030,     0,     0,   445,   446,   613,
     448,   614,  1031,   450,   451,   615,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,  1032,     0,
     472,   473,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,  1033,     0,     0,     0,     0,     0,     0,
    1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,
       0,     0,     0,     0,  1039,  1040,  1041,  1042,  1265,   994,
     632,   995,   996,   997,   998,   999,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,  1267,     0,  1000,     0,     0,  1268,   122,   123,
       0,   124,   125,   126,  1269,   128,   129,   130,   131,  1001,
    1270,  1002,  1003,     0,   136,   137,   138,   139,   140,   141,
    1004,   602,   142,   143,  1005,  1006,   146,     0,   147,   148,
     149,   150,   603,     0,  1271,     0,  1272,   154,   155,   156,
     157,   158,  1273,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,  1274,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,  1008,  1009,   182,  1010,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   767,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,  1011,   211,   212,   213,   214,   215,   605,
    1012,   217,     0,   218,   219,  1013,   221,     0,   222,     0,
     223,  1276,     0,  1277,   226,   227,  1278,  1279,   230,     0,
     231,     0,  1014,  1015,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,  1280,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,  1281,
     257,   258,   259,   260,   261,   262,  1016,  1017,     0,  1018,
       0,   266,  1282,  1283,   269,  1284,   271,   272,   273,   274,
     275,   276,     0,     0,   277,  1285,   279,  1286,     0,   281,
     282,   283,   284,   285,   286,   287,   288,  1287,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,  1020,  1288,  1021,   311,
     312,   313,   314,  1022,   315,   316,  1289,   318,  1023,   607,
     320,  1024,   322,   323,   324,     0,   325,   326,     0,     0,
    1025,   328,   329,     0,     0,   330,   331,   332,  1290,   334,
    1291,   609,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   610,  1292,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,  1026,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,  1293,
     387,   388,   389,  1027,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,  1294,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,  1295,   413,   414,
    1028,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,  1296,   430,   612,   432,     0,
     433,   434,     0,   435,  1297,   437,   438,   439,   440,   441,
       0,   442,  1029,  1030,     0,     0,   445,   446,   613,   448,
     614,  1031,   450,   451,  1298,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,  1032,     0,   472,
    1300,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,  1033,     0,     0,     0,     0,     0,     0,  1034,
    1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,  2951,
       0,     0,     0,  1039,  1040,  1041,  1042,  1265,   994,   632,
     995,   996,   997,   998,   999,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,  1267,     0,  1000,     0,     0,  1268,   122,   123,     0,
     124,   125,   126,  1269,   128,   129,   130,   131,  1001,  1270,
    1002,  1003,     0,   136,   137,   138,   139,   140,   141,  1004,
     602,   142,   143,  1005,  1006,   146,     0,   147,   148,   149,
     150,   603,     0,  1271,     0,  1272,   154,   155,   156,   157,
     158,  1273,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,  1274,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,  1008,  1009,   182,  1010,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   767,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,  1011,   211,   212,   213,   214,   215,   605,  1012,
     217,     0,   218,   219,  1013,   221,     0,   222,     0,   223,
    1276,     0,  1277,   226,   227,  1278,  1279,   230,     0,   231,
       0,  1014,  1015,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,  1280,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,  1281,   257,
     258,   259,   260,   261,   262,  1016,  1017,     0,  1018,     0,
     266,  1282,  1283,   269,  1284,   271,   272,   273,   274,   275,
     276,     0,     0,   277,  1285,   279,  1286,     0,   281,   282,
     283,   284,   285,   286,   287,   288,  1287,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,  1020,  1288,  1021,   311,   312,
     313,   314,  1022,   315,   316,  1289,   318,  1023,   607,   320,
    1024,   322,   323,   324,     0,   325,   326,     0,     0,  1025,
     328,   329,     0,     0,   330,   331,   332,  1290,   334,  1291,
     609,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   610,  1292,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,  1026,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,  1293,   387,
     388,   389,  1027,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,  1294,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,  1295,   413,   414,  1028,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,  1296,   430,   612,   432,     0,   433,
     434,     0,   435,  1297,   437,   438,   439,   440,   441,     0,
     442,  1029,  1030,     0,     0,   445,   446,   613,   448,   614,
    1031,   450,   451,  1298,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,  1032,     0,   472,  1300,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,  1033,     0,     0,     0,     0,     0,     0,  1034,  1035,
    1036,     0,     0,     0,     0,  1037,     0,  1038,     0,     0,
       0,     0,  1039,  1040,  1041,  1042,   109,   994,   632,   995,
     996,     0,   998,   999,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
       0,     0,  1000,     0,     0,   121,   122,   123,     0,   124,
     125,   126,   127,   128,   129,   130,   131,  1001,   133,  1002,
    1003,     0,   136,   137,   138,   139,   140,   141,  1004,   602,
     142,   143,  1005,  1006,   146,     0,   147,   148,   149,   150,
     603,     0,   604,     0,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,  1008,  1009,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   767,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,  1011,   211,   212,   213,   214,   215,   605,  1012,   217,
       0,   218,   219,  1013,   221,     0,   222,     0,   223,   224,
      21,   225,   226,   227,   228,   229,   230,     0,   231,     0,
    1014,  1015,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,  1016,  1017,     0,  1018,     0,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   278,   279,   280,     0,   281,   282,   283,
     284,   285,   286,   287,   288,  1019,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,  1020,   309,  1021,   311,   312,   313,
     314,     0,   315,   316,   317,   318,  1023,   607,   320,  1024,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,   609,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      25,    26,    27,     0,   347,   348,   610,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,  1026,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,  1027,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    32,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,  1028,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   612,   432,     0,   433,   434,
      37,   435,   436,   437,   438,   439,   440,   441,     0,   442,
    1029,  1030,     0,     0,   445,   446,   613,   448,   614,  1031,
     450,   451,   615,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,    39,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   616,  1032,     0,   472,   473,   474,
     475,   476,   477,   478,     0,     0,   479,     0,    43,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
       0,     0,    44,     0,     0,     0,   109,   994,   632,   995,
     996,   997,   998,   999,  1037,     0,  1038,     0,     0,     0,
       0,  1039,  1040,  1041,  1042,   110,   111,   112,   113,   114,
     115,   116,   117,  1637,   118,   119,   120,     0,     0,     0,
       0,     0,  1000,     0,     0,   121,   122,   123,     0,   124,
     125,   126,   127,   128,   129,   130,   131,  1001,   133,  1002,
    1003,     0,   136,   137,   138,   139,   140,   141,  1004,   602,
     142,   143,  1005,  1006,   146,     0,   147,   148,   149,   150,
     603,     0,   604,     0,  1007,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,  1008,  1009,   182,  1010,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   767,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,  1011,   211,   212,   213,   214,   215,   605,  1012,   217,
       0,   218,   219,  1013,   221,     0,   222,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   231,     0,
    1014,  1015,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,  1016,  1017,     0,  1018,     0,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   278,   279,   280,     0,   281,   282,   283,
     284,   285,   286,   287,   288,  1019,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,  1020,   309,  1021,   311,   312,   313,
     314,  1022,   315,   316,   317,   318,  1023,   607,   320,  1024,
     322,   323,   324,     0,   325,   326,     0,     0,  1025,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,   609,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   610,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,  1026,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,  1027,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,  1028,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   612,   432,     0,   433,   434,
       0,   435,   436,   437,   438,   439,   440,   441,     0,   442,
    1029,  1030,     0,     0,   445,   446,   613,   448,   614,  1031,
     450,   451,   615,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,  1032,     0,   472,   473,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
    1033,     0,     0,     0,     0,     0,     0,  1034,  1035,  1036,
       0,     0,     0,     0,  1037,     0,  1038,     0,     0,     0,
       0,  1039,  1040,  1041,  1042,   109,  1652,   632,   995,   996,
     997,  1653,   999,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,  1654,   118,   119,   120,     0,     0,     0,     0,
       0,  1000,     0,     0,   121,   122,   123,     0,   124,   125,
     126,   127,   128,   129,   130,   131,  1001,   133,  1002,  1003,
       0,   136,   137,   138,   139,   140,   141,  1004,   602,   142,
     143,  1005,  1006,   146,     0,   147,   148,   149,   150,   603,
       0,   604,     0,  1007,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,  1008,  1009,   182,  1010,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   767,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
    1011,   211,   212,   213,   214,   215,   605,  1012,   217,     0,
     218,   219,  1013,   221,     0,   222,     0,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,  1014,
    1015,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,  1016,  1017,     0,  1018,     0,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
       0,   277,   278,   279,   280,     0,   281,   282,   283,   284,
     285,   286,   287,   288,  1019,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,  1020,   309,  1021,   311,   312,   313,   314,
    1022,   315,   316,   317,   318,  1023,   607,   320,  1024,   322,
     323,   324,     0,   325,   326,     0,     0,  1025,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,   609,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   610,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,  1026,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
    1027,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,  1028,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   612,   432,     0,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,     0,   442,  1029,
    1030,     0,     0,   445,   446,   613,   448,   614,  1031,   450,
     451,   615,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,  1032,     0,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,  1033,
       0,     0,     0,     0,     0,     0,  1034,  1035,  1036,     0,
       0,     0,     0,  1037,     0,  1038,     0,     0,     0,     0,
    1039,  1040,  1041,  1042,   109,   994,   632,   995,   996,   997,
     998,   999,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
    1000,     0,     0,   121,   122,   123,     0,   124,   125,   126,
     127,   128,   129,   130,   131,  1001,   133,  1002,  1003,     0,
     136,   137,   138,   139,   140,   141,  1004,   602,   142,   143,
    1005,  1006,   146,     0,   147,   148,   149,   150,   603,     0,
     604,     0,  1007,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,  1008,  1009,   182,  1010,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   767,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,  1011,
     211,   212,   213,   214,   215,   605,  1012,   217,     0,   218,
     219,  1013,   221,     0,   222,     0,   223,   224,  1464,   225,
     226,   227,   228,   229,   230,     0,   231,     0,  1014,  1015,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,  1016,  1017,     0,  1018,     0,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,   287,   288,  1019,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,  1020,   309,  1021,   311,   312,   313,   314,  1022,
     315,   316,   317,   318,  1023,   607,   320,  1024,   322,   323,
     324,     0,   325,   326,     0,     0,  1025,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,   609,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   610,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,  1026,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,  1027,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,  1028,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   612,   432,     0,   433,   434,     0,   435,
     436,   437,   438,   439,   440,   441,     0,   442,  1029,  1030,
       0,     0,   445,   446,   613,   448,   614,  1031,   450,   451,
     615,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,  1032,     0,   472,   473,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,  1033,     0,
       0,     0,     0,     0,     0,  1034,  1035,  1036,     0,     0,
       0,     0,  1037,     0,  1038,     0,     0,     0,     0,  1039,
    1040,  1041,  1042,   109,   994,   632,   995,   996,   997,   998,
     999,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,     0,     0,  1000,
       0,     0,   121,   122,   123,     0,   124,   125,   126,   127,
     128,   129,   130,   131,  1001,   133,  1002,  1003,     0,   136,
     137,   138,   139,   140,   141,  1004,   602,   142,   143,  1005,
    1006,   146,     0,   147,   148,   149,   150,   603,     0,   604,
       0,  1007,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
    1008,  1009,   182,  1010,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   767,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,  1011,   211,
     212,   213,   214,   215,   605,  1012,   217,     0,   218,   219,
    1013,   221,     0,   222,     0,   223,   224,     0,   225,   226,
     227,   228,   229,   230,     0,   231,     0,  1014,  1015,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,  1016,  1017,     0,  1018,     0,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,     0,     0,   277,
     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,
     287,   288,  1019,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,  1020,   309,  1021,   311,   312,   313,   314,  1022,   315,
     316,   317,   318,  1023,   607,   320,  1024,   322,   323,   324,
       0,   325,   326,     0,     0,  1025,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,   609,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   610,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,  1026,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,  1027,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,  1028,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   612,   432,     0,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,     0,   442,  1029,  1030,     0,
       0,   445,   446,   613,   448,   614,  1031,   450,   451,   615,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,  1032,     0,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,  1033,     0,     0,
       0,     0,     0,     0,  1034,  1035,  1036,     0,     0,     0,
       0,  1037,     0,  1038,  1980,     0,     0,     0,  1039,  1040,
    1041,  1042,   109,   994,   632,   995,   996,   997,   998,   999,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,  1000,     0,
       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,
     129,   130,   131,  1001,   133,  1002,  1003,     0,   136,   137,
     138,   139,   140,   141,  1004,   602,   142,   143,  1005,  1006,
     146,     0,   147,   148,   149,   150,   603,     0,   604,     0,
    1007,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,  1008,
    1009,   182,  1010,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   767,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,  1011,   211,   212,
     213,   214,   215,   605,  1012,   217,     0,   218,   219,  1013,
     221,     0,   222,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,   231,     0,  1014,  1015,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
    1016,  1017,     0,  1018,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,
     288,  1019,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    1020,   309,  1021,   311,   312,   313,   314,  1022,   315,   316,
     317,   318,  1023,   607,   320,  1024,   322,   323,   324,     0,
     325,   326,     0,     0,  1025,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,   609,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   610,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,  1026,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,  1027,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,  1028,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   612,   432,     0,   433,   434,  2583,   435,   436,   437,
     438,   439,   440,   441,     0,   442,  1029,  1030,     0,     0,
     445,   446,   613,   448,   614,  1031,   450,   451,   615,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,  1032,     0,   472,   473,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,  1033,     0,     0,     0,
       0,     0,     0,  1034,  1035,  1036,     0,     0,     0,     0,
    1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,
    1042,   109,   994,   632,   995,   996,   997,   998,   999,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,     0,  1000,     0,     0,
     121,   122,   123,     0,   124,   125,   126,   127,   128,   129,
     130,   131,  1001,   133,  1002,  1003,     0,   136,   137,   138,
     139,   140,   141,  1004,   602,   142,   143,  1005,  1006,   146,
       0,   147,   148,   149,   150,   603,     0,   604,     0,  1007,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,  1008,  1009,
     182,  1010,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     767,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,  1011,   211,   212,   213,
     214,   215,   605,  1012,   217,     0,   218,   219,  1013,   221,
       0,   222,     0,   223,   224,     0,   225,   226,   227,   228,
     229,   230,     0,   231,     0,  1014,  1015,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,  1016,
    1017,     0,  1018,     0,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,     0,     0,   277,   278,   279,
     280,     0,   281,   282,   283,   284,   285,   286,   287,   288,
    1019,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,  1020,
     309,  1021,   311,   312,   313,   314,  1022,   315,   316,   317,
     318,  1023,   607,   320,  1024,   322,   323,   324,     0,   325,
     326,     0,     0,  1025,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,   609,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   610,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
    1026,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,  1027,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,  1028,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     612,   432,     0,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,     0,   442,  1029,  1030,     0,     0,   445,
     446,   613,   448,   614,  1031,   450,   451,   615,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
    1032,     0,   472,   473,   474,   475,   476,   477,   478,     0,
    2691,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,  1033,     0,     0,     0,     0,
       0,     0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,
       0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,  1042,
     109,   994,   632,   995,   996,   997,   998,   999,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,  2901,   118,   119,
     120,     0,     0,     0,     0,     0,  1000,     0,     0,   121,
     122,   123,     0,   124,   125,   126,   127,   128,   129,   130,
     131,  1001,   133,  1002,  1003,     0,   136,   137,   138,   139,
     140,   141,  1004,   602,   142,   143,  1005,  1006,   146,     0,
     147,   148,   149,   150,   603,     0,   604,     0,  1007,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,   169,   170,  2902,   172,
     173,   174,   175,   176,   177,   178,   179,  1008,  1009,   182,
    1010,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   767,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,  1011,   211,   212,   213,   214,
     215,   605,  1012,   217,     0,   218,   219,  1013,   221,     0,
     222,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   231,     0,  2903,  1015,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,  1016,  1017,
       0,  1018,     0,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,
       0,   281,   282,   283,   284,   285,   286,   287,   288,  1019,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,  1020,   309,
    1021,   311,   312,   313,   314,  1022,   315,   316,   317,   318,
    1023,   607,   320,  1024,   322,   323,   324,     0,   325,   326,
       0,     0,  1025,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,   609,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     610,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,  1026,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,  2904,  1027,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,  1028,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   612,
     432,     0,   433,   434,     0,   435,   436,   437,   438,   439,
     440,   441,     0,   442,  1029,  1030,     0,     0,   445,   446,
     613,   448,   614,  1031,   450,   451,   615,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,  1032,
       0,   472,   473,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,  1033,     0,     0,     0,     0,     0,
       0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,
    2905,     0,     0,     0,     0,  1039,  1040,  1041,  1042,   109,
     994,   632,   995,   996,   997,   998,   999,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
       0,     0,     0,     0,     0,  1000,     0,     0,   121,   122,
     123,     0,   124,   125,   126,   127,   128,   129,   130,   131,
    1001,   133,  1002,  1003,     0,   136,   137,   138,   139,   140,
     141,  1004,   602,   142,   143,  1005,  1006,   146,     0,   147,
     148,   149,   150,   603,     0,   604,     0,  1007,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,  1008,  1009,   182,  1010,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   767,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,  1011,   211,   212,   213,   214,   215,
     605,  1012,   217,     0,   218,   219,  1013,   221,     0,   222,
       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,
       0,   231,     0,  1014,  1015,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,  1016,  1017,     0,
    1018,     0,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,     0,     0,   277,   278,   279,   280,     0,
     281,   282,   283,   284,   285,   286,   287,   288,  1019,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,  1020,   309,  1021,
     311,   312,   313,   314,  1022,   315,   316,   317,   318,  1023,
     607,   320,  1024,   322,   323,   324,     0,   325,   326,     0,
       0,  1025,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,   609,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   610,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,  1026,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,  1027,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,  1028,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   612,   432,
       0,   433,   434,  3042,   435,   436,   437,   438,   439,   440,
     441,     0,   442,  1029,  1030,     0,     0,   445,   446,   613,
     448,   614,  1031,   450,   451,   615,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,  1032,     0,
     472,   473,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,  1033,     0,     0,     0,     0,     0,     0,
    1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,
       0,     0,     0,     0,  1039,  1040,  1041,  1042,   109,   994,
     632,   995,   996,   997,   998,   999,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,  1000,     0,     0,   121,   122,   123,
       0,   124,   125,   126,   127,   128,   129,   130,   131,  1001,
     133,  1002,  1003,     0,   136,   137,   138,   139,   140,   141,
    1004,   602,   142,   143,  1005,  1006,   146,     0,   147,   148,
     149,   150,   603,     0,   604,     0,  1007,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,  1008,  1009,   182,  1010,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   767,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,  1011,   211,   212,   213,   214,   215,   605,
    1012,   217,     0,   218,   219,  1013,   221,     0,   222,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
     231,     0,  1014,  1015,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,  1016,  1017,     0,  1018,
       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   278,   279,   280,     0,   281,
     282,   283,   284,   285,   286,   287,   288,  1019,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,  1020,   309,  1021,   311,
     312,   313,   314,  1022,   315,   316,   317,   318,  1023,   607,
     320,  1024,   322,   323,   324,     0,   325,   326,     0,     0,
    1025,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,   609,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   610,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,  1026,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,  1027,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
    1028,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   612,   432,     0,
     433,   434,  3176,   435,   436,   437,   438,   439,   440,   441,
       0,   442,  1029,  1030,     0,     0,   445,   446,   613,   448,
     614,  1031,   450,   451,   615,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,  1032,     0,   472,
     473,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,  1033,     0,     0,     0,     0,     0,     0,  1034,
    1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,     0,
       0,     0,     0,  1039,  1040,  1041,  1042,   109,   994,   632,
     995,   996,   997,   998,   999,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,     0,     0,  1000,     0,     0,   121,   122,   123,     0,
     124,   125,   126,   127,   128,   129,   130,   131,  1001,   133,
    1002,  1003,     0,   136,   137,   138,   139,   140,   141,  1004,
     602,   142,   143,  1005,  1006,   146,     0,   147,   148,   149,
     150,   603,     0,   604,     0,  1007,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,  1008,  1009,   182,  1010,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   767,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,  1011,   211,   212,   213,   214,   215,   605,  1012,
     217,     0,   218,   219,  1013,   221,     0,   222,     0,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
       0,  1014,  1015,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,  1016,  1017,     0,  1018,     0,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,     0,     0,   277,   278,   279,   280,     0,   281,   282,
     283,   284,   285,   286,   287,   288,  1019,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,  1020,   309,  1021,   311,   312,
     313,   314,  1022,   315,   316,   317,   318,  1023,   607,   320,
    1024,   322,   323,   324,     0,   325,   326,     0,     0,  1025,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
     609,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   610,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,  1026,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,  1027,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,  1028,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   612,   432,     0,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,     0,
     442,  1029,  1030,     0,     0,   445,   446,   613,   448,   614,
    1031,   450,   451,   615,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,  1032,     0,   472,   473,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,  1033,     0,     0,     0,     0,     0,     0,  1034,  1035,
    1036,     0,     0,     0,     0,  1037,     0,  1038,     0,     0,
       0,     0,  1039,  1040,  1041,  1042,   109,   994,   632,   995,
     996,   997,   998,   999,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
       0,     0,  1000,     0,     0,   121,   122,   123,     0,   124,
     125,   126,   127,   128,   129,   130,   131,  1001,   133,  1002,
    1003,     0,   136,   137,   138,   139,   140,   141,  1004,   602,
     142,   143,  1005,  1006,   146,     0,   147,   148,   149,   150,
     603,     0,   604,     0,  1007,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,  1008,  1009,   182,  1010,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   767,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,  1011,   211,   212,   213,   214,   215,   605,  1012,   217,
       0,   218,   219,  1013,   221,     0,   222,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   231,     0,
    1014,  1015,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,  1016,  1017,     0,  1018,     0,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   278,   279,   280,     0,   281,   282,   283,
     284,   285,   286,   287,   288,  1019,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,  1020,   309,  1021,   311,   312,   313,
     314,  1022,   315,   316,   317,   318,  1023,   607,   320,  1024,
     322,   323,   324,     0,   325,   326,     0,     0,  1025,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,   609,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   610,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,  1026,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,  1027,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,  1028,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   612,   432,     0,   433,   434,
       0,   435,   436,   437,   438,   439,   440,   441,     0,   442,
    1029,  1030,     0,     0,   445,   446,   613,   448,   614,  1031,
     450,   451,   615,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,  1032,     0,   472,   473,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
    1033,     0,     0,     0,     0,     0,     0,  1657,  1658,  1036,
       0,     0,     0,     0,  1037,     0,  1038,     0,     0,     0,
       0,  1039,  1040,  1041,  1042,   109,  2112,   632,   995,   996,
     997,   998,   999,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,  1000,     0,     0,   121,   122,   123,     0,   124,   125,
     126,   127,   128,   129,   130,   131,  1001,   133,  1002,  1003,
       0,   136,   137,   138,   139,   140,   141,  1004,   602,   142,
     143,  1005,  1006,   146,     0,   147,   148,   149,   150,   603,
       0,   604,     0,  1007,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,  1008,  1009,   182,  1010,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   767,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
    1011,   211,   212,   213,   214,   215,   605,  1012,   217,     0,
     218,   219,  1013,   221,     0,   222,     0,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,  1014,
    1015,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,  1016,  1017,     0,  1018,     0,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
       0,   277,   278,   279,   280,     0,   281,   282,   283,   284,
     285,   286,   287,   288,  1019,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,  1020,   309,  1021,   311,   312,   313,   314,
    1022,   315,   316,   317,   318,  1023,   607,   320,  1024,   322,
     323,   324,     0,   325,   326,     0,     0,  1025,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,   609,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   610,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,  1026,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
    1027,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,  1028,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   612,   432,     0,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,     0,   442,  1029,
    1030,     0,     0,   445,   446,   613,   448,   614,  1031,   450,
     451,   615,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,  1032,     0,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,  1033,
       0,     0,     0,     0,     0,     0,  1034,  1035,  1036,     0,
       0,     0,     0,  1037,     0,  1038,     0,     0,     0,     0,
    1039,  1040,  1041,  1042,   109,   994,   632,   995,   996,   997,
     998,   999,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
    1000,     0,     0,   121,   122,   123,     0,   124,   125,   126,
     127,   128,   129,   130,   131,  1001,   133,  1002,  1003,     0,
     136,   137,   138,   139,   140,   141,  1004,   602,   142,   143,
    1005,  1006,   146,     0,   147,   148,   149,   150,   603,     0,
     604,     0,  1007,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,  1008,  1009,   182,  1010,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   767,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,  1011,
     211,   212,   213,   214,   215,   605,  1012,   217,     0,   218,
     219,  1013,   221,     0,   222,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,   231,     0,  1014,  1015,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,  1016,  1017,     0,  1018,     0,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,   287,   288,  1019,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,  1020,   309,  1021,   311,   312,   313,   314,  1022,
     315,   316,   317,   318,  1023,   607,   320,  1024,   322,   323,
     324,     0,   325,   326,     0,     0,  1025,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,   609,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   610,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,  1026,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,  1027,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,  1028,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   612,   432,     0,   433,   434,     0,   435,
     436,   437,   438,   439,   440,   441,     0,   442,  1029,  1030,
       0,     0,   445,   446,   613,   448,   614,  1031,   450,   451,
     615,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,  1032,     0,   472,   473,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,  1033,     0,
       0,     0,     0,     0,     0,  1034,  2194,  1036,     0,     0,
       0,     0,  1037,     0,  1038,     0,     0,     0,     0,  1039,
    1040,  1041,  1042,   109,   994,   632,   995,   996,   997,   998,
     999,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,     0,     0,  1000,
       0,     0,   121,   122,   123,     0,   124,   125,   126,   127,
     128,   129,   130,   131,  1001,   133,  1002,  1003,     0,   136,
     137,   138,   139,   140,   141,  1004,   602,   142,   143,  1005,
    1006,   146,     0,   147,   148,   149,   150,   603,     0,   604,
       0,  1007,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
    1008,  1009,   182,  1010,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   767,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,  1011,   211,
     212,   213,   214,   215,   605,  1012,   217,     0,   218,   219,
    1013,   221,     0,   222,     0,   223,   224,     0,   225,   226,
     227,   228,   229,   230,     0,   231,     0,  1014,  1015,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,  1016,  1017,     0,  1018,     0,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,     0,     0,   277,
     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,
     287,   288,  1019,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,  1020,   309,  1021,   311,   312,   313,   314,  1022,   315,
     316,   317,   318,  1023,   607,   320,  1024,   322,   323,   324,
       0,   325,   326,     0,     0,  1025,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,   609,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   610,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,  1026,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,  1027,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,  1028,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   612,   432,     0,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,     0,   442,  1029,  1030,     0,
       0,   445,   446,   613,   448,   614,  1031,   450,   451,   615,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,  1032,     0,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,  1033,     0,     0,
       0,     0,     0,     0,  1034,  1035,  1036,     0,     0,     0,
       0,  1037,     0,  2396,     0,     0,     0,     0,  1039,  1040,
    1041,  1042,   109,   994,   632,   995,   996,   997,   998,   999,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,  1000,     0,
       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,
     129,   130,   131,  1001,   133,  1002,  1003,     0,   136,   137,
     138,   139,   140,   141,  1004,   602,   142,   143,  1005,  1006,
     146,     0,   147,   148,   149,   150,   603,     0,   604,     0,
    1007,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,  1008,
    1009,   182,  1010,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   767,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,  1011,   211,   212,
     213,   214,   215,   605,  1012,   217,     0,   218,   219,  1013,
     221,     0,   222,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,   231,     0,  1014,  1015,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
    1016,  1017,     0,  1018,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,
     288,  1019,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    1020,   309,  1021,   311,   312,   313,   314,  1022,   315,   316,
     317,   318,  1023,   607,   320,  1024,   322,   323,   324,     0,
     325,   326,     0,     0,  1025,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,   609,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   610,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,  1026,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,  1027,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,  1028,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   612,   432,     0,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,     0,   442,  1029,  1030,     0,     0,
     445,   446,   613,   448,   614,  1031,   450,   451,   615,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,  1032,     0,   472,   473,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,  1033,     0,     0,     0,
       0,     0,     0,  1034,  2949,  1036,     0,     0,     0,     0,
    1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,
    1042,   109,   994,   632,   995,   996,   997,   998,   999,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,     0,  1000,     0,     0,
     121,   122,   123,     0,   124,   125,   126,   127,   128,   129,
     130,   131,  1001,   133,  1002,  1003,     0,   136,   137,   138,
     139,   140,   141,  1004,   602,   142,   143,  1005,  1006,   146,
       0,   147,   148,   149,   150,   603,     0,   604,     0,  1007,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,   169,   170,  2902,
     172,   173,   174,   175,   176,   177,   178,   179,  1008,  1009,
     182,  1010,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     767,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,  1011,   211,   212,   213,
     214,   215,   605,  1012,   217,     0,   218,   219,  1013,   221,
       0,   222,     0,   223,   224,     0,   225,   226,   227,   228,
     229,   230,     0,   231,     0,  2903,  1015,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,  1016,
    1017,     0,  1018,     0,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,     0,     0,   277,   278,   279,
     280,     0,   281,   282,   283,   284,   285,   286,   287,   288,
    1019,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,  1020,
     309,  1021,   311,   312,   313,   314,  1022,   315,   316,   317,
     318,  1023,   607,   320,  1024,   322,   323,   324,     0,   325,
     326,     0,     0,  1025,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,   609,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   610,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
    1026,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,  2904,  1027,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,  1028,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     612,   432,     0,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,     0,   442,  1029,  1030,     0,     0,   445,
     446,   613,   448,   614,  1031,   450,   451,   615,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
    1032,     0,   472,   473,   474,   475,   476,   477,   478,     0,
       0,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,  1033,     0,     0,     0,     0,
       0,     0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,
       0,  2905,     0,     0,     0,     0,  1039,  1040,  1041,  1042,
     109,   994,   632,   995,   996,   997,   998,   999,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,  1000,     0,     0,   121,
     122,   123,     0,   124,   125,   126,   127,   128,   129,   130,
    3350,  1001,   133,  1002,  1003,     0,   136,   137,   138,   139,
     140,   141,  1004,   602,   142,   143,  1005,  1006,   146,     0,
     147,   148,   149,   150,   603,     0,   604,     0,  1007,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,   169,   170,   171,  3351,
     173,   174,   175,   176,   177,   178,   179,  1008,  1009,   182,
    1010,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   767,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,  1011,   211,   212,   213,   214,
     215,   605,  1012,   217,     0,   218,   219,  1013,   221,     0,
     222,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   231,     0,  1014,  1015,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,  1016,  1017,
       0,  1018,     0,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,
       0,   281,   282,   283,   284,   285,   286,   287,   288,  1019,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,  1020,   309,
    1021,   311,   312,   313,   314,  1022,   315,   316,   317,   318,
    1023,   607,   320,  1024,   322,   323,   324,     0,   325,   326,
       0,     0,  1025,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,   609,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     610,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,  1026,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,  1027,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,  1028,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   612,
     432,     0,   433,   434,     0,   435,   436,   437,   438,   439,
     440,   441,     0,   442,  1029,  1030,     0,     0,   445,   446,
     613,   448,   614,  1031,   450,   451,   615,   453,   454,  3352,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,  1032,
       0,   472,   473,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,  1033,     0,     0,     0,     0,     0,
       0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,
    1038,     0,     0,     0,     0,  1039,  1040,  1041,  1042,   109,
     994,   632,   995,   996,   997,   998,   999,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
       0,     0,     0,     0,     0,  1000,     0,     0,   121,   122,
     123,     0,   124,   125,   126,   127,   128,   129,   130,   131,
    1001,   133,  1002,  1003,     0,   136,   137,   138,   139,   140,
     141,  1004,   602,   142,   143,  1005,  1006,   146,     0,   147,
     148,   149,   150,   603,     0,   604,     0,  1007,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,   169,   170,   171,  3351,   173,
     174,   175,   176,   177,   178,   179,  1008,  1009,   182,  1010,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   767,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,  1011,   211,   212,   213,   214,   215,
     605,  1012,   217,     0,   218,   219,  1013,   221,     0,   222,
       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,
       0,   231,     0,  1014,  1015,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,  1016,  1017,     0,
    1018,     0,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,     0,     0,   277,   278,   279,   280,     0,
     281,   282,   283,   284,   285,   286,   287,   288,  1019,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,  1020,   309,  1021,
     311,   312,   313,   314,  1022,   315,   316,   317,   318,  1023,
     607,   320,  1024,   322,   323,   324,     0,   325,   326,     0,
       0,  1025,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,   609,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   610,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,  1026,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,  1027,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,  1028,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   612,   432,
       0,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,     0,   442,  1029,  1030,     0,     0,   445,   446,   613,
     448,   614,  1031,   450,   451,   615,   453,   454,  3352,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,  1032,     0,
     472,   473,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,  1033,     0,     0,     0,     0,     0,     0,
    1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,
       0,     0,     0,     0,  1039,  1040,  1041,  1042,   109,   994,
     632,   995,   996,   997,   998,   999,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,  1000,     0,     0,   121,   122,   123,
       0,   124,   125,   126,   127,   128,   129,   130,   131,  1001,
     133,  1002,  1003,     0,   136,   137,   138,   139,   140,   141,
    1004,   602,   142,   143,  1005,  1006,   146,     0,   147,   148,
     149,   150,   603,     0,   604,     0,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,  1008,  1009,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   767,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,  1011,   211,   212,   213,   214,   215,   605,
    1012,   217,     0,   218,   219,  1013,   221,     0,   222,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
     231,     0,  1014,  1015,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,  1016,  1017,     0,  1018,
       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   278,   279,   280,     0,   281,
     282,   283,   284,   285,   286,   287,   288,  1019,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,  1020,   309,  1021,   311,
     312,   313,   314,     0,   315,   316,   317,   318,  1023,   607,
     320,  1024,   322,   323,   324,     0,   325,   326,     0,     0,
    1025,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,   609,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   610,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,  1026,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,  1027,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
    1028,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   612,   432,     0,
     433,   434,     0,   435,   436,   437,   438,   439,   440,   441,
       0,   442,  1029,  1030,     0,     0,   445,   446,   613,   448,
     614,  1031,   450,   451,   615,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,  1032,     0,   472,
     473,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,     0,     0,     0,     0,     0,     0,     0,  1450,
    1451,     0,     0,     0,     0,     0,  1037,     0,  1038,     0,
       0,     0,     0,  1039,  1040,  1041,  1042,   109,   994,   632,
     995,   996,   997,   998,   999,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,     0,     0,  1000,     0,     0,   121,   122,   123,     0,
     124,   125,   126,   127,   128,   129,   130, -1973,  1001,   133,
    1002,  1003,     0,   136,   137,   138,   139,   140,   141,  1004,
     602,   142,   143,  1005,  1006,   146,     0,   147,   148,   149,
     150,   603,     0,   604,     0,  1007,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,   169,   170,   171,  3351,   173,   174,   175,
     176,   177,   178,   179,  1008,  1009,   182,  1010,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   767,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,  1011,   211,   212,   213,   214,   215,   605,  1012,
     217,     0,   218,   219,  1013,   221,     0,   222,     0,   223,
     224,     0,   225,   226,   227,   228, -1973,   230,     0,   231,
       0,  1014,  1015,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242, -1973,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,  1016,  1017,     0,  1018,     0,
     266,     0,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,     0,   277,   278,   279, -1973,     0,   281,   282,
     283,   284,   285,   286,   287,   288,  1019,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,  1020,   309,  1021,   311,   312,
     313,   314,     0,   315,   316,     0,   318,  1023,   607,   320,
    1024,   322,   323,   324,     0,   325,   326,     0,     0,  1025,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
     609,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   610,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,  1026,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,  1027,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411, -1973,   413,   414,  1028,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   612,   432,     0,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,     0,
     442,  1029,  1030,     0,     0,   445,   446,   613,   448,   614,
    1031,   450,   451,   615,   453,   454,  3352,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,  1032,     0,   472,   473,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500, -1973,     0,     0,     0,     0,     0,     0,  1034,  1035,
    1036,     0,     0,     0,     0,  1037,     0,  1038,     0,     0,
       0,     0,  1039,  1040,  1041,  1042,   109,   994,   632,   995,
     996,     0,   998,   999,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
       0,     0,  1000,     0,     0,   121,   122,   123,     0,   124,
     125,   126,   127,   128,   129,   130,   131,  1001,   133,  1002,
    1003,     0,   136,   137,   138,   139,   140,   141,  1004,   602,
     142,   143,  1005,  1006,   146,     0,   147,   148,   149,   150,
     603,     0,   604,     0,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,  1008,  1009,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   767,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,  1011,   211,   212,   213,   214,   215,   605,  1012,   217,
       0,   218,   219,  1013,   221,     0,   222,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   231,     0,
    1014,  1015,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,  1016,  1017,     0,  1018,     0,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   278,   279,   280,     0,   281,   282,   283,
     284,   285,   286,   287,   288,  1019,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,  1020,   309,  1021,   311,   312,   313,
     314,     0,   315,   316,   317,   318,  1023,   607,   320,  1024,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,   609,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   610,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,  1026,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,  2098,  2099,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,  1028,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   612,   432,     0,   433,   434,
       0,   435,   436,   437,   438,   439,   440,   441,     0,   442,
    1029,  1030,     0,     0,   445,   446,   613,   448,   614,  1031,
     450,   451,   615,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,  1032,     0,   472,   473,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
       0,     0,     0,     0,     0,     0,     0,  2100,  2101,     0,
       0,     0,     0,     0,  1037,     0,  1038,     0,     0,     0,
       0,  1039,  1040,  1041,  1042,   109,   994,   632,   995,   996,
     997,   998,   999,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,  1000,     0,     0,   121,   122,   123,     0,   124,   125,
     126,   127,   128,   129,   130,   131,  1001,   133,  1002,  1003,
       0,   136,   137,   138,   139,   140,   141,  1004,   602,   142,
     143,  1005,  1006,   146,     0,   147,   148,   149,   150,   603,
       0,   604,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,  1008,  1009,   182,     0,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   767,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
    1011,   211,   212,   213,   214,   215,   605,  1012,   217,     0,
     218,   219,  1013,   221,     0,   222,     0,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,  1014,
    1015,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,  1016,  1017,     0,  1018,     0,   266,     0,
     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
       0,   277,   278,   279,   280,     0,   281,   282,   283,   284,
     285,   286,   287,   288,  1019,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,  1020,   309,  1021,   311,   312,   313,   314,
       0,   315,   316,   317,   318,  1023,   607,   320,  1024,   322,
     323,   324,     0,   325,   326,     0,     0,  1025,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,   609,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   610,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,  1026,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
    1027,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,  1028,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   612,   432,     0,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,     0,   442,  1029,
    1030,     0,     0,   445,   446,   613,   448,   614,  1031,   450,
     451,   615,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,  1032,     0,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,     0,
       0,     0,     0,     0,     0,     0,  1450,  1451,     0,     0,
       0,     0,     0,  1037,     0,  1038,     0,     0,     0,     0,
    1039,  1040,  1041,  1042,   109,   994,   632,   995,   996,     0,
     998,   999,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
    1000,     0,     0,   121,   122,   123,     0,   124,   125,   126,
     127,   128,   129,   130,   131,  1001,   133,  1002,  1003,     0,
     136,   137,   138,   139,   140,   141,  1004,   602,   142,   143,
    1005,  1006,   146,     0,   147,   148,   149,   150,   603,     0,
     604,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,  1008,  1009,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   767,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,  1011,
     211,   212,   213,   214,   215,   605,  1012,   217,     0,   218,
     219,  1013,   221,     0,   222,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,   231,     0,  1014,  1015,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,  1016,  1017,     0,  1018,     0,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,   287,   288,  1019,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,  1020,   309,  1021,   311,   312,   313,   314,     0,
     315,   316,   317,   318,  1023,   607,   320,  1024,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,   609,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   610,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,  1026,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,  1027,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,  1028,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   612,   432,     0,   433,   434,     0,   435,
     436,   437,   438,   439,   440,   441,     0,   442,  1029,  1030,
       0,     0,   445,   446,   613,   448,   614,  1031,   450,   451,
     615,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,  1032,     0,   472,   473,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,     0,     0,
       0,     0,     0,     0,   109,   994,   632,   995,   996,   997,
     998,   999,  1037,     0,  1038,     0,     0,     0,     0,  1039,
    1040,  1041,  1042,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
    1000,     0,     0,   121,   122,   123,     0,   124,   125,   126,
     127,   128,   129,   130,     0,  1001,   133,  1002,  1003,     0,
     136,   137,   138,   139,   140,   141,  1004,   602,   142,   143,
    1005,  1006,   146,     0,   147,   148,   149,   150,   603,     0,
     604,     0,  1007,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,  1008,  1009,   182,  1010,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   767,   198,   199,     0,   200,   201,   202,
       0,   203,     0,   205,     0,   206,   207,   208,   209,  1011,
     211,   212,   213,   214,   215,   605,  1012,   217,     0,   218,
     219,  1013,   221,     0,   222,     0,   223,   224,     0,   225,
     226,   227,   228,     0,   230,     0,   231,     0,  1014,  1015,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,  1016,  1017,     0,  1018,     0,   266,     0,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,  1019,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,  1020,   309,  1021,   311,   312,   313,   314,     0,
     315,   316,     0,   318,  1023,   607,   320,  1024,   322,   323,
     324,     0,   325,   326,     0,     0,  1025,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,   609,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   610,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,  1026,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,  1027,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   413,   414,  1028,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   612,   432,     0,   433,   434,     0,   435,
     436,   437,   438,   439,   440,   441,     0,   442,  1029,  1030,
       0,     0,   445,   446,   613,   448,   614,  1031,   450,   451,
     615,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,  1032,     0,   472,   473,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,     0,     0,
       0,     0,     0,     0,     0,  1034,  1035,  1036,     0,   837,
    1410,   632,  1037,     0,  1038,   998,     0,     0,     0,  1039,
    1040,  1041,  1042,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
       0,     0,     0,   838,     0,     0,     0,     0,   839,   122,
     123,     0,   124,   125,   126,   840,   128,   129,   130,   841,
     842,   843,   844,   845,     0,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   846,   847,   146,     0,   147,
     148,   149,   150,   848,     0,   849,     0,   850,   154,   155,
     156,   157,   158,   851,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,   852,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   853,   854,   182,     0,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,   855,   211,   212,   213,   214,   215,
     856,  1411,   217,     0,   218,   219,   857,   221,     0,   222,
       0,   223,   858,     0,   859,   226,   227,   860,   861,   230,
       0,   231,     0,   862,   863,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   864,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
     865,   866,   258,   259,   260,   261,   262,   867,   868,     0,
     869,     0,   266,   870,   871,   269,   872,   271,   272,   273,
     274,   275,   276,     0,     0,   277,   873,   279,   874,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   875,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   876,   877,   878,
     311,   312,   313,   879,     0,   315,   316,   880,   318,     0,
     881,   320,   882,   322,   323,   324,     0,   325,   326,  1412,
       0,   327,   328,   329,     0,     0,   330,   331,   883,   884,
     334,   885,   886,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   887,
     888,   351,   352,   889,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   890,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     891,   387,   388,   389,   892,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,   893,   402,   403,
     404,   405,   406,   407,   894,   409,   410,   411,   895,   413,
     414,   896,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   897,   430,   898,   432,
       0,   433,   434,     0,   435,   899,   437,   438,   439,   440,
     441,     0,   442,   900,   901,     0,     0,   445,   446,   902,
     448,   903,  1413,   450,   451,   904,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,  1253,   906,     0,
     472,   907,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   908,   909,
     910,   911,   912,   913,   914,   915,   916,   917,   918,   497,
     498,   499,   500,     0,     0,     0,     0,     0,     0,     0,
    1414,  1415,  2286,     0,   109,   994,   632,   995,   996,  2287,
     998,     0,     0,     0,     0,     0,     0,  1042,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
    1000,     0,     0,   121,   122,   123,     0,   124,   125,   126,
     127,   128,   129,   130,   131,  1001,   133,  1002,  1003,     0,
     136,   137,   138,   139,   140,   141,  1004,     0,   142,   143,
    1005,  1006,   146,     0,   147,   148,   149,   150,   151,     0,
     152,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,  1008,  1009,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   767,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,  1011,
     211,   212,   213,   214,   215,   216,  1012,   217,     0,   218,
     219,  1013,   221,     0,   222,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,   231,  2922,  1014,  1015,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,  1016,  1017,     0,  1018,     0,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,  1020,   309,  1021,   311,   312,   313,   314,     0,
     315,   316,   317,   318,  1023,   319,   320,  1024,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,  1026,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,  1028,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,   433,   434,     0,   435,
     436,   437,   438,   439,   440,   441,     0,   442,  1029,  1030,
       0,     0,   445,   446,   447,   448,   449,  1031,   450,   451,
     452,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,  1032,     0,   472,   473,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,     0,     0,
       0,     0,   109,   994,   632,   995,   996,     0,   998,     0,
       0,     0,  1037,     0,  2640,     0,     0,     0,     0,  1039,
    1040,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,  1000,     0,
       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,
     129,   130,   131,  1001,   133,  1002,  1003,     0,   136,   137,
     138,   139,   140,   141,  1004,     0,   142,   143,  1005,  1006,
     146,     0,   147,   148,   149,   150,   151,     0,   152,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,  1008,
    1009,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   767,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,  1011,   211,   212,
     213,   214,   215,   216,  1012,   217,     0,   218,   219,  1013,
     221,     0,   222,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,   231,     0,  1014,  1015,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
    1016,  1017,     0,  1018,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    1020,   309,  1021,   311,   312,   313,   314,     0,   315,   316,
     317,   318,  1023,   319,   320,  1024,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,  1026,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,  1028,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,     0,   442,  1029,  1030,     0,     0,
     445,   446,   447,   448,   449,  1031,   450,   451,   452,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,  1032,     0,   472,   473,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,     0,     0,     0,     0,
     751,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1037,     0,  2640,     0,     0,     0,     0,  1039,  1040,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,   752,     0,     0,     0,     0,   753,
     122,   123,     0,   124,   125,   126,   754,   128,   129,   130,
       0,   755,   756,   757,   758,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   759,   760,   146,     0,
     147,   148,   149,   150,     0,     0,   761,     0,   762,   154,
     155,   156,   157,   158,   763,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,   764,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   765,   766,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   767,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,     0,   211,   212,   213,   214,
     215,     0,     0,   217,     0,   218,   219,   768,   221,     0,
     222,     0,   223,   769,     0,   770,   226,   227,     0,   771,
     230,     0,   231,     0,     0,     0,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   773,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   774,     0,   258,   259,   260,   261,   262,   775,   776,
       0,   777,     0,   266,   778,   779,   269,   780,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   781,   279,   782,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   783,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   784,   785,
     786,   311,   312,   313,     0,     0,   315,   316,   787,   318,
       0,     0,   320,   788,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,     0,
     789,   334,   790,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
       0,   791,   351,   352,     0,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   792,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   793,   387,   388,   389,   794,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,   795,   402,
     403,   404,   405,   406,   407,   796,   409,   410,   411,   797,
     413,   414,   798,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   799,   430,     0,
     432,     0,   433,   434,     0,   435,   800,   437,   438,   439,
     440,   441,     0,   442,   801,   802,     0,     0,   445,   446,
       0,   448,     0,     0,   450,   451,   803,   453,   454,   455,
     456,   457,   804,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,     0,   805,
       0,   472,   806,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   508,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     497,   498,   499,   500,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
       0, -1052,     0,     0, -1052,     0,   953,     0,     0,   122,
     123,     0,   124,   125,   126,     0,   128,   129,   130,   131,
     132,     0,   134,   135,     0,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   144,   145,   146,     0,   147,
     148,   149,   150,   151,     0,     0,     0,   153,   154,   155,
     156,   157,   158,     0,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,   -57,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   -57,   218,   219,   220,   221,   -57,   222,
       0,   223,     0,     0,     0,   226,   227,   509,     0,   230,
       0,   231,     0,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
       0,   257,   258,   259,   260,   261,   262,   263,   264,   -57,
     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,
     274,   275,   276,     0,     0,   277,     0,   279,     0,   -57,
     281,   282,   283,   284,   285,   286,   287,   288,   510,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,
     319,   320,   321,   322,   323,   324,   -57,   325,   326,     0,
       0,   327,   328,   329,     0,   -57,   330,   331,   332,     0,
     334,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   349,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   511,   430,   431,   432,
       0,   433,   434,     0,   435,     0,   437,   438,   439,   440,
     441,     0,   442,   443,   444,     0,     0,   445,   446,   447,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
     457,   -57,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,     0,
     472,     0,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   508,     0,   530,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1107,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   122,   123,     0,   124,   125,   126,     0,
     128,   129,   130,   131,   132,     0,   134,   135,     0,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,
     145,   146,     0,   147,   148,   149,   150,   151,     0,     0,
       0,   153,   154,   155,   156,   157,   158,     0,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,     0,   218,   219,
     220,   221,     0,   222,     0,   223,     0,     0,     0,   226,
     227,   509,     0,   230,     0,   231,     0,   232,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,
       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,
       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   510,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,   332,     0,   334,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     511,   430,   431,   432,     0,   433,   434,     0,   435,     0,
     437,   438,   439,   440,   441,     0,   442,   443,   444,     0,
       0,   445,   446,   447,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,     0,   472,     0,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   837,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2371,  3095,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     3,     4,
       0,   838,     0,     0,     0,     0,   839,   122,   123,     0,
     124,   125,   126,   840,   128,   129,   130,   841,   842,   843,
     844,   845,     0,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   846,   847,   146,     0,   147,   148,   149,
     150,   848,     0,   849,     0,   850,   154,   155,   156,   157,
     158,   851,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,   852,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   853,   854,   182,     0,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,   855,   211,   212,   213,   214,   215,   856,     0,
     217,     0,   218,   219,   857,   221,     0,   222,     0,   223,
     858,    21,   859,   226,   227,   860,   861,   230,     0,   231,
       0,   862,   863,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   864,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   865,   866,
     258,   259,   260,   261,   262,   867,   868,     0,   869,     0,
     266,   870,   871,   269,   872,   271,   272,   273,   274,   275,
     276,     0,     0,   277,   873,   279,   874,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   875,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   876,   877,   878,   311,   312,
     313,   879,     0,   315,   316,   880,   318,     0,   881,   320,
     882,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,   883,   884,   334,   885,
     886,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    25,    26,    27,     0,   347,   348,   887,   888,   351,
     352,   889,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   890,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   891,   387,
     388,   389,   892,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    32,   893,   402,   403,   404,   405,
     406,   407,   894,   409,   410,   411,   895,   413,   414,   896,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   897,   430,   898,   432,     0,   433,
     434,    37,   435,   899,   437,   438,   439,   440,   441,     0,
     442,   900,   901,     0,     0,   445,   446,   902,   448,   903,
       0,   450,   451,   904,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,    39,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   905,   906,     0,   472,   907,
     474,   475,   476,   477,   478,     0,     0,   479,     0,    43,
     480,   481,   482,   483,   484,   485,   908,   909,   910,   911,
     912,   913,   914,   915,   916,   917,   918,   497,   498,   499,
     500,     0,   109,    44,   530,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,
       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,     0,   602,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   603,     0,   604,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   605,     0,   217,     0,   218,   219,   220,
     221,     0,   222,     0,   223,   224,    21,   225,   226,   227,
     228,   229,   230,     0,   231,     0,   232,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   606,     0,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,     0,   607,   320,   321,   322,   323,   324,     0,
     325,   326,     0,   608,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,   609,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    25,    26,    27,     0,
     347,   348,   610,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,   390,   611,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    32,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   612,   432,     0,   433,   434,    37,   435,   436,   437,
     438,   439,   440,   441,     0,   442,   443,   444,     0,     0,
     445,   446,   613,   448,   614,     0,   450,   451,   615,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,    39,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     616,   471,     0,   472,   473,   474,   475,   476,   477,   478,
       0,     0,   479,     0,    43,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,     0,   109,    44,   530,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   617,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,     0,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,
     602,   142,   143,   144,   145,   146,     0,   147,   148,   149,
     150,   603,     0,   604,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   605,     0,
     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
       0,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   606,     0,   277,   278,   279,   280,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,   315,   316,   317,   318,     0,   607,   320,
     321,   322,   323,   324,     0,   325,   326,     0,   608,   327,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
     609,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   610,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,   390,   611,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   612,   432,     0,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,     0,
     442,   443,   444,     0,     0,   445,   446,   613,   448,   614,
       0,   450,   451,   615,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   616,   471,     0,   472,   473,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   109,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   617,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,     0,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,     0,   136,   137,   138,
     139,   140,   141,     0,   602,   142,   143,   144,   145,   146,
       0,   147,   148,   149,   150,   603,     0,   604,     0,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   605,     0,   217,     0,   218,   219,   220,   221,
       0,   222,     0,   223,   224,     0,   225,   226,   227,   228,
     229,   230,     0,   231,     0,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,     0,     0,   277,   278,   279,
     280,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,   316,   317,
     318,     0,   607,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,   609,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   610,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,   390,   611,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     612,   432,     0,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,     0,   442,   443,   444,     0,     0,   445,
     446,   613,   448,   614,     0,   450,   451,   615,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,     0,   472,   473,   474,   475,   476,   477,   478,     0,
       0,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   109,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   122,   123,     0,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
       0,   136,   137,   138,   139,   140,   141,     0,   602,   142,
     143,   144,   145,   146,     0,   147,   148,   149,   150,   603,
       0,   604,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   605,     0,   217,     0,
     218,   219,   220,   221,     0,   222,     0,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
       0,   277,   278,   279,   280,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
       0,   315,   316,   317,   318,     0,   607,   320,   321,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,   609,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   610,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   612,   432,     0,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,     0,   442,   443,
     444,     0,     0,   445,   446,   613,   448,   614,     0,   450,
     451,   615,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,     0,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   508,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3179,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,   702,   118,   119,   120,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,     0,   124,   125,   126,     0,   128,   129,   130,   131,
     132,     0,   134,   135,     0,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   144,   145,   146,     0,   147,
     148,   149,   150,   151,     0,     0,     0,   153,   154,   155,
     156,   157,   158,     0,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,     0,   218,   219,   220,   221,     0,   222,
       0,   223,     0,    21,     0,   226,   227,   509,     0,   230,
       0,   231,     0,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,
     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   510,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,
     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,   332,     0,
     334,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    25,    26,    27,     0,   347,   348,   349,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    32,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   511,   430,   431,   432,
       0,   433,   434,    37,   435,     0,   437,   438,   439,   440,
     441,     0,   442,   703,   444,     0,     0,   704,   446,   447,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,    39,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   616,   471,     0,
     472,     0,   474,   475,   476,   477,   478,     0,     0,   479,
       0,    43,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   508,     0,    44,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   122,   123,     0,   124,   125,   126,     0,
     128,   129,   130,   131,   132,     0,   134,   135,     0,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,
     145,   146,     0,   147,   148,   149,   150,   151,     0,     0,
       0,   153,   154,   155,   156,   157,   158,     0,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,     0,   218,   219,
     220,   221,     0,   222,     0,   223,     0,    21,     0,   226,
     227,   509,     0,   230,     0,   231,     0,   232,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,
       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,
       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   510,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,   332,     0,   334,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    25,    26,    27,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      32,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     511,   430,   431,   432,     0,   433,   434,    37,   435,     0,
     437,   438,   439,   440,   441,     0,   442,   443,   444,     0,
       0,   445,   446,   447,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
      39,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   616,   471,     0,   472,     0,   474,   475,   476,   477,
     478,     0,     0,   479,     0,    43,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,     0,   508,    44,
     530,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,
       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,
     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,
     223,     0,     0,     0,   226,   227,   509,     0,   230,     0,
     231,     0,   232,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   510,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   511,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,     0,   472,
       0,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   508,     0,   530,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   938,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,
     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,
     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,
     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,
     509,     0,   230,     0,   231,     0,   232,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   510,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   511,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,     0,   472,     0,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   508,     0,   530,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1502,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,     0,   124,
     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,
     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,
     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,
       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,
       0,     0,   226,   227,   509,     0,   230,     0,   231,     0,
     232,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   510,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   511,   430,   431,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,     0,   472,     0,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     508,     0,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2124,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,
     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,
     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,
     222,     0,   223,     0,     0,     0,   226,   227,   509,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   510,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   511,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
       0,   472,     0,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   508,     0,   530,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2371,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,
       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,
       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,
     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,
     226,   227,   509,     0,   230,     0,   231,     0,   232,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   510,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   511,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,     0,   472,     0,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   508,     0,
     530,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2479,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,
       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,
     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,
     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,
     223,     0,     0,     0,   226,   227,   509,     0,   230,     0,
     231,     0,   232,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   510,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,     0,   334,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   349,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   511,   430,   431,   432,     0,
     433,   434,     0,   435,     0,   437,   438,   439,   440,   441,
       0,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,   450,   451,   452,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,   470,   471,     0,   472,
       0,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   508,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3089,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,
     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,
     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,
     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,
     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,
     509,     0,   230,     0,   231,     0,   232,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   510,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,   332,     0,   334,     0,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   349,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   511,
     430,   431,   432,     0,   433,   434,     0,   435,     0,   437,
     438,   439,   440,   441,     0,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,   450,   451,   452,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
     470,   471,     0,   472,     0,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   508,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1982,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,     0,   124,
     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,
     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,
     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,
       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,
       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,
       0,     0,   226,   227,   509,     0,   230,     0,   231,     0,
     232,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   510,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,   332,     0,   334,     0,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   349,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   511,   430,   431,   432,     0,   433,   434,
       0,   435,     0,   437,   438,   439,   440,   441,     0,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
     450,   451,   452,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,   470,   471,     0,   472,     0,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     508,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2084,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,
     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,
     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,
     222,     0,   223,     0,     0,     0,   226,   227,   509,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   510,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   511,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
       0,   472,     0,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,     0,  2786,  1410,   632,     0,     0,
    1962,   998,     0,     0,     0,     0,     0,  1963,  1964,     0,
    2956,  1965,  1966,  1967,   110,   111,   112,   113,   114,   115,
     116,   117,  1186,   118,   119,   120,  1187,  1188,  1189,  2787,
    1190,  1191,  1192,  1193,  2788,   122,   123,  1194,   124,   125,
     126,  2789,   128,   129,   130,     0,   755,  2790,   757,   758,
    1195,   136,   137,   138,   139,   140,   141,  1196,  1197,   142,
     143,   759,   760,   146,  1198,   147,   148,   149,   150,     0,
    1199,  2791,  1200,  2792,   154,   155,   156,   157,   158,  2793,
     160,   161,   162,  1201,   163,   164,   165,   166,   167,   168,
    1202,  2794,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   765,   766,   182,  1203,   183,  1204,   184,   185,
     186,   187,   188,   189,  1205,   190,   191,   192,   193,   194,
    1206,  1207,   195,   196,   767,   198,   199,  1208,   200,   201,
     202,  1209,   203,   204,   205,  1210,   206,   207,   208,   209,
       0,   211,   212,   213,   214,   215,     0,  1211,   217,  1212,
     218,   219,   768,   221,  1213,   222,  1214,   223,  2795,  1215,
    2796,   226,   227,  2797,  2798,   230,  1216,   231,  1217,     0,
       0,   234,   235,  1218,   236,   237,   238,   239,   240,   241,
     242,  2799,   244,   245,   246,   247,  1219,   248,   249,   250,
     251,   252,   253,   254,  1220,   255,  2800,     0,   258,   259,
     260,   261,   262,   775,   776,  1221,   777,  1222,   266,  2801,
    2802,   269,  2803,   271,   272,   273,   274,   275,   276,  1223,
    1224,   277,  2804,   279,  2805,  1225,   281,   282,   283,   284,
     285,   286,   287,   288,  2806,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   784,  2807,   786,   311,   312,   313,  2808,
    1226,   315,   316,  2809,   318,  1227,     0,   320,   788,   322,
     323,   324,  1228,   325,   326,  1229,  1230,  2810,   328,   329,
    1231,  1232,   330,   331,     0,  2811,   334,  2812,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,  1233,
    1234,  1235,  1236,   347,   348,     0,  2813,   351,   352,     0,
     354,   355,   356,  1237,   357,   358,   359,   360,   361,   362,
    1238,   363,   364,   365,   792,   367,   368,   369,   370,  1239,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,  1240,   384,   385,  2814,   387,   388,   389,
     794,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,  1241,  2815,   402,   403,   404,   405,   406,   407,
    2816,   409,   410,   411,  2817,   413,   414,   798,   416,  1242,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,  2818,   430,     0,   432,  1243,   433,   434,  1244,
     435,  2819,   437,   438,   439,   440,   441,  1245,   442,   801,
     802,  1246,  1247,   445,   446,     0,   448,     0,  1248,   450,
     451,  2820,   453,   454,   455,   456,   457,  2821,  1250,   458,
     459,   460,  1251,   461,   462,   463,   464,  1252,   465,   466,
     467,   468,   469,     0,   805,  1254,   472,  2822,   474,   475,
     476,   477,   478,  1255,  1256,   479,  1257,  1258,   480,   481,
     482,   483,   484,   485,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   497,   498,   499,   500,     0,
     508,     0,  1968,  1969,  1970,  1962,  2823,  2824,  1973,  1974,
    1975,  1976,  1963,  1964,     0,     0,  1965,  1966,  1967,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,
     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,
     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,
     222,     0,   223,     0,     0,     0,   226,   227,   509,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   510,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   511,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
       0,   472,     0,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,     0,     0,     0,  1968,  1969,  1970,
       0,  1971,  1972,  1973,  1974,  1975,  1976,  1556,     0,     0,
    1557,     0,     0,     0,  1558,  1559,  1560,  1561,  1562,  1563,
    1564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1565,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1567,     0,  1556,     0,     0,
    1557,     0,  1568,     0,  1558,  1559,  1560,  1561,  1562,  1563,
    1564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1565,     0,  1569,     0,     0,
       0,     0,     0,     0,     0,  1567,     0,  1556,     0,     0,
    1557,     0,  1568,     0,  1558,  1559,  1560,  1561,  1562,  1563,
    1564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1565,     0,  1569,     0,     0,
       0,     0,     0,     0,     0,  1567,     0,  1556,     0,     0,
    1557,     0,  1568,     0,  1558,  1559,  1560,  1561,  1562,  1563,
    1564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1565,     0,  1569,     0,     0,
       0,     0,     0,     0,     0,  1567,     0,  1556,     0,     0,
    1557,  1570,  1568,     0,  1558,  1559,  1560,  1561,  1562,  1563,
    1564,     0,     0,     0,     0,     0,     0,     0,  1571,     0,
       0,     0,     0,  1572,     0,  1565,     0,  1569,     0,     0,
       0,     0,     0,     0,     0,  1567,     0,     0,     0,     0,
       0,  1570,  1568,     0,     0,     0,  1573,  1574,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1571,     0,
       0,  1575,     0,  1572,     0,     0,     0,  1569,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1570,     0,     0,     0,     0,  1573,  1574,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1576,  1571,     0,
    1577,  1575,     0,  1572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1578,     0,     0,  1579,     0,     0,
       0,  1570,     0,     0,     0,     0,  1573,  1574,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1576,  1571,     0,
    1577,  1575,     0,  1572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1578,     0,     0,  1579,     0,     0,
       0,  1570,     0,     0,     0,     0,  1573,  1574,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1576,  1571,     0,
    1577,  1575,     0,  1572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1578,     0,     0,  1579,     0,     0,
       0,     0,     0,     0,     0,     0,  1573,  1574,     0,     0,
       0,  1580,     0,     0,     0,     0,     0,  1576,     0,     0,
    1577,  1575,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1578,     0,     0,  1579,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1580,     0,     0,     0,     0,     0,  1576,     0,     0,
    1577,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1578,     0,     0,  1579,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1580,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1581,     0,     0,  1582,
    1583,  1584,     0,  1585,  1586,  1587,  1588,  1589,  1590,     0,
       0,  1580,     0,  2388,     0,     0,     0,     0,     0,     0,
       0,  1556,     0,     0,  1557,     0,     0,     0,  1558,  1559,
    1560,  1561,  1562,  1563,  1564,     0,  1581,     0,     0,  1582,
    1583,  1584,     0,  1585,  1586,  1587,  1588,  1589,  1590,  1565,
       0,  1580,     0,  2405,     0,     0,     0,     0,     0,  1567,
       0,  1556,     0,     0,  1557,     0,  1568,     0,  1558,  1559,
    1560,  1561,  1562,  1563,  1564,     0,  1581,     0,     0,  1582,
    1583,  1584,     0,  1585,  1586,  1587,  1588,  1589,  1590,  1565,
       0,  1569,     0,  2613,     0,     0,     0,     0,     0,  1567,
       0,  1556,     0,     0,  1557,     0,  1568,     0,  1558,  1559,
    1560,  1561,  1562,  1563,  1564,     0,  1581,     0,     0,  1582,
    1583,  1584,     0,  1585,  1586,  1587,  1588,  1589,  1590,  1565,
       0,  1569,     0,  2665,     0,     0,     0,     0,     0,  1567,
       0,  1556,     0,     0,  1557,     0,  1568,     0,  1558,  1559,
    1560,  1561,  1562,  1563,  1564,     0,  1581,     0,     0,  1582,
    1583,  1584,     0,  1585,  1586,  1587,  1588,  1589,  1590,  1565,
       0,  1569,     0,  2732,     0,     0,     0,     0,     0,  1567,
       0,  1556,     0,     0,  1557,  1570,  1568,     0,  1558,  1559,
    1560,  1561,  1562,  1563,  1564,     0,     0,     0,     0,     0,
       0,     0,  1571,     0,     0,     0,     0,  1572,     0,  1565,
       0,  1569,     0,     0,     0,     0,     0,     0,     0,  1567,
       0,     0,     0,     0,     0,  1570,  1568,     0,     0,     0,
    1573,  1574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1571,     0,     0,  1575,     0,  1572,     0,     0,
       0,  1569,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1570,     0,     0,     0,     0,
    1573,  1574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1576,  1571,     0,  1577,  1575,     0,  1572,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,
       0,  1579,     0,     0,     0,  1570,     0,     0,     0,     0,
    1573,  1574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1576,  1571,     0,  1577,  1575,     0,  1572,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,
       0,  1579,     0,     0,     0,  1570,     0,     0,     0,     0,
    1573,  1574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1576,  1571,     0,  1577,  1575,     0,  1572,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,
       0,  1579,     0,     0,     0,     0,     0,     0,     0,     0,
    1573,  1574,     0,     0,     0,  1580,     0,     0,     0,     0,
       0,  1576,     0,     0,  1577,  1575,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,
       0,  1579,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1580,     0,     0,     0,     0,
       0,  1576,     0,     0,  1577,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,
       0,  1579,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1580,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1581,     0,     0,  1582,  1583,  1584,     0,  1585,  1586,  1587,
    1588,  1589,  1590,     0,     0,  1580,     0,  2948,     0,     0,
       0,     0,     0,     0,     0,  1556,     0,     0,  1557,     0,
       0,     0,  1558,  1559,  1560,  1561,  1562,  1563,  1564,     0,
    1581,     0,     0,  1582,  1583,  1584,     0,  1585,  1586,  1587,
    1588,  1589,  1590,  1565,     0,  1580,     0,  2955,     0,     0,
       0,     0,     0,  1567,     0,  1556,     0,     0,  1557,     0,
    1568,     0,  1558,  1559,  1560,  1561,  1562,  1563,  1564,     0,
    1581,     0,     0,  1582,  1583,  1584,     0,  1585,  1586,  1587,
    1588,  1589,  1590,  1565,     0,  1569,     0,  3108,     0,     0,
       0,     0,     0,  1567,     0,  1556,     0,     0,  1557,     0,
    1568,     0,  1558,  1559,  1560,  1561,  1562,  1563,  1564,     0,
    1581,     0,     0,  1582,  1583,  1584,     0,  1585,  1586,  1587,
    1588,  1589,  1590,  1565,     0,  1569,     0,  3130,     0,     0,
       0,     0,     0,  1567,     0,  1556,     0,     0,  1557,     0,
    1568,     0,  1558,  1559,  1560,  1561,  1562,  1563,  1564,     0,
    1581,     0,     0,  1582,  1583,  1584,     0,  1585,  1586,  1587,
    1588,  1589,  1590,  1565,     0,  1569,     0,  3230,     0,     0,
       0,     0,     0,  1567,     0,  1556,     0,     0,  1557,  1570,
    1568,     0,  1558,  1559,  1560,  1561,  1562,  1563,  1564,     0,
       0,     0,     0,     0,     0,     0,  1571,     0,     0,     0,
       0,  1572,     0,  1565,     0,  1569,     0,     0,     0,     0,
       0,     0,     0,  1567,     0,     0,     0,     0,     0,  1570,
    1568,     0,     0,     0,  1573,  1574,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1571,     0,     0,  1575,
       0,  1572,     0,     0,     0,  1569,  1144,     0,     0,     0,
       0,     0,  1145,     0,     0,     0,     0,     0,     0,  1570,
    1157,     0,     0,  1556,  1573,  1574,  1557,     0,     0,     0,
    1558,  1559,     0,     0,     0,  1576,  1571,     0,  1577,  1575,
    1158,  1572,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1578,     0,     0,  1579,     0,     0,     0,  1570,
       0,  1567,     0,     0,  1573,  1574,     0,     0, -1973,     0,
       0,     0,     0,     0,     0,  1576,  1571,     0,  1577,  1575,
       0,  1572,     0,     0,  1159,     0,     0,     0,     0,     0,
       0,     0,  1578,  1569,     0,  1579,     0,     0,     0,  1570,
       0,     0,     0,     0,  1573,  1574,     0,     0,     0,     0,
       0,     0,     0,  1146,     0,  1576,  1571,     0,  1577,  1575,
       0,  1572,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1578,     0,     0,  1579,     0,     0,     0,     0,
       0,     0,     0,     0,  1573,  1574,     0,     0,     0,  1580,
       0,     0,     0,     0,     0,  1576,  2947,     0,  1577,  1575,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1578,     0,     0,  1579,     0,  1160,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1973,     0,  1580,
       0,     0,     0,     0,     0,  1576,     0,     0,  1577,     0,
       0,     0,     0,     0, -1973,     0,     0,     0,     0, -1973,
       0,     0,  1578,     0,     0,  1579,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1161,     0,     0,  1580,
       0,     0,     0,     0,  1162,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1163, -1973,     0,     0,
       0,     0,     0,     0,  1581,     0,     0,  1582,  1583,  1584,
       0,  1585,  1586,  1587,  1588,  1589,  1590,  1147,     0,  1580,
       0,  3287,     0,     0,     0,     0,     0,     0,  1164,     0,
    1556,     0,     0,  1557,     0,     0,     0,  1558,  1559,  1560,
    1561,  1562,  1563,  1564,  1581,     0,     0,  1582,  1583,  1584,
    1578,  1585,  1586,  1587,  1588,  1589,  1590,     0,  1565,  1580,
       0,  3309,     0,     0,     0,     0,     0,     0,  1567,     0,
       0,     0,     0,  2171,     0,  1568,     0,  1149,     0,  1166,
       0,     0,     0,     0,  1581,     0,     0,  1582,  1583,  1584,
       0,  1585,  1586,  1587,  1588,  1589,  1590,     0,     0,  1741,
    1569,     0,  1167,     0,     0,     0,     0,  2172,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1169,     0,     0,  1581,     0,     0,  1582,  1583,  1584,
       0,  1585,  1586,  1587,  1588,  1589,  1590,     0,     0,  2686,
       0,     0,     0,     0,     0,     0,     0, -1973,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1581,     0,     0,  1582,  1583,  1584,
       0,  1585,  1586,  1587,  1588,  1589,  1590,     0,  1151,  3098,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1570,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1571,     0,     0,     0,     0,  1572,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1573,
    1574,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1973,     0,  1575,     0,     0,     0,     0,  1585,
    1586,  1587,  1588,  1589,  1590,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1576,     0,     0,  1577,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1578,     0,     0,
    1579,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1580,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1185,     0,     0,  1581,
       0,     0,  1582,  1583,  1584,     0,  1585,  1586,  1587,  1588,
    1589,  1590,     0,     0,  3271,   110,   111,   112,   113,   114,
     115,   116,   117,  1186,   118,   119,   120,  1187,  1188,  1189,
     838,  1190,  1191,  1192,  1193,   839,   122,   123,  1194,   124,
     125,   126,   840,   128,   129,   130,   841,   842,   843,   844,
     845,  1195,   136,   137,   138,   139,   140,   141,  1196,  1197,
     142,   143,   846,   847,   146,  1198,   147,   148,   149,   150,
     848,  1199,   849,  1200,   850,   154,   155,   156,   157,   158,
     851,   160,   161,   162,  1201,   163,   164,   165,   166,   167,
     168,  1202,   852,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   853,   854,   182,  1203,   183,  1204,   184,
     185,   186,   187,   188,   189,  1205,   190,   191,   192,   193,
     194,  1206,  1207,   195,   196,   197,   198,   199,  1208,   200,
     201,   202,  1209,   203,   204,   205,  1210,   206,   207,   208,
     209,   855,   211,   212,   213,   214,   215,   856,  1211,   217,
    1212,   218,   219,   857,   221,  1213,   222,  1214,   223,   858,
    1215,   859,   226,   227,   860,   861,   230,  1216,   231,  1217,
     862,   863,   234,   235,  1218,   236,   237,   238,   239,   240,
     241,   242,   864,   244,   245,   246,   247,  1219,   248,   249,
     250,   251,   252,   253,   254,  1220,   255,   865,   866,   258,
     259,   260,   261,   262,   867,   868,  1221,   869,  1222,   266,
     870,   871,   269,   872,   271,   272,   273,   274,   275,   276,
    1223,  1224,   277,   873,   279,   874,  1225,   281,   282,   283,
     284,   285,   286,   287,   288,   875,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   876,   877,   878,   311,   312,   313,
     879,  1226,   315,   316,   880,   318,  1227,   881,   320,   882,
     322,   323,   324,  1228,   325,   326,  1229,  1230,   327,   328,
     329,  1231,  1232,   330,   331,   883,   884,   334,   885,   886,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
    1233,  1234,  1235,  1236,   347,   348,   887,   888,   351,   352,
     889,   354,   355,   356,  1237,   357,   358,   359,   360,   361,
     362,  1238,   363,   364,   365,   890,   367,   368,   369,   370,
    1239,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,  1240,   384,   385,   891,   387,   388,
     389,   892,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,  1241,   893,   402,   403,   404,   405,   406,
     407,   894,   409,   410,   411,   895,   413,   414,   896,   416,
    1242,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   897,   430,   898,   432,  1243,   433,   434,
    1244,   435,   899,   437,   438,   439,   440,   441,  1245,   442,
     900,   901,  1246,  1247,   445,   446,   902,   448,   903,  1248,
     450,   451,   904,   453,   454,   455,   456,   457,  1249,  1250,
     458,   459,   460,  1251,   461,   462,   463,   464,  1252,   465,
     466,   467,   468,   469,  1253,   906,  1254,   472,   907,   474,
     475,   476,   477,   478,  1255,  1256,   479,  1257,  1258,   480,
     481,   482,   483,   484,   485,   908,   909,   910,   911,   912,
     913,   914,   915,   916,   917,   918,   497,   498,   499,   500,
     508,     0,     0,     0,     0,     0,     0,     0,     0,  1993,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,
     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,
     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,
     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,
     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,
     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,
     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,
     222,     0,   223,     0,     0,     0,   226,   227,   509,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   510,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
       0,   334,     0,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,     0,     0,   347,   348,
     349,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   511,   430,   431,
     432,     0,   433,   434,     0,   435,     0,   437,   438,   439,
     440,   441,     0,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,   450,   451,   452,   453,   454,   455,
     456,   457,     0,     0,   458,   459,   460,     0,   461,   462,
     463,   464,     0,   465,   466,   467,   468,   469,   470,   471,
       0,   472,     0,   474,   475,   476,   477,   478,     0,     0,
     479,     0,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   508,     0,     0,     0,     0,     0,
       0,     0,     0,  2606,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,
       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,
       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,
     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,
     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,
     226,   227,   509,     0,   230,     0,   231,     0,   232,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   510,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,     0,   334,     0,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
       0,     0,   347,   348,   349,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   511,   430,   431,   432,     0,   433,   434,     0,   435,
       0,   437,   438,   439,   440,   441,     0,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,   450,   451,
     452,   453,   454,   455,   456,   457,     0,     0,   458,   459,
     460,     0,   461,   462,   463,   464,     0,   465,   466,   467,
     468,   469,   470,   471,     0,   472,     0,   474,   475,   476,
     477,   478,     0,     0,   479,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   837,  1410,
     632,     0,     0,     0,   998,     0,     0,  2609,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,   838,     0,     0,     0,     0,   839,   122,   123,
       0,   124,   125,   126,   840,   128,   129,   130,   841,   842,
     843,   844,   845,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   846,   847,   146,     0,   147,   148,
     149,   150,   848,     0,   849,     0,   850,   154,   155,   156,
     157,   158,   851,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,   852,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   853,   854,   182,  1613,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,   855,   211,   212,   213,   214,   215,   856,
    1411,   217,     0,   218,   219,   857,   221,     0,   222,     0,
     223,   858,     0,   859,   226,   227,   860,   861,   230,     0,
     231,     0,   862,   863,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   864,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   865,
     866,   258,   259,   260,   261,   262,   867,   868,     0,   869,
       0,   266,   870,   871,   269,   872,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   873,   279,   874,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   875,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   876,   877,   878,   311,
     312,   313,   879,     0,   315,   316,   880,   318,     0,   881,
     320,   882,   322,   323,   324,     0,   325,   326,  1412,     0,
     327,   328,   329,     0,     0,   330,   331,   883,   884,   334,
     885,   886,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,   887,   888,
     351,   352,   889,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   890,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   891,
     387,   388,   389,   892,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,   893,   402,   403,   404,
     405,   406,   407,   894,   409,   410,   411,   895,   413,   414,
     896,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   897,   430,   898,   432,     0,
     433,   434,     0,   435,   899,   437,   438,   439,   440,   441,
       0,   442,   900,   901,     0,     0,   445,   446,   902,   448,
     903,  1413,   450,   451,   904,   453,   454,   455,   456,   457,
       0,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,  1253,   906,     0,   472,
     907,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   908,   909,   910,
     911,   912,   913,   914,   915,   916,   917,   918,   497,   498,
     499,   500,   837,  1410,   632,     0,     0,     0,   998,  1414,
    1415,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,
     118,   119,   120,     0,     0,     0,   838,     0,     0,     0,
       0,   839,   122,   123,     0,   124,   125,   126,   840,   128,
     129,   130,   841,   842,   843,   844,   845,     0,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,   846,   847,
     146,     0,   147,   148,   149,   150,   848,     0,   849,     0,
     850,   154,   155,   156,   157,   158,   851,   160,   161,   162,
       0,   163,   164,   165,   166,   167,   168,     0,   852,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   853,
     854,   182,  1615,   183,     0,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,
     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,   209,   855,   211,   212,
     213,   214,   215,   856,  1411,   217,     0,   218,   219,   857,
     221,     0,   222,     0,   223,   858,     0,   859,   226,   227,
     860,   861,   230,     0,   231,     0,   862,   863,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   864,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   865,   866,   258,   259,   260,   261,   262,
     867,   868,     0,   869,     0,   266,   870,   871,   269,   872,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   873,
     279,   874,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   875,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     876,   877,   878,   311,   312,   313,   879,     0,   315,   316,
     880,   318,     0,   881,   320,   882,   322,   323,   324,     0,
     325,   326,  1412,     0,   327,   328,   329,     0,     0,   330,
     331,   883,   884,   334,   885,   886,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,     0,     0,
     347,   348,   887,   888,   351,   352,   889,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   890,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   891,   387,   388,   389,   892,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
     893,   402,   403,   404,   405,   406,   407,   894,   409,   410,
     411,   895,   413,   414,   896,   416,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   897,
     430,   898,   432,     0,   433,   434,     0,   435,   899,   437,
     438,   439,   440,   441,     0,   442,   900,   901,     0,     0,
     445,   446,   902,   448,   903,  1413,   450,   451,   904,   453,
     454,   455,   456,   457,     0,     0,   458,   459,   460,     0,
     461,   462,   463,   464,     0,   465,   466,   467,   468,   469,
    1253,   906,     0,   472,   907,   474,   475,   476,   477,   478,
       0,     0,   479,     0,     0,   480,   481,   482,   483,   484,
     485,   908,   909,   910,   911,   912,   913,   914,   915,   916,
     917,   918,   497,   498,   499,   500,   837,  1410,   632,     0,
       0,     0,   998,  1414,  1415,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
     838,     0,     0,     0,     0,   839,   122,   123,     0,   124,
     125,   126,   840,   128,   129,   130,   841,   842,   843,   844,
     845,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   846,   847,   146,     0,   147,   148,   149,   150,
     848,     0,   849,     0,   850,   154,   155,   156,   157,   158,
     851,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,   852,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   853,   854,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,   855,   211,   212,   213,   214,   215,   856,  1411,   217,
       0,   218,   219,   857,   221,     0,   222,     0,   223,   858,
       0,   859,   226,   227,   860,   861,   230,     0,   231,     0,
     862,   863,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   864,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   865,   866,   258,
     259,   260,   261,   262,   867,   868,     0,   869,     0,   266,
     870,   871,   269,   872,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   873,   279,   874,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   875,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   876,   877,   878,   311,   312,   313,
     879,     0,   315,   316,   880,   318,     0,   881,   320,   882,
     322,   323,   324,     0,   325,   326,  1412,     0,   327,   328,
     329,     0,     0,   330,   331,   883,   884,   334,   885,   886,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,   887,   888,   351,   352,
     889,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   890,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   891,   387,   388,
     389,   892,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,   893,   402,   403,   404,   405,   406,
     407,   894,   409,   410,   411,   895,   413,   414,   896,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   897,   430,   898,   432,     0,   433,   434,
       0,   435,   899,   437,   438,   439,   440,   441,     0,   442,
     900,   901,     0,     0,   445,   446,   902,   448,   903,  1413,
     450,   451,   904,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,  1253,   906,     0,   472,   907,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   908,   909,   910,   911,   912,
     913,   914,   915,   916,   917,   918,   497,   498,   499,   500,
       0,     0,  1556,     0,     0,  1557,     0,  1414,  1415,  1558,
    1559,  1560,  1561,  1562,  1563,  1564,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1565,     0,     0,     0,     0,  2090,     0,     0,     0,     0,
    1567,     0,  1556,     0,     0,  1557,     0,  1568,     0,  1558,
    1559,  1560,  1561,  1562,  1563,  1564,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1565,     0,  1569,     0,     0,     0,     0,     0,     0,     0,
    1567,     0,  1556,     0,     0,  1557,     0,  1568,     0,  1558,
    1559,  1560,  1561,  1562,  1563,  1564,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1565,     0,  1569,     0,     0,     0,  2091,     0,     0,     0,
    1567,     0,  1556,     0,     0,  1557,     0,  1568,     0,  1558,
    1559,  1560,  1561,  1562,  1563,  1564,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1565,     0,  1569,     0,  1849,     0,     0,     0,     0,     0,
    1567,     0,     0,     0,     0,     0,  1570,  1568,     0,  1556,
       0,     0,  1557,     0,     0,     0,  1558,  1559,  1560,  1561,
    1562,  1563,  1564,  1571,     0,     0,     0,     0,  1572,     0,
       0,     0,  1569,     0,     0,     0,  1885,  1565,     0,     0,
       0,  1886,     0,     0,     0,     0,  1570,  1567,     0,     0,
       0,  1573,  1574,     0,  1568,     0,     0,     0,     0,     0,
       0,     0,     0,  1571,     0,     0,  1575,     0,  1572,     0,
       0,     0,     0,     0,     0,  3378,     0,     0,     0,  1569,
       0,     0,     0,     0,     0,     0,  1570,     0,     0,     0,
       0,  1573,  1574,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1576,  1571,     0,  1577,  1575,     0,  1572,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,
       0,     0,  1579,     0,     0,     0,  1570,     0,     0,     0,
       0,  1573,  1574,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1576,  1571,     0,  1577,  1575,     0,  1572,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,
       0,     0,  1579,     0,     0,     0,     0,     0,     0,     0,
       0,  1573,  1574,  1570,     0,     0,     0,     0,     0,     0,
       0,     0,  1576,     0,     0,  1577,  1575,     0,     0,     0,
    1571,     0,     0,     0,     0,  1572,     0,     0,     0,  1578,
       0,     0,  1579,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1580,     0,  1573,  1574,
       0,     0,  1576,     0,     0,  1577,     0,     0,     0,     0,
    3379,     0,     0,  1575,     0,     0,     0,     0,     0,  1578,
       0,     0,  1579,     0,     0,     0,     0,     0,     0,     0,
    1556,     0,     0,  1557,     0,     0,  1580,  1558,  1559,  1560,
    1561,  1562,  1563,  1564,     0,     0,     0,     0,     0,  1576,
       0,     0,  1577,     0,     0,     0,     0,     0,  1565,  2094,
       0,     0,  1891,     0,     0,     0,  1578,     0,  1567,  1579,
       0,     0,     0,     0,     0,  1568,  1580,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1856,     0,     0,     0,     0,     0,     0,     0,     0,
    1569,  1581,     0,     0,  1582,  1583,  1584,     0,  1585,  1586,
    1587,  1588,  1589,  1590,     0,     0,  1580,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1581,     0,     0,  1582,  1583,  1584,     0,  1585,  1586,
    1587,  1588,  1589,  1590,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1580,     0,     0,     0,  1556,     0,     0,
    1557,     0,     0,     0,  1558,  1559,  1560,  1561,  1562,  1563,
    1564,  1581,     0,     0,  1582,  1583,  1584,     0,  1585,  1586,
    1587,  1588,  1589,  1590,  1570,  1565,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1567,     0,     0,     0,     0,
       0,  1571,  1568,     0,     0,     0,  1572,     0,     0,     0,
       0,  1581,     0,     0,  1582,  1583,  1584,     0,  1585,  1586,
    1587,  1588,  1589,  1590,     0,     0,     0,  1569,     0,  1573,
    1574,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1575,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1581,     0,
       0,  1582,  1583,  1584,     0,  1585,  1586,  1587,  1588,  1589,
    1590,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1576,  1556,     0,  1577,  1557,     0,     0,     0,  1558,  1559,
    1560,  1561,  1562,  1563,  1564,     0,     0,  1578,     0,     0,
    1579,     0,     0,     0,     0,     0,     0,     0,     0,  1565,
       0,     0,     0,  1898,     0,     0,  1896,     0,     0,  1567,
       0,  1570,     0,     0,     0,     0,  1568,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1571,     0,
       0,     0,     0,  1572,     0,     0,     0,     0,     0,     0,
       0,  1569,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1573,  1574,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1575,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1580,     0,     0,     0,     0,     0,
       0,  1556,     0,     0,  1557,     0,     0,     0,  1558,  1559,
    1560,  1561,  1562,  1563,  1564,     0,     0,  1576,     0,     0,
    1577,     0,     0,     0,     0,     0,     0,     0,     0,  1565,
       0,     0,     0,     0,  1578,     0,     0,  1579,     0,  1567,
       0,     0,     0,     0,     0,  1570,  1568,     0,  1556,     0,
       0,  1557,     0,     0,     0,  1558,  1559,  1560,  1561,  1562,
    1563,  1564,  1571,     0,     0,     0,     0,  1572,     0,     0,
       0,  1569,     0,     0,     0,     0,  1565,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1567,     0,     0,     0,
    1573,  1574,     0,  1568,     0,     0,     0,     0,     0,  1581,
       0,     0,  1582,  1583,  1584,  1575,  1585,  1586,  1587,  1588,
    1589,  1590,     0,     0,     0,     0,     0,     0,  1569,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1580,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1576,     0,     0,  1577,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1986,     0,     0,  1578,     0,
       0,  1579,     0,     0,     0,  1570,     0,     0,  1556,     0,
       0,  1557,     0,     0,     0,  1558,  1559,  1560,  1561,  1562,
    1563,  1564,  1571,     0,     0,     0,     0,  1572,     0,     0,
       0,     0,     0,     0,     0,     0,  1565,     0,     0,     0,
    2663,     0,     0,     0,     0,     0,  1567,     0,     0,     0,
    1573,  1574,  1570,  1568,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1575,     0,     0,     0,  1571,
       0,     0,     0,     0,  1572,     0,  1581,     0,  1569,  1582,
    1583,  1584,     0,  1585,  1586,  1587,  1588,  1589,  1590,     0,
       0,     0,     0,     0,     0,  1580,     0,  1573,  1574,     0,
       0,  1576,     0,     0,  1577,     0,     0,     0,     0,     0,
       0,     0,  1575,     0,     0,     0,     0,     0,  1578,     0,
       0,  1579,     0,     0,     0,     0,  1556,     0,     0,  1557,
       0,     0,     0,  1558,  1559,  1560,  1561,  1562,  1563,  1564,
       0,     0,     0,     0,     0,     0,     0,     0,  1576,     0,
       0,  1577,     0,     0,  1565,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1567,  1578,     0,     0,  1579,     0,
       0,  1568,  1570,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1571,
       0,     0,     0,     0,  1572,     0,  1569,     0,     0,     0,
    1581,     0,     0,  1582,  1583,  1584,     0,  1585,  1586,  1587,
    1588,  1589,  1590,     0,     0,  1580,     0,  1573,  1574,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1575,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1556,     0,     0,  1557,     0,     0,
       0,  1558,  1559,  1560,  1561,  1562,  1563,  1564,     0,     0,
       0,     0,  1580,     0,     0,     0,     0,     0,  1576,     0,
       0,  1577,  1565,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1567,     0,     0,  1578,     0,     0,  1579,  1568,
    1570,     0,     0,     0,     0,  2652,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1571,     0,     0,
       0,     0,  1572,     0,  1569,     0,     0,     0,     0,     0,
    1581,     0,     0,  1582,  1583,  1584,     0,  1585,  1586,  1587,
    1588,  1589,  1590,     0,     0,  1573,  1574,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1575,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1581,     0,     0,
    1582,  1583,  1584,     0,  1585,  1586,  1587,  1588,  1589,  1590,
       0,     0,  1580,     0,     0,     0,  1576,     0,     0,  1577,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1578,     0,     0,  1579,     0,  1570,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1571,     0,     0,     0,     0,
    1572,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1573,  1574,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1575,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1581,     0,     0,
    1582,  1583,  1584,     0,  1585,  1586,  1587,  1588,  1589,  1590,
    1580,     0,     0,     0,  1576,     0,     0,  1577,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1578,     0,     0,  1579,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1581,     0,     0,  1582,  1583,
    1584,     0,  1585,  1586,  1587,  1588,  1589,  1590,  1580,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1185,     0,  2008,
       0,     0,     0,  1581,     0,     0,  1582,  1583,  1584,     0,
    1585,  1586,  1587,  1588,  2111,  1590,   110,   111,   112,   113,
     114,   115,   116,   117,  1186,   118,   119,   120,  1187,  1188,
    1189,   838,  1190,  1191,  1192,  1193,   839,   122,   123,  1194,
     124,   125,   126,   840,   128,   129,   130,   841,   842,   843,
     844,   845,  1195,   136,   137,   138,   139,   140,   141,  1196,
    1197,   142,   143,   846,   847,   146,  1198,   147,   148,   149,
     150,   848,  1199,   849,  1200,   850,   154,   155,   156,   157,
     158,   851,   160,   161,   162,  1201,   163,   164,   165,   166,
     167,   168,  1202,   852,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   853,   854,   182,  1203,   183,  1204,
     184,   185,   186,   187,   188,   189,  1205,   190,   191,   192,
     193,   194,  1206,  1207,   195,   196,   197,   198,   199,  1208,
     200,   201,   202,  1209,   203,   204,   205,  1210,   206,   207,
     208,   209,   855,   211,   212,   213,   214,   215,   856,  1211,
     217,  1212,   218,   219,   857,   221,  1213,   222,  1214,   223,
     858,  1215,   859,   226,   227,   860,   861,   230,  1216,   231,
    1217,   862,   863,   234,   235,  1218,   236,   237,   238,   239,
     240,   241,   242,   864,   244,   245,   246,   247,  1219,   248,
     249,   250,   251,   252,   253,   254,  1220,   255,   865,   866,
     258,   259,   260,   261,   262,   867,   868,  1221,   869,  1222,
     266,   870,   871,   269,   872,   271,   272,   273,   274,   275,
     276,  1223,  1224,   277,   873,   279,   874,  1225,   281,   282,
     283,   284,   285,   286,   287,   288,   875,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   876,   877,   878,   311,   312,
     313,   879,  1226,   315,   316,   880,   318,  1227,   881,   320,
     882,   322,   323,   324,  1228,   325,   326,  1229,  1230,   327,
     328,   329,  1231,  1232,   330,   331,   883,   884,   334,   885,
     886,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,  1233,  1234,  1235,  1236,   347,   348,   887,   888,   351,
     352,   889,   354,   355,   356,  1237,   357,   358,   359,   360,
     361,   362,  1238,   363,   364,   365,   890,   367,   368,   369,
     370,  1239,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,  1240,   384,   385,   891,   387,
     388,   389,   892,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,  1241,   893,   402,   403,   404,   405,
     406,   407,   894,   409,   410,   411,   895,   413,   414,   896,
     416,  1242,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   897,   430,   898,   432,  1243,   433,
     434,  1244,   435,   899,   437,   438,   439,   440,   441,  1245,
     442,   900,   901,  1246,  1247,   445,   446,   902,   448,   903,
    1248,   450,   451,   904,   453,   454,   455,   456,   457,  1249,
    1250,   458,   459,   460,  1251,   461,   462,   463,   464,  1252,
     465,   466,   467,   468,   469,  1253,   906,  1254,   472,   907,
     474,   475,   476,   477,   478,  1255,  1256,   479,  1257,  1258,
     480,   481,   482,   483,   484,   485,   908,   909,   910,   911,
     912,   913,   914,   915,   916,   917,   918,   497,   498,   499,
     500,  1185,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,  1186,   118,
     119,   120,  1187,  1188,  1189,   838,  1190,  1191,  1192,  1193,
     839,   122,   123,  1194,   124,   125,   126,   840,   128,   129,
     130,   841,   842,   843,   844,   845,  1195,   136,   137,   138,
     139,   140,   141,  1196,  1197,   142,   143,   846,   847,   146,
    1198,   147,   148,   149,   150,   848,  1199,   849,  1200,   850,
     154,   155,   156,   157,   158,   851,   160,   161,   162,  1201,
     163,   164,   165,   166,   167,   168,  1202,   852,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   853,   854,
     182,  1203,   183,  1204,   184,   185,   186,   187,   188,   189,
    1205,   190,   191,   192,   193,   194,  1206,  1207,   195,   196,
     197,   198,   199,  1208,   200,   201,   202,  1209,   203,   204,
     205,  1210,   206,   207,   208,   209,   855,   211,   212,   213,
     214,   215,   856,  1211,   217,  1212,   218,   219,   857,   221,
    1213,   222,  1214,   223,   858,  1215,   859,   226,   227,   860,
     861,   230,  1216,   231,  1217,   862,   863,   234,   235,  1218,
     236,   237,   238,   239,   240,   241,   242,   864,   244,   245,
     246,   247,  1219,   248,   249,   250,   251,   252,   253,   254,
    1220,   255,   865,   866,   258,   259,   260,   261,   262,   867,
     868,  1221,   869,  1222,   266,   870,   871,   269,   872,   271,
     272,   273,   274,   275,   276,  1223,  1224,   277,   873,   279,
     874,  1225,   281,   282,   283,   284,   285,   286,   287,   288,
     875,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   876,
     877,   878,   311,   312,   313,   879,  1226,   315,   316,   880,
     318,  1227,   881,   320,   882,   322,   323,   324,  1228,   325,
     326,  1229,  1230,   327,   328,   329,  1231,  1232,   330,   331,
     883,   884,   334,   885,   886,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,  1233,  1234,  1235,  1236,   347,
     348,   887,   888,   351,   352,   889,   354,   355,   356,  1237,
     357,   358,   359,   360,   361,   362,  1238,   363,   364,   365,
     890,   367,   368,   369,   370,  1239,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,  1240,
     384,   385,   891,   387,   388,   389,   892,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,  1241,   893,
     402,   403,   404,   405,   406,   407,   894,   409,   410,   411,
     895,   413,   414,   896,   416,  1242,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   897,   430,
     898,   432,  1243,   433,   434,  1244,   435,   899,   437,   438,
     439,   440,   441,  1245,   442,   900,   901,  1246,  1247,   445,
     446,   902,   448,   903,  1248,   450,   451,   904,   453,   454,
     455,   456,   457,  1249,  1250,   458,   459,   460,  1251,   461,
     462,   463,   464,  1252,   465,   466,   467,   468,   469,  1253,
     906,  1254,   472,   907,   474,   475,   476,   477,   478,  1255,
    1256,   479,  1257,  1258,   480,   481,   482,   483,   484,   485,
     908,   909,   910,   911,   912,   913,   914,   915,   916,   917,
     918,   497,   498,   499,   500,  1185,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,  2156,   115,
     116,   117,  1186,   118,   119,   120,  1187,  1188,  1189,   838,
    1190,  1191,  1192,  1193,   839,   122,   123,  1194,   124,   125,
     126,   840,   128,   129,   130,   841,   842,   843,   844,   845,
    1195,   136,   137,   138,   139,   140,   141,  1196,  1197,   142,
     143,   846,   847,   146,  1198,   147,   148,   149,   150,   848,
    1199,   849,  1200,   850,   154,   155,   156,   157,   158,   851,
     160,   161,   162,  1201,   163,   164,   165,   166,   167,   168,
    1202,   852,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   853,   854,   182,  1203,   183,  1204,   184,   185,
     186,   187,   188,   189,  1205,   190,   191,   192,   193,   194,
    1206,  1207,   195,   196,   197,  2157,   199,  1208,   200,   201,
     202,  1209,   203,   204,   205,  1210,   206,   207,   208,   209,
     855,   211,   212,   213,   214,   215,   856,  1211,   217,  1212,
     218,   219,   857,   221,  1213,   222,  1214,   223,   858,  1215,
     859,   226,   227,   860,   861,   230,  1216,   231,  1217,   862,
     863,   234,   235,  1218,   236,   237,   238,   239,   240,   241,
     242,   864,   244,   245,   246,   247,  1219,   248,   249,   250,
     251,   252,   253,   254,  1220,   255,   865,   866,   258,   259,
     260,   261,   262,   867,   868,  1221,   869,  1222,   266,   870,
     871,   269,   872,   271,   272,   273,   274,   275,   276,  1223,
    1224,   277,   873,   279,   874,  1225,   281,   282,   283,   284,
     285,   286,   287,   288,   875,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   876,   877,   878,   311,   312,   313,   879,
    1226,   315,   316,   880,   318,  1227,   881,   320,   882,   322,
     323,   324,  1228,   325,   326,  1229,  1230,   327,   328,   329,
    1231,  1232,   330,   331,   883,   884,   334,   885,   886,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,  1233,
    1234,  1235,  1236,   347,   348,   887,   888,   351,   352,   889,
     354,   355,   356,  1237,   357,   358,   359,   360,   361,   362,
    1238,   363,   364,   365,   890,   367,   368,   369,   370,  1239,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,  1240,   384,   385,   891,   387,   388,   389,
     892,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,  1241,   893,   402,   403,   404,   405,   406,  2158,
     894,   409,   410,   411,   895,   413,   414,   896,   416,  1242,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   897,   430,   898,   432,  1243,   433,   434,  1244,
     435,   899,   437,   438,   439,   440,   441,  1245,   442,   900,
     901,  1246,  1247,   445,   446,   902,   448,   903,  1248,   450,
     451,   904,   453,   454,   455,   456,   457,  1249,  1250,   458,
     459,   460,  1251,   461,   462,   463,   464,  1252,   465,   466,
     467,   468,   469,  1253,   906,  1254,   472,   907,   474,   475,
     476,   477,   478,  1255,  1256,   479,  1257,  1258,   480,   481,
     482,   483,   484,   485,   908,   909,   910,   911,   912,   913,
     914,   915,   916,   917,   918,   497,   498,   499,   500,   837,
       0,   632,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
       0,     0,     0,   838,     0,     0,     0,     0,   839,   122,
     123,     0,   124,   125,   126,   840,   128,   129,   130,   841,
     842,   843,   844,   845,     0,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   846,   847,   146,     0,   147,
     148,   149,   150,   848,     0,   849,     0,   850,   154,   155,
     156,   157,   158,   851,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,   852,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   853,   854,   182,     0,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,   855,   211,   212,   213,   214,   215,
     856,  1411,   217,     0,   218,   219,   857,   221,     0,   222,
       0,   223,   858,     0,   859,   226,   227,   860,   861,   230,
       0,   231,     0,   862,   863,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   864,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
     865,   866,   258,   259,   260,   261,   262,   867,   868,     0,
     869,     0,   266,   870,   871,   269,   872,   271,   272,   273,
     274,   275,   276,     0,     0,   277,   873,   279,   874,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   875,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   876,   877,   878,
     311,   312,   313,   879,     0,   315,   316,   880,   318,     0,
     881,   320,   882,   322,   323,   324,     0,   325,   326,  1412,
       0,   327,   328,   329,     0,     0,   330,   331,   883,   884,
     334,   885,   886,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   887,
     888,   351,   352,   889,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   890,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     891,   387,   388,   389,   892,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,   893,   402,   403,
     404,   405,   406,   407,   894,   409,   410,   411,   895,   413,
     414,   896,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   897,   430,   898,   432,
       0,   433,   434,     0,   435,   899,   437,   438,   439,   440,
     441,     0,   442,   900,   901,     0,     0,   445,   446,   902,
     448,   903,  1413,   450,   451,   904,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,  1253,   906,     0,
     472,   907,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   908,   909,
     910,   911,   912,   913,   914,   915,   916,   917,   918,   497,
     498,   499,   500,   837,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     3,     4,     0,   838,     0,     0,
       0,     0,   839,   122,   123,     0,   124,   125,   126,   840,
     128,   129,   130,   841,   842,   843,   844,   845,     0,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   846,
     847,   146,     0,   147,   148,   149,   150,   848,     0,   849,
       0,   850,   154,   155,   156,   157,   158,   851,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,   852,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     853,   854,   182,     0,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,   855,   211,
     212,   213,   214,   215,   856,     0,   217,     0,   218,   219,
     857,   221,     0,   222,     0,   223,   858,     0,   859,   226,
     227,   860,   861,   230,     0,   231,     0,   862,   863,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   864,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   865,   866,   258,   259,   260,   261,
     262,   867,   868,     0,   869,     0,   266,   870,   871,   269,
     872,   271,   272,   273,   274,   275,   276,     0,     0,   277,
     873,   279,   874,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   875,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   876,   877,   878,   311,   312,   313,   879,     0,   315,
     316,   880,   318,     0,   881,   320,   882,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,   883,   884,   334,   885,   886,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   887,   888,   351,   352,   889,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   890,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   891,   387,   388,   389,   892,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,   893,   402,   403,   404,   405,   406,   407,   894,   409,
     410,   411,   895,   413,   414,   896,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     897,   430,   898,   432,     0,   433,   434,     0,   435,   899,
     437,   438,   439,   440,   441,     0,   442,   900,   901,     0,
       0,   445,   446,   902,   448,   903,     0,   450,   451,   904,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,  1253,   906,     0,   472,   907,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   908,   909,   910,   911,   912,   913,   914,   915,
     916,   917,   918,   497,   498,   499,   500,   109,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   122,   123,     0,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,
     602,   142,   143,   144,   145,   146,     0,   147,   148,   149,
     150,   603,     0,   604,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   605,     0,
     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
       0,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,     0,     0,   277,   278,   279,   280,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,   315,   316,   317,   318,     0,   607,   320,
     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
     609,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   610,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   612,   432,     0,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,     0,
     442,   443,   444,     0,     0,   445,   446,   613,   448,   614,
       0,   450,   451,   615,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,     0,   472,   473,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   109,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   122,   123,     0,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,     0,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,
       0,   147,   148,   149,   150,   151,     0,   152,     0,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,
       0,   222,     0,   223,   224,     0,   225,   226,   227,   228,
     229,   230,     0,   231,     0,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,     0,     0,   277,   278,   279,
     280,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,   316,   317,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,     0,   442,   443,   444,     0,     0,   445,
     446,   447,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,     0,   472,   473,   474,   475,   476,   477,   478,     0,
       0,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   508,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,
     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,
       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   144,   145,   146,  1686,   147,   148,   149,   150,   151,
       0,     0,  1687,   153,   154,   155,   156,   157,   158,     0,
     160,   161,   162,  1688,   163,   164,   165,   166,   167,   168,
       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,     0,
     218,   219,   220,   221,     0,   222,  1689,   223,     0,     0,
       0,   226,   227,   509,     0,   230,     0,   231,     0,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,  1690,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   510,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,   332,     0,   334,     0,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   349,     0,   351,   352,   353,
     354,   355,   356,  1691,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   511,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
     444,     0,     0,   445,   446,   447,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,   457,     0,  1692,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,     0,   472,     0,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   508,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,     0,   124,   125,   126,     0,   128,   129,   130,   131,
     132,     0,   134,   135,     0,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   144,   145,   146,  1686,   147,
     148,   149,   150,   151,     0,     0,     0,   153,   154,   155,
     156,   157,   158,     0,   160,   161,   162,  1688,   163,   164,
     165,   166,   167,   168,     0,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,     0,   218,   219,   220,   221,     0,   222,
    1689,   223,     0,     0,     0,   226,   227,   509,     0,   230,
       0,   231,     0,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,
     274,   275,   276,     0,     0,   277,     0,   279,  2230,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   510,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,
     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,   332,     0,
     334,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   349,
       0,   351,   352,   353,   354,   355,   356,  1691,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   511,   430,   431,   432,
       0,   433,   434,     0,   435,     0,   437,   438,   439,   440,
     441,     0,   442,   443,   444,     0,     0,   445,   446,   447,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
     457,     0,  1692,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,     0,
     472,     0,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   508,     0,   530,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     3,     4,     0,     0,     0,     0,
       0,     0,     0,   122,   123,     0,   124,   125,   126,     0,
     128,   129,   130,   131,   132,     0,   134,   135,     0,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,
     145,   146,     0,   147,   148,   149,   150,   151,     0,     0,
       0,   153,   154,   155,   156,   157,   158,     0,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,     0,   218,   219,
     220,   221,     0,   222,     0,   223,     0,     0,     0,   226,
     227,   509,     0,   230,     0,   231,     0,   232,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,
       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,
       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   510,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,   332,     0,   334,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     511,   430,   431,   432,     0,   433,   434,     0,   435,     0,
     437,   438,   439,   440,   441,     0,   442,   443,   444,     0,
       0,   445,   446,   447,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,     0,   472,     0,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   508,     0,   530,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,   531,   118,   119,   120,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,     0,
     124,   125,   126,     0,   128,   129,   130,   131,   132,     0,
     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,
     150,   151,     0,     0,     0,   153,   154,   155,   156,   157,
     158,     0,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,
       0,     0,     0,   226,   227,   509,     0,   230,     0,   231,
       0,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,
     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   510,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,
     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   349,     0,   351,
     352,   353,   532,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   511,   430,   431,   432,     0,   433,
     434,     0,   435,     0,   437,   438,   439,   440,   441,     0,
     442,   443,   444,     0,     0,   445,   446,   447,   448,   449,
       0,   450,   451,   452,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,     0,   472,     0,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   508,     0,   530,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,     0,   124,   125,   126,     0,   128,   129,
     130,   131,   132,     0,   134,   135,     0,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,
       0,   147,   148,   149,   150,   151,     0,     0,     0,   153,
     154,   155,   156,   157,   158,     0,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,
       0,   222,     0,   223,     0,     0,     0,   226,   227,   509,
       0,   230,     0,   231,     0,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,
     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,
       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     510,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,   608,   327,   328,   329,     0,     0,   330,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   511,   430,
     431,   432,     0,   433,   434,     0,   435,     0,   437,   438,
     439,   440,   441,     0,   442,   443,   444,     0,     0,   445,
     446,   447,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,     0,   472,     0,   474,   475,   476,   477,   478,     0,
       0,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   508,     0,   530,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,
     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,
       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,
       0,     0,     0,   153,   154,   155,   156,   157,   158,     0,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,     0,
     218,   219,   220,   221,     0,   222,     0,   223,     0,     0,
       0,   226,   227,   509,     0,   230,     0,   231,     0,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   712,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   510,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,   608,   327,   328,   329,
       0,     0,   330,   331,   332,     0,   334,     0,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   349,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   511,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
     444,     0,     0,   445,   446,   447,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,     0,   472,     0,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   508,
       0,   530,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,   740,   118,   119,   120,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,     0,   124,   125,   126,     0,   128,   129,   130,   131,
     132,     0,   134,   135,     0,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   144,   145,   146,     0,   147,
     148,   149,   150,   151,     0,     0,     0,   153,   154,   155,
     156,   157,   158,     0,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,     0,   218,   219,   220,   221,     0,   222,
       0,   223,     0,     0,     0,   226,   227,   509,     0,   230,
       0,   231,     0,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,
     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   510,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,
     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,   332,     0,
     334,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   349,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   511,   430,   431,   432,
       0,   433,   434,     0,   435,     0,   437,   438,   439,   440,
     441,     0,   442,   443,   444,     0,     0,   445,   446,   447,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,     0,
     472,     0,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   508,  1902,     0,     0,     0,     0,  1903,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   122,   123,     0,   124,   125,   126,     0,
     128,   129,   130,   131,   132,     0,   134,   135,     0,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,
     145,   146,     0,   147,   148,   149,   150,   151,     0,     0,
       0,   153,   154,   155,   156,   157,   158,     0,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,     0,   218,   219,
     220,   221,     0,   222,     0,   223,     0,     0,     0,   226,
     227,   509,     0,   230,     0,   231,     0,   232,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,
       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,
       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   510,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,   332,     0,   334,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     511,   430,   431,   432,     0,   433,   434,     0,   435,     0,
     437,   438,   439,   440,   441,     0,   442,   443,   444,     0,
       0,   445,   446,   447,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,     0,   472,     0,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   508,     0,   530,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,     0,
     124,   125,   126,     0,   128,   129,   130,   131,   132,     0,
     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,
     150,   151,     0,     0,     0,   153,   154,   155,   156,   157,
     158,     0,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,
       0,     0,     0,   226,   227,   509,     0,  1910,     0,   231,
       0,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,
     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,
    1911,   284,   285,   286,   287,   288,   510,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,
     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   349,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   511,   430,   431,   432,     0,   433,
     434,  1912,   435,     0,   437,  1913,   439,  1914,   441,     0,
     442,   443,   444,     0,     0,   445,   446,   447,   448,   449,
       0,   450,   451,   452,   453,   454,   455,   456,   457,     0,
       0,   458,   459,  1915,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,     0,   472,     0,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   508,     0,   530,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,     0,   124,   125,   126,     0,   128,   129,
     130,   131,   132,     0,   134,   135,     0,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,
       0,   147,   148,   149,   150,   151,     0,     0,     0,   153,
     154,   155,   156,   157,   158,     0,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,
       0,   222,     0,   223,     0,     0,     0,   226,   227,   509,
       0,   230,     0,   231,     0,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,
     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,
       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     510,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   511,   430,
     431,   432,     0,   433,   434,     0,   435,     0,   437,   438,
     439,   440,   441,     0,   442,   443,   444,     0,     0,   445,
     446,   447,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,     0,   472,     0,   474,   475,   476,   477,   478,     0,
       0,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   508,     0,   632,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,
     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,
       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,
       0,     0,     0,   153,   154,   155,   156,   157,   158,     0,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,     0,
     218,   219,   220,   221,     0,   222,     0,   223,     0,     0,
       0,   226,   227,   509,     0,   230,     0,   231,     0,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   510,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,   332,     0,   334,     0,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   349,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   511,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
     444,     0,     0,   445,   446,   447,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,     0,   472,     0,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   508,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,   639,   118,   119,   120,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,     0,   124,   125,   126,     0,   128,   129,   130,   131,
     132,     0,   134,   135,     0,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   144,   145,   146,     0,   147,
     148,   149,   150,   151,     0,     0,     0,   153,   154,   155,
     156,   157,   158,     0,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,     0,   218,   219,   220,   221,     0,   222,
       0,   223,     0,     0,     0,   226,   227,   509,     0,   640,
       0,   231,     0,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,
     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,
     281,   282,   641,   284,   285,   286,   287,   288,   510,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,
     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,   332,     0,
     334,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   349,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   642,   407,   408,   409,   410,   411,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   511,   430,   431,   432,
       0,   433,   434,     0,   435,     0,   437,   438,   439,   440,
     441,     0,   442,   643,   444,     0,     0,   644,   446,   447,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,     0,
     472,     0,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   508,     0,   530,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   122,   123,     0,   124,   125,   126,     0,
     128,   129,   130,   131,   132,     0,   134,   135,     0,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,
     145,   146,     0,   147,   148,   149,   150,   151,     0,     0,
       0,   153,   154,   155,   156,   157,   158,     0,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,     0,   218,   219,
     220,   221,     0,   222,     0,   223,     0,     0,     0,   226,
     227,   509,     0,   230,     0,   231,     0,   232,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,
       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,
       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   510,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,   332,     0,   334,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   366,   367,   368,   676,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     511,   430,   431,   432,     0,   433,   434,     0,   435,     0,
     437,   438,   439,   440,   441,     0,   442,   443,   444,     0,
       0,   445,   446,   447,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,     0,   472,     0,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   508,     0,   530,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,     0,
     124,   125,   126,     0,   128,   129,   130,   131,   132,     0,
     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,
     150,   151,     0,     0,     0,   153,   154,   155,   156,   157,
     158,     0,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,
       0,     0,     0,   226,   227,   509,     0,   230,     0,   231,
       0,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   707,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,
     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   510,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,
     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   349,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   511,   430,   431,   432,     0,   433,
     434,     0,   435,     0,   437,   438,   439,   440,   441,     0,
     442,   443,   444,     0,     0,   445,   446,   447,   448,   449,
       0,   450,   451,   452,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,     0,   472,     0,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   508,     0,   530,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,     0,   124,   125,   126,     0,   128,   129,
     130,   131,   132,     0,   134,   135,     0,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,
       0,   147,   148,   149,   150,   151,     0,     0,     0,   153,
     154,   155,   156,   157,   158,     0,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,
       0,   222,     0,   223,     0,     0,     0,   226,   227,   509,
       0,   230,     0,   231,     0,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   710,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,
     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,
       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     510,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   511,   430,
     431,   432,     0,   433,   434,     0,   435,     0,   437,   438,
     439,   440,   441,     0,   442,   443,   444,     0,     0,   445,
     446,   447,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,     0,   472,     0,   474,   475,   476,   477,   478,     0,
       0,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   508,     0,   530,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,
     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,
       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,
       0,     0,     0,   153,   154,   155,   156,   157,   158,     0,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,     0,
     218,   219,   220,   221,     0,   222,     0,   223,     0,     0,
       0,   226,   227,   509,     0,   230,     0,   231,     0,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   714,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   510,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,   332,     0,   334,     0,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   349,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   511,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
     444,     0,     0,   445,   446,   447,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,     0,   472,     0,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   508,
       0,   530,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,     0,   124,   125,   126,     0,   128,   129,   130,   131,
     132,     0,   134,   135,     0,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   144,   145,   146,     0,   147,
     148,   149,   150,   151,     0,     0,     0,   153,   154,   155,
     156,   157,   158,     0,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,     0,   218,   219,   220,   221,     0,   222,
       0,   223,     0,     0,     0,   226,   227,   509,     0,   230,
       0,   231,     0,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   729,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,
     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   510,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,
     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,   332,     0,
     334,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   349,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   511,   430,   431,   432,
       0,   433,   434,     0,   435,     0,   437,   438,   439,   440,
     441,     0,   442,   443,   444,     0,     0,   445,   446,   447,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,     0,
     472,     0,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   508,     0,   530,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   122,   123,     0,   124,   125,   126,     0,
     128,   129,   130,   131,   132,     0,   134,   135,     0,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,
     145,   146,     0,   147,   148,   149,   150,   151,     0,     0,
       0,   153,   154,   155,   156,   157,   158,     0,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,     0,   218,   219,
     220,   221,     0,   222,     0,   223,     0,     0,     0,   226,
     227,   509,     0,   230,     0,   231,     0,   232,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   829,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,
       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,
       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   510,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,   332,     0,   334,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     511,   430,   431,   432,     0,   433,   434,     0,   435,     0,
     437,   438,   439,   440,   441,     0,   442,   443,   444,     0,
       0,   445,   446,   447,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,     0,   472,     0,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   508,     0,   530,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,     0,
     124,   125,   126,     0,   128,   129,   130,   131,   132,     0,
     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,
     150,   151,     0,     0,     0,   153,   154,   155,   156,   157,
     158,     0,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,
       0,     0,     0,   226,   227,   509,     0,   230,     0,   231,
       0,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   832,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,
     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   510,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,
     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   349,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   511,   430,   431,   432,     0,   433,
     434,     0,   435,     0,   437,   438,   439,   440,   441,     0,
     442,   443,   444,     0,     0,   445,   446,   447,   448,   449,
       0,   450,   451,   452,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,     0,   472,     0,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,     0,     0,   953,     0,
       0,   122,   123,     0,   124,   125,   126,     0,   128,   129,
     130,   131,   132,     0,   134,   135,     0,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,
       0,   147,   148,   149,   150,   151,     0,     0,     0,   153,
     154,   155,   156,   157,   158,     0,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,
       0,   222,     0,   223,     0,     0,     0,   226,   227,   509,
       0,   230,     0,   231,     0,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,
     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,
       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     510,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   511,   430,
     431,   432,     0,   433,   434,     0,   435,     0,   437,   438,
     439,   440,   441,     0,   442,   443,   444,     0,     0,   445,
     446,   447,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,     0,   472,     0,   474,   475,   476,   477,   478,     0,
       0,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   508,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,     0,   976,     0,     0,   122,   123,     0,   124,   125,
     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,
       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,
       0,     0,     0,   153,   154,   155,   156,   157,   158,     0,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,     0,
     218,   219,   220,   221,     0,   222,     0,   223,     0,     0,
       0,   226,   227,   509,     0,   230,     0,   231,     0,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   510,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,   332,     0,   334,     0,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   349,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   511,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
     444,     0,     0,   445,   446,   447,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,     0,   472,     0,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   508,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,   639,   118,   119,   120,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,     0,   124,   125,   126,     0,   128,   129,   130,   131,
     132,     0,   134,   135,     0,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   144,   145,   146,     0,   147,
     148,   149,   150,   151,     0,     0,     0,   153,   154,   155,
     156,   157,   158,     0,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,     0,   218,   219,   220,   221,     0,   222,
       0,   223,     0,     0,     0,   226,   227,   509,     0,   230,
       0,   231,     0,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,
     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   510,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,
     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,   332,     0,
     334,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   349,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   511,   430,   431,   432,
       0,   433,   434,     0,   435,     0,   437,   438,   439,   440,
     441,     0,   442,   643,   444,     0,     0,   644,   446,   447,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,     0,
     472,     0,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   508,     0,   530,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   122,   123,     0,   124,   125,   126,     0,
     128,   129,   130,   131,   132,     0,   134,   135,     0,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,
     145,   146,     0,   147,   148,   149,   150,   151,     0,     0,
       0,   153,   154,   155,   156,   157,   158,     0,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,     0,   218,   219,
     220,   221,     0,   222,     0,   223,     0,     0,     0,   226,
     227,   509,     0,   230,     0,   231,     0,   232,   233,   234,
     235,     0,   236,   237,   238,   239,   240,  1318,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,
       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,
       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   510,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,   332,     0,   334,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     511,   430,   431,   432,     0,   433,   434,     0,   435,     0,
     437,   438,   439,   440,   441,     0,   442,   443,   444,     0,
       0,   445,   446,   447,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,     0,   472,     0,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   508,     0,   530,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,     0,
     124,   125,   126,     0,   128,   129,   130,   131,   132,     0,
     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,
     150,   151,     0,     0,     0,   153,   154,   155,   156,   157,
     158,     0,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,
       0,     0,     0,   226,   227,   509,     0,   230,     0,   231,
       0,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,  1320,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,
     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   510,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,
     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   349,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   511,   430,   431,   432,     0,   433,
     434,     0,   435,     0,   437,   438,   439,   440,   441,     0,
     442,   443,   444,     0,     0,   445,   446,   447,   448,   449,
       0,   450,   451,   452,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,     0,   472,     0,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   508,     0,   530,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,     0,   124,   125,   126,     0,   128,   129,
     130,   131,   132,     0,   134,   135,     0,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,
       0,   147,   148,   149,   150,   151,     0,     0,     0,   153,
     154,   155,   156,   157,   158,     0,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,
       0,   222,     0,   223,     0,     0,     0,   226,   227,   509,
       0,   230,     0,   231,     0,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,  1323,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,
     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,
       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     510,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   511,   430,
     431,   432,     0,   433,   434,     0,   435,     0,   437,   438,
     439,   440,   441,     0,   442,   443,   444,     0,     0,   445,
     446,   447,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,     0,   472,     0,   474,   475,   476,   477,   478,     0,
       0,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   508,     0,   530,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,
     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,
       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,
       0,     0,     0,   153,   154,   155,   156,   157,   158,     0,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,     0,
     218,   219,   220,   221,     0,   222,     0,   223,     0,     0,
       0,   226,   227,   509,     0,   230,     0,   231,     0,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,  1325,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   510,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,   332,     0,   334,     0,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   349,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   511,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
     444,     0,     0,   445,   446,   447,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,     0,   472,     0,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   508,
       0,   530,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,     0,   124,   125,   126,     0,   128,   129,   130,   131,
     132,     0,   134,   135,     0,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   144,   145,   146,     0,   147,
     148,   149,   150,   151,     0,     0,     0,   153,   154,   155,
     156,   157,   158,     0,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,     0,   218,   219,   220,   221,     0,   222,
       0,   223,     0,     0,     0,   226,   227,   509,     0,   230,
       0,   231,     0,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,  2152,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,
     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   510,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,
     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,   332,     0,
     334,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   349,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   511,   430,   431,   432,
       0,   433,   434,     0,   435,     0,   437,   438,   439,   440,
     441,     0,   442,   443,   444,     0,     0,   445,   446,   447,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,     0,
     472,     0,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   508,     0,   530,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   122,   123,     0,   124,   125,   126,     0,
     128,   129,   130,   131,   132,     0,   134,   135,     0,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,
     145,   146,     0,   147,   148,   149,   150,   151,     0,     0,
       0,   153,   154,   155,   156,   157,   158,     0,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,     0,   218,   219,
     220,   221,     0,   222,     0,   223,     0,     0,     0,   226,
     227,   509,     0,   230,     0,   231,     0,   232,   233,   234,
     235,     0,   236,   237,   238,   239,   240,  2860,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,
       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,
       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   510,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,   332,     0,   334,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,     0,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     511,   430,   431,   432,     0,   433,   434,     0,   435,     0,
     437,   438,   439,   440,   441,     0,   442,   443,   444,     0,
       0,   445,   446,   447,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,     0,   472,     0,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,     0,
     124,   125,   126,     0,   128,   129,   130,   131,   132,     0,
     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,
     150,   151,     0,     0,     0,   153,   154,   155,   156,   157,
     158,     0,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,
       0,     0,     0,   226,   227,   509,     0,   230,     0,   231,
       0,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,
     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   510,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,
     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   349,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   511,   430,   431,   432,     0,   433,
     434,     0,   435,     0,   437,   438,   439,   440,   441,     0,
     442,   443,   444,     0,     0,   445,   446,   447,   448,   449,
       0,   450,   451,   452,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,     0,   472,     0,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,     0,   124,   125,   126,     0,   128,   129,
     130,   131,   132,     0,   134,   135,     0,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,
       0,   147,   148,   149,   150,   151,     0,     0,     0,   153,
     154,   155,   156,   157,   158,     0,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,
       0,   222,     0,   223,     0,     0,     0,   226,   227,   509,
       0,   654,     0,   231,     0,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,
     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,
       0,     0,   281,   282,   655,   284,   285,   286,   287,   288,
     510,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   656,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   657,   407,   408,   409,   410,   411,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   511,   430,
     431,   432,     0,   433,   434,     0,   435,     0,   437,   438,
     439,   440,   441,     0,   442,   658,   444,     0,     0,   445,
     446,   447,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,     0,   472,     0,   474,   475,   476,   477,   478,     0,
       0,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   508,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,
     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,
       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,
       0,     0,     0,   153,   154,   155,   156,   157,   158,     0,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,     0,
     218,   219,   220,   221,     0,   222,     0,   223,     0,     0,
       0,   226,   227,   509,     0,   230,     0,   231,     0,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   825,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   510,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,   332,     0,   334,     0,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   349,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   511,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
     444,     0,     0,   445,   446,   447,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,     0,   472,     0,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   508,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,     0,   124,   125,   126,     0,   128,   129,   130,   131,
     132,     0,   134,   135,     0,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   144,   145,   146,     0,   147,
     148,   149,   150,   151,     0,     0,     0,   153,   154,   155,
     156,   157,   158,     0,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,     0,   218,   219,   220,   221,     0,   222,
       0,   223,     0,     0,     0,   226,   227,   509,     0,   230,
       0,   231,     0,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,
     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   510,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,
     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,   332,     0,
     334,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,   349,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   656,
     396,   397,   398,   399,   400,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   511,   430,   431,   432,
       0,   433,   434,     0,   435,     0,   437,   438,   439,   440,
     441,     0,   442,   658,   444,     0,     0,   445,   446,   447,
     448,   449,     0,   450,   451,   452,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,   470,   471,     0,
     472,     0,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   508,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,
       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,
    1618,     0,     0,   122,   123,     0,   124,   125,   126,     0,
     128,   129,   130,   131,   132,     0,   134,   135,     0,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,
     145,   146,     0,   147,   148,   149,   150,   151,     0,     0,
       0,   153,   154,   155,   156,   157,   158,     0,   160,   161,
     162,     0,   163,   164,   165,   166,   167,   168,     0,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,     0,   218,   219,
     220,   221,     0,   222,     0,   223,     0,     0,     0,   226,
     227,   509,     0,   230,     0,   231,     0,   232,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,
       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,
       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   510,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,   332,     0,   334,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,     0,
       0,   347,   348,   349,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,     0,   402,   403,   404,   405,   406,     0,   408,   409,
     410,   411,     0,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     511,   430,   431,   432,     0,   433,   434,     0,   435,     0,
     437,   438,   439,   440,   441,     0,   442,   443,   444,     0,
       0,   445,   446,   447,   448,   449,     0,   450,   451,   452,
     453,   454,   455,   456,   457,     0,     0,   458,   459,   460,
       0,   461,   462,   463,   464,     0,   465,   466,   467,   468,
     469,   470,   471,     0,   472,     0,   474,   475,   476,   477,
     478,     0,     0,   479,     0,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,     0,
     124,   125,   126,     0,   128,   129,   130,   131,   132,     0,
     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,
     150,   151,     0,     0,     0,   153,   154,   155,   156,   157,
     158,     0,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,
       0,     0,     0,   226,   227,   509,     0,   230,     0,   231,
       0,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,  1785,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,
     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   510,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,
     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,   332,     0,   334,     0,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,   349,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   413,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   511,   430,   431,   432,     0,   433,
     434,     0,   435,     0,   437,   438,   439,   440,   441,     0,
     442,   443,   444,     0,     0,   445,   446,   447,   448,   449,
       0,   450,   451,   452,   453,   454,   455,   456,   457,     0,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,   470,   471,     0,   472,     0,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
     119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,     0,   124,   125,   126,     0,   128,   129,
     130,   131,   132,     0,   134,   135,     0,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,
       0,   147,   148,   149,   150,   151,     0,     0,     0,   153,
     154,   155,   156,   157,   158,     0,   160,   161,   162,     0,
     163,   164,   165,   166,   167,   168,     0,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,
     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,
       0,   222,     0,   223,     0,     0,     0,   226,   227,   509,
       0,   230,     0,   231,     0,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,  2139,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,
     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,
       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     510,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
     332,     0,   334,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,     0,     0,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   511,   430,
     431,   432,     0,   433,   434,     0,   435,     0,   437,   438,
     439,   440,   441,     0,   442,   443,   444,     0,     0,   445,
     446,   447,   448,   449,     0,   450,   451,   452,   453,   454,
     455,   456,   457,     0,     0,   458,   459,   460,     0,   461,
     462,   463,   464,     0,   465,   466,   467,   468,   469,   470,
     471,     0,   472,     0,   474,   475,   476,   477,   478,     0,
       0,   479,     0,     0,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   508,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,
     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,
       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,
       0,     0,     0,   153,   154,   155,   156,   157,   158,     0,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,     0,
     218,   219,   220,   221,     0,   222,     0,   223,     0,     0,
       0,   226,   227,   509,     0,   230,     0,   231,     0,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,  2154,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   510,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,   332,     0,   334,     0,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   349,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   511,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
     444,     0,     0,   445,   446,   447,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,     0,   472,     0,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   751,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
       0,     0,     0,   752,     0,     0,     0,     0,   753,   122,
     123,     0,   124,   125,   126,   754,   128,   129,   130,     0,
     755,   756,   757,   758,     0,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   759,   760,   146,     0,   147,
     148,   149,   150,     0,     0,   761,     0,   762,   154,   155,
     156,   157,   158,   763,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,   764,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   765,   766,   182,     0,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   767,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,     0,   211,   212,   213,   214,   215,
       0,     0,   217,     0,   218,   219,   768,   221,     0,   222,
       0,   223,   769,     0,   770,   226,   227,     0,   771,   230,
       0,   231,     0,     0,     0,   234,   235,     0,   236,   237,
     238,   239,   240,   772,   242,   773,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
     774,     0,   258,   259,   260,   261,   262,   775,   776,     0,
     777,     0,   266,   778,   779,   269,   780,   271,   272,   273,
     274,   275,   276,     0,     0,   277,   781,   279,   782,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   783,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   784,   785,   786,
     311,   312,   313,     0,     0,   315,   316,   787,   318,     0,
       0,   320,   788,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,     0,   789,
     334,   790,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,     0,
     791,   351,   352,     0,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   792,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     793,   387,   388,   389,   794,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,   795,   402,   403,
     404,   405,   406,   407,   796,   409,   410,   411,   797,   413,
     414,   798,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   799,   430,     0,   432,
       0,   433,   434,     0,   435,   800,   437,   438,   439,   440,
     441,     0,   442,   801,   802,     0,     0,   445,   446,     0,
     448,     0,     0,   450,   451,   803,   453,   454,   455,   456,
     457,   804,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,     0,   805,     0,
     472,   806,   474,   475,   476,   477,   478,     0,     0,   479,
       0,     0,   480,   481,   482,   483,   484,   485,   751,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   497,
     498,   499,   500,     0,     0,     0,     0,   110,   111,   112,
     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,
       0,     0,   752,     0,     0,     0,     0,   753,   122,   123,
       0,   124,   125,   126,   754,   128,   129,   130,     0,   755,
     756,   757,   758,     0,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   759,   760,   146,     0,   147,   148,
     149,   150,     0,     0,   761,     0,   762,   154,   155,   156,
     157,   158,   763,   160,   161,   162,     0,   163,   164,   165,
     166,   167,   168,     0,   764,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   765,   766,   182,     0,   183,
       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,   195,   196,   767,   198,   199,
       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,   209,     0,   211,   212,   213,   214,   215,     0,
       0,   217,     0,   218,   219,   768,   221,     0,   222,     0,
     223,   769,     0,   770,   226,   227,     0,   771,   230,     0,
     231,     0,     0,     0,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   773,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   774,
       0,   258,   259,   260,   261,   262,   775,   776,     0,   777,
       0,   266,   778,   779,   269,   780,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   781,   279,   782,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   783,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   784,   785,   786,   311,
     312,   313,     0,     0,   315,   316,   787,   318,     0,     0,
     320,   788,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,     0,   789,   334,
     790,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,     0,     0,   347,   348,     0,   791,
     351,   352,     0,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   792,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   793,
     387,   388,   389,   794,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,   795,   402,   403,   404,
     405,   406,   407,   796,   409,   410,   411,   797,   413,   414,
     798,   416,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   799,   430,     0,   432,     0,
     433,   434,     0,   435,   800,   437,   438,   439,   440,   441,
       0,   442,   801,   802,     0,     0,   445,   446,     0,   448,
       0,     0,   450,   451,   803,   453,   454,   455,   456,   457,
     804,     0,   458,   459,   460,     0,   461,   462,   463,   464,
       0,   465,   466,   467,   468,   469,     0,   805,     0,   472,
     806,   474,   475,   476,   477,   478,     0,     0,   479,     0,
       0,   480,   481,   482,   483,   484,   485,   751,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   497,   498,
     499,   500,     0,     0,     0,     0,   110,   111,   112,   113,
     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,
       0,   752,     0,     0,     0,     0,   753,   122,   123,     0,
     124,   125,   126,   754,   128,   129,   130,     0,   755,   756,
     757,   758,     0,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   759,   760,   146,     0,   147,   148,   149,
     150,     0,     0,   761,     0,   762,   154,   155,   156,   157,
     158,   763,   160,   161,   162,     0,   163,   164,   165,   166,
     167,   168,     0,   764,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   765,   766,   182,     0,   183,     0,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,   195,   196,   767,   198,   199,     0,
     200,   201,   202,     0,  1770,   204,   205,     0,   206,   207,
     208,   209,     0,   211,   212,   213,   214,   215,     0,     0,
     217,     0,   218,   219,   768,   221,     0,   222,     0,   223,
     769,     0,   770,   226,   227,     0,   771,   230,     0,   231,
       0,     0,     0,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   773,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   774,     0,
     258,   259,   260,   261,   262,   775,   776,     0,   777,     0,
     266,   778,   779,   269,   780,   271,   272,   273,   274,   275,
     276,     0,     0,   277,   781,   279,   782,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   783,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   784,   785,   786,   311,   312,
     313,     0,     0,   315,   316,   787,   318,     0,     0,   320,
     788,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,     0,   789,   334,   790,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,     0,     0,   347,   348,     0,   791,   351,
     352,     0,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   792,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   793,   387,
     388,   389,   794,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,   795,   402,   403,   404,   405,
     406,   407,   796,   409,   410,   411,   797,   413,   414,   798,
     416,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   799,   430,     0,   432,     0,   433,
     434,     0,   435,   800,   437,   438,   439,   440,   441,     0,
     442,   801,   802,     0,     0,   445,   446,     0,   448,     0,
       0,   450,   451,   803,   453,   454,   455,   456,   457,   804,
       0,   458,   459,   460,     0,   461,   462,   463,   464,     0,
     465,   466,   467,   468,   469,     0,   805,     0,   472,   806,
     474,   475,   476,   477,   478,     0,     0,   479,     0,     0,
     480,   481,   482,   483,   484,   485,  2786,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   497,   498,   499,
     500,     0,     0,     0,     0,   110,   111,   112,   113,   114,
     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,
    2787,     0,     0,     0,     0,  2788,   122,   123,     0,   124,
     125,   126,  2789,   128,   129,   130,     0,   755,  2790,   757,
     758,     0,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,   759,   760,   146,     0,   147,   148,   149,   150,
       0,     0,  2791,     0,  2792,   154,   155,   156,   157,   158,
    2793,   160,   161,   162,     0,   163,   164,   165,   166,   167,
     168,     0,  2794,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   765,   766,   182,     0,   183,     0,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,   195,   196,   767,   198,   199,     0,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
     209,     0,   211,   212,   213,   214,   215,     0,     0,   217,
       0,   218,   219,   768,   221,     0,   222,     0,   223,  2795,
       0,  2796,   226,   227,  2797,  2798,   230,     0,   231,     0,
       0,     0,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,  2799,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,  2800,     0,   258,
     259,   260,   261,   262,   775,   776,     0,   777,     0,   266,
    2801,  2802,   269,  2803,   271,   272,   273,   274,   275,   276,
       0,     0,   277,  2804,   279,  2805,     0,   281,   282,   283,
     284,   285,   286,   287,   288,  3024,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   784,  2807,   786,   311,   312,   313,
       0,     0,   315,   316,  2809,   318,     0,     0,   320,   788,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,     0,  2811,   334,  2812,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,     0,     0,   347,   348,     0,  2813,   351,   352,
       0,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   792,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,  2814,   387,   388,
     389,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,  2815,   402,   403,   404,   405,   406,
     407,     0,   409,   410,   411,  2817,   413,   414,   798,   416,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,  3025,   430,     0,   432,     0,   433,   434,
       0,   435,  2819,   437,   438,   439,   440,   441,     0,   442,
     801,   802,     0,     0,   445,   446,     0,   448,     0,     0,
     450,   451,  2820,   453,   454,   455,   456,   457,     0,     0,
     458,   459,   460,     0,   461,   462,   463,   464,     0,   465,
     466,   467,   468,   469,     0,   805,     0,   472,  2822,   474,
     475,   476,   477,   478,     0,     0,   479,     0,     0,   480,
     481,   482,   483,   484,   485,   508,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   497,   498,   499,   500,
       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,
     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,
     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,
       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,
       0,     0,     0,   153,   154,   155,   156,   157,   158,     0,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,     0,
     218,   219,   220,   221,     0,   222,     0,   223,     0,     0,
       0,   226,   227,   509,     0,   230,     0,   231,     0,   232,
     233,     0,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   510,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,   332,     0,   334,     0,   336,   337,
     338,   339,   340,   341,   342,     0,   344,   345,   346,     0,
       0,     0,     0,   347,   348,   349,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
       0,   363,     0,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   511,   430,   431,   432,     0,   433,   434,     0,
     435,     0,   437,   438,   439,   440,   441,     0,   442,   443,
     444,     0,     0,   445,   446,   447,   448,   449,     0,   450,
     451,   452,   453,   454,   455,   456,   457,     0,     0,   458,
     459,   460,     0,   461,   462,   463,   464,     0,   465,   466,
     467,   468,   469,   470,   471,     0,   472,     0,   474,   475,
     476,   477,   478,     0,     0,   479,     0,     0,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   751,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
       0,     0,     0,   752,     0,     0,     0,     0,   753,   122,
     123,     0,   124,   125,   126,   754,   128,   129,   130,     0,
     755,   756,   757,   758,     0,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   759,   760,   146,     0,   147,
     148,   149,   150,     0,     0,   761,     0,   762,   154,   155,
     156,   157,   158,   763,   160,   161,   162,     0,   163,   164,
     165,   166,   167,   168,     0,   764,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   765,   766,   182,     0,
     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,   195,   196,   767,   198,
     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,   209,     0,   211,   212,   213,   214,   215,
       0,     0,   217,     0,   218,   219,   768,   221,     0,   222,
       0,   223,   769,     0,   770,   226,   227,     0,   771,   230,
       0,   231,     0,     0,     0,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   773,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
     774,     0,   258,   259,   260,   261,   262,   775,   776,     0,
     777,     0,   266,   778,   779,   269,   780,   271,   272,   273,
     274,   275,   276,     0,     0,   277,   781,   279,   782,     0,
     281,   282,   283,   284,   285,   286,   287,   288,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   784,   785,   786,
     311,   312,   313,     0,     0,   315,   316,   787,   318,     0,
       0,   320,   788,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,     0,   789,
     334,   790,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,     0,     0,   347,   348,     0,
     791,   351,   352,     0,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   792,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     793,   387,   388,   389,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,     0,   795,   402,   403,
     404,   405,   406,   407,     0,   409,   410,   411,   797,   413,
     414,   798,   416,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,   430,     0,   432,
       0,   433,   434,     0,   435,   800,   437,   438,   439,   440,
     441,     0,   442,   801,   802,     0,     0,   445,   446,     0,
     448,     0,     0,   450,   451,   803,   453,   454,   455,   456,
     457,     0,     0,   458,   459,   460,     0,   461,   462,   463,
     464,     0,   465,   466,   467,   468,   469,     0,   805,     0,
     472,   806,   474,   475,   476,   477,   478,     0,     1,   479,
       0,     0,   480,   481,   482,   483,   484,   485,     2,     0,
       3,     4,     0,     0,     0,     1,     0,     0,     0,   497,
     498,   499,   500,     0,     0,     2,     0,     0,     6,     0,
       0,     0,     0,     0,     0,     0,     0,     7,     0,     0,
       0,     0,     0,     0,     0,     6,     0,     0,     0,     8,
       0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
       9,     0,     0,     0,     0,     0,     8,     0,     0,     0,
       0,     0,    10,     0,    11,     0,     0,     9,     0,     0,
       0,     0,     0,     0,     0,    12,     0,     0,     0,    10,
       0,    11,     0,     0,     0,     0,     0,     0,     0,    13,
       0,     0,    12,     0,     0,     0,     0,     0,     0,    15,
       0,     0,     0,     0,     0,    16,    13,     0,     0,     0,
       0,     0,     0,    17,     0,     0,    15,     0,     0,     0,
       0,     0,    16,     0,     0,     0,     0,     0,     0,    20,
      17,     0,     0,    21,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    20,     0,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    23,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
       0,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,    26,    27,     0,     0,     0,     0,
       0,    28,     0,     0,    29,     0,     0,     0,     0,     0,
      25,    26,    27,     0,     0,     0,     0,     0,    28,     0,
       0,    29,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,    31,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,    32,     0,     0,    31,
       0,     0,     0,    33,     0,     0,     0,    34,     0,     0,
       0,     0,     0,    32,     0,     0,     0,    35,     0,     0,
      33,     0,     0,     0,    34,     0,     0,     0,     0,    36,
       0,     0,     0,    37,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,     0,     0,
      37,     0,     0,    38,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    39,     0,     0,     0,
      38,     0,    41,     0,     0,     0,     0,    42,     0,     0,
       0,   565,     0,    39,     0,     0,     0,     0,     0,    41,
       0,    43,     0,     0,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
       0,     0,     0,     0,     0,    44,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   566,
       0,     0,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45
};

static const yytype_int16 yycheck[] =
{
       7,    84,    85,   711,     0,   626,   501,     0,   560,     0,
      82,     0,     0,     0,    21,    45,     0,   943,   796,     0,
       0,   652,     0,  1182,  1105,   723,    21,  1169,  1640,   719,
    1144,   699,   925,    86,   984,  1600,  1458,    18,  1170,    86,
    1526,  1742,  2150,   802,     7,    36,   728,   566,  1504,  1110,
    2095,  1351,   558,  1146,    18,   834,   565,  1346,    21,  1299,
    1149,    37,  2085,   934,   561,   711,   934,   713,   566,   715,
    2197,  2198,  2199,   925,   934,  1553,  1554,    84,    85,   675,
    1072,  1174,  2555,   934,  2521,  1077,  2521,  1040,  2146,    84,
      85,     0,   827,  2030,     0,   830,  2553,     0,  1395,   622,
      44,     0,  2084,     0,   627,    96,     0,     0,     0,     0,
       0,  2064,  1038,  2066,     0,     0,     0,     0,     0,     0,
       0,    84,    85,     0,   619,     0,  2568,     0,   104,     0,
    2396,    33,  2210,  1604,  2575,    24,     5,   759,   760,     9,
       7,   584,     5,     5,     9,    11,     5,  1760,  1920,     0,
      16,    13,    14,    78,    21,    55,  1757,  1658,  2477,   694,
       5,  1933,  2481,     0,   786,    63,  1887,    63,  2869,  2227,
      13,    14,   667,     5,     5,    21,   689,     5,     5,     5,
       5,  1660,     5,     5,     5,    13,    14,     9,    13,    14,
      13,    14,    13,    14,     5,    13,    14,  2221,     9,   115,
       5,     5,    11,     5,    45,   694,    63,    16,    72,     5,
       5,    45,   168,  2856,    26,  2217,   167,    84,    85,    80,
       5,     5,     5,   135,     5,     5,   105,   176,  2715,  2872,
      91,  1083,    30,   186,    63,   240,   167,    46,    84,    85,
      38,  2299,  2300,     4,  2302,   167,   102,    98,     9,  2370,
       3,     4,     5,   284,    53,   281,     9,  3028,    30,   173,
      11,    98,   952,     0,    15,    16,    38,    80,    30,    78,
     240,  1030,   289,  2833,    23,    24,    38,   289,    91,   115,
     120,    18,   370,   118,    21,   358,     3,  2761,   306,  2696,
     796,  2698,   240,   240,  2439,   105,  2441,   283,   167,    36,
     164,   116,   306,   269,   379,  1339,  1158,   113,    45,  1161,
    1162,   118,   272,  2440,   935,   159,  1266,    34,    35,   445,
     176,   133,   236,   113,    30,  1275,  3216,     4,    40,    40,
     188,   421,     9,    41,   245,    64,   932,    11,    11,  3259,
     467,    15,    16,    72,   222,   445,   467,    84,    85,    86,
     492,   118,  2053,  2491,    33,   359,   492,   268,   107,    96,
     113,   161,   489,   505,   188,   143,   133,   503,   489,  3152,
      13,    14,    46,   172,    30,   190,   503,   503,   468,  1157,
      59,  2816,  2490,  1005,  1006,   307,   308,   309,   266,   128,
     189,  2864,  1473,   363,   157,   194,   186,  3183,  1088,  1021,
    2353,   208,  2875,   503,    78,    78,   925,    11,  3051,  2866,
     266,    15,    16,   936,   122,   363,   363,   926,  3308,   507,
    2465,   265,   128,  1504,   384,   948,  3346,    83,   503,  2487,
     503,  2489,   283,   232,   439,   213,    92,   273,   307,   308,
     309,  1037,    46,  1913,  1914,  1915,   283,  2585,   370,   166,
    3151,   168,   350,   331,   350,  2392,   266,   321,   114,   171,
     171,   214,  3245,   503,   983,  3248,  3026,   273,   419,   439,
     233,    88,   503,  1426,    78,   287,   442,   503,   268,   985,
     498,  1937,  2627,   236,  1518,   407,  2973,   345,   419,  2896,
     507,   439,   439,   350,   498,   507,   445,   411,   503,   413,
     351,   370,   380,  1134,  1135,    11,  1746,   236,   125,    15,
      16,   289,  3283,  2987,   351,   106,   316,   503,   440,   162,
    1817,   350,  2643,  3309,   348,   439,   517,    63,   407,   451,
     186,   447,  3006,   503,   617,   347,   566,   349,   407,   278,
     106,   492,  1138,   199,  2030,  3246,  2604,   503,  1043,   461,
     503,   558,   168,   320,   505,   503,   503,  2581,   419,   566,
     416,  3344,  2564,   404,   442,   377,  1085,  1086,   394,   395,
     404,   440,   436,  1687,     4,    80,   501,  1083,   179,     9,
     505,   503,   451,   382,   565,   104,    91,   617,  2309,   387,
    2068,  3028,    73,  3028,  2366,   454,   465,  3039,  1111,   606,
    2101,  1136,   566,   503,  3247,   445,   419,   442,  2094,   507,
     617,   507,   665,  1566,   465,   387,  2229,  2088,   665,   106,
     489,  2222,   617,  2102,  2732,   387,  1324,   699,   465,   494,
     495,    12,   502,   499,   503,   442,    17,  1305,   558,   106,
     503,   503,  1774,   606,   503,   652,   653,  1136,    29,   511,
     507,  1157,  1602,   504,   617,   506,  1099,   435,   503,  2978,
     503,  2739,    43,    44,  2983,   467,  2932,   504,   675,   506,
     501,   503,   503,  1832,   505,   503,   503,  3150,   503,   511,
     503,   503,   503,   467,   301,   503,   302,   489,   684,   407,
     499,   684,   503,   684,   670,   684,   684,   684,   503,   503,
     684,   503,  1942,   684,   684,   489,   684,   503,   503,   673,
     717,   718,   601,   689,   721,  3157,   159,  3158,   503,   503,
     503,   102,   503,   503,  2851,  1347,  1348,   246,   209,   330,
     266,  2713,   676,   494,   495,   254,  2766,   393,   455,   606,
     396,   494,   495,  1339,  2774,   496,   497,   498,   499,  1702,
     617,  1704,   654,   655,   268,   657,   157,  2054,   359,   273,
     606,     8,   259,   128,    11,     4,   115,   383,    15,    16,
       9,   617,    19,    20,    21,   684,   397,    30,   684,     0,
     517,   684,  2719,   226,  3257,   684,  3243,   684,   465,   796,
     684,   684,   684,   684,   684,   412,  2854,   116,   684,   684,
     684,   684,   684,   684,   684,   506,  2959,   684,  2961,   684,
    1316,   684,   489,   684,   350,   329,   313,   494,   495,  1900,
     494,   495,   496,   497,   498,   499,  3350,   834,   565,   566,
     240,  1857,   233,  1783,  2535,   406,  2537,   198,   459,  1345,
    1346,   377,  1394,    80,  3301,  1397,  3283,  1478,  3283,    37,
     599,  1403,   601,   202,    91,  1361,  1937,  1547,  1548,  1549,
     240,   240,  1888,  1494,  1716,    11,   173,  3391,  1464,   606,
     455,   190,    26,   444,  1726,   128,   959,  1729,    32,   280,
     617,  2989,   631,   966,  2354,  2355,  2356,  2357,   465,   507,
    1409,    59,   496,   497,   498,   499,  3111,  3370,  3113,  1408,
      46,  1982,  1399,   268,   962,   222,  2392,   656,   503,  2331,
     968,  1409,   489,   278,  3209,  3210,  1908,   266,   925,   268,
       5,  1517,  1518,  3076,   931,   932,   345,  2405,   665,   236,
     937,  1527,    78,   940,   941,   187,   943,   944,   945,   946,
    1833,  1812,  1813,  1814,  1812,   926,  2969,   684,  1471,   266,
     144,  1811,   959,   363,  1550,   128,  2256,  1452,   128,   966,
    2200,  1812,  1813,  2263,   959,  2265,  3261,   349,   157,   145,
     217,   966,  3187,   162,    69,    70,   983,   984,   985,   133,
     168,  1833,   155,   363,   363,   155,  2687,   502,   494,   495,
     496,   497,   498,   499,   502,   377,   959,  1004,   513,   167,
     335,   195,   363,   966,  1712,   513,  1840,    37,  1038,  2070,
    1844,   372,  2073,  1847,   467,  1022,   204,  1569,  3126,     4,
     196,   411,   169,   413,     9,   335,  1033,  1034,  1035,   439,
    1037,  1038,   220,  1040,   198,  2521,   489,   372,   285,  1685,
       3,  2173,   230,  2124,   233,  1824,   407,    26,   252,   253,
     503,  1557,     4,    32,    13,    14,   363,     9,  1793,   439,
     439,  1068,   372,   380,  1117,  1118,  1712,  1120,    13,    14,
    1117,  1118,   407,  1120,  3201,  1743,  1744,  1745,  1085,  1086,
    1815,   247,  1764,   157,  1819,  1731,   424,  1822,   162,  2182,
    1736,   280,   959,   503,   241,   268,   457,   407,   501,   966,
     273,   407,   505,   273,   411,   278,   413,   498,   278,    26,
     457,   498,  1119,   959,   505,    32,  1123,  1124,   505,   411,
     966,   413,   457,   503,   503,   442,  1133,  1134,  1135,  2418,
     366,  1138,   439,   287,  2060,  1111,    13,    14,   168,   307,
     308,   309,   654,   655,   501,   657,   169,   457,   505,  2238,
    1157,   532,   162,   504,   133,  2244,   507,     6,   504,   233,
       9,   507,    26,   367,   368,  2621,   354,    16,    32,   501,
    1722,   503,   503,   505,   204,  1727,   925,   640,   641,   642,
     501,   562,    31,   371,   505,   934,    35,  1693,   335,   926,
     220,   967,   503,   347,  1790,   971,   501,  1173,   503,   957,
     230,     8,   370,  2156,  2157,  2158,   280,   504,    15,    16,
     507,   167,    19,    20,    21,   503,   133,   975,   241,    13,
      14,   979,   959,   377,  1463,   372,  1465,  1466,   504,   966,
     503,   507,   504,  2719,   983,   507,   411,   504,   413,   407,
     507,    72,   503,   490,   491,   492,   503,   494,   495,   496,
     497,   498,   499,   426,  3362,    40,   426,   219,   504,  1266,
     407,   507,   504,  1000,   437,   507,   496,   437,  1275,   133,
     504,   503,   440,   507,  1011,   504,   504,   504,   507,   507,
     507,   504,   113,   451,   507,   504,   504,  2368,   507,   507,
    2371,   503,  1299,   504,   448,   676,   507,  1803,  1047,   489,
    1896,  1038,  3347,   504,  3349,   503,   507,  1056,   287,  1316,
     457,   503,   335,   465,  1833,   467,   101,   503,   103,  1315,
     105,   411,  1315,   413,   354,  1074,  1315,  1315,   486,  2618,
     504,   503,  1339,   507,  1083,   503,  1085,  1086,  1345,  1346,
    2293,   371,  2156,  1849,  2158,  3390,   505,    26,   504,   372,
    2487,   507,  2489,    32,  1361,  1861,   504,    26,   283,   507,
    3313,  2503,   504,    32,   343,   507,   504,   486,   347,   507,
     287,   691,  2504,   693,  2488,   504,  3329,   505,   507,   504,
    1117,  1118,   507,  1120,   407,  1891,  2675,   504,  1395,   173,
     507,   166,  1898,   507,  2287,   503,  1316,  2065,   377,    13,
      14,  1484,  1409,  3104,  1487,  3106,  2548,   504,   504,  1492,
     507,   507,  1495,  2502,   198,  2504,   504,  1500,  2153,  1426,
    2155,  1940,  2018,   287,  1431,  1345,   343,  1408,  1934,   504,
     347,  3384,  1938,   167,   457,   288,  3389,   268,  1944,   184,
     185,  1361,   273,  1450,  1451,  1409,    59,   504,   503,  1456,
     507,  1458,   236,   408,   133,   219,  1463,  1464,  1465,  1466,
     377,   486,   504,   504,   133,   507,   507,    13,    14,   448,
    2396,  1478,  1479,   504,    13,    14,   507,  1484,   285,   343,
    1487,    13,    14,   347,   148,  1492,   343,  1494,  1495,  1484,
     321,   504,  1487,  1500,   507,  1458,   504,  1492,  2129,   507,
    1495,  2260,  2261,   766,   288,  1500,   337,   252,   253,   148,
    1517,  1518,   148,   377,   148,  1522,    40,  1524,    13,    14,
    1527,  1484,  2220,  1514,  1487,   788,   504,  1514,   503,  1492,
    1514,   448,  1495,  1514,  1514,   268,  1514,  1500,    40,  1546,
      13,    14,  3028,  1550,   457,  1552,    13,    14,   148,  3114,
    1557,  1558,  1559,  1560,  1561,  1562,  1563,  1564,  1565,  1566,
      87,   824,   469,  1570,  1571,  2518,    13,    14,  1575,  2522,
     454,  2524,  1579,    13,    14,  1582,  1583,  1584,  1585,  1586,
    1587,  1588,  1589,  1590,   448,   503,  1593,    13,    14,   317,
    1643,  1458,   503,  1600,   148,  1602,  1643,    13,    14,    13,
      14,  2890,    13,    14,   503,   436,    13,    14,   287,    13,
      14,   503,  1458,   503,   445,    39,  1623,  1484,   287,  2733,
    1487,   503,   367,   368,   505,  1492,   148,   411,  1495,   413,
      13,    14,   148,  1500,    13,    14,   148,  1557,  1484,  1646,
     283,  1487,    13,    14,   503,  3067,  1492,   173,  2780,  1495,
    1657,  1658,   436,   419,  1500,   439,   503,  1621,    13,    14,
      13,    14,   358,   359,   343,    13,    14,   503,   347,  2521,
     504,  1408,   198,   503,   343,    26,  1425,   409,   347,   256,
     257,    32,   143,   490,   491,   492,  1693,   494,   495,   496,
     497,   498,   499,  2852,   215,  1702,   157,  1704,   377,  3311,
     220,   162,   293,  3315,   358,   359,   367,   368,   377,   220,
     236,   358,   359,   358,   359,   450,   451,  3324,  3325,  3356,
    3357,  1085,  1086,  1104,   503,  2231,   220,   503,   290,  2281,
      40,   231,   503,   518,     5,  1742,     5,   522,  2688,  1746,
     525,   503,  1749,  1750,   503,   503,  1009,  1484,   503,     5,
    1487,     5,   213,   503,     5,  1492,   503,     5,  1495,  3371,
     144,  1024,   288,  1500,     9,   503,  2456,   466,  2287,   448,
     295,   507,   233,  1693,   102,   504,  1783,  1514,     8,   448,
     507,    11,   133,  1790,   215,    15,    16,    40,  1779,    19,
      20,    21,   377,   162,  3216,   280,  1803,  3283,   162,   278,
      59,   231,   503,   419,    91,     8,    36,   507,    11,   503,
    1817,   419,    15,    16,   419,    59,    59,  1824,  1825,   280,
     259,   419,   513,   608,   419,   465,  1833,   148,   289,   503,
      98,   268,   268,    40,   268,  1572,  3258,   363,  1921,   268,
     503,     3,  1849,    46,  1927,   503,  1853,  1854,  2479,  1856,
      53,     9,    39,   417,  1861,  1862,  1863,  1864,  1865,  1866,
    1867,  1610,  2597,  1870,  1871,  1872,  1873,  1874,  1875,  1876,
    1877,  1878,  1879,  2541,   417,    78,  2558,   501,  1885,  1886,
    2578,   501,  1889,  1803,  1891,   411,  3308,   413,   419,  1896,
     419,  1898,    13,   505,  3036,   504,   419,   504,   504,   503,
     419,   686,   167,   504,   430,   504,  1643,   504,   504,   462,
     436,  1918,  2418,   439,  1921,   507,  1923,   220,   220,  2771,
    1927,   107,   108,   275,   503,   275,  1921,  1934,   503,  1849,
      11,  1938,  1927,  1940,   507,  1942,   287,  1944,   141,   345,
     507,  1861,   502,   461,   513,   147,  1953,   512,   507,   417,
     735,   736,   737,   738,   503,   273,   503,   419,  1921,   176,
     158,   167,   143,   507,  1927,   167,   504,   445,   259,   172,
     507,  1891,   213,   222,   435,  2925,   157,  1984,  1898,  2905,
     558,   162,  1989,  1990,   380,   284,   189,   217,  2018,  3148,
     306,   194,   343,  2886,   306,   215,   347,   558,   184,   185,
     507,   507,   176,   504,   503,   268,  2013,  2014,   222,   222,
    3091,  2018,   289,   326,  1934,  2521,   457,   281,  1938,  1400,
     503,  1402,   503,   148,  1944,  2032,   377,   465,  2035,   232,
    2037,   148,   213,  1770,   148,   148,    40,   268,  2816,   504,
     501,   283,  1779,   504,   505,   504,  2053,  2054,  2783,  2784,
     501,   486,   233,  2060,  1921,   285,  2063,   283,   486,   504,
    1927,   504,   248,   249,   250,   251,   252,   253,  2063,    40,
     256,   257,   504,  2080,    59,  1921,   167,   504,    11,    40,
     162,  1927,   285,   504,  1833,  2080,  2093,  2593,   176,   504,
    1839,   504,   504,   503,   503,   503,  2648,   448,   162,   280,
    2063,   504,   502,  2110,  2111,   307,   308,   309,   289,   507,
     512,   505,  2618,   504,   504,   504,     8,  2080,   486,    11,
    2127,   167,  2129,    15,    16,   503,   419,    19,    20,    21,
     503,  2138,     8,   503,   151,    11,   503,   245,   503,    15,
      16,    40,   143,    19,    20,    21,    59,   462,   507,  2156,
    2157,  2158,   492,   938,  3286,   488,   157,   558,   284,   442,
     284,   162,   507,     8,   239,    59,    11,   259,   370,  2675,
      15,    16,    59,   419,  3127,   268,  3028,   503,   148,   382,
     198,   367,   368,   148,  1921,   148,   419,  2194,   275,   275,
    1927,  1940,   419,  2200,   419,  2225,  2063,   419,   504,   503,
    2752,    46,    40,   345,   504,   407,   507,   281,    53,    40,
     283,   148,   213,  2080,   504,   465,   502,  2063,   796,  2215,
     502,   273,  2215,   504,  2231,   167,  2215,  2215,   503,   503,
      59,   504,   233,    78,  2080,   796,   181,   504,   440,   162,
     194,    78,  2249,   504,   139,   167,   504,   504,   503,   451,
     294,   558,   504,   513,   435,   351,   503,   284,   176,   148,
     490,   491,   492,   465,   494,   495,   496,   497,   498,   499,
     507,   507,   504,   171,   503,   503,  2782,   430,    40,   280,
    2287,  2018,    40,   504,   487,   504,  2293,   489,   289,   504,
      84,   494,   495,   496,   497,   498,   499,   483,   484,  2036,
     504,   503,   194,   504,   503,   445,   503,  1688,   504,  3007,
    2816,  2231,   507,   502,   507,  2052,   167,  1698,   194,  1700,
     503,   464,  1703,   194,  2331,   217,  2063,   172,  1709,   504,
    1711,   504,  3285,   504,   504,   507,   504,   504,   504,    40,
     451,   217,  1723,  2080,   189,   283,   492,  1728,  3274,   194,
      59,  1732,  1733,  1734,  1735,   504,  1737,  1738,  1143,    60,
     504,  2433,   465,  2370,   200,   504,  2396,  2886,  2331,   504,
     113,  1156,    40,   503,   222,    86,   187,   273,  2385,   502,
     273,   419,  2389,  2390,  2890,   505,   505,   232,   419,  2396,
     505,   492,  1177,   285,   504,   796,   505,    40,  2428,  2406,
     505,   505,  2409,   104,  2411,   505,   505,   985,   505,   285,
     505,  2418,  2419,   502,  2163,  2422,  2423,   105,   268,   503,
    2427,  2428,   505,   465,   985,  3093,  3116,  2434,   505,   505,
      40,  3283,   503,   505,   435,   505,   505,   505,   505,   505,
     285,   283,  2449,   505,   505,   505,   505,   505,   505,  2479,
     505,   505,  2459,     9,   505,   505,  2447,   505,  3089,  2208,
    2447,   344,  2453,  2447,  2331,   505,  2447,  2447,   505,  2447,
     503,  3092,  2479,   503,  3095,   507,  2225,    59,   507,   328,
     504,  3077,   504,  3079,   194,  2331,   507,   187,  2225,   796,
     450,    89,   504,   337,   503,    40,   197,   148,   504,   120,
     501,   148,    40,  2370,   505,   504,   359,   359,    40,   504,
     503,  2518,   503,    40,  2521,  2522,   445,  2524,   507,  3227,
    3218,   503,  3028,    96,   303,   503,   273,  1312,  2535,   244,
    2537,   186,  1317,   445,   503,    72,   286,   382,  2287,   430,
    3208,    72,    78,     9,   503,   246,  2295,   504,  2297,   504,
     502,   361,  2301,   254,  2303,   504,   502,    91,    59,   129,
     492,  2557,   266,  2554,  2557,   266,   283,   430,  2557,  2557,
      40,  3202,   503,   286,   286,   503,   450,   504,   504,  1157,
     504,   200,   377,   504,   985,   283,  2593,   283,   504,  2580,
     118,   358,  2583,   144,   167,   442,  1157,   298,   490,   491,
     492,  2521,   494,   495,   496,   497,   498,   499,  2615,    25,
    2640,  2618,  2695,    36,   490,   491,   492,   358,   494,   495,
     496,   497,   498,   499,   291,  2776,  1710,  2151,  2635,  2636,
    2518,   684,  1622,  2640,    14,  2214,  2643,  2505,   600,  2293,
    2886,  3233,   487,  2550,  3339,  2652,  3000,  3287,   349,   494,
     495,   496,   497,   498,   499,  3296,  3332,  2664,  1144,  2396,
    3053,  2144,  2669,  2670,    37,   167,  2157,  2674,  2675,    42,
    3285,   372,  2679,  2593,  2569,  2682,  2683,  2497,   985,  2709,
    2687,  2688,  3294,  2141,  2691,  3180,  2524,  3282,  2695,  2458,
     391,  2428,     7,     8,  2075,  2702,  1481,    12,  1313,  1394,
    2695,  1345,    17,  3255,  1824,  1409,    21,  3178,    23,    24,
    2447,  3118,  2457,    28,    29,    30,  2453,  3258,    33,  3212,
    2447,    36,    37,  3361,  1104,    40,    99,  2127,    43,    44,
    2093,  1682,  2695,   558,   307,   308,   309,  2352,  1316,  2746,
     958,  1127,  2479,  3267,  1126,  1646,     8,  2754,   958,    11,
    2110,  3189,  3081,    15,    16,  1316,  1157,    19,    20,    21,
      37,  1681,    21,  1129,  2080,    42,  2773,  1345,  1346,    84,
      85,  2643,  2521,  2929,    36,  2782,  2643,  3283,   617,  1932,
     936,    96,   606,  1361,  1345,  1346,   101,   102,   103,   104,
     105,  2331,  2330,  2377,  3021,   168,   934,   370,   934,  1833,
    1361,  2550,   934,   504,  3193,   307,   308,   309,  1363,  2816,
    3192,  1991,   934,  2094,  2390,  1954,  2036,  2554,  2033,  1479,
    2403,  1621,    99,    96,  1993,  1940,  2702,    -1,  2695,    -1,
      -1,   204,    -1,    -1,   407,  1620,    -1,  1622,    -1,    -1,
      -1,    -1,    -1,  2580,    -1,    -1,  2583,   220,  1633,  2695,
    1157,  2858,    -1,    -1,   427,    -1,    -1,   230,    -1,    -1,
    2241,    -1,  2782,    -1,    -1,    40,    -1,   440,   370,    -1,
      -1,    -1,   558,    -1,    -1,  2905,  2867,    -1,   451,  2886,
      -1,    -1,  2889,  2890,    -1,    60,  1671,    -1,    -1,   262,
      -1,   168,   465,    -1,    -1,    -1,  2645,    -1,  2905,    -1,
      -1,    -1,    -1,  2640,    -1,   407,    -1,    -1,    -1,    -1,
     283,    -1,    -1,    -1,    -1,  1316,   489,    -1,  2925,    -1,
      -1,    -1,    -1,    -1,    -1,  2932,    -1,   204,    -1,   104,
     503,    -1,    -1,    -1,   307,    -1,  2943,  2944,   440,    -1,
    2947,   314,  2949,   220,  1345,  1346,    -1,    -1,    -1,   451,
    2699,    -1,    -1,   230,   941,   217,    -1,    -1,  2695,    -1,
    1361,    -1,    -1,   465,    40,    -1,    -1,  2974,    -1,    -1,
      -1,   796,  2709,    -1,  1759,  1760,  1761,  1762,  1763,  1557,
      -1,   354,    -1,    -1,    60,   262,    -1,   489,    -1,    -1,
      -1,  2998,     8,    -1,    -1,    11,  1557,    -1,   371,    15,
      16,   503,    -1,    19,    20,    21,    -1,    -1,    -1,  1316,
      -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,    78,    -1,
      36,  3028,   197,   285,    -1,    -1,    -1,    -1,   104,    -1,
     307,    91,    -1,    -1,    -1,    -1,    -1,   314,  1345,  1346,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3041,  3042,    -1,   113,  1361,   115,  3063,    -1,    -1,    -1,
    3067,    -1,    -1,    -1,    -1,    -1,    -1,   440,    -1,    -1,
    3077,   246,  3079,    -1,  3081,    -1,    -1,   354,  3085,   254,
    3087,    -1,  3089,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,  3099,    -1,   371,   171,    -1,  3104,    -1,  3106,
      -1,  2482,  2483,    -1,  3067,    -1,    -1,  3114,  3028,    -1,
     796,    -1,    -1,    -1,  2863,  1693,    -1,    -1,    -1,    -1,
    3127,   197,    -1,   298,  3115,  3132,  3117,  1912,     8,  2510,
    2867,    11,  1693,    -1,    -1,    15,    16,  2886,    -1,    19,
      20,    21,   202,    -1,  2525,  2526,  2527,  2528,  2529,  2530,
    2531,  2532,  2533,  2534,    -1,    -1,  1557,    -1,    -1,    -1,
     985,    -1,    -1,   440,    -1,  3156,    -1,    -1,  2905,    -1,
     246,    -1,  3179,    -1,   349,    -1,    -1,    -1,   254,    -1,
      -1,  3172,  3189,    -1,    -1,  3176,    -1,    -1,    -1,    -1,
     266,    -1,    -1,    -1,    -1,  3202,    -1,   372,    -1,    -1,
    3067,   217,    -1,   518,    -1,    -1,    -1,   522,   268,  3216,
     525,  2960,    -1,   273,    -1,    -1,   391,   532,    -1,    -1,
      -1,  3067,   298,    -1,    -1,  1803,    -1,  3234,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,  1803,    -1,    -1,   560,   561,   562,    -1,    -1,
    1557,  3258,    -1,  3216,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   321,    -1,    -1,    -1,    -1,    -1,  3274,    -1,   285,
      -1,  1849,    -1,   349,    -1,    -1,  3283,   337,  3285,  3028,
      -1,    -1,    -1,  1861,   599,   600,   601,    -1,  1849,    -1,
      -1,   606,  1693,   608,    -1,  3258,   372,    -1,    -1,   985,
    1861,  3308,   617,    -1,  3041,  3042,   621,   622,    -1,  3300,
      -1,   626,   627,  1891,    -1,   391,  3323,  3324,  3325,    -1,
    1898,    -1,    -1,    -1,    -1,   640,   641,   642,    -1,    -1,
    1891,    -1,  1157,    -1,    -1,   113,  3327,  1898,    -1,   654,
     655,    -1,   657,  3350,    -1,  3308,    -1,    -1,    -1,  3216,
      -1,    -1,    -1,    -1,    -1,   670,  1934,    -1,    -1,    -1,
    1938,   676,   147,  3283,    -1,    -1,  1944,    -1,    -1,    -1,
    3216,   686,  2753,  1934,   689,    -1,   436,  1938,  3115,    -1,
    3117,    -1,   167,  1944,  3391,   445,  1693,    -1,    -1,   167,
      -1,  3258,    -1,    -1,    -1,    -1,    -1,    -1,    12,    -1,
    3149,    -1,  1803,    17,    -1,   285,    -1,   107,   108,    -1,
      -1,    -1,  3258,    -1,    -1,    29,    -1,    -1,    -1,  3156,
     735,   736,   737,   738,    -1,     8,    -1,    -1,    11,    43,
      44,  2216,    15,    16,    -1,  3172,    19,    20,    21,  3176,
      -1,  3308,    -1,  2228,  2229,  2230,    -1,    -1,  1849,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,  2243,    -1,
    1861,  2246,  3308,  1450,  1451,    -1,  2251,    -1,    -1,  1456,
      -1,  1157,    -1,    -1,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,   184,   185,    -1,    -1,   102,    -1,
    1891,  1316,    -1,    -1,    -1,    -1,  1803,  1898,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,   297,
    1345,  1346,   307,   308,   309,    -1,    -1,    -1,    36,   307,
     308,   309,    -1,  1934,  3283,    -1,  1361,  1938,    46,    -1,
      -1,    -1,  1849,  1944,    -1,    53,    -1,    -1,   248,   249,
     250,   251,   252,   253,  1861,    -1,   256,   257,    -1,    -1,
      -1,    -1,    -1,  3300,    -1,    -1,    -1,    -1,    -1,    -1,
      78,  3320,    -1,    -1,  2359,  2360,  2361,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1891,   370,    -1,    -1,    -1,    -1,
    3327,  1898,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
     935,   936,   407,   938,    -1,    -1,   941,  1934,  3009,   407,
    1316,  1938,   947,   948,   217,    -1,    -1,  1944,   953,    -1,
      -1,    -1,    -1,    -1,   959,    -1,    -1,    -1,  3029,  3030,
      -1,   966,    -1,  2231,    -1,   440,    -1,    -1,    -1,  1345,
    1346,   976,   440,    -1,   172,    -1,   451,   367,   368,  3050,
    2231,    -1,    -1,   451,    -1,  1361,    -1,   992,    -1,    -1,
     465,   189,    -1,    -1,    -1,    -1,   194,   465,  2473,    -1,
      -1,    -1,   925,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,   489,    -1,    -1,    -1,    -1,   217,
     218,   489,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,
      -1,    -1,    -1,    -1,   232,   503,    -1,  1042,    -1,    -1,
      -1,    -1,  1557,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
     983,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
     268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,  1087,    -1,  2559,  1090,    -1,   285,    -1,    46,
     288,    -1,    -1,   483,   484,    -1,    53,    -1,    -1,  1104,
    1105,    -1,    -1,    -1,     8,    -1,  1111,    11,    -1,    -1,
      -1,    15,    16,   503,    -1,    19,    20,    21,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,  1133,    -1,
      -1,    -1,    -1,  1056,    -1,    -1,    -1,    -1,  1143,  1144,
    2231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2418,  1156,    -1,  2628,  2629,  2630,  2631,    -1,    -1,    -1,
    1083,    -1,  1085,  1086,    -1,    -1,    -1,  2418,  1173,    -1,
      -1,    -1,  1177,    -1,    -1,    -1,  1181,    -1,  1693,    -1,
      -1,  1557,    -1,    -1,   382,  1862,  1863,  1864,  1865,  1866,
    1867,    -1,    -1,  1870,  1871,  1872,  1873,  1874,  1875,  1876,
    1877,  1878,  1879,    -1,    -1,    -1,    -1,    -1,  3279,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,   532,    -1,
      -1,    -1,   189,    -1,  2231,  1158,    -1,   194,  1161,  1162,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2521,    -1,    -1,    -1,   561,   562,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2521,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2760,    -1,    -1,  1803,   487,
      -1,    -1,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,  1310,    -1,  1312,    -1,    -1,
      -1,   268,  1317,   217,   271,   513,    -1,  1693,    -1,    -1,
      -1,    -1,    -1,  1328,    -1,  2593,    -1,  2418,   285,    -1,
      -1,   288,    -1,    -1,  1849,    -1,  2013,  2014,    -1,    -1,
      -1,    -1,  2593,    -1,    -1,    -1,  1861,    -1,    -1,    40,
    2618,    -1,    -1,  1358,    -1,    -1,    -1,    -1,  1363,    -1,
      -1,    -1,    -1,   167,    -1,    -1,    -1,  2618,    -1,    60,
      -1,    -1,   676,    -1,    -1,    -1,  1891,    -1,    -1,    -1,
      -1,   285,   941,  1898,    -1,    -1,    -1,    -1,    -1,  1394,
      -1,    -1,  1397,    -1,  1399,  1400,    -1,  1402,  1403,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2675,    -1,    -1,
      -1,    -1,    -1,   104,   105,    -1,    -1,    -1,    -1,  1934,
    1343,  2418,   113,  1938,  2675,   382,    -1,  1803,    -1,  1944,
    2521,  1354,    -1,  1356,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1366,    -1,  1450,  1451,    -1,    -1,    -1,
      -1,  1456,    -1,  1458,    -1,    -1,    -1,    -1,    -1,    -1,
    1383,    -1,    -1,    -1,    -1,    -1,  1471,    -1,  1473,  1474,
      -1,    -1,    -1,  1849,    -1,    -1,  1481,    -1,    -1,  1484,
     171,    -1,  1487,    -1,    -1,  1861,    -1,  1492,    -1,    -1,
    1495,  1414,  1415,   297,    -1,  1500,    -1,  1502,    -1,  1504,
      -1,    -1,  2593,   307,   308,   309,   197,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2782,  1891,    -1,    -1,    -1,    -1,
      -1,  1526,  1898,    -1,  2521,    -1,  1531,  2618,    -1,    -1,
     487,  2782,    -1,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,  2816,    -1,
      -1,    -1,    -1,    -1,    -1,   246,    -1,    -1,  1934,    -1,
      -1,    -1,  1938,   254,  1569,  2816,   370,    -1,  1944,  3044,
      -1,    -1,    -1,    -1,  1133,   266,    -1,   268,    -1,    -1,
      -1,    -1,    -1,    -1,  2675,    -1,   490,   491,   492,  3064,
     494,   495,   496,   497,   498,   499,  2593,    -1,    -1,    -1,
      -1,    -1,    -1,   407,    -1,    -1,    -1,   298,    -1,    -1,
      -1,    -1,    -1,  1618,    -1,  1620,    -1,  1622,    -1,    -1,
      -1,  2618,  2890,    -1,    -1,    -1,    -1,    -1,  1633,  1634,
      -1,    -1,    -1,    -1,    -1,    -1,   440,    -1,    -1,  2890,
      -1,  1646,    -1,    -1,    -1,    -1,    -1,   451,    -1,   953,
    3125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,    -1,
      -1,   465,    -1,    -1,    -1,    -1,  1671,     0,  1673,    -1,
      -1,    -1,   976,    -1,    -1,     0,    -1,    -1,  2675,    -1,
    3155,   372,  1687,  1688,    -1,   489,    -1,    -1,    -1,    -1,
      -1,  2782,    -1,  1698,  1699,  1700,  1701,    -1,  1703,   503,
     391,    -1,   393,    -1,  1709,   396,  1711,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2231,  1722,  1723,    -1,
      -1,    -1,  1727,  1728,    -1,  2816,    -1,  1732,  1733,  1734,
    1735,    -1,  1737,  1738,  1657,  1658,    -1,    -1,  1042,    -1,
      -1,    -1,    -1,    -1,    -1,  2422,  2423,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1759,  1760,  1761,  1762,  1763,    -1,
    3028,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,    -1,
      -1,    -1,  1777,    98,    -1,    -1,    -1,  3028,    -1,    -1,
      -1,    -1,    37,    -1,    -1,  2782,    -1,    42,    -1,    -1,
      -1,    -1,    -1,  1716,    -1,    -1,    -1,    -1,    -1,  2890,
    1104,  1105,    -1,  1726,    -1,    -1,  1729,    -1,    -1,    -1,
     143,    -1,   503,    -1,    -1,    -1,    -1,    -1,   143,  2816,
      -1,    -1,    -1,    -1,   157,    -1,    -1,    -1,    -1,   162,
      -1,    -1,   157,    -1,   167,    -1,    -1,   162,    -1,    -1,
      -1,    -1,   167,   176,    99,    -1,    -1,    -1,   181,    -1,
      -1,   176,    -1,    -1,    -1,  2231,   181,  1862,  1863,  1864,
    1865,  1866,  1867,    -1,    -1,  1870,  1871,  1872,  1873,  1874,
    1875,  1876,  1877,  1878,  1879,    -1,    -1,    -1,    -1,    -1,
     213,    -1,    -1,    -1,  1807,  1808,    -1,    -1,   213,    -1,
      -1,  1450,  1451,  2890,    -1,  1900,    -1,  1456,    -1,    -1,
     233,    -1,    -1,  2418,    -1,    -1,    -1,  1912,   233,     3,
    1833,     5,    -1,   168,    -1,    -1,  1921,    -1,    -1,    -1,
      -1,   176,  1927,    -1,    -1,    -1,    -1,  1932,    -1,    -1,
      -1,    -1,  1937,    -1,    -1,    -1,    -1,  3028,  2615,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,    -1,   204,
     283,    -1,    -1,    -1,    -1,   280,   289,    -1,   283,    -1,
      -1,    -1,    -1,    -1,   289,   220,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   230,    -1,  1982,    -1,    -1,
      -1,  1986,    -1,    -1,    -1,    -1,  1991,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   328,    -1,    -1,  2521,   262,  2013,  2014,
      -1,    -1,    -1,   107,   108,  3283,    -1,  1940,   351,    -1,
      -1,    -1,    -1,    -1,    -1,  2030,   351,    -1,   283,    -1,
      -1,  3028,  3283,    -1,    -1,    -1,    -1,    -1,    -1,  1598,
      -1,    -1,  2418,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   307,    -1,    -1,    -1,    -1,    -1,  2063,   314,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2075,    -1,    -1,    -1,   407,  2080,    -1,  2754,  2593,  2084,
      -1,    -1,   407,    -1,    -1,    -1,    -1,  1646,    -1,    -1,
     184,   185,    -1,    -1,    -1,  1399,  1400,    -1,  1402,   354,
      -1,    -1,   435,  2618,    -1,    -1,    -1,    -1,     0,    -1,
     435,    -1,   445,    -1,    -1,    -1,   371,    -1,    -1,  2124,
     445,    -1,  2127,    -1,    -1,  2130,    -1,    -1,    -1,   462,
      -1,   464,   465,    -1,    -1,    -1,    -1,   462,    -1,   464,
     465,  2146,    -1,    -1,  2067,  2521,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   248,   249,   250,   251,   252,   253,
    2675,    -1,   256,   257,    -1,    -1,    -1,    -1,   501,  1473,
      -1,   504,   505,   506,    -1,    -1,   501,  2100,  2101,   504,
     505,   506,    -1,    -1,    -1,   440,    -1,    -1,    -1,    -1,
     445,    -1,  3283,    -1,    -1,    -1,    -1,    -1,  1502,    -1,
    1504,    -1,    -1,    -1,    -1,  2210,    98,    -1,    -1,    -1,
      -1,  2216,  2889,    -1,    -1,    -1,    -1,  2593,    -1,    -1,
      -1,    -1,  2227,  2228,  2229,  2230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2241,    -1,  2243,    -1,
      -1,  2246,  2618,    -1,    -1,    -1,  2251,    -1,    -1,    -1,
      -1,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2264,
      -1,    -1,    -1,    -1,    -1,   157,    -1,  2782,    -1,    -1,
     162,    -1,    -1,   367,   368,   167,  2281,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   176,    -1,  3283,    -1,    -1,   181,
      -1,    -1,    -1,    -1,  2299,  2300,    -1,  2302,    -1,  2675,
      -1,  2816,    -1,  1862,  1863,  1864,  1865,  1866,  1867,    -1,
      -1,  1870,  1871,  1872,  1873,  1874,  1875,  1876,  1877,  1878,
    1879,   213,    -1,    -1,    -1,    -1,  2331,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2257,    -1,    -1,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,  2351,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2359,  2360,  2361,    -1,    -1,    -1,
      -1,    -1,    -1,  2368,    -1,  2370,  2371,    -1,    -1,  1673,
      -1,    -1,  2377,    -1,    -1,  2890,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1688,    -1,    -1,  2392,   280,   483,
     484,   283,    -1,    -1,  1698,    -1,  1700,   289,    -1,  1703,
      -1,    -1,    -1,    -1,    37,  1709,  2782,  1711,    -1,    42,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2422,  2423,  1723,
      -1,    -1,    -1,    -1,  1728,    -1,    -1,    -1,  1732,  1733,
    1734,  1735,    -1,  1737,  1738,    -1,   328,    -1,    -1,    -1,
    2816,    -1,    -1,    -1,    -1,    -1,  2451,    -1,    -1,    -1,
      -1,    -1,  2457,    -1,  2013,  2014,    -1,    -1,    -1,   351,
      -1,    -1,    -1,    -1,    -1,   941,    99,    -1,  2473,    -1,
      -1,    -1,  2477,    -1,    -1,    -1,  2481,  2482,  2483,    -1,
      -1,    -1,  2487,  2488,  2489,    -1,  2491,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2510,    -1,  2512,    -1,    -1,
     652,   653,    -1,  3028,  2890,   407,    -1,    -1,    -1,    -1,
    2525,  2526,  2527,  2528,  2529,  2530,  2531,  2532,  2533,  2534,
      -1,    -1,    -1,    -1,    -1,   168,    55,    -1,    -1,    -1,
      -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,  2553,    -1,
      -1,    -1,    -1,   445,  2559,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2569,    -1,    24,    -1,  2127,    -1,
     462,   204,   464,   465,    -1,   717,    -1,    -1,    -1,   721,
    2585,   100,    -1,    -1,    -1,    -1,    -1,   220,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1900,   230,  2521,  2604,
     119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,
    2615,    -1,   504,   505,   506,    -1,  2621,    -1,   137,    -1,
      -1,    79,   141,  2628,  2629,  2630,  2631,    -1,  1932,   262,
      -1,    -1,    -1,  1937,    -1,  2640,    -1,    95,  2643,    -1,
      -1,    -1,  2647,  2648,   163,    -1,    -1,   166,  1124,    -1,
     283,    -1,  3028,     8,    -1,    -1,    11,  1133,  2663,    -1,
      15,    16,    -1,   182,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   307,    -1,    -1,    -1,  1982,    -1,
      -1,   314,    -1,    -1,   142,    -1,    -1,  1991,  2693,    -1,
    2695,    46,   834,    -1,   152,    -1,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,  2709,    -1,   164,    -1,  2713,    -1,
      -1,   169,    -1,    -1,  2719,    -1,    -1,    -1,    -1,    -1,
      -1,   354,    -1,    78,    -1,    -1,    -1,    -1,  2733,    -1,
      -1,    -1,    -1,    -1,  2739,    -1,    -1,    -1,   371,    -1,
     198,    -1,    -1,    -1,    -1,    -1,    -1,  2752,  2753,  2754,
      -1,    -1,    -1,    -1,   273,  2760,    -1,    -1,    -1,    -1,
      -1,    -1,   281,    -1,    -1,    -1,    -1,    -1,  3283,    -1,
      -1,  2075,  2777,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   241,   303,    -1,    -1,   245,    -1,   931,
      -1,    -1,    -1,    -1,    -1,   937,    -1,    -1,   940,    -1,
      -1,   943,   944,   945,   946,    -1,    -1,   440,    -1,    -1,
     329,    -1,   445,    -1,    -1,    -1,    -1,   172,    -1,    -1,
    2124,    -1,    -1,    -1,    -1,    -1,  2130,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
      -1,    -1,   984,    -1,    -1,    -1,    -1,    -1,  2771,  2854,
      -1,    -1,    -1,  2776,   312,    -1,    -1,    -1,    -1,    -1,
      -1,  2866,  1004,  2422,  2423,    -1,    -1,    -1,    -1,   327,
      -1,    -1,    -1,    -1,    -1,  2880,    -1,   232,    -1,    -1,
    1022,    -1,     8,    -1,  2889,    11,    -1,    -1,    -1,    15,
      16,  1033,  1034,  1035,    -1,  1037,  1038,    -1,    -1,    -1,
    2823,  2824,   360,    -1,    -1,   363,    -1,  3283,    -1,    -1,
    2915,    -1,    -1,    -1,   372,    -1,  2921,   375,    -1,    -1,
      46,    -1,    -1,    -1,  2929,    -1,  1068,    53,    -1,    -1,
     285,    -1,    -1,    -1,    -1,   393,    -1,  2241,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   407,
      -1,  2956,    78,    -1,    -1,    -1,   414,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   424,    -1,    -1,    -1,
      -1,    -1,   430,  2978,  1450,  1451,    -1,  1119,  2983,    -1,
    1456,  1123,  1124,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,  1134,  1135,    19,    20,    21,    -1,    -1,   457,
      -1,    -1,    -1,    -1,  3009,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,   141,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,  3029,  3030,    -1,   382,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3044,
      -1,  3046,    -1,    -1,    -1,  3050,   172,    -1,    -1,    -1,
      -1,    -1,    -1,    78,    -1,    -1,  2615,    -1,    -1,  3064,
      -1,    -1,  3067,   189,  2368,    -1,    -1,  2371,   194,    -1,
      -1,    -1,    -1,  2377,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2640,  3087,    -1,    -1,    -1,  3091,  3092,    -1,    -1,
    3095,    -1,    -1,    -1,  3017,  3018,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3028,   232,    -1,    -1,    -1,
      -1,    -1,    -1,  3118,    -1,    -1,    -1,    -1,    -1,    -1,
    3125,    -1,    -1,    -1,  1266,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   487,  1275,    -1,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,   172,    -1,    -1,
    3155,    -1,    -1,    -1,    -1,    -1,    -1,  1299,    -1,   285,
      -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
    1646,    -1,    -1,  2477,    -1,    -1,    -1,  2481,  2482,  2483,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3193,    -1,
      -1,    -1,   217,   218,    -1,  2754,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2510,   232,    -1,    -1,
      -1,  3216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2525,  2526,  2527,  2528,  2529,  2530,  2531,  2532,  2533,
    2534,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3243,    -1,
      -1,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,
    3255,  3256,    -1,  3258,  3259,    -1,   382,    -1,    -1,    -1,
     285,    -1,  3267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3279,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1431,
      -1,    -1,    -1,    -1,    -1,    -1,  3301,    -1,    -1,    -1,
      -1,    -1,    -1,  3308,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2621,    -1,    -1,
      -1,  1463,    -1,  1465,  1466,    -1,    -1,    -1,    -1,    -1,
    2889,    -1,    -1,    -1,    -1,    -1,  1478,  1479,    -1,    -1,
      -1,  3346,    -1,  2647,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1494,    -1,    -1,    -1,  3361,   382,    -1,    -1,
    3283,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
    1522,    -1,  1524,    -1,    -1,    -1,  1862,  1863,  1864,  1865,
    1866,  1867,    -1,    -1,  1870,  1871,  1872,  1873,  1874,  1875,
    1876,  1877,  1878,  1879,    -1,    -1,    -1,    -1,    -1,    -1,
    1552,    -1,    -1,    -1,    -1,    -1,  1558,  1559,  1560,  1561,
    1562,  1563,  1564,  1565,    -1,    -1,    -1,    -1,  1570,  1571,
      -1,    -1,    -1,  1575,    -1,    -1,    -1,  1579,    -1,    -1,
    1582,  1583,  1584,  1585,  1586,  1587,  1588,  1589,  1590,  2753,
      -1,  1593,    -1,    -1,    -1,    -1,    -1,    -1,  1600,    -1,
    1602,    -1,   487,    -1,    -1,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,  1623,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   941,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1657,  1658,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3087,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2013,  2014,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1742,    -1,    -1,    -1,  1746,    -1,    -1,  1749,  1750,  1057,
      -1,    -1,    -1,    -1,    -1,    -1,    78,  2921,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2929,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,  1783,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,
      -1,  2127,  1100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2978,    -1,    -1,    46,    -1,  2983,
      -1,    -1,  1824,  1825,    53,  1133,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3009,    -1,    -1,    -1,    78,
     172,  1853,  1854,    -1,  1856,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3029,  3030,   189,    -1,    -1,
      -1,     0,   194,    -1,    -1,  1183,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1885,  1886,    -1,  3050,  1889,    -1,    -1,
      -1,    -1,    -1,    22,    -1,   217,   218,    -1,    -1,    -1,
      -1,    -1,    -1,    32,    -1,    34,    35,    -1,    -1,    -1,
     232,    -1,   141,    -1,    -1,    -1,  1918,    -1,    47,    -1,
      -1,  1923,    -1,    52,    -1,    -1,    -1,  3091,    -1,    -1,
      -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1942,    -1,    -1,   172,    73,    -1,   268,    -1,    -1,   271,
      -1,  1953,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
     189,    -1,    -1,   285,    -1,   194,   288,    96,    -1,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,    -1,  1984,    -1,    -1,    -1,    -1,  1989,  1990,    -1,
      -1,    -1,    -1,    -1,   123,   124,  1304,    -1,    -1,    -1,
      -1,    -1,    -1,   232,   133,    -1,    -1,    -1,    -1,    -1,
     139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
    2032,    -1,    11,  2035,   163,  2037,    15,    16,   167,    -1,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2053,    -1,    -1,    -1,    -1,   285,    -1,    -1,    -1,
     382,    -1,    -1,    -1,   193,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
     209,    -1,    -1,    -1,    -1,    -1,  2422,  2423,    -1,    -1,
      -1,  2093,    -1,    -1,    -1,    -1,    -1,    -1,  1406,    78,
      -1,    -1,    -1,    -1,    -1,    -1,   235,    -1,  2110,  2111,
      -1,    -1,    -1,    -1,    -1,  3279,    -1,    -1,    -1,    -1,
      -1,  1429,    -1,    -1,    -1,    -1,    -1,  2129,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2138,    -1,  1446,    -1,
    1448,    -1,  1450,  1451,    -1,  1453,    -1,    -1,  1456,    -1,
      -1,  1459,    -1,   382,  1462,    -1,    -1,    -1,    -1,  1467,
      -1,    -1,  1470,    -1,    -1,   487,    -1,    -1,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,   307,   308,
     309,    -1,    -1,    -1,    -1,   507,   315,    -1,    -1,   318,
      -1,    -1,  2194,   172,    -1,    -1,    -1,    -1,  2200,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     189,    -1,  1520,    -1,    -1,   194,    -1,  1525,   347,    -1,
    1528,  1529,  1530,    -1,    -1,    -1,  1534,   356,    -1,    -1,
    1538,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,
      -1,   370,    -1,    -1,    -1,    -1,    -1,  2249,   377,    -1,
      -1,    -1,   381,   232,    -1,    -1,    -1,    -1,   487,    -1,
      -1,    -1,   391,    -1,    -1,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,   403,    -1,    -1,    -1,   407,  2615,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
      -1,  1599,   271,    -1,    -1,    -1,    -1,    -1,   427,    -1,
      -1,    -1,    -1,    -1,  2640,    -1,   285,    -1,    -1,    -1,
      -1,   440,    -1,    -1,   443,    -1,    -1,   446,    -1,    -1,
      -1,    -1,   451,    -1,    -1,    -1,    -1,    -1,  2664,    -1,
      -1,    -1,  1640,    -1,    -1,    -1,   465,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1656,    -1,
      -1,    -1,    -1,  1661,    -1,    -1,    -1,    -1,    -1,    -1,
     489,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1678,    -1,    -1,    -1,   503,    -1,    -1,   506,    -1,    -1,
      -1,    -1,    -1,  2385,    -1,    -1,    -1,  2389,  2390,    -1,
      -1,    -1,    -1,    -1,  2396,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   382,  2406,    -1,    -1,  2409,    -1,  2411,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2419,  2754,    -1,
      -1,    -1,     3,    -1,    -1,  2427,  2428,     8,    -1,    -1,
      11,    -1,  2434,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,  2449,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,  2459,    -1,    40,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,  2479,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    -1,
      -1,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2535,    -1,  2537,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1851,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1859,  1860,  2889,  1862,  1863,  1864,  1865,  1866,  1867,
      -1,    -1,  1870,  1871,  1872,  1873,  1874,  1875,  1876,  1877,
    1878,  1879,  1880,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2635,  2636,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1956,  1957,
    2652,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2664,    -1,    -1,    -1,    -1,  2669,  2670,    -1,
      -1,    -1,  2674,    -1,    -1,    -1,    -1,  2679,    -1,    -1,
    2682,  2683,    -1,    -1,    -1,  2687,  2688,   268,  1996,  2691,
     271,    -1,  2000,  2001,  2002,  2003,  2004,  2005,  2006,  2007,
    2702,    -1,    -1,    -1,   285,  2013,  2014,   288,  2016,  2017,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2028,    -1,    -1,  2031,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2039,  2040,  2041,  2042,  2043,  2044,  2045,  2046,  2047,
    2048,    -1,    -1,    -1,  2746,    -1,    -1,    -1,    -1,    -1,
      -1,  3087,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,  2074,    -1,    11,    -1,
      -1,  2773,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      -1,   382,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2127,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2858,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2195,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2205,  2206,    -1,
      -1,    -1,    -1,  2905,    -1,    -1,   487,    -1,    -1,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,  2925,     8,    -1,    -1,    11,    -1,   172,
    2932,    15,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2943,  2944,    -1,    -1,  2947,   189,  2949,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,    -1,  2974,    -1,   217,   218,  2284,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,
      -1,    -1,    -1,    -1,    78,    -1,  2998,    -1,  2306,  2307,
    2308,    -1,    -1,  2311,  2312,  2313,  2314,  2315,  2316,    -1,
      -1,    -1,  2320,  2321,  2322,  2323,  2324,  2325,  2326,  2327,
    2328,  2329,    -1,    -1,    -1,   268,  2334,  2335,   271,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2362,    -1,    -1,   141,    -1,  2367,
      -1,  3063,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2384,    -1,    -1,  3081,
      -1,    -1,    -1,  3085,    -1,    -1,    -1,  3089,   172,  2397,
      -1,    -1,  2400,  2401,    -1,    -1,    -1,  3099,    -1,  2407,
    2408,    -1,  3104,    -1,  3106,   189,    -1,    -1,    -1,    -1,
     194,    -1,  3114,  2421,  2422,  2423,  2424,    -1,  2426,    -1,
      -1,    -1,  2430,    -1,    -1,     8,    -1,    -1,    11,    -1,
    3132,    -1,    15,    16,    17,    18,    19,    20,    21,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,    -1,     8,    -1,    -1,    11,  2484,  3179,    -1,    15,
      16,    -1,    -1,    19,    20,    21,    -1,  3189,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
    3202,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    78,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,     8,
      -1,   504,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,  2584,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,   172,
      -1,    -1,     8,    -1,    -1,    11,    -1,    46,   382,    15,
      16,    -1,    -1,    -1,    53,    -1,   189,  2615,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3323,  3324,  3325,    -1,    -1,    -1,    -1,    -1,    78,
      46,    -1,    -1,    -1,   217,   218,   172,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2653,    -1,  2655,  3350,   232,
      -1,  2659,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,
    2668,    -1,    78,  2671,    -1,  2673,    -1,    -1,    -1,  2677,
      -1,    -1,  2680,  2681,    -1,    -1,  2684,  2685,    -1,    -1,
      -1,   217,   218,    -1,  2692,   268,    -1,    -1,   271,  3391,
      -1,    -1,    -1,  2701,    -1,    -1,   232,    -1,    -1,    -1,
      -1,    -1,   285,   487,    -1,   288,    -1,    -1,  2716,    -1,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   172,    -1,   141,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,  2754,    -1,    -1,   285,
      -1,    26,    -1,    -1,    -1,    -1,   172,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,   217,   218,
      -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,
      -1,    -1,    -1,   232,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,   104,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,   382,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2888,  2889,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   487,  2913,  2914,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,   504,   197,  2931,    -1,    -1,    -1,  2935,    -1,  2937,
    2938,  2939,    -1,   382,  2942,    -1,    -1,  2945,  2946,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2954,    -1,    -1,    -1,
      -1,   487,    -1,    -1,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,   382,    -1,    -1,    -1,
      -1,   246,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   254,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2995,    -1,    -1,
      -1,   266,    -1,  3001,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3014,    -1,    -1,    -1,
      -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   298,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3043,    -1,    -1,   487,    -1,
      -1,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,   504,    -1,    -1,    -1,    -1,
      -1,  3069,    -1,    -1,    -1,    -1,    -1,    -1,   343,    -1,
      -1,   487,   347,    -1,   349,    -1,    -1,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3101,  3102,  3103,    -1,   372,    -1,    -1,
      -1,    -1,   377,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3121,    -1,    -1,   391,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3133,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3177,
      -1,    -1,    -1,   448,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3204,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,  3229,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,  3254,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
    3298,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,  3353,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
      -1,    -1,    -1,    -1,   494,   495,   496,    -1,    -1,    -1,
      -1,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,   509,
     510,   511,    -1,   513,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,    -1,
      -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,
     509,   510,   511,    -1,   513,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,   489,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,
      -1,    -1,    -1,   501,    -1,   503,   504,    -1,    -1,    -1,
     508,   509,   510,   511,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
     489,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,    -1,
      -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,
     509,   510,   511,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,   128,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
      -1,    -1,    -1,    -1,   494,   495,   496,    -1,    -1,    -1,
      -1,   501,    -1,   503,   504,    -1,    -1,    -1,   508,   509,
     510,   511,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,   228,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,    -1,
      -1,    -1,    -1,   494,   495,   496,    -1,    -1,    -1,    -1,
     501,    -1,   503,    -1,    -1,    -1,    -1,   508,   509,   510,
     511,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,    -1,    -1,
      -1,    -1,   494,   495,   496,    -1,    -1,    -1,    -1,   501,
      -1,   503,    -1,    -1,    -1,    -1,   508,   509,   510,   511,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,
      -1,   494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,
     503,   504,    -1,    -1,    -1,   508,   509,   510,   511,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,
     494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,   503,
      -1,    -1,    -1,    -1,   508,   509,   510,   511,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,   409,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,
     495,   496,    -1,    -1,    -1,    -1,   501,    -1,   503,   504,
      -1,    -1,    -1,   508,   509,   510,   511,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
     496,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,    -1,
      -1,    -1,   508,   509,   510,   511,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
     167,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,   489,    -1,    -1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,   501,    -1,   503,    -1,    -1,    -1,
      -1,   508,   509,   510,   511,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,
      -1,    -1,    -1,    -1,   501,    -1,   503,    -1,    -1,    -1,
      -1,   508,   509,   510,   511,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,
      -1,    -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,
     508,   509,   510,   511,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,    -1,
      -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,
     509,   510,   511,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
      -1,    -1,    -1,    -1,   494,   495,   496,    -1,    -1,    -1,
      -1,   501,    -1,   503,   504,    -1,    -1,    -1,   508,   509,
     510,   511,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,    -1,
      -1,    -1,    -1,   494,   495,   496,    -1,    -1,    -1,    -1,
     501,    -1,   503,    -1,    -1,    -1,    -1,   508,   509,   510,
     511,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,    -1,    -1,
      -1,    -1,   494,   495,   496,    -1,    -1,    -1,    -1,   501,
      -1,   503,    -1,    -1,    -1,    -1,   508,   509,   510,   511,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,
      -1,   494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,
     503,    -1,    -1,    -1,    -1,   508,   509,   510,   511,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,
     494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,   503,
      -1,    -1,    -1,    -1,   508,   509,   510,   511,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,
     495,   496,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,
      -1,    -1,    -1,   508,   509,   510,   511,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
     496,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,    -1,
      -1,    -1,   508,   509,   510,   511,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,
      -1,    -1,    -1,    -1,   501,    -1,   503,    -1,    -1,    -1,
      -1,   508,   509,   510,   511,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,
      -1,    -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,
     508,   509,   510,   511,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,    -1,
      -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,
     509,   510,   511,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
      -1,    -1,    -1,    -1,   494,   495,   496,    -1,    -1,    -1,
      -1,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,   509,
     510,   511,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,    -1,
      -1,    -1,    -1,   494,   495,   496,    -1,    -1,    -1,    -1,
     501,    -1,   503,    -1,    -1,    -1,    -1,   508,   509,   510,
     511,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,    -1,    -1,
      -1,    -1,   494,   495,   496,    -1,    -1,    -1,    -1,   501,
      -1,   503,    -1,    -1,    -1,    -1,   508,   509,   510,   511,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,
      -1,   494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,
     503,    -1,    -1,    -1,    -1,   508,   509,   510,   511,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,    -1,    -1,    -1,    -1,
     494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,   503,
      -1,    -1,    -1,    -1,   508,   509,   510,   511,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,   409,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
     495,    -1,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,
      -1,    -1,    -1,   508,   509,   510,   511,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
     496,    -1,    -1,    -1,    -1,   501,    -1,   503,    -1,    -1,
      -1,    -1,   508,   509,   510,   511,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,    -1,
      -1,    -1,    -1,    -1,   501,    -1,   503,    -1,    -1,    -1,
      -1,   508,   509,   510,   511,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   494,   495,    -1,    -1,
      -1,    -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,
     508,   509,   510,   511,     3,     4,     5,     6,     7,    -1,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,    -1,    -1,
      -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,
     509,   510,   511,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,    -1,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,   495,   496,    -1,     3,
       4,     5,   501,    -1,   503,     9,    -1,    -1,    -1,   508,
     509,   510,   511,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,    -1,   269,   270,   271,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,   283,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     494,   495,   496,    -1,     3,     4,     5,     6,     7,   503,
       9,    -1,    -1,    -1,    -1,    -1,    -1,   511,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,   455,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,    -1,    -1,
      -1,    -1,     3,     4,     5,     6,     7,    -1,     9,    -1,
      -1,    -1,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,
     509,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     501,    -1,   503,    -1,    -1,    -1,    -1,   508,   509,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    -1,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,    -1,   172,
     173,    -1,   175,    -1,    -1,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,    -1,   269,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,
     293,   294,   295,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
      -1,   314,   315,   316,    -1,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,    -1,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
      -1,   424,    -1,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,    -1,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,   485,   486,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,   504,    -1,    -1,   507,    -1,    40,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,   280,   281,   282,    -1,
      -1,   285,   286,   287,    -1,   289,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,    -1,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   503,   504,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    34,    35,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,   167,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,    -1,     3,   489,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,   284,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,    -1,     3,   489,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   503,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,   284,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   503,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,   455,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,   167,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,   407,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,     3,    -1,   489,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,   167,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,   407,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,    -1,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,    -1,     3,   489,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   503,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   503,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     503,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   503,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,    -1,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   503,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,    -1,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,    -1,     3,     4,     5,    -1,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    15,    16,    -1,
     503,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,    -1,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,    -1,   293,   294,   295,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,    -1,   314,   315,   316,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,    -1,   424,    -1,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,   485,   486,    -1,
       3,    -1,   490,   491,   492,     8,   494,   495,   496,   497,
     498,   499,    15,    16,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,    -1,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,   172,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,    -1,    -1,   194,    -1,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,   172,    53,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,   232,    -1,   194,    -1,    -1,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,
     271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,
     271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,
     271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,   382,    -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,
     271,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   382,    -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,
     271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,   382,    -1,   504,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   487,    -1,    -1,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    36,
      -1,   382,    -1,   504,    -1,    -1,    -1,    -1,    -1,    46,
      -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   487,    -1,    -1,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    36,
      -1,    78,    -1,   504,    -1,    -1,    -1,    -1,    -1,    46,
      -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   487,    -1,    -1,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    36,
      -1,    78,    -1,   504,    -1,    -1,    -1,    -1,    -1,    46,
      -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   487,    -1,    -1,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    36,
      -1,    78,    -1,   504,    -1,    -1,    -1,    -1,    -1,    46,
      -1,     8,    -1,    -1,    11,   172,    53,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    36,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,   172,    53,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   189,    -1,    -1,   232,    -1,   194,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,
      -1,   268,    -1,    -1,   271,   232,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     487,    -1,    -1,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,   382,    -1,   504,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     487,    -1,    -1,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    36,    -1,   382,    -1,   504,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     487,    -1,    -1,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    36,    -1,    78,    -1,   504,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     487,    -1,    -1,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    36,    -1,    78,    -1,   504,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     487,    -1,    -1,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    36,    -1,    78,    -1,   504,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,   172,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,
      -1,   194,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   172,
      53,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,   232,
      -1,   194,    -1,    -1,    -1,    78,    26,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,   172,
      40,    -1,    -1,     8,   217,   218,    11,    -1,    -1,    -1,
      15,    16,    -1,    -1,    -1,   268,   189,    -1,   271,   232,
      60,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   172,
      -1,    46,    -1,    -1,   217,   218,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,
      -1,   194,    -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    78,    -1,   288,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   133,    -1,   268,   189,    -1,   271,   232,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,   382,
      -1,    -1,    -1,    -1,    -1,   268,   141,    -1,   271,   232,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,   197,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,   382,
      -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,   271,    -1,
      -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,    -1,    -1,   382,
      -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   266,   232,    -1,    -1,
      -1,    -1,    -1,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,   287,    -1,   382,
      -1,   504,    -1,    -1,    -1,    -1,    -1,    -1,   298,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,   487,    -1,    -1,   490,   491,   492,
     285,   494,   495,   496,   497,   498,   499,    -1,    36,   382,
      -1,   504,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,   343,    -1,    53,    -1,   347,    -1,   349,
      -1,    -1,    -1,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,   502,
      78,    -1,   372,    -1,    -1,    -1,    -1,   377,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,    -1,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,   502,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   487,    -1,    -1,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,   448,   502,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   487,    -1,   232,    -1,    -1,    -1,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   487,
      -1,    -1,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,   502,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,    -1,    -1,
     463,    -1,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,     3,     4,
       5,    -1,    -1,    -1,     9,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,   409,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,     3,     4,     5,    -1,    -1,    -1,     9,   494,
     495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,   452,    -1,   454,   455,   456,   457,   458,   459,   460,
      -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,     3,     4,     5,    -1,
      -1,    -1,     9,   494,   495,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
      -1,    -1,     8,    -1,    -1,    11,    -1,   494,   495,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,
      46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    78,    -1,    -1,    -1,   122,    -1,    -1,    -1,
      46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    78,    -1,    40,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,   172,    53,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,   189,    -1,    -1,    -1,    -1,   194,    -1,
      -1,    -1,    78,    -1,    -1,    -1,   162,    36,    -1,    -1,
      -1,   167,    -1,    -1,    -1,    -1,   172,    46,    -1,    -1,
      -1,   217,   218,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   189,    -1,    -1,   232,    -1,   194,    -1,
      -1,    -1,    -1,    -1,    -1,   161,    -1,    -1,    -1,    78,
      -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   268,   189,    -1,   271,   232,    -1,   194,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,   172,    -1,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   268,   189,    -1,   271,   232,    -1,   194,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   217,   218,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   268,    -1,    -1,   271,   232,    -1,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,    -1,   217,   218,
      -1,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,
     316,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,   382,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    36,   445,
      -1,    -1,    40,    -1,    -1,    -1,   285,    -1,    46,   288,
      -1,    -1,    -1,    -1,    -1,    53,   382,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   310,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      78,   487,    -1,    -1,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,   382,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   487,    -1,    -1,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   382,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,   487,    -1,    -1,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,   172,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,   189,    53,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,   487,    -1,    -1,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    78,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    -1,
      -1,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,     8,    -1,   271,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,   167,    -1,    -1,    46,
      -1,   172,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,   268,    -1,    -1,
     271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    46,
      -1,    -1,    -1,    -1,    -1,   172,    53,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
     217,   218,    -1,    53,    -1,    -1,    -1,    -1,    -1,   487,
      -1,    -1,   490,   491,   492,   232,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,   172,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
     217,   218,   172,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,   189,
      -1,    -1,    -1,    -1,   194,    -1,   487,    -1,    78,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   382,    -1,   217,   218,    -1,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,
      -1,   271,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,   285,    -1,    -1,   288,    -1,
      -1,    53,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,
      -1,    -1,    -1,    -1,   194,    -1,    78,    -1,    -1,    -1,
     487,    -1,    -1,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,   382,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,   268,    -1,
      -1,   271,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,   285,    -1,    -1,   288,    53,
     172,    -1,    -1,    -1,    -1,   415,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,
      -1,    -1,   194,    -1,    78,    -1,    -1,    -1,    -1,    -1,
     487,    -1,    -1,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,   217,   218,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,    -1,   382,    -1,    -1,    -1,   268,    -1,    -1,   271,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,    -1,   172,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
     382,    -1,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,   382,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,
      -1,    -1,    -1,   487,    -1,    -1,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,   499,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,    -1,   269,   270,   271,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,   283,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    34,    35,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,   455,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,   164,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,    -1,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
     164,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    34,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,    -1,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,    -1,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,   284,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,   284,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,    -1,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,     3,     4,    -1,    -1,    -1,    -1,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,    -1,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,    -1,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,    -1,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,    -1,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,    -1,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,    -1,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,    -1,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,    -1,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,    -1,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,    -1,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,    -1,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,    -1,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,    -1,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,    -1,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,    -1,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,    -1,   372,   373,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,   452,    -1,   454,    -1,   456,   457,   458,   459,
     460,    -1,    -1,   463,    -1,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,   452,    -1,   454,    -1,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,    -1,
      -1,   463,    -1,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,    -1,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    -1,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,    -1,   172,   173,
      -1,   175,    -1,    -1,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,    -1,    -1,   269,   270,   271,   272,    -1,
      -1,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
     294,   295,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,    -1,
     314,   315,   316,    -1,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
      -1,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,    -1,
     424,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,    -1,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,    -1,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,
     484,   485,   486,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    -1,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,    -1,   172,   173,    -1,
     175,    -1,    -1,    -1,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,    -1,   269,   270,   271,   272,    -1,    -1,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,    -1,   293,   294,
     295,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,    -1,   314,
     315,   316,    -1,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,    -1,
     405,   406,    -1,   408,   409,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,   422,    -1,   424,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
      -1,   446,   447,   448,   449,   450,    -1,   452,    -1,   454,
     455,   456,   457,   458,   459,   460,    -1,    -1,   463,    -1,
      -1,   466,   467,   468,   469,   470,   471,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,
     485,   486,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    -1,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,    -1,   172,   173,    -1,   175,
      -1,    -1,    -1,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,    -1,    -1,   269,   270,   271,   272,    -1,    -1,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,   294,   295,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,    -1,   314,   315,
     316,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,   422,    -1,   424,    -1,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,    -1,
     446,   447,   448,   449,   450,    -1,   452,    -1,   454,   455,
     456,   457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,
     466,   467,   468,   469,   470,   471,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,   485,
     486,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      -1,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
      -1,    -1,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,    -1,   269,   270,   271,   272,    -1,    -1,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,    -1,   293,   294,   295,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,    -1,   314,   315,   316,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,    -1,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,   422,    -1,   424,    -1,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,    -1,   446,
     447,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,
     467,   468,   469,   470,   471,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,   485,   486,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,   452,    -1,   454,    -1,   456,   457,
     458,   459,   460,    -1,    -1,   463,    -1,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    -1,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,    -1,   172,   173,
      -1,   175,    -1,    -1,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,    -1,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,    -1,    -1,   269,   270,   271,   272,    -1,
      -1,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
     294,   295,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,    -1,
     314,   315,   316,    -1,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,    -1,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,    -1,   403,
      -1,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,   422,    -1,
     424,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,    -1,   446,   447,   448,   449,   450,    -1,   452,    -1,
     454,   455,   456,   457,   458,   459,   460,    -1,    22,   463,
      -1,    -1,   466,   467,   468,   469,   470,   471,    32,    -1,
      34,    35,    -1,    -1,    -1,    22,    -1,    -1,    -1,   483,
     484,   485,   486,    -1,    -1,    32,    -1,    -1,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    73,
      -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      84,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
      -1,    -1,    96,    -1,    98,    -1,    -1,    84,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,    96,
      -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
      -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,    -1,   133,
      -1,    -1,    -1,    -1,    -1,   139,   123,    -1,    -1,    -1,
      -1,    -1,    -1,   147,    -1,    -1,   133,    -1,    -1,    -1,
      -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,   163,
     147,    -1,    -1,   167,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   163,    -1,    -1,    -1,
     167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   307,   308,   309,    -1,    -1,    -1,    -1,
      -1,   315,    -1,    -1,   318,    -1,    -1,    -1,    -1,    -1,
     307,   308,   309,    -1,    -1,    -1,    -1,    -1,   315,    -1,
      -1,   318,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     347,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,   356,
      -1,    -1,    -1,   377,    -1,    -1,    -1,   381,    -1,    -1,
      -1,    -1,    -1,   370,    -1,    -1,    -1,   391,    -1,    -1,
     377,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,   407,   391,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
     407,    -1,    -1,   427,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   440,    -1,    -1,    -1,
     427,    -1,   446,    -1,    -1,    -1,    -1,   451,    -1,    -1,
      -1,   455,    -1,   440,    -1,    -1,    -1,    -1,    -1,   446,
      -1,   465,    -1,    -1,   451,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   465,    -1,
      -1,    -1,    -1,    -1,    -1,   489,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,
      -1,    -1,   489,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   503
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    73,    84,
      96,    98,   109,   123,   124,   133,   139,   147,   149,   150,
     163,   167,   193,   209,   235,   307,   308,   309,   315,   318,
     347,   356,   370,   377,   381,   391,   403,   407,   427,   440,
     443,   446,   451,   465,   489,   503,   515,   516,   517,   518,
     519,   526,   537,   538,   539,   542,   543,   552,   569,   617,
     620,   623,   633,   635,   638,   639,   643,   650,   654,   661,
     665,   666,   667,   674,   679,   695,   697,   698,   701,   703,
     704,   705,   706,   708,   710,   711,   715,   768,   769,   931,
     933,   934,   935,   940,   943,   949,   950,   954,   421,   468,
     932,   198,   363,   372,   407,   457,   106,   540,   932,     3,
      22,    23,    24,    25,    26,    27,    28,    29,    31,    32,
      33,    42,    43,    44,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    59,    60,    61,    62,
      63,    64,    67,    68,    69,    70,    71,    73,    74,    75,
      76,    77,    79,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    92,    93,    94,    95,    96,    97,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   114,   116,   117,   118,   119,   120,   121,
     123,   124,   125,   126,   127,   130,   131,   132,   133,   134,
     136,   137,   138,   140,   141,   142,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   156,   158,   159,
     160,   161,   163,   165,   166,   168,   169,   170,   171,   172,
     173,   175,   177,   178,   179,   180,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   195,   196,
     197,   198,   199,   200,   201,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   214,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   229,   230,   231,
     232,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   269,   270,   271,   272,   274,
     275,   276,   277,   278,   279,   281,   282,   285,   286,   287,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   322,   323,   324,
     325,   326,   327,   329,   330,   331,   332,   333,   334,   335,
     336,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   405,   406,   408,   409,   410,   411,   412,
     413,   414,   416,   417,   418,   421,   422,   423,   424,   425,
     427,   428,   429,   430,   431,   432,   433,   434,   437,   438,
     439,   441,   442,   443,   444,   446,   447,   448,   449,   450,
     451,   452,   454,   455,   456,   457,   458,   459,   460,   463,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   546,   626,   627,   628,   839,   920,   924,     3,   171,
     242,   400,   544,   546,   626,   932,    55,   503,   564,   173,
     236,   288,   363,   411,   413,   430,   436,   439,   615,   673,
       5,    30,   318,   546,   547,   919,   106,   540,    24,    79,
      95,   142,   152,   164,   169,   198,   241,   245,   312,   327,
     360,   363,   372,   375,   393,   407,   414,   424,   430,   457,
     644,   645,   648,   932,   919,   455,   503,   518,   519,   526,
     542,   543,   552,   569,   617,   620,   623,   633,   635,   638,
     639,   643,   650,   657,   661,   667,   674,   695,   697,   698,
     701,   703,   931,   933,   935,   940,   943,   949,   954,   106,
      73,   209,    66,    77,    79,   154,   227,   274,   284,   296,
     313,   359,   402,   423,   425,   429,   451,   503,   545,   546,
     547,   704,   769,   771,   773,   783,   790,   791,   839,   841,
     842,   106,     5,   546,   548,   696,   696,   546,   919,    30,
     173,   236,   376,   417,   421,   546,   941,   942,   952,   932,
      30,   128,   724,   725,   173,   236,   363,   376,   417,   944,
     945,   952,   932,   546,   703,   715,   953,   546,   790,   407,
     721,   545,   168,   503,   937,   503,   335,   716,   717,   919,
     716,   704,   705,     0,   506,   455,   655,   118,   208,   442,
     143,   213,   289,   435,   727,   728,   773,   773,   704,   706,
     708,   507,    30,   417,   421,   703,   953,   187,   545,   919,
     187,   545,   187,   790,   187,   545,   548,   501,   505,   549,
     898,   503,   703,   545,   411,   413,   411,   413,   345,   187,
     545,   545,   169,   241,   335,   372,   407,   457,   621,   198,
      30,   919,   187,     3,   247,   424,   105,   407,   407,   457,
     366,     3,    37,    42,    49,    54,    55,    56,    57,    69,
      70,    79,    81,    87,    99,   110,   111,   132,   160,   166,
     168,   172,   187,   189,   204,   211,   212,   214,   217,   218,
     220,   230,   232,   242,   261,   262,   263,   271,   276,   293,
     295,   314,   332,   354,   358,   371,   378,   382,   385,   400,
     409,   417,   418,   429,   435,   452,   455,   626,   629,   649,
     801,   803,   805,   807,   809,   811,   813,   814,   815,   817,
     818,   819,   821,   822,   925,   187,   546,   646,   926,   187,
     916,   919,   187,   919,   503,   653,   657,     3,    37,    42,
      49,    53,    54,    55,    56,    57,    69,    70,    77,    79,
      81,    87,    99,   110,   111,   148,   154,   160,   166,   168,
     171,   172,   177,   178,   189,   204,   205,   211,   212,   214,
     217,   218,   220,   230,   232,   242,   261,   262,   263,   267,
     271,   274,   276,   292,   293,   295,   296,   313,   314,   317,
     332,   354,   358,   371,   378,   382,   385,   400,   402,   409,
     417,   418,   423,   425,   429,   451,   452,   455,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   626,
     630,   658,   660,   661,   663,   664,   655,   546,   548,   544,
     696,   503,   503,   162,   503,   704,   791,   503,   503,   545,
     503,   503,   167,   503,   503,   503,   503,   704,   769,   773,
     783,   496,   549,    40,   546,   784,   785,   784,   370,   507,
     707,    37,    42,    99,   168,   204,   220,   230,   262,   307,
     314,   354,   371,   440,   787,   785,    40,   546,   784,   786,
     489,   795,   548,   492,   503,   503,   699,   942,   942,   942,
     486,   219,   505,   283,     4,     6,     7,     8,     9,    10,
      39,    54,    56,    57,    65,    69,    70,    81,   110,   111,
     113,   148,   155,   160,   177,   178,   211,   212,   214,   242,
     261,   263,   268,   273,   276,   285,   332,   358,   385,   417,
     418,   426,   452,   487,   494,   495,   496,   501,   503,   508,
     509,   510,   511,   546,   548,   704,   758,   806,   809,   812,
     813,   814,   816,   817,   818,   821,   822,   833,   835,   836,
     837,   838,   839,   840,   842,   843,   858,   859,   870,   892,
     897,   906,   907,   908,   920,   921,   922,   905,   907,   944,
     944,   548,   944,   486,   167,   419,   492,   505,   549,   640,
     790,     3,   166,   168,   455,   661,   936,   938,   166,   939,
     833,   876,   877,   716,   507,   503,   928,   504,   504,   517,
     545,   167,   288,   682,   640,    30,   128,   722,   722,    59,
     722,   157,   162,   233,   280,   733,   735,   736,   761,   763,
     764,   765,   176,   283,   445,   283,   727,   728,   503,   408,
     951,   486,   219,   148,    26,    32,   133,   287,   343,   347,
     377,   448,   531,   534,   535,   343,   148,    40,    60,   104,
     197,   246,   254,   266,   298,   343,   349,   372,   377,   391,
     520,   523,   534,   148,   343,   377,   534,   148,   343,   377,
     534,    40,   541,   833,   899,     3,    30,    34,    35,    36,
      38,    39,    40,    41,    45,    58,    65,    66,    72,    78,
      80,    91,    98,   113,   115,   122,   128,   129,   135,   139,
     143,   155,   157,   162,   164,   167,   174,   176,   181,   194,
     202,   213,   215,   227,   228,   233,   268,   273,   280,   283,
     284,   288,   289,   307,   308,   309,   310,   321,   328,   337,
     351,   370,   387,   404,   407,   415,   419,   420,   426,   435,
     436,   440,   445,   451,   453,   461,   462,   464,   465,   550,
     551,   626,   630,   632,   898,     3,    30,    37,    42,    49,
      55,    79,    81,    87,    99,   128,   166,   168,   171,   172,
     189,   204,   217,   218,   220,   230,   232,   242,   262,   271,
     293,   295,   314,   354,   371,   382,   400,   409,   429,   453,
     455,   504,   626,   631,   833,   879,   880,   923,   929,   504,
     503,   604,   363,   615,   268,   624,    40,   457,   187,   545,
     187,   545,   619,   187,   545,   187,   545,    87,   670,   148,
     469,    88,   125,   301,   412,   454,   820,   820,   820,   503,
     808,   808,   317,   503,   810,   148,   503,    69,    70,   820,
     808,   805,   467,   489,   503,   823,   503,   823,   503,    63,
     350,   507,   647,   503,    39,   804,   503,   107,   108,   184,
     185,   248,   249,   250,   251,   252,   253,   256,   257,   367,
     368,   483,   484,   503,   824,   825,   826,   827,   828,   829,
     830,   831,   832,   808,   148,   505,   927,   507,   647,   148,
     507,   647,   148,   283,   651,   652,   833,   929,   504,   507,
       4,   155,   283,   426,   494,   495,   522,   525,   548,   656,
     658,   659,   662,   922,   657,   419,   503,   559,   563,   833,
     877,   503,     3,   548,   824,   825,   826,   827,   828,   829,
     830,   831,   882,   883,   785,   786,   833,   545,   833,   884,
     494,   495,   546,   834,   835,   859,   870,   886,   503,   833,
     876,   887,   833,    58,   167,   228,   420,   833,   877,   890,
     833,   504,   547,   503,   409,   741,   742,   742,   724,   725,
     773,   215,   719,    37,   220,   371,   787,   220,   293,   788,
     773,   788,   220,   787,   503,   220,   788,   144,   195,   775,
     220,   742,   503,   547,   503,   742,   290,   522,   662,   946,
     948,   879,   803,   881,    40,   231,   546,   503,   501,   704,
     833,   896,   503,   704,   511,   833,   503,   503,   833,   833,
     833,   144,   909,   910,   833,   877,   878,   704,   833,   876,
       9,   551,   547,   860,   861,   862,   505,   549,   900,   549,
     503,   548,   503,   548,   922,     3,     8,    11,    15,    16,
      17,    18,    19,    20,    21,    36,    40,    46,    53,    78,
     172,   189,   194,   217,   218,   232,   268,   271,   285,   288,
     382,   487,   490,   491,   492,   494,   495,   496,   497,   498,
     499,   868,   869,   870,   872,   903,   466,   844,   295,   833,
     507,   719,   503,   548,   719,     3,   113,   236,   522,   548,
     822,   947,   102,   113,   948,   113,   948,   546,    40,   546,
     504,   507,   655,   507,   504,   717,   916,   917,    40,   928,
     640,   188,   345,   215,   377,   706,   706,    30,   729,   730,
     833,    59,   706,   723,   159,   265,   749,   222,   266,   331,
     380,   442,     4,     9,    30,   744,   833,   494,   495,   745,
     746,   833,   835,   761,   762,   736,   735,   733,   734,   162,
     764,   278,   766,    59,   712,   713,   714,   776,   834,   907,
     907,   733,   761,   877,   231,   545,    72,    80,    91,   164,
     187,   321,   436,   546,   586,   596,   611,    80,    91,   702,
      91,   702,   503,   419,   503,   584,   240,   439,   584,    91,
     507,   419,   545,   805,   522,    59,   524,   522,   522,   104,
     246,   254,    59,   419,   465,   489,   521,   259,   363,   521,
     523,   790,    91,   419,   702,   363,   545,   419,   363,   546,
     559,   502,   513,   879,   879,   880,   507,   727,   728,    13,
      14,   419,   546,   603,   608,   465,   562,   545,   335,   372,
     407,   457,   621,   148,    98,   569,   625,   633,   667,   954,
     140,   803,   545,   268,   520,   634,   268,   503,   604,    40,
     268,   604,   268,   503,   622,   187,   546,   598,   671,     3,
     503,   878,   922,   649,   881,   820,   820,    39,   804,   417,
     417,   922,   922,   546,   800,   803,   800,   501,   501,   922,
     922,   419,   419,   419,   419,   646,   550,   505,   926,   916,
     919,   919,   926,   504,   507,    13,   657,   663,     4,   922,
       4,   922,   548,   551,   561,   568,    55,   100,   119,   137,
     141,   163,   166,   182,   273,   281,   303,   329,   565,    40,
     504,   833,   504,   167,   507,   504,   310,   885,   504,   834,
     834,    11,    15,    16,    19,    20,    21,   194,   217,   285,
     490,   491,   492,   494,   495,   496,   497,   498,   499,   870,
     834,   504,   792,   793,   841,   162,   167,   888,   889,   507,
     504,    40,   890,   877,   890,   890,   167,   504,    40,   784,
     503,   917,     4,     9,   546,   737,   739,   740,   907,   905,
     173,   236,   407,   411,   413,   439,   545,   720,   462,   796,
     773,   220,   773,   283,   445,   789,   773,   220,   907,   773,
     275,   275,   503,   773,   547,   797,   798,   503,   547,   797,
     507,   504,   507,   504,   507,   552,   639,   674,   700,   703,
     933,   877,   878,   461,   893,   894,   833,   833,   863,   864,
     865,   866,     8,    15,    16,    19,    20,    21,   490,   491,
     492,   494,   495,   496,   497,   498,   499,   546,   868,   873,
     504,   877,   503,   546,   345,   914,   162,   502,   504,   507,
     513,   507,   512,   496,   898,   877,   833,   832,   832,   803,
     833,   833,   833,   833,   833,   833,   833,   833,     5,   551,
     930,   417,    45,   404,   904,   926,   833,   833,   503,   704,
     891,   128,   155,   268,   273,   278,   426,   437,   833,   273,
     503,   833,   419,    53,   172,   189,   194,   232,   382,   833,
     833,   833,   833,   833,   833,   833,   833,   833,   833,    30,
      38,   387,   867,   501,   505,   902,   176,   158,   845,   358,
     503,   859,   908,   167,   770,   879,   770,   503,   548,   546,
     545,   936,   537,   545,   833,   507,   504,   245,   268,   718,
     445,   642,   545,   676,   503,   546,   681,   691,   692,   694,
      41,   122,   731,   507,   445,   731,   259,   706,   358,   359,
     494,   495,   746,   748,   835,   380,   222,   284,   306,   306,
     507,   498,     4,   747,   922,   747,   358,   359,   748,   545,
     915,   272,   384,   767,   503,   917,   918,   507,   176,   445,
     194,   176,   215,   762,   734,   504,   343,   534,   503,   187,
     596,   919,   222,   268,   222,   445,   503,   589,   802,   803,
     919,   546,   187,   919,   187,   546,    26,   133,   377,   530,
     533,   551,   580,   594,   919,   551,   588,   607,   919,   531,
     919,   343,   377,   520,   534,   522,   926,   919,   522,   926,
     919,   522,   343,   377,   534,   919,   919,   919,   919,   343,
     377,   534,   919,   919,   495,   833,   899,   727,   727,   727,
     453,   880,   188,   348,   726,   833,   833,   326,   558,   504,
     507,   281,   167,   419,   553,   624,   457,   545,   545,   619,
     545,   545,   545,   288,   615,   503,   704,   503,   148,   148,
     232,   546,   586,   596,   599,   602,   612,   614,   465,   467,
     591,   147,   703,   148,   465,   672,   148,   504,   879,    40,
     268,   283,   877,   504,   504,   647,   504,   501,   486,   486,
     504,   504,   803,   504,   507,   504,   922,   502,   922,   504,
     504,   825,   827,   828,   829,   828,   829,   829,   647,   550,
     647,   283,   647,   651,   833,   559,   496,   503,   522,   560,
     662,   838,   504,   507,    40,   557,   548,   557,   268,   273,
     329,   557,    59,   557,   803,   504,   833,   833,   833,   888,
     803,   834,   834,   834,   834,   834,   834,   128,   268,   278,
     834,   834,   834,   834,   834,   834,   834,   834,   834,   834,
     504,   507,    40,   794,   833,   833,   889,   888,   803,   504,
     504,   504,   877,   803,   917,   504,   306,   498,   306,   359,
     498,   503,   503,   719,   411,   413,   411,   413,   545,   721,
     721,   721,   833,   176,   750,   789,   773,   833,   503,   773,
     162,   503,   547,   780,   789,   803,   504,   507,   797,   504,
     946,   803,   504,   502,   833,   135,   894,   895,   504,   513,
     507,   512,   505,   504,   504,   917,   503,   833,   911,   546,
     833,   833,   860,   910,   504,   504,   486,   834,   834,   141,
     877,   167,   128,   155,   273,   278,   426,   437,   503,   141,
     873,   833,   404,   904,   833,   891,   833,   419,   503,   704,
     833,   899,   550,   503,   503,   151,   846,   771,   772,   796,
     727,   796,   922,   832,   928,   928,   245,   503,   772,   462,
     641,    40,    59,   677,   687,   694,   900,   507,   770,   492,
     488,   732,   730,   285,   868,   871,   732,     4,   922,   748,
     284,   442,   745,   507,   239,   917,   712,    59,   907,   503,
     547,    59,   259,   419,   833,   268,   611,   503,   148,   503,
     589,   198,   608,   609,   570,    40,   171,   579,   605,   570,
      26,   133,   347,   349,   377,   527,   528,   529,   535,   536,
     148,   647,   148,   647,   580,   594,   580,   504,   507,   548,
     573,   492,   505,   504,   507,   419,   363,    91,   419,   702,
     363,   419,   419,   419,   363,   513,   502,   513,   726,   726,
     726,   880,   275,   275,   504,   394,   395,   548,   567,   603,
     558,   545,   634,   503,    40,   604,   622,   624,   345,   407,
     548,   636,   637,   608,   545,   545,   619,   545,   504,   507,
     281,   584,   281,   283,   583,   919,   465,   618,   545,   584,
      40,   545,   504,   407,   833,   148,   545,   504,   804,   922,
     823,   823,   804,   546,   804,   502,   502,   926,   555,   566,
     662,   561,   548,   548,   273,   608,   496,   608,   548,   496,
     608,   548,   504,   504,   889,   167,   128,   278,   503,   795,
     792,   503,   504,   504,   504,   546,   737,   796,   721,   721,
     721,   721,   545,   545,   545,    59,   181,   759,   789,   917,
     503,   777,   778,   779,   836,   920,   917,   162,    78,   799,
     798,   504,   415,   833,   139,   833,   863,   873,   504,   833,
     911,   912,   913,    40,   194,   504,   914,   832,   833,    36,
      36,   833,   504,   833,   167,   503,   881,   833,   504,   141,
     834,   834,   141,   141,   833,   833,   502,   513,   503,   901,
     728,   462,   833,   294,   850,   507,   750,   726,   750,   504,
     700,   833,   351,   685,   546,   259,   313,   113,   297,   503,
     675,   703,   504,   507,   681,   641,   833,   159,   226,   503,
     732,   284,   545,   504,   918,   176,   704,   705,   907,   918,
     919,   919,   504,   148,   609,   596,   609,   570,   598,   507,
     504,   115,   202,   266,   268,   595,   503,    33,    59,   616,
     605,    72,    78,    91,   113,   115,   202,   268,   273,   321,
     337,   436,   445,   575,   576,   590,   171,   113,   186,   268,
     584,   521,   105,   113,   171,   268,   393,   396,   523,   584,
     377,   529,   430,   919,   546,   533,     3,    37,    42,    49,
      55,    79,    81,    87,    99,   166,   168,   171,   172,   189,
     204,   217,   218,   220,   230,   232,   242,   262,   267,   271,
     285,   293,   295,   314,   354,   371,   378,   382,   400,   409,
     429,   435,   455,   494,   495,   522,   548,   571,   610,   626,
     632,   803,   871,   923,   551,   607,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   899,   899,   504,   504,
     504,   727,   521,   567,   503,   602,   703,   672,    40,   615,
     187,   545,   504,   507,   504,   634,   503,    40,   593,   591,
     599,    84,   653,   105,   266,   604,   703,   622,   703,   598,
     445,   669,   502,   803,   647,   504,   507,   608,   834,   167,
     503,   881,   797,   504,   507,   504,   750,   545,   545,   545,
     545,    30,   101,   177,   357,   503,   751,   752,   753,   754,
     755,   756,   757,   833,   833,   464,   847,   504,   835,   874,
     875,   194,   176,   774,   778,   503,   504,   780,   781,   782,
     926,   833,   507,   504,   546,   833,   835,   833,   833,   833,
     881,   504,   833,    36,    36,   833,   833,   141,   504,   495,
     899,   504,   879,   504,   833,   504,   503,   546,   851,   759,
     504,   759,   548,   504,   906,   451,   406,   444,   686,   546,
     680,   690,   283,   683,   492,   694,   685,   873,    59,   504,
     504,   450,   451,   709,   570,   596,   504,   504,   465,   601,
     116,   190,   200,   115,   447,   833,   113,    40,   503,   926,
     919,   834,   116,   190,   115,   273,   222,   545,   601,    86,
     616,   187,   273,   522,   833,   616,   273,   494,   495,   525,
     546,   803,   647,   647,   242,   400,   923,   927,   492,   419,
     419,   502,   502,   726,   559,   445,   554,   556,   608,   504,
     618,    40,   407,   833,   407,   268,   503,   548,   672,   602,
     147,   703,   145,   196,   583,   118,   133,   320,   618,   105,
     672,   465,   955,    40,   283,   546,   668,   503,   566,   834,
     881,   504,   504,     9,   344,   743,   759,   503,   379,   503,
     504,   507,   546,   848,   849,   328,   760,   507,   504,   503,
     547,    59,   504,   879,   194,   504,   781,   911,   502,   187,
     504,   833,   833,   833,   513,   502,   513,   504,   504,   546,
     852,   847,   548,   847,   507,   450,   900,   504,   507,    89,
     685,   833,   504,   918,   918,   337,   601,   503,   592,   570,
     504,   186,   503,   833,   268,   576,   601,   604,   919,    40,
     148,   799,   927,   498,   571,   919,   919,   504,   521,   120,
     504,   591,   703,   703,   545,   148,    40,   504,   919,   618,
      30,    83,    92,   114,   186,   199,   393,   396,   587,   587,
     359,   359,    40,    64,    72,   236,   407,   833,   545,   503,
     546,   684,   693,   841,   504,   504,   503,   847,   877,   503,
     877,   753,    40,   507,   833,   445,   738,   835,   907,   917,
     785,   727,   503,   785,   833,   899,   899,   303,   853,   760,
     760,   703,   297,   703,   680,   283,   503,   678,   545,   570,
     551,   597,   600,   397,   459,   577,   578,   503,   572,   833,
     504,   244,   613,   186,   445,   532,   498,   430,   559,   548,
     672,   583,   955,   503,   545,   703,   591,   653,   703,    72,
     286,    72,   703,   669,   833,    78,   688,   504,   507,   688,
       9,   760,   504,   752,   504,   851,   849,   361,   504,   726,
     907,   502,   502,   502,    59,   727,   738,   738,   686,    91,
     693,   129,   604,   492,   504,   507,   520,   504,   266,   585,
     168,   302,   383,   283,   581,   582,   606,   572,   833,   430,
      40,   503,   955,   583,   618,   955,   286,   286,   503,   504,
     926,   689,   926,   672,   684,   689,   504,   738,   504,   740,
     504,   504,   876,   179,   330,   359,   854,   450,   919,   504,
     269,   442,   613,   571,   600,   504,   578,   200,   118,   442,
     283,   606,   283,   581,   703,   693,   688,   731,   796,   731,
      53,   102,   432,   833,   855,   856,   855,   855,   504,   703,
     796,   377,   582,    63,   266,   350,   377,   574,   574,   955,
     504,   689,   732,   732,   856,   358,   161,   316,   161,   316,
     144,   857,   857,   857,   692,   570,    25,   113,   273,   672,
     731,    36,   102,   176,   266,   416,   796,   796,   732,   856,
     358,   291
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   514,   515,   516,   516,   517,   517,   517,   517,   517,
     517,   517,   517,   517,   517,   517,   517,   517,   517,   517,
     517,   517,   517,   517,   517,   517,   517,   517,   517,   517,
     517,   517,   517,   517,   517,   517,   517,   517,   517,   517,
     517,   517,   517,   933,   703,   703,   704,   704,   705,   705,
     705,   705,   705,   705,   705,   705,   706,   706,   707,   707,
     708,   708,   708,   708,   708,   708,   708,   708,   708,   708,
     708,   708,   708,   708,   708,   708,   708,   708,   708,   709,
     709,   710,   710,   711,   711,   712,   712,   712,   713,   713,
     714,   714,   715,   715,   715,   716,   716,   717,   718,   718,
     718,   719,   719,   720,   720,   720,   720,   720,   720,   720,
     720,   720,   721,   721,   722,   722,   722,   723,   724,   724,
     725,   725,   726,   726,   726,   727,   727,   728,   728,   729,
     729,   730,   730,   731,   731,   731,   732,   732,   732,   733,
     733,   733,   733,   734,   734,   735,   735,   735,   735,   736,
     736,   737,   737,   737,   737,   737,   737,   738,   738,   739,
     739,   740,   740,   740,   740,   741,   742,   742,   743,   743,
     744,   744,   744,   744,   744,   745,   746,   746,   746,   747,
     747,   748,   748,   749,   749,   750,   750,   750,   751,   751,
     752,   752,   753,   753,   753,   753,   753,   754,   755,   756,
     757,   758,   758,   759,   759,   760,   760,   761,   761,   762,
     762,   763,   763,   764,   765,   765,   765,   765,   766,   766,
     767,   767,   767,   768,   768,   769,   769,   770,   770,   771,
     771,   772,   772,   773,   773,   773,   773,   773,   773,   773,
     773,   773,   773,   774,   774,   775,   775,   775,   776,   776,
     777,   777,   778,   778,   779,   779,   780,   780,   781,   782,
     782,   783,   783,   783,   783,   783,   783,   783,   783,   783,
     783,   783,   784,   784,   784,   784,   785,   785,   786,   786,
     786,   786,   786,   787,   787,   787,   787,   787,   787,   788,
     788,   789,   789,   790,   790,   790,   790,   791,   791,   792,
     793,   793,   794,   794,   795,   795,   796,   796,   797,   797,
     798,   799,   799,   800,   800,   801,   801,   802,   802,   803,
     803,   803,   803,   803,   803,   803,   803,   803,   804,   804,
     804,   805,   805,   805,   805,   805,   805,   805,   806,   806,
     806,   806,   807,   808,   808,   809,   809,   809,   809,   809,
     809,   809,   809,   809,   809,   809,   810,   810,   811,   811,
     812,   812,   813,   814,   815,   815,   816,   816,   817,   818,
     819,   819,   819,   819,   819,   819,   820,   820,   821,   821,
     821,   821,   822,   823,   823,   823,   824,   824,   825,   825,
     826,   826,   827,   827,   828,   828,   829,   829,   830,   830,
     831,   831,   832,   832,   832,   832,   832,   832,   832,   832,
     832,   832,   832,   832,   832,   832,   832,   832,   833,   833,
     833,   833,   833,   833,   833,   833,   833,   833,   833,   833,
     833,   833,   833,   833,   833,   833,   833,   833,   833,   833,
     833,   833,   833,   833,   833,   833,   833,   833,   833,   833,
     833,   833,   833,   833,   833,   833,   833,   833,   833,   833,
     833,   833,   833,   833,   833,   833,   833,   833,   833,   833,
     833,   833,   833,   833,   833,   833,   833,   833,   833,   833,
     833,   833,   833,   833,   833,   833,   833,   833,   834,   834,
     834,   834,   834,   834,   834,   834,   834,   834,   834,   834,
     834,   834,   834,   834,   834,   834,   834,   834,   834,   834,
     834,   834,   834,   835,   835,   835,   836,   836,   836,   836,
     836,   836,   836,   836,   836,   836,   836,   836,   836,   837,
     837,   837,   837,   837,   837,   838,   839,   839,   839,   839,
     839,   839,   840,   840,   841,   841,   842,   842,   842,   842,
     842,   842,   842,   842,   842,   842,   842,   842,   842,   842,
     843,   843,   844,   844,   845,   845,   845,   846,   846,   847,
     847,   848,   848,   849,   850,   850,   850,   851,   852,   852,
     853,   853,   854,   854,   854,   854,   855,   855,   856,   856,
     856,   856,   856,   857,   857,   857,   857,   857,   858,   858,
     859,   859,   860,   861,   861,   862,   862,   863,   864,   864,
     865,   865,   866,   866,   867,   867,   867,   868,   868,   869,
     869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
     869,   869,   869,   870,   870,   871,   871,   872,   872,   872,
     872,   872,   872,   872,   872,   873,   873,   874,   874,   875,
     875,   876,   876,   877,   877,   878,   878,   879,   879,   880,
     880,   880,   881,   881,   882,   882,   883,   883,   883,   883,
     883,   883,   883,   883,   883,   883,   884,   884,   885,   886,
     886,   887,   887,   887,   887,   887,   887,   888,   889,   890,
     890,   890,   891,   891,   892,   893,   893,   894,   895,   895,
     896,   896,   897,   897,   898,   898,   898,   898,   899,   899,
     900,   900,   901,   901,   901,   902,   902,   902,   902,   902,
     903,   903,   904,   904,   905,   905,   906,   906,   907,   907,
     908,   908,   908,   909,   909,   910,   910,   911,   912,   912,
     913,   913,   914,   914,   914,   915,   915,   916,   916,   917,
     917,   918,   918,   919,   920,   920,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     922,   923,   923,   923,   924,   924,   924,   925,   925,   925,
     926,   926,   927,   927,   928,   928,   929,   930,   930,   639,
     639,   640,   640,   640,   641,   641,   642,   642,   617,   617,
     617,   618,   618,   618,   619,   949,   949,   949,   949,   949,
     949,   949,   949,   950,   950,   951,   951,   952,   952,   953,
     953,   943,   943,   943,   943,   944,   944,   944,   944,   945,
     945,   945,   945,   946,   946,   947,   947,   947,   947,   947,
     947,   947,   948,   948,   934,   552,   552,   553,   553,   554,
     554,   555,   555,   556,   556,   557,   557,   558,   558,   559,
     559,   560,   560,   560,   560,   560,   560,   561,   562,   562,
     563,   563,   564,   564,   565,   565,   565,   565,   565,   565,
     565,   565,   565,   565,   565,   565,   565,   565,   565,   565,
     566,   567,   567,   567,   568,   568,   695,   695,   695,   696,
     696,   633,   633,   633,   634,   634,   674,   675,   675,   675,
     675,   675,   676,   676,   677,   677,   677,   678,   678,   678,
     679,   679,   680,   681,   681,   682,   682,   682,   683,   683,
     683,   684,   684,   684,   685,   685,   686,   686,   687,   687,
     688,   688,   689,   689,   690,   690,   691,   691,   692,   692,
     693,   693,   694,   569,   569,   569,   570,   570,   571,   571,
     571,   571,   571,   571,   572,   572,   573,   574,   574,   574,
     574,   574,   575,   575,   575,   575,   576,   576,   576,   576,
     576,   576,   576,   576,   577,   577,   578,   578,   579,   579,
     579,   580,   581,   582,   582,   582,   582,   582,   583,   583,
     583,   583,   584,   585,   585,   586,   586,   587,   587,   587,
     587,   587,   587,   587,   587,   588,   588,   589,   590,   590,
     590,   590,   591,   591,   591,   591,   592,   593,   593,   593,
     594,   595,   595,   595,   595,   595,   595,   596,   596,   597,
     597,   598,   599,   599,   599,   600,   600,   601,   601,   602,
     602,   602,   603,   604,   604,   605,   605,   606,   607,   607,
     607,   607,   608,   608,   609,   609,   610,   610,   610,   611,
     611,   611,   611,   611,   611,   612,   612,   613,   613,   613,
     613,   614,   615,   615,   615,   615,   615,   615,   615,   615,
     616,   616,   638,   638,   638,   638,   701,   701,   701,   701,
     701,   701,   701,   701,   701,   701,   701,   701,   701,   702,
     702,   537,   537,   667,   667,   668,   669,   669,   670,   670,
     671,   671,   672,   672,   673,   673,   654,   654,   654,   654,
     655,   655,   656,   656,   656,   657,   657,   657,   657,   657,
     657,   657,   657,   657,   657,   657,   657,   657,   657,   657,
     657,   657,   657,   657,   657,   657,   657,   657,   657,   657,
     657,   657,   657,   657,   657,   658,   658,   658,   659,   659,
     660,   660,   661,   661,   662,   662,   662,   662,   663,   664,
     664,   650,   650,   650,   651,   651,   652,   652,   653,   653,
     545,   545,   546,   546,   546,   547,   547,   548,   549,   549,
     898,   550,   551,   551,   551,   551,   931,   931,   931,   931,
     931,   931,   932,   932,   932,   698,   699,   699,   700,   700,
     700,   700,   700,   526,   526,   526,   526,   526,   526,   526,
     526,   527,   527,   528,   528,   529,   529,   529,   529,   530,
     530,   531,   531,   531,   531,   531,   531,   531,   531,   531,
     531,   531,   531,   531,   531,   531,   531,   531,   531,   531,
     531,   531,   531,   531,   531,   531,   531,   531,   531,   531,
     532,   532,   533,   533,   533,   533,   534,   534,   535,   536,
     536,   536,   940,   940,   940,   940,   941,   941,   942,   942,
     942,   519,   519,   520,   520,   521,   521,   521,   522,   522,
     522,   522,   523,   523,   523,   523,   523,   523,   523,   523,
     523,   523,   523,   523,   523,   523,   524,   524,   525,   525,
     525,   543,   543,   544,   544,   697,   697,   697,   542,   518,
     518,   518,   518,   518,   518,   538,   539,   539,   540,   540,
     541,   541,   643,   643,   643,   643,   643,   643,   643,   643,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   645,   645,   645,
     645,   645,   645,   646,   646,   647,   647,   647,   648,   648,
     648,   649,   649,   635,   635,   635,   636,   636,   637,   637,
     620,   620,   620,   620,   620,   620,   621,   621,   622,   622,
     954,   954,   954,   954,   954,   955,   955,   955,   955,   665,
     665,   666,   935,   935,   935,   935,   935,   936,   936,   936,
     936,   936,   937,   937,   938,   938,   939,   939,   623,   623,
     623,   624,   624,   625,   625,   625,   625,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   632,   632,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
     632,   632,   632,   632,   632
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     8,     1,     1,     3,     3,     1,     2,
       4,     4,     2,     3,     5,     5,     1,     1,     3,     0,
      11,    11,    10,    12,     1,     2,     5,     4,     4,     4,
       4,     7,     5,     4,     7,     6,     9,     9,     4,     1,
       1,     1,     1,     1,     1,     1,     5,     1,     1,     3,
       1,     2,     2,     2,     3,     1,     3,     7,     1,     2,
       0,     2,     0,     3,     3,     4,     4,     4,     4,     3,
       2,     1,     1,     0,     1,     1,     0,     2,     1,     5,
       1,     0,     2,     2,     0,     1,     0,     3,     5,     1,
       3,     4,     3,     1,     1,     0,     2,     2,     0,     2,
       2,     1,     1,     1,     0,     2,     4,     5,     4,     2,
       3,     2,     2,     2,     2,     1,     2,     3,     0,     1,
       0,     5,     1,     4,     6,     2,     1,     0,     4,     0,
       1,     1,     2,     2,     2,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     1,     3,     3,     0,     1,     3,
       1,     2,     1,     1,     1,     1,     1,     2,     4,     4,
       5,     1,     1,     2,     0,     2,     0,     1,     3,     1,
       0,     1,     2,     3,     2,     4,     2,     3,     2,     0,
       1,     2,     0,     4,     5,     1,     2,     2,     0,     1,
       3,     1,     2,     3,     3,     3,     3,     3,     3,     1,
       4,     9,     9,     3,     0,     2,     2,     0,     5,     3,
       1,     3,     5,     3,     1,     2,     1,     3,     5,     1,
       2,     3,     4,     5,     4,     5,     4,     6,     5,     4,
       5,     5,     5,     2,     4,     1,     1,     0,     1,     4,
       5,     4,     0,     2,     2,     2,     1,     1,     1,     1,
       0,     4,     2,     1,     2,     2,     4,     2,     6,     2,
       1,     3,     4,     0,     2,     0,     2,     0,     1,     3,
       3,     2,     0,     2,     4,     1,     1,     1,     0,     2,
       3,     5,     6,     2,     3,     5,     5,     5,     3,     4,
       0,     1,     1,     1,     1,     1,     2,     4,     1,     1,
       1,     1,     2,     3,     0,     1,     1,     1,     1,     1,
       2,     2,     2,     2,     2,     1,     3,     0,     1,     1,
       1,     1,     5,     2,     1,     1,     1,     1,     4,     1,
       2,     2,     1,     3,     3,     2,     1,     0,     5,     2,
       5,     2,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     3,     3,     3,     3,     3,     0,     1,     3,
       3,     5,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     3,     3,     2,     2,     3,     3,     5,     4,     6,
       3,     5,     4,     6,     4,     6,     5,     7,     3,     2,
       4,     3,     2,     3,     3,     3,     3,     4,     3,     4,
       3,     4,     5,     6,     6,     7,     6,     7,     6,     7,
       3,     4,     4,     6,     1,     4,     3,     5,     1,     3,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     5,
       6,     6,     7,     1,     1,     2,     1,     1,     2,     2,
       3,     1,     2,     4,     1,     1,     2,     2,     4,     1,
       1,     3,     1,     4,     1,     3,     3,     6,     7,     9,
       7,     7,     5,     1,     1,     1,     5,     6,     6,     4,
       4,     4,     4,     6,     5,     5,     5,     4,     6,     4,
       7,     9,     5,     0,     5,     4,     0,     1,     0,     2,
       0,     1,     3,     3,     2,     2,     0,     6,     1,     0,
       3,     0,     3,     3,     3,     0,     1,     4,     2,     2,
       2,     2,     2,     3,     2,     2,     3,     0,     4,     3,
       1,     5,     3,     1,     3,     1,     2,     3,     1,     3,
       1,     2,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     1,     4,     1,     4,     1,
       2,     1,     2,     1,     2,     1,     3,     1,     3,     1,
       2,     1,     3,     1,     2,     1,     0,     1,     3,     1,
       3,     3,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     3,     2,     3,
       0,     3,     3,     2,     2,     1,     0,     2,     2,     3,
       2,     1,     1,     3,     5,     1,     2,     4,     2,     0,
       1,     0,     1,     2,     3,     5,     7,     7,     1,     0,
       0,     2,     0,     2,     3,     3,     3,     5,     7,     7,
       0,     2,     1,     0,     1,     0,     1,     3,     1,     2,
       3,     2,     1,     4,     2,     1,     0,     3,     1,     3,
       1,     2,     4,     2,     0,     1,     3,     1,     3,     1,
       2,     1,     3,     1,     1,     2,     1,     1,     2,     1,
       1,     2,     7,     2,     5,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     3,     3,     0,     1,     1,     1,     7,
       3,     1,     2,     3,     2,     0,     2,     0,     7,    10,
       9,     2,     3,     0,     4,     2,     2,     2,     2,     3,
       4,     3,     1,     1,     1,     1,     0,     1,     3,     1,
       3,     2,     3,     3,     3,     1,     3,     3,     2,     3,
       3,     3,     3,     1,     1,     1,     1,     3,     5,     1,
       1,     1,     1,     3,     2,    11,     9,     1,     1,     3,
       0,     1,     3,     1,     0,     1,     0,     1,     0,     1,
       3,     1,     1,     1,     3,     1,     0,     2,     2,     0,
       2,     0,     1,     0,     1,     1,     1,     3,     3,     1,
       1,     3,     3,     3,     3,     3,     3,     4,     3,     2,
       1,     1,     1,     1,     1,     3,     2,     2,     3,     1,
       1,     5,     8,     7,     1,     0,     9,     1,     4,     4,
       7,     2,     1,     3,     2,     2,     0,     4,     3,     0,
       1,     0,     2,     3,     5,     2,     2,     0,     8,     5,
       0,     5,     5,     7,     2,     0,     1,     1,     1,     3,
       2,     0,     1,     0,     1,     3,     1,     3,     1,     2,
       1,     3,     2,     9,    12,    11,     0,     2,     1,     1,
       1,     1,     1,     1,     3,     0,     1,     2,     1,     1,
       2,     2,     3,     1,     1,     2,     2,     1,     2,     3,
       5,     3,     2,     5,     1,     1,     1,     0,     5,     7,
       5,     2,     3,     1,     1,     2,     2,     0,     3,     4,
       4,     0,     3,     2,     0,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     1,     2,
       2,     2,     2,     2,     2,     0,     3,     3,     3,     0,
       1,     2,     1,     2,     2,     2,     2,     3,     4,     1,
       3,     1,     1,     1,     1,     3,     1,     2,     0,     1,
       2,     0,     1,     3,     0,     2,     0,     3,     3,     1,
       5,     3,     1,     3,     1,     2,     1,     4,     5,     5,
       6,     3,     7,     4,    11,     1,     3,     2,     2,     2,
       0,     3,     1,     1,     2,     2,     2,     2,     1,     0,
       1,     2,     2,     3,     2,     3,     6,     6,     8,     6,
       8,     6,     8,     6,     8,     8,    10,     8,    10,     1,
       0,     2,     4,    13,    16,     1,     2,     0,     1,     0,
       1,     0,     2,     0,     1,     0,     2,     4,     3,     5,
       1,     0,     1,     1,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     3,     9,    12,     1,     3,     1,     3,     3,     0,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       2,     2,     1,     1,     0,     5,     3,     0,     1,     1,
       1,     1,     1,     4,     6,     4,     6,     4,     6,     4,
       6,     1,     2,     3,     2,     1,     3,     2,     3,     1,
       3,     2,     5,     3,     6,     4,     6,     6,     6,     5,
       5,     6,     9,     4,     5,     7,     6,     4,     8,     4,
       2,     4,     3,     6,     4,     2,     2,     2,     2,     1,
       2,     0,     1,     2,     2,     2,     1,     3,     4,     2,
       1,     0,     2,     3,     3,     3,     1,     1,     1,     2,
       3,     4,     6,     1,     2,     1,     1,     0,     1,     2,
       2,     1,     2,     2,     1,     2,     3,     2,     2,     2,
       2,     3,     3,     3,     1,     3,     1,     0,     1,     2,
       2,     3,     2,     1,     0,     2,     4,     5,     2,     6,
       8,     6,     8,     6,     8,     5,     3,     5,     1,     0,
       2,     0,     6,     4,     6,     4,     6,     8,     4,     6,
       1,     1,     1,     1,     2,     1,     2,     1,     2,     1,
       1,     1,     1,     3,     3,     3,     3,     2,     2,     1,
       3,     1,     1,     1,     3,     1,     1,     0,     1,     1,
       1,     1,     3,     6,     8,     5,     1,     0,     1,     3,
       8,    11,    10,     7,    10,     9,     1,     1,     2,     3,
       9,    12,    11,    12,    14,     3,     4,     4,     0,     4,
       6,     3,     4,     6,     5,     4,     6,     1,     1,     1,
       1,     1,     1,     0,     1,     3,     1,     0,     4,     7,
       6,     2,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 493 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 18079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 509 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 18095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 521 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 18106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 42: /* stmt: %empty  */
#line 567 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 18112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 18127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 18133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 18139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 18156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 18168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 18180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 18192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 18204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 18216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 18228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 18248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 18257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 18360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 18368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 18376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 18384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 18392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 18524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* pivot_column_entry: b_expr  */
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 18534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 389 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 18545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* pivot_column_entry: single_pivot_value  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* pivot_column_list_internal: pivot_column_entry  */
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* pivot_column_list: pivot_column_list_internal  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* pivot_column_list: pivot_column_list_internal ','  */
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* with_clause: WITH cte_list  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 18586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* with_clause: WITH_LA cte_list  */
#line 427 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 18597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* with_clause: WITH RECURSIVE cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 18608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* cte_list: common_table_expr  */
#line 443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* cte_list: cte_list ',' common_table_expr  */
#line 444 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 18634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* opt_materialized: MATERIALIZED  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 18640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* opt_materialized: NOT MATERIALIZED  */
#line 461 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 18646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* opt_materialized: %empty  */
#line 462 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 18652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* into_clause: INTO OptTempTableName  */
#line 467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 18666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* into_clause: %empty  */
#line 477 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 18672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 506 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 522 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 18741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* OptTempTableName: TABLE qualified_name  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 18750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* OptTempTableName: qualified_name  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 18759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* opt_table: TABLE  */
#line 538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 18765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* opt_table: %empty  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 18771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* all_or_distinct: ALL  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 18777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* all_or_distinct: DISTINCT  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* all_or_distinct: %empty  */
#line 545 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* by_name: BY NAME_P  */
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 18795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* distinct_clause: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 18801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* opt_all_clause: ALL  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 18813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* opt_all_clause: %empty  */
#line 562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 18825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 567 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 18831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* opt_ignore_nulls: %empty  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* opt_sort_clause: sort_clause  */
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 18843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* opt_sort_clause: %empty  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* sort_clause: ORDER BY sortby_list  */
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 18872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* sortby_list: sortby  */
#line 594 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 18878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* sortby_list: sortby_list ',' sortby  */
#line 595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 18884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 18897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 18910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* opt_asc_desc: ASC_P  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 18916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* opt_asc_desc: DESC_P  */
#line 619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 18922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* opt_asc_desc: %empty  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 18928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 18934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 18940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* opt_nulls_order: %empty  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 18946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* select_limit: limit_clause offset_clause  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 18952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* select_limit: offset_clause limit_clause  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 18958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* select_limit: limit_clause  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 18964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* select_limit: offset_clause  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 18970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* opt_select_limit: select_limit  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_select_limit: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 18982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* limit_clause: LIMIT select_limit_value  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 19001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 19007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 19013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* offset_clause: OFFSET select_offset_value  */
#line 667 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 19025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* sample_count: FCONST '%'  */
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 19033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* sample_count: ICONST '%'  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 19041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* sample_count: FCONST PERCENT  */
#line 686 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 19049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* sample_count: ICONST PERCENT  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 19057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* sample_count: ICONST  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 19065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* sample_count: ICONST ROWS  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 19073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 19081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* sample_clause: %empty  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 19087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_sample_func: ColId  */
#line 716 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_sample_func: %empty  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 19099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 19108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* tablesample_entry: sample_count  */
#line 727 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 19116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 19124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 735 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 19133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 19141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* opt_tablesample_clause: tablesample_clause  */
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* opt_tablesample_clause: %empty  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 19153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 19159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* opt_repeatable_clause: %empty  */
#line 756 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 19165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* select_limit_value: a_expr  */
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* select_limit_value: ALL  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 19180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* select_limit_value: a_expr '%'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 19186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* select_limit_value: FCONST PERCENT  */
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 19192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* select_limit_value: ICONST PERCENT  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 19198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* select_offset_value: a_expr  */
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* select_fetch_first_value: c_expr  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* select_fetch_first_value: '+' I_or_F_const  */
#line 797 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 19216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* select_fetch_first_value: '-' I_or_F_const  */
#line 799 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 19222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* I_or_F_const: Iconst  */
#line 803 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 19228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* I_or_F_const: FCONST  */
#line 804 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 19234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* row_or_rows: ROW  */
#line 808 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 19240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* row_or_rows: ROWS  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 19246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* first_or_next: FIRST_P  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 19252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* first_or_next: NEXT  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 19258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* group_clause: GROUP_P BY ALL  */
#line 840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 19273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* group_clause: %empty  */
#line 844 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* group_by_list: group_by_item  */
#line 848 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* group_by_list: group_by_list ',' group_by_item  */
#line 849 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 19291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* group_by_list_opt_comma: group_by_list  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* group_by_list_opt_comma: group_by_list ','  */
#line 854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* group_by_item: a_expr  */
#line 858 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* group_by_item: empty_grouping_set  */
#line 859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* group_by_item: cube_clause  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* group_by_item: rollup_clause  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* group_by_item: grouping_sets_clause  */
#line 862 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* empty_grouping_set: '(' ')'  */
#line 867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 19341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* grouping_or_grouping_id: GROUPING  */
#line 900 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 19371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* grouping_or_grouping_id: GROUPING_ID  */
#line 901 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 19377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* having_clause: HAVING a_expr  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* having_clause: %empty  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* qualify_clause: QUALIFY a_expr  */
#line 910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* qualify_clause: %empty  */
#line 911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* for_locking_clause: for_locking_items  */
#line 915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* for_locking_clause: FOR READ_P ONLY  */
#line 916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* opt_for_locking_clause: for_locking_clause  */
#line 920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* opt_for_locking_clause: %empty  */
#line 921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 19425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* for_locking_items: for_locking_item  */
#line 925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* for_locking_items: for_locking_items for_locking_item  */
#line 926 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 19449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* for_locking_strength: FOR UPDATE  */
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 19455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 942 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 19461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* for_locking_strength: FOR SHARE  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 19467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* for_locking_strength: FOR KEY SHARE  */
#line 944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 19473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* locked_rels_list: OF qualified_name_list  */
#line 948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* locked_rels_list: %empty  */
#line 949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 19485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* opt_nowait_or_skip: NOWAIT  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 19491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 19497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* opt_nowait_or_skip: %empty  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 19503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 19513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 972 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 19523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* values_clause_opt_comma: values_clause  */
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* values_clause_opt_comma: values_clause ','  */
#line 981 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 19535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* from_clause: FROM from_list_opt_comma  */
#line 994 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* from_clause: %empty  */
#line 995 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* from_list: table_ref  */
#line 999 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* from_list: from_list ',' table_ref  */
#line 1000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 19559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* from_list_opt_comma: from_list  */
#line 1004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* from_list_opt_comma: from_list ','  */
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 19581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1018 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 19593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1026 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 19606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 19618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1043 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 19631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1052 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 19644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* table_ref: joined_table  */
#line 1061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 19652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 19661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 19675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1080 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 19689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1092 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 19695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* opt_pivot_group_by: %empty  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 19701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 19707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1097 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 19713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* opt_include_nulls: %empty  */
#line 1098 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 19719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1102 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 19730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 19741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* pivot_header: d_expr  */
#line 1119 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1120 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 19764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1132 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 19775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* pivot_value_list: pivot_value  */
#line 1141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 19791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* unpivot_header: ColIdOrString  */
#line 1151 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 19803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1157 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 19814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* unpivot_value_list: unpivot_value  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 19830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* joined_table: '(' joined_table ')'  */
#line 1195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 19838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 19855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1212 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 19873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 19892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 19908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 19925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 19943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1280 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 19961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 19978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1307 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 19997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 20017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 20027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* alias_clause: AS ColIdOrString  */
#line 1347 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 20036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 20046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* alias_clause: ColId  */
#line 1358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 20055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* opt_alias_clause: alias_clause  */
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 20061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* opt_alias_clause: %empty  */
#line 1365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 20067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* func_alias_clause: alias_clause  */
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 20075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 20083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 20093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 20103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* func_alias_clause: %empty  */
#line 1394 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 20111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* join_type: FULL join_outer  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 20117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* join_type: LEFT join_outer  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 20123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* join_type: RIGHT join_outer  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 20129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* join_type: SEMI  */
#line 1402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 20135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* join_type: ANTI  */
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 20141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* join_type: INNER_P  */
#line 1404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 20147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* join_outer: OUTER_P  */
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 20153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* join_outer: %empty  */
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 20165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* join_qual: ON a_expr  */
#line 1422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* relation_expr: qualified_name  */
#line 1428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 20182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* relation_expr: qualified_name '*'  */
#line 1435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 20193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* relation_expr: ONLY qualified_name  */
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 20204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 20215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* func_table: func_expr_windowless opt_ordinality  */
#line 1481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 20230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1492 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 20245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1505 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 20251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* rowsfrom_list: rowsfrom_item  */
#line 1509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1510 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 20263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1513 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* opt_col_def_list: %empty  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 20281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* opt_ordinality: %empty  */
#line 1518 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 20287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* where_clause: WHERE a_expr  */
#line 1523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* where_clause: %empty  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* TableFuncElementList: TableFuncElement  */
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1540 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 20337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* opt_collate_clause: COLLATE any_name  */
#line 1561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* opt_collate_clause: %empty  */
#line 1568 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 20355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* colid_type_list: ColId Typename  */
#line 1581 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 20363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1584 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 20371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* opt_Typename: Typename  */
#line 1591 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* opt_Typename: %empty  */
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 20383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* Typename: SimpleTypename opt_array_bounds  */
#line 1595 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 20392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 20402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 20411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 20421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* Typename: SimpleTypename ARRAY  */
#line 1618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 20430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 20440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1628 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 20451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1634 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 20462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1640 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 20473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 20479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1652 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 20485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* opt_array_bounds: %empty  */
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 20491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* SimpleTypename: GenericType  */
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* SimpleTypename: Numeric  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* SimpleTypename: Bit  */
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* SimpleTypename: Character  */
#line 1661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* SimpleTypename: ConstDatetime  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* SimpleTypename: ConstInterval opt_interval  */
#line 1664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 20530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 20540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* ConstTypename: Numeric  */
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* ConstTypename: ConstBit  */
#line 1689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* ConstTypename: ConstCharacter  */
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* ConstTypename: ConstDatetime  */
#line 1691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* GenericType: type_name_token opt_type_modifiers  */
#line 1703 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* opt_type_modifiers: %empty  */
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 20586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* Numeric: INT_P  */
#line 1724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* Numeric: INTEGER  */
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* Numeric: SMALLINT  */
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* Numeric: BIGINT  */
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* Numeric: REAL  */
#line 1744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* Numeric: FLOAT_P opt_float  */
#line 1749 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* Numeric: DOUBLE_P PRECISION  */
#line 1754 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* Numeric: DEC opt_type_modifiers  */
#line 1765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* Numeric: BOOLEAN_P  */
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* opt_float: '(' Iconst ')'  */
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 20713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* opt_float: %empty  */
#line 1805 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 20721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* Bit: BitWithLength  */
#line 1815 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* Bit: BitWithoutLength  */
#line 1819 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* ConstBit: BitWithLength  */
#line 1827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* ConstBit: BitWithoutLength  */
#line 1831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 20754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 20767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* BitWithoutLength: BIT opt_varying  */
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* Character: CharacterWithLength  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* Character: CharacterWithoutLength  */
#line 1876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* ConstCharacter: CharacterWithLength  */
#line 1882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* ConstCharacter: CharacterWithoutLength  */
#line 1886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 20824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 20834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* CharacterWithoutLength: character  */
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* character: CHARACTER opt_varying  */
#line 1917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* character: CHAR_P opt_varying  */
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* character: VARCHAR  */
#line 1921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 20864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* character: NATIONAL CHARACTER opt_varying  */
#line 1923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* character: NATIONAL CHAR_P opt_varying  */
#line 1925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* character: NCHAR opt_varying  */
#line 1927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* opt_varying: VARYING  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 20888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* opt_varying: %empty  */
#line 1932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 20894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 20907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1949 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1957 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 20932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* ConstDatetime: TIME opt_timezone  */
#line 1966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* ConstInterval: INTERVAL  */
#line 1977 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 20959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1985 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 20965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* opt_timezone: %empty  */
#line 1986 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 20971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* opt_interval: year_keyword  */
#line 2015 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 20977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* opt_interval: month_keyword  */
#line 2017 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 20983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* opt_interval: day_keyword  */
#line 2019 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 20989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* opt_interval: hour_keyword  */
#line 2021 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 20995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* opt_interval: minute_keyword  */
#line 2023 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 21001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* opt_interval: second_keyword  */
#line 2025 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 21007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* opt_interval: millisecond_keyword  */
#line 2027 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 21013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* opt_interval: microsecond_keyword  */
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 21019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* opt_interval: year_keyword TO month_keyword  */
#line 2031 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 21028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* opt_interval: day_keyword TO hour_keyword  */
#line 2036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 21037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* opt_interval: day_keyword TO minute_keyword  */
#line 2041 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 21047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* opt_interval: day_keyword TO second_keyword  */
#line 2047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 21058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 21067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* opt_interval: hour_keyword TO second_keyword  */
#line 2059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 21077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* opt_interval: minute_keyword TO second_keyword  */
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 21086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* opt_interval: %empty  */
#line 2070 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 21092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* a_expr: c_expr  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* a_expr: a_expr TYPECAST Typename  */
#line 2104 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 21104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* a_expr: a_expr COLLATE any_name  */
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2114 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 21126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* a_expr: '+' a_expr  */
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 21132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* a_expr: '-' a_expr  */
#line 2131 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 21138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* a_expr: a_expr '+' a_expr  */
#line 2133 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* a_expr: a_expr '-' a_expr  */
#line 2135 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* a_expr: a_expr '*' a_expr  */
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* a_expr: a_expr '/' a_expr  */
#line 2139 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2141 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* a_expr: a_expr '%' a_expr  */
#line 2143 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* a_expr: a_expr '^' a_expr  */
#line 2145 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* a_expr: a_expr POWER_OF a_expr  */
#line 2147 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* a_expr: a_expr '<' a_expr  */
#line 2149 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* a_expr: a_expr '>' a_expr  */
#line 2151 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* a_expr: a_expr '=' a_expr  */
#line 2153 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2155 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2157 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2159 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* a_expr: a_expr qual_Op a_expr  */
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* a_expr: qual_Op a_expr  */
#line 2164 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 21234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* a_expr: a_expr qual_Op  */
#line 2166 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 21240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* a_expr: a_expr AND a_expr  */
#line 2169 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* a_expr: a_expr OR a_expr  */
#line 2171 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* a_expr: NOT a_expr  */
#line 2173 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 21258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* a_expr: NOT_LA a_expr  */
#line 2175 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 21264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* a_expr: a_expr GLOB a_expr  */
#line 2177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* a_expr: a_expr LIKE a_expr  */
#line 2182 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 21293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 21302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 21313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* a_expr: a_expr ILIKE a_expr  */
#line 2206 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 21333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 21342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 21353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 21365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 21377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 21389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 21401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* a_expr: a_expr IS NULL_P  */
#line 2273 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* a_expr: a_expr ISNULL  */
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* a_expr: a_expr IS NOT NULL_P  */
#line 2289 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 21437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* a_expr: a_expr NOT NULL_P  */
#line 2297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* a_expr: a_expr NOTNULL  */
#line 2305 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2313 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 21473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2321 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 21481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* a_expr: row OVERLAPS row  */
#line 2325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 21501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* a_expr: a_expr IS TRUE_P  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* a_expr: a_expr IS FALSE_P  */
#line 2357 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* a_expr: a_expr IS UNKNOWN  */
#line 2373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2381 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2389 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 21581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 21589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 21597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 21605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2405 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 21617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 21629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2421 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 21641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2429 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 21653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* a_expr: a_expr IN_P in_expr  */
#line 2437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 21677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 21703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 21718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2490 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 21729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* a_expr: DEFAULT  */
#line 2497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 21759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2519 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 21771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 21784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* b_expr: c_expr  */
#line 2547 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* b_expr: b_expr TYPECAST Typename  */
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 21796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* b_expr: '+' b_expr  */
#line 2551 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 21802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* b_expr: '-' b_expr  */
#line 2553 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 21808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* b_expr: b_expr '+' b_expr  */
#line 2555 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* b_expr: b_expr '-' b_expr  */
#line 2557 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* b_expr: b_expr '*' b_expr  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* b_expr: b_expr '/' b_expr  */
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2563 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* b_expr: b_expr '%' b_expr  */
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* b_expr: b_expr '^' b_expr  */
#line 2567 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* b_expr: b_expr POWER_OF b_expr  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* b_expr: b_expr '<' b_expr  */
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* b_expr: b_expr '>' b_expr  */
#line 2573 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* b_expr: b_expr '=' b_expr  */
#line 2575 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2581 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* b_expr: b_expr qual_Op b_expr  */
#line 2583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* b_expr: qual_Op b_expr  */
#line 2585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 21904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* b_expr: b_expr qual_Op  */
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 21910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2589 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 21918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2593 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 21926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2597 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 21934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 21942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* c_expr: row  */
#line 2615 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 21951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* c_expr: indirection_expr opt_extended_indirection  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 21967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* d_expr: columnref  */
#line 2633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* d_expr: AexprConst  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* d_expr: '#' ICONST  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* d_expr: '$' ColLabel  */
#line 2643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 21998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* d_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 22007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* d_expr: list_comprehension  */
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 22015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* d_expr: ARRAY select_with_parens  */
#line 2654 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* d_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2664 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 22040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* d_expr: case_expr  */
#line 2670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 22046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* d_expr: select_with_parens  */
#line 2672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* d_expr: select_with_parens indirection  */
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 22089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* d_expr: EXISTS select_with_parens  */
#line 2707 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2718 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 22115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* indirection_expr: '?'  */
#line 2729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 22123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* indirection_expr: PARAM  */
#line 2733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 22134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* indirection_expr: '(' a_expr ')'  */
#line 2740 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 22142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* indirection_expr: struct_expr  */
#line 2744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 22150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2748 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 22171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* indirection_expr: func_expr  */
#line 2765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 22179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 22188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* func_application: func_name '(' ')'  */
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 22196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 22207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2793 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 22219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 22231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2809 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 22246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2820 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 22298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* func_expr: func_expr_common_subexpr  */
#line 2876 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 22304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* func_expr_windowless: func_application  */
#line 2886 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2887 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 22326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2901 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 22332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2903 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 22338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 22398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2945 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 22409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 22417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 22425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2960 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 22441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 22452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 22465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 22484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3008 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* within_group_clause: %empty  */
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 22502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3014 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 22508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* filter_clause: %empty  */
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 22514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* export_clause: EXPORT_STATE  */
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 22520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* export_clause: %empty  */
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 22526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* window_clause: WINDOW window_definition_list  */
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* window_clause: %empty  */
#line 3028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* window_definition_list: window_definition  */
#line 3032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 22544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3034 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 22550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* window_definition: ColId AS window_specification  */
#line 3039 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 22560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* over_clause: OVER window_specification  */
#line 3047 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 22566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* over_clause: OVER ColId  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 22583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* over_clause: %empty  */
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 22589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3067 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 22607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* opt_existing_window_name: ColId  */
#line 3092 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* opt_existing_window_name: %empty  */
#line 3093 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 22619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3096 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* opt_partition_clause: %empty  */
#line 3097 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 22643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3114 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 22655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3122 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 22667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* opt_frame_clause: %empty  */
#line 3130 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* frame_extent: frame_bound  */
#line 3141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 22702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 22744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3214 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* frame_bound: CURRENT_P ROW  */
#line 3223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* frame_bound: a_expr PRECEDING  */
#line 3232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* frame_bound: a_expr FOLLOWING  */
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 22815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 22821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3254 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 22827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3255 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 22833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* opt_window_exclusion_clause: %empty  */
#line 3256 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 22839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* qualified_row: ROW '(' ')'  */
#line 3271 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 22851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* row: qualified_row  */
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 22857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* row: '(' expr_list ',' a_expr ')'  */
#line 3275 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 22863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3279 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 22876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* dict_arguments: dict_arg  */
#line 3289 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* dict_arguments_opt_comma: dict_arguments  */
#line 3294 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3295 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* map_arg: a_expr ':' a_expr  */
#line 3300 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 22908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* map_arguments: map_arg  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* map_arguments: map_arguments ',' map_arg  */
#line 3307 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* map_arguments_opt_comma: map_arguments  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* map_arguments_opt_comma: map_arguments ','  */
#line 3313 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3318 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* opt_map_arguments_opt_comma: %empty  */
#line 3319 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 22944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* sub_type: ANY  */
#line 3322 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 22950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* sub_type: SOME  */
#line 3323 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 22956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* sub_type: ALL  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 22962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* all_Op: Op  */
#line 3327 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* all_Op: MathOp  */
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 22974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* MathOp: '+'  */
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 22980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* MathOp: '-'  */
#line 3332 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 22986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* MathOp: '*'  */
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 22992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* MathOp: '/'  */
#line 3334 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 22998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* MathOp: INTEGER_DIVISION  */
#line 3335 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 23004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* MathOp: '%'  */
#line 3336 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 23010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* MathOp: '^'  */
#line 3337 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 23016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* MathOp: POWER_OF  */
#line 3338 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 23022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* MathOp: '<'  */
#line 3339 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 23028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* MathOp: '>'  */
#line 3340 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 23034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* MathOp: '='  */
#line 3341 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 23040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* MathOp: LESS_EQUALS  */
#line 3342 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 23046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* MathOp: GREATER_EQUALS  */
#line 3343 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 23052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* MathOp: NOT_EQUALS  */
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 23058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* qual_Op: Op  */
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3350 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* qual_all_Op: all_Op  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3357 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* subquery_Op: all_Op  */
#line 3362 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* subquery_Op: LIKE  */
#line 3366 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 23100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* subquery_Op: NOT_LA LIKE  */
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 23106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* subquery_Op: GLOB  */
#line 3370 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 23112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* subquery_Op: NOT_LA GLOB  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 23118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* subquery_Op: ILIKE  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 23124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* subquery_Op: NOT_LA ILIKE  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 23130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* any_operator: all_Op  */
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* any_operator: ColId '.' any_operator  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 23142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* c_expr_list: c_expr  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* c_expr_list_opt_comma: c_expr_list  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 23166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 23174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* expr_list: a_expr  */
#line 3419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* expr_list: expr_list ',' a_expr  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* expr_list_opt_comma: expr_list  */
#line 3430 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 23198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* expr_list_opt_comma: expr_list ','  */
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 23206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 23214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* opt_expr_list_opt_comma: %empty  */
#line 3446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 23222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* func_arg_list: func_arg_expr  */
#line 3455 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* func_arg_expr: a_expr  */
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 23259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 23272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* type_list: Typename  */
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 23278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* type_list: type_list ',' Typename  */
#line 3489 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 23284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* extract_list: extract_arg FROM a_expr  */
#line 3494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 23292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* extract_list: %empty  */
#line 3497 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* extract_arg: IDENT  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* extract_arg: year_keyword  */
#line 3505 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 23310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* extract_arg: month_keyword  */
#line 3506 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 23316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* extract_arg: day_keyword  */
#line 3507 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 23322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* extract_arg: hour_keyword  */
#line 3508 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 23328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* extract_arg: minute_keyword  */
#line 3509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 23334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* extract_arg: second_keyword  */
#line 3510 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 23340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* extract_arg: millisecond_keyword  */
#line 3511 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 23346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* extract_arg: microsecond_keyword  */
#line 3512 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 23352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* extract_arg: Sconst  */
#line 3513 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3524 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 23366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3528 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 23374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* overlay_placing: PLACING a_expr  */
#line 3535 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* position_list: b_expr IN_P b_expr  */
#line 3541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 23386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* position_list: %empty  */
#line 3542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* substr_list: a_expr substr_from substr_for  */
#line 3559 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 23400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* substr_list: a_expr substr_for substr_from  */
#line 3563 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 23409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* substr_list: a_expr substr_from  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 23417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* substr_list: a_expr substr_for  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 23436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* substr_list: expr_list  */
#line 3587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 23444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* substr_list: %empty  */
#line 3591 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 23450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* substr_from: FROM a_expr  */
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* substr_for: FOR a_expr  */
#line 3598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 23468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* trim_list: FROM expr_list_opt_comma  */
#line 3602 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* trim_list: expr_list_opt_comma  */
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* in_expr: select_with_parens  */
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 23491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 23497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 23511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* when_clause_list: when_clause  */
#line 3637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* when_clause_list: when_clause_list when_clause  */
#line 3638 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 23535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* case_default: ELSE a_expr  */
#line 3653 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* case_default: %empty  */
#line 3654 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* case_arg: a_expr  */
#line 3657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* case_arg: %empty  */
#line 3658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* columnref: ColId  */
#line 3662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 23567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* columnref: ColId indirection  */
#line 3666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 23575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* indirection_el: '[' a_expr ']'  */
#line 3673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 23587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3681 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 23599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 23612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3696 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 23624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* opt_slice_bound: a_expr  */
#line 3706 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* opt_slice_bound: %empty  */
#line 3707 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* opt_indirection: %empty  */
#line 3712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* opt_indirection: opt_indirection indirection_el  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* opt_func_arguments: %empty  */
#line 3717 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 23654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* opt_func_arguments: '(' ')'  */
#line 3718 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 23660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3719 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 23679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* extended_indirection_el: '[' a_expr ']'  */
#line 3733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 23691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 23703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3748 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 23716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3757 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 23728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* opt_extended_indirection: %empty  */
#line 3772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 23734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3773 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3789 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* opt_target_list_opt_comma: %empty  */
#line 3790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 23752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* target_list: target_el  */
#line 3794 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 23758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* target_list: target_list ',' target_el  */
#line 3795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 23764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* target_list_opt_comma: target_list  */
#line 3799 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* target_list_opt_comma: target_list ','  */
#line 3800 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* target_el: a_expr AS ColLabelOrString  */
#line 3804 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 23788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* target_el: a_expr IDENT  */
#line 3820 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 23800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* target_el: a_expr  */
#line 3828 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 23812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3837 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* except_list: EXCLUDE ColId  */
#line 3838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* opt_except_list: except_list  */
#line 3841 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* opt_except_list: %empty  */
#line 3842 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 23836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* replace_list_el: a_expr AS ColId  */
#line 3845 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 23842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* replace_list: replace_list_el  */
#line 3849 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* replace_list: replace_list ',' replace_list_el  */
#line 3850 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 23854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* replace_list_opt_comma: replace_list  */
#line 3854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* replace_list_opt_comma: replace_list ','  */
#line 3855 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3858 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* opt_replace_list: REPLACE replace_list_el  */
#line 3859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* opt_replace_list: %empty  */
#line 3860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 23884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* qualified_name_list: qualified_name  */
#line 3870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 23890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3871 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 23896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* name_list: name  */
#line 3876 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* name_list: name_list ',' name  */
#line 3878 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 23908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* name_list_opt_comma: name_list  */
#line 3883 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* name_list_opt_comma: name_list ','  */
#line 3884 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3888 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3889 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* name: ColIdOrString  */
#line 3892 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* func_name: function_name_token  */
#line 3904 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* func_name: ColId indirection  */
#line 3907 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 23953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* AexprConst: Iconst  */
#line 3918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 23961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* AexprConst: FCONST  */
#line 3922 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 23969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* AexprConst: Sconst opt_indirection  */
#line 3926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 23985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* AexprConst: BCONST  */
#line 3938 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 23993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* AexprConst: XCONST  */
#line 3942 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 24006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* AexprConst: func_name Sconst  */
#line 3951 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 24017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3958 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 24059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* AexprConst: ConstTypename Sconst  */
#line 3996 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 24067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4000 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 24075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 24083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4008 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 24091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* AexprConst: TRUE_P  */
#line 4012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 24099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* AexprConst: FALSE_P  */
#line 4016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 24107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* AexprConst: NULL_P  */
#line 4020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 24115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* Iconst: ICONST  */
#line 4025 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 24121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* type_function_name: IDENT  */
#line 4042 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* type_function_name: unreserved_keyword  */
#line 4043 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 24133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* type_function_name: type_func_name_keyword  */
#line 4044 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 24139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* function_name_token: IDENT  */
#line 4047 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* function_name_token: unreserved_keyword  */
#line 4048 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 24151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* function_name_token: func_name_keyword  */
#line 4049 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 24157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* type_name_token: IDENT  */
#line 4052 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* type_name_token: unreserved_keyword  */
#line 4053 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 24169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* type_name_token: type_name_keyword  */
#line 4054 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 24175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* any_name: ColId  */
#line 4057 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* any_name: ColId attrs  */
#line 4058 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 24187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* attrs: '.' attr_name  */
#line 4062 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* attrs: attrs '.' attr_name  */
#line 4064 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 24199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4068 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* opt_name_list: %empty  */
#line 4069 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* ColLabelOrString: ColLabel  */
#line 4076 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* ColLabelOrString: SCONST  */
#line 4077 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 24237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 24251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 24259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 24270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 24281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 24293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 24305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 24322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 24339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 24356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 24362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 24368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 24374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 24388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 24400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 24412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 24423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 24434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 24445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 24456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 24467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 24478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* var_name: ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* var_name: var_name '.' ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 24490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* table_id: ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 24496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* table_id: table_id '.' ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 24502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 24512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 24522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 24532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 24542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 24548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 24559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 24574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 24586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 24598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 24610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 24621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 24632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 24638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 24644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 24652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 24660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 24679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 24690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 24696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 24702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 24708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 24730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 24762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 24785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 24791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 24797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 24805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 24851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 24857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 24863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 24887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 24893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 24899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* copy_generic_opt_arg: struct_expr  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 24905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* copy_generic_opt_arg: %empty  */
#line 107 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 24911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 113 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* opt_oids: WITH OIDS  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 24927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_oids: %empty  */
#line 124 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 24939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* copy_opt_list: %empty  */
#line 130 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 24945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* opt_binary: BINARY  */
#line 136 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 24953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* opt_binary: %empty  */
#line 139 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* copy_opt_item: BINARY  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 24967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* copy_opt_item: OIDS  */
#line 149 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* copy_opt_item: FREEZE  */
#line 153 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 157 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 161 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* copy_opt_item: CSV  */
#line 165 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 25007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* copy_opt_item: HEADER_P  */
#line 169 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 25015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 173 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 25023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 177 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 25031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* copy_opt_item: FORCE QUOTE columnList  */
#line 181 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 25039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* copy_opt_item: FORCE QUOTE '*'  */
#line 185 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 25047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* copy_opt_item: PARTITION BY columnList  */
#line 189 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 25055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* copy_opt_item: PARTITION BY '*'  */
#line 193 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 25063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 197 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 25071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* copy_opt_item: FORCE NULL_P columnList  */
#line 201 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 25079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* copy_opt_item: ENCODING Sconst  */
#line 205 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 25087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 212 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 25093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* copy_file_name: Sconst  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* copy_file_name: STDIN  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 25105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* copy_file_name: STDOUT  */
#line 220 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 25111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 226 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 25119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 230 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 25127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 25138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* LoadStmt: INSTALL file_name  */
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 25149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* LoadStmt: FORCE INSTALL file_name  */
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 25160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* file_name: Sconst  */
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* file_name: ColId  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 25172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 25226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 25240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 25292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 25300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 25309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 25315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 25321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 25327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 25339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 25351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 25359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 25365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 25371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 25383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 25392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 25417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 25425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 25433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 25441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 25454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 25467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 25475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 25532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 25538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 25544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 25550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 25556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 25568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 25580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 25586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 25592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 25604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 25622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 25628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 25640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 25697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 25725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 25731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 25737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 25743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 25749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 25755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 25761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 25773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 25779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 25785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 25791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 25797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 25803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 25809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 25820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 25885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 25899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 25927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 25940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 25965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 25971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 25977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 25983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 25996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 26023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 26037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 26051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 26057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 26063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 26069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 26075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 26081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 26087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 26093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 26099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 26105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 26111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 26117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 26123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 26134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 26146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 26152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 26158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 26164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 26170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 26176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 26182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 26188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 26194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 26200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 26262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 26268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 26274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 26286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 26292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 26298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 26310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 26316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 26322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 26328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 26334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 26340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 26363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 26393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 26399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 26405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 26411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 26437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 26445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 26457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 26469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 26475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 26483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 26495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 26501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 26507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 26513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 26521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 26529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 26538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 26546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 26558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 26586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 26597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 26614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 26631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 26649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 26666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 26684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 26706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 26722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 26730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 26742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 26750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 26758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 26769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 26775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 26781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 26787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 26793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 26804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 26815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 26821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 26827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 26833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 26839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 26849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 26859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 26869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 26879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 27068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 27074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 27088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 27102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 27129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 27156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 27174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 27180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 27186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 27198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 27210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 27216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 27222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 27233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 27247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 27258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 27269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 27275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 27281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 27287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 27293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 27299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 27311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 27317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 27337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 27345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 27351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 27357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 27363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 27369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 27375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 27401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 27412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 27432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 27452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 27473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 27501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 27509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 27539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 27551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 27557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 27587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 27595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 27613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 27619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 27625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 27636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 27646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 27656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 27667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 27678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 27689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 27695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 27701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 27707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 27719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 27731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 27841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 27847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 27859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 27867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 27875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 27890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 27898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 27906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 27914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 27974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 27985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 27996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 28008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 28020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 28032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 28044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 28064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 28076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 28144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 28156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 28167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 28185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 28232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 28242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 28253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 28264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 28275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 28287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 28295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 28304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 28313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 28321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 28333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 28345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 28351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 28357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 28366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 28375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 28384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 28393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 28404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 28414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 28420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 28431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 28442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 28472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 28478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 28484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 28490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 28496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 28502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 28508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 28517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 28523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 28531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 28539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 28547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 28555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 28563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 28571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 28579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 28587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 28595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 28603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 28612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 28620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 28628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 28636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 28642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 28648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 28654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 28660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 28666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 28700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 28723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 28735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 28745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 28835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* DetachStmt: DETACH opt_database IDENT  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* opt_database: DATABASE  */
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 28863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* opt_database: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 28869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* opt_database_alias: AS ColId  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* opt_database_alias: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 28881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 28951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 28965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 28979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 28993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 28999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* drop_type_any_name: SEQUENCE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 29005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* drop_type_any_name: FUNCTION  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 29011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* drop_type_any_name: MACRO  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 29017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* drop_type_any_name: MACRO TABLE  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 29023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* drop_type_any_name: VIEW  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 29029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 29035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* drop_type_any_name: INDEX  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 29041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* drop_type_any_name: FOREIGN TABLE  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 29047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* drop_type_any_name: COLLATION  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 29053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* drop_type_any_name: CONVERSION_P  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 29059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* drop_type_any_name: SCHEMA  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 29065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* drop_type_any_name: STATISTICS  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 29071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 29077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 29083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 29089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 29095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* drop_type_name: ACCESS METHOD  */
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 29101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* drop_type_name: EVENT TRIGGER  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 29107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* drop_type_name: EXTENSION  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 29113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 29119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* drop_type_name: PUBLICATION  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 29125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* drop_type_name: SERVER  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 29131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* any_name_list: any_name  */
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* any_name_list: any_name_list ',' any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* opt_drop_behavior: CASCADE  */
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 29149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* opt_drop_behavior: RESTRICT  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 29155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* opt_drop_behavior: %empty  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 29161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* drop_type_name_on_any_name: POLICY  */
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 29167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* drop_type_name_on_any_name: RULE  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 29173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* drop_type_name_on_any_name: TRIGGER  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 29179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* type_name_list: Typename  */
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 29185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* type_name_list: type_name_list ',' Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 29191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 29204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 29217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 29242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 29248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 29256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 29264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 29279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 29295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 29311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 29326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 29341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 29356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 29364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 29372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 29388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 29404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 29420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 29441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 29462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 29468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 29474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 29480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 29486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 29578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 29604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 29610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 29616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 29622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 29628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 29642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 29660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 29666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 29762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 29768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 29772 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 101 "third_party/libpg_query/grammar/statements/create_schema.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
