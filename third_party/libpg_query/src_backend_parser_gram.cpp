/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 68,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 69,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 70,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 71,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 72,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 73,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 74,                     /* CLASS  */
  YYSYMBOL_CLOSE = 75,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 76,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 77,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 78,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 79,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 80,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 81,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 82,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 83,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 84,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 85,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 86,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 87,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 88,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 89,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 90,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 91,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 92,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 93,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 94,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 95,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 96,                      /* COPY  */
  YYSYMBOL_COST = 97,                      /* COST  */
  YYSYMBOL_CREATE_P = 98,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 99,                     /* CROSS  */
  YYSYMBOL_CSV = 100,                      /* CSV  */
  YYSYMBOL_CUBE = 101,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 102,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 103,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 104,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 105,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 106,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 107,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 108,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 109,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 110,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 111,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 112,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 113,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 114,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 115,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 116,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 117,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 118,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 119,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 120,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 121,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 122,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 123,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 124,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 125,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 126,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 127,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 128,                 /* DISTINCT  */
  YYSYMBOL_DO = 129,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 130,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 131,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 132,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 133,                     /* DROP  */
  YYSYMBOL_EACH = 134,                     /* EACH  */
  YYSYMBOL_ELSE = 135,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 136,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 137,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 138,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 139,                    /* END_P  */
  YYSYMBOL_ENUM_P = 140,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 141,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 142,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 143,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 144,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 145,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 146,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 147,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 148,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 149,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 150,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 151,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 152,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 153,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 154,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 155,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 156,                   /* FAMILY  */
  YYSYMBOL_FETCH = 157,                    /* FETCH  */
  YYSYMBOL_FILTER = 158,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 159,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 160,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 161,                /* FOLLOWING  */
  YYSYMBOL_FOR = 162,                      /* FOR  */
  YYSYMBOL_FORCE = 163,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 164,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 165,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 166,                   /* FREEZE  */
  YYSYMBOL_FROM = 167,                     /* FROM  */
  YYSYMBOL_FULL = 168,                     /* FULL  */
  YYSYMBOL_FUNCTION = 169,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 170,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 171,                /* GENERATED  */
  YYSYMBOL_GLOB = 172,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 173,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 174,                    /* GRANT  */
  YYSYMBOL_GRANTED = 175,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 176,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 177,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 178,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 179,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 180,                  /* HANDLER  */
  YYSYMBOL_HAVING = 181,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 182,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 183,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 184,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 185,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 186,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 187,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 188,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 189,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 190,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 191,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 192,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 193,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 194,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 195,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 196,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 197,                /* INCREMENT  */
  YYSYMBOL_INDEX = 198,                    /* INDEX  */
  YYSYMBOL_INDEXES = 199,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 200,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 201,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 202,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 203,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 204,                  /* INNER_P  */
  YYSYMBOL_INOUT = 205,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 206,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 207,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 208,                   /* INSERT  */
  YYSYMBOL_INSTALL = 209,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 210,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 211,                    /* INT_P  */
  YYSYMBOL_INTEGER = 212,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 213,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 214,                 /* INTERVAL  */
  YYSYMBOL_INTO = 215,                     /* INTO  */
  YYSYMBOL_INVOKER = 216,                  /* INVOKER  */
  YYSYMBOL_IS = 217,                       /* IS  */
  YYSYMBOL_ISNULL = 218,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 219,                /* ISOLATION  */
  YYSYMBOL_JOIN = 220,                     /* JOIN  */
  YYSYMBOL_JSON = 221,                     /* JSON  */
  YYSYMBOL_KEY = 222,                      /* KEY  */
  YYSYMBOL_LABEL = 223,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 224,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 225,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 226,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 227,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 228,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 229,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 230,                     /* LEFT  */
  YYSYMBOL_LEVEL = 231,                    /* LEVEL  */
  YYSYMBOL_LIKE = 232,                     /* LIKE  */
  YYSYMBOL_LIMIT = 233,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 234,                   /* LISTEN  */
  YYSYMBOL_LOAD = 235,                     /* LOAD  */
  YYSYMBOL_LOCAL = 236,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 237,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 238,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 239,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 240,                   /* LOGGED  */
  YYSYMBOL_MACRO = 241,                    /* MACRO  */
  YYSYMBOL_MAP = 242,                      /* MAP  */
  YYSYMBOL_MAPPING = 243,                  /* MAPPING  */
  YYSYMBOL_MATCH = 244,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 245,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 246,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 247,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 248,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 249,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 250,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 251,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 252,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 253,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 254,                 /* MINVALUE  */
  YYSYMBOL_MODE = 255,                     /* MODE  */
  YYSYMBOL_MONTH_P = 256,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 257,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 258,                     /* MOVE  */
  YYSYMBOL_NAME_P = 259,                   /* NAME_P  */
  YYSYMBOL_NAMES = 260,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 261,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 262,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 263,                    /* NCHAR  */
  YYSYMBOL_NEW = 264,                      /* NEW  */
  YYSYMBOL_NEXT = 265,                     /* NEXT  */
  YYSYMBOL_NO = 266,                       /* NO  */
  YYSYMBOL_NONE = 267,                     /* NONE  */
  YYSYMBOL_NOT = 268,                      /* NOT  */
  YYSYMBOL_NOTHING = 269,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 270,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 271,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 272,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 273,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 274,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 275,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 276,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 277,                 /* OBJECT_P  */
  YYSYMBOL_OF = 278,                       /* OF  */
  YYSYMBOL_OFF = 279,                      /* OFF  */
  YYSYMBOL_OFFSET = 280,                   /* OFFSET  */
  YYSYMBOL_OIDS = 281,                     /* OIDS  */
  YYSYMBOL_OLD = 282,                      /* OLD  */
  YYSYMBOL_ON = 283,                       /* ON  */
  YYSYMBOL_ONLY = 284,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 285,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 286,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 287,                  /* OPTIONS  */
  YYSYMBOL_OR = 288,                       /* OR  */
  YYSYMBOL_ORDER = 289,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 290,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 291,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 292,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 293,                  /* OUTER_P  */
  YYSYMBOL_OVER = 294,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 295,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 296,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 297,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 298,                    /* OWNED  */
  YYSYMBOL_OWNER = 299,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 300,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 301,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 302,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 303,                /* PARTITION  */
  YYSYMBOL_PASSING = 304,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 305,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 306,                  /* PERCENT  */
  YYSYMBOL_PIVOT = 307,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 308,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 309,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 310,                  /* PLACING  */
  YYSYMBOL_PLANS = 311,                    /* PLANS  */
  YYSYMBOL_POLICY = 312,                   /* POLICY  */
  YYSYMBOL_POSITION = 313,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 314,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 315,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 316,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 317,                /* PRECISION  */
  YYSYMBOL_PREPARE = 318,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 319,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 320,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 321,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 322,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 323,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 324,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 325,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 326,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 327,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 328,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 329,                    /* QUOTE  */
  YYSYMBOL_RANGE = 330,                    /* RANGE  */
  YYSYMBOL_READ_P = 331,                   /* READ_P  */
  YYSYMBOL_REAL = 332,                     /* REAL  */
  YYSYMBOL_REASSIGN = 333,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 334,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 335,                /* RECURSIVE  */
  YYSYMBOL_REF = 336,                      /* REF  */
  YYSYMBOL_REFERENCES = 337,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 338,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 339,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 340,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 341,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 342,                  /* RELEASE  */
  YYSYMBOL_RENAME = 343,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 344,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 345,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 346,                  /* REPLICA  */
  YYSYMBOL_RESET = 347,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 348,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 349,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 350,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 351,                /* RETURNING  */
  YYSYMBOL_RETURNS = 352,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 353,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 354,                    /* RIGHT  */
  YYSYMBOL_ROLE = 355,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 356,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 357,                   /* ROLLUP  */
  YYSYMBOL_ROW = 358,                      /* ROW  */
  YYSYMBOL_ROWS = 359,                     /* ROWS  */
  YYSYMBOL_RULE = 360,                     /* RULE  */
  YYSYMBOL_SAMPLE = 361,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 362,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 363,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 364,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 365,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 366,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 367,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 368,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 369,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 370,                   /* SECRET  */
  YYSYMBOL_SECURITY = 371,                 /* SECURITY  */
  YYSYMBOL_SELECT = 372,                   /* SELECT  */
  YYSYMBOL_SEMI = 373,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 374,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 375,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 376,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 377,                   /* SERVER  */
  YYSYMBOL_SESSION = 378,                  /* SESSION  */
  YYSYMBOL_SET = 379,                      /* SET  */
  YYSYMBOL_SETOF = 380,                    /* SETOF  */
  YYSYMBOL_SETS = 381,                     /* SETS  */
  YYSYMBOL_SHARE = 382,                    /* SHARE  */
  YYSYMBOL_SHOW = 383,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 384,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 385,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 386,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 387,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 388,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 389,                     /* SOME  */
  YYSYMBOL_SQL_P = 390,                    /* SQL_P  */
  YYSYMBOL_STABLE = 391,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 392,             /* STANDALONE_P  */
  YYSYMBOL_START = 393,                    /* START  */
  YYSYMBOL_STATEMENT = 394,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 395,               /* STATISTICS  */
  YYSYMBOL_STDIN = 396,                    /* STDIN  */
  YYSYMBOL_STDOUT = 397,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 398,                  /* STORAGE  */
  YYSYMBOL_STORED = 399,                   /* STORED  */
  YYSYMBOL_STRICT_P = 400,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 401,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 402,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 403,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 404,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 405,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 406,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 407,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 408,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 409,                    /* TABLE  */
  YYSYMBOL_TABLES = 410,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 411,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 412,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 413,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 414,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 415,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 416,                   /* TEXT_P  */
  YYSYMBOL_THEN = 417,                     /* THEN  */
  YYSYMBOL_TIES = 418,                     /* TIES  */
  YYSYMBOL_TIME = 419,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 420,                /* TIMESTAMP  */
  YYSYMBOL_TO = 421,                       /* TO  */
  YYSYMBOL_TRAILING = 422,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 423,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 424,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 425,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 426,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 427,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 428,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 429,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 430,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 431,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 432,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 433,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 434,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 435,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 436,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 437,                    /* UNION  */
  YYSYMBOL_UNIQUE = 438,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 439,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 440,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 441,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 442,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 443,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 444,                   /* UPDATE  */
  YYSYMBOL_USE_P = 445,                    /* USE_P  */
  YYSYMBOL_USER = 446,                     /* USER  */
  YYSYMBOL_USING = 447,                    /* USING  */
  YYSYMBOL_VACUUM = 448,                   /* VACUUM  */
  YYSYMBOL_VALID = 449,                    /* VALID  */
  YYSYMBOL_VALIDATE = 450,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 451,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 452,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 453,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 454,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 455,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 456,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 457,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 458,                /* VERSION_P  */
  YYSYMBOL_VIEW = 459,                     /* VIEW  */
  YYSYMBOL_VIEWS = 460,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 461,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 462,                 /* VOLATILE  */
  YYSYMBOL_WHEN = 463,                     /* WHEN  */
  YYSYMBOL_WHERE = 464,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 465,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 466,                   /* WINDOW  */
  YYSYMBOL_WITH = 467,                     /* WITH  */
  YYSYMBOL_WITHIN = 468,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 469,                  /* WITHOUT  */
  YYSYMBOL_WORK = 470,                     /* WORK  */
  YYSYMBOL_WRAPPER = 471,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 472,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 473,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 474,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 475,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 476,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 477,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 478,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 479,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 480,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 481,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 482,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 483,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 484,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 485,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 486,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 487,                    /* YES_P  */
  YYSYMBOL_ZONE = 488,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 489,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 490,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 491,                  /* WITH_LA  */
  YYSYMBOL_492_ = 492,                     /* '<'  */
  YYSYMBOL_493_ = 493,                     /* '>'  */
  YYSYMBOL_494_ = 494,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 495,                /* POSTFIXOP  */
  YYSYMBOL_496_ = 496,                     /* '+'  */
  YYSYMBOL_497_ = 497,                     /* '-'  */
  YYSYMBOL_498_ = 498,                     /* '*'  */
  YYSYMBOL_499_ = 499,                     /* '/'  */
  YYSYMBOL_500_ = 500,                     /* '%'  */
  YYSYMBOL_501_ = 501,                     /* '^'  */
  YYSYMBOL_UMINUS = 502,                   /* UMINUS  */
  YYSYMBOL_503_ = 503,                     /* '['  */
  YYSYMBOL_504_ = 504,                     /* ']'  */
  YYSYMBOL_505_ = 505,                     /* '('  */
  YYSYMBOL_506_ = 506,                     /* ')'  */
  YYSYMBOL_507_ = 507,                     /* '.'  */
  YYSYMBOL_508_ = 508,                     /* ';'  */
  YYSYMBOL_509_ = 509,                     /* ','  */
  YYSYMBOL_510_ = 510,                     /* '#'  */
  YYSYMBOL_511_ = 511,                     /* '$'  */
  YYSYMBOL_512_ = 512,                     /* '?'  */
  YYSYMBOL_513_ = 513,                     /* '{'  */
  YYSYMBOL_514_ = 514,                     /* '}'  */
  YYSYMBOL_515_ = 515,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 516,                 /* $accept  */
  YYSYMBOL_stmtblock = 517,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 518,                /* stmtmulti  */
  YYSYMBOL_stmt = 519,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 520,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 521,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 522,               /* SeqOptList  */
  YYSYMBOL_opt_with = 523,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 524,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 525,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 526,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 527,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 528,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 529, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 530,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 531, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 532, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 533,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 534,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 535, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 536,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 537,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 538,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 539,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 540,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 541,               /* DetachStmt  */
  YYSYMBOL_opt_database = 542,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 543,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 544,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 545,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 546,               /* opt_col_id  */
  YYSYMBOL_qualified_name = 547,           /* qualified_name  */
  YYSYMBOL_ColId = 548,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 549,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 550,                   /* Sconst  */
  YYSYMBOL_indirection = 551,              /* indirection  */
  YYSYMBOL_indirection_el = 552,           /* indirection_el  */
  YYSYMBOL_attr_name = 553,                /* attr_name  */
  YYSYMBOL_ColLabel = 554,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 555,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 556,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 557,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 558, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 559,                /* opt_using  */
  YYSYMBOL_opt_as = 560,                   /* opt_as  */
  YYSYMBOL_opt_program = 561,              /* opt_program  */
  YYSYMBOL_copy_options = 562,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 563,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 564,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 565,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 566,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 567,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 568,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 569, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 570,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 571,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 572,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 573,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 574,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 575, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 576,       /* generic_option_arg  */
  YYSYMBOL_key_action = 577,               /* key_action  */
  YYSYMBOL_ColConstraint = 578,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 579,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 580,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 581,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 582,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 583,      /* generic_option_elem  */
  YYSYMBOL_key_update = 584,               /* key_update  */
  YYSYMBOL_key_actions = 585,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 586,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 587,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 588,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 589,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 590,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 591,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 592,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 593,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 594,                  /* OptWith  */
  YYSYMBOL_definition = 595,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 596,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 597,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 598,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 599,                /* columnDef  */
  YYSYMBOL_def_list = 600,                 /* def_list  */
  YYSYMBOL_index_name = 601,               /* index_name  */
  YYSYMBOL_TableElement = 602,             /* TableElement  */
  YYSYMBOL_def_elem = 603,                 /* def_elem  */
  YYSYMBOL_opt_definition = 604,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 605,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 606,               /* columnElem  */
  YYSYMBOL_opt_column_list = 607,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 608,              /* ColQualList  */
  YYSYMBOL_key_delete = 609,               /* key_delete  */
  YYSYMBOL_reloption_elem = 610,           /* reloption_elem  */
  YYSYMBOL_columnList = 611,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 612,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 613,                /* func_type  */
  YYSYMBOL_ConstraintElem = 614,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 615,         /* TableElementList  */
  YYSYMBOL_key_match = 616,                /* key_match  */
  YYSYMBOL_TableLikeClause = 617,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 618,                  /* OptTemp  */
  YYSYMBOL_generated_when = 619,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 620,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 621,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 622,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 623,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 624,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 625,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 626,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 627,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 628,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 629,         /* reserved_keyword  */
  YYSYMBOL_CreateFunctionStmt = 630,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 631,              /* macro_alias  */
  YYSYMBOL_param_list = 632,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 633,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 634,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 635,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 636,         /* CreateSecretStmt  */
  YYSYMBOL_secret_key = 637,               /* secret_key  */
  YYSYMBOL_secret_key_val = 638,           /* secret_key_val  */
  YYSYMBOL_opt_secret_key_val = 639,       /* opt_secret_key_val  */
  YYSYMBOL_opt_secret_list = 640,          /* opt_secret_list  */
  YYSYMBOL_provider_val = 641,             /* provider_val  */
  YYSYMBOL_opt_provider_val = 642,         /* opt_provider_val  */
  YYSYMBOL_scope_list_val_item = 643,      /* scope_list_val_item  */
  YYSYMBOL_scope_list_val = 644,           /* scope_list_val  */
  YYSYMBOL_opt_scope_val = 645,            /* opt_scope_val  */
  YYSYMBOL_CreateSeqStmt = 646,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 647,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 648,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 649,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 650,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 651,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 652,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 653,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 654,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 655,             /* using_clause  */
  YYSYMBOL_DropStmt = 656,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 657,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 658,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 659,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 660,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 661, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 662,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 663,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 664,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 665,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 666,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 667,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 668,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 669,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 670,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 671,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 672, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 673,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 674,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 675,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 676,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 677,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 678,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 679,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 680,                /* IndexStmt  */
  YYSYMBOL_access_method = 681,            /* access_method  */
  YYSYMBOL_access_method_clause = 682,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 683,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 684,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 685,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 686,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 687,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 688,              /* insert_rest  */
  YYSYMBOL_insert_target = 689,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 690,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 691,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 692,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 693,       /* insert_column_item  */
  YYSYMBOL_set_clause = 694,               /* set_clause  */
  YYSYMBOL_opt_or_action = 695,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 696,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 697,               /* index_elem  */
  YYSYMBOL_returning_clause = 698,         /* returning_clause  */
  YYSYMBOL_override_kind = 699,            /* override_kind  */
  YYSYMBOL_set_target_list = 700,          /* set_target_list  */
  YYSYMBOL_opt_collate = 701,              /* opt_collate  */
  YYSYMBOL_opt_class = 702,                /* opt_class  */
  YYSYMBOL_insert_column_list = 703,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 704,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 705, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 706,             /* index_params  */
  YYSYMBOL_set_target = 707,               /* set_target  */
  YYSYMBOL_LoadStmt = 708,                 /* LoadStmt  */
  YYSYMBOL_file_name = 709,                /* file_name  */
  YYSYMBOL_repo_path = 710,                /* repo_path  */
  YYSYMBOL_PragmaStmt = 711,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 712,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 713,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 714,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 715,               /* RenameStmt  */
  YYSYMBOL_opt_column = 716,               /* opt_column  */
  YYSYMBOL_SelectStmt = 717,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 718,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 719,         /* select_no_parens  */
  YYSYMBOL_select_clause = 720,            /* select_clause  */
  YYSYMBOL_opt_select = 721,               /* opt_select  */
  YYSYMBOL_simple_select = 722,            /* simple_select  */
  YYSYMBOL_value_or_values = 723,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 724,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 725,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 726,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 727, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 728,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 729,              /* with_clause  */
  YYSYMBOL_cte_list = 730,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 731,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 732,         /* opt_materialized  */
  YYSYMBOL_into_clause = 733,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 734,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 735,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 736,          /* all_or_distinct  */
  YYSYMBOL_by_name = 737,                  /* by_name  */
  YYSYMBOL_distinct_clause = 738,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 739,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 740,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 741,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 742,              /* sort_clause  */
  YYSYMBOL_sortby_list = 743,              /* sortby_list  */
  YYSYMBOL_sortby = 744,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 745,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 746,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 747,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 748,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 749,             /* limit_clause  */
  YYSYMBOL_offset_clause = 750,            /* offset_clause  */
  YYSYMBOL_sample_count = 751,             /* sample_count  */
  YYSYMBOL_sample_clause = 752,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 753,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 754,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 755,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 756,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 757,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 758,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 759,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 760, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 761,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 762,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 763,            /* first_or_next  */
  YYSYMBOL_group_clause = 764,             /* group_clause  */
  YYSYMBOL_group_by_list = 765,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 766,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 767,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 768,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 769,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 770,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 771,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 772,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 773,            /* having_clause  */
  YYSYMBOL_qualify_clause = 774,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 775,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 776,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 777,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 778,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 779,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 780,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 781,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 782,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 783,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 784,              /* from_clause  */
  YYSYMBOL_from_list = 785,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 786,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 787,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 788,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 789,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 790,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 791,             /* pivot_header  */
  YYSYMBOL_pivot_value = 792,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 793,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 794,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 795,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 796,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 797,             /* joined_table  */
  YYSYMBOL_alias_clause = 798,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 799,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 800,        /* func_alias_clause  */
  YYSYMBOL_join_type = 801,                /* join_type  */
  YYSYMBOL_join_outer = 802,               /* join_outer  */
  YYSYMBOL_join_qual = 803,                /* join_qual  */
  YYSYMBOL_relation_expr = 804,            /* relation_expr  */
  YYSYMBOL_func_table = 805,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 806,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 807,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 808,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 809,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 810,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 811,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 812,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 813,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 814,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 815,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 816,             /* opt_Typename  */
  YYSYMBOL_Typename = 817,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 818,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 819,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 820,            /* ConstTypename  */
  YYSYMBOL_GenericType = 821,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 822,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 823,                  /* Numeric  */
  YYSYMBOL_opt_float = 824,                /* opt_float  */
  YYSYMBOL_Bit = 825,                      /* Bit  */
  YYSYMBOL_ConstBit = 826,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 827,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 828,         /* BitWithoutLength  */
  YYSYMBOL_Character = 829,                /* Character  */
  YYSYMBOL_ConstCharacter = 830,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 831,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 832,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 833,                /* character  */
  YYSYMBOL_opt_varying = 834,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 835,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 836,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 837,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 838,             /* year_keyword  */
  YYSYMBOL_month_keyword = 839,            /* month_keyword  */
  YYSYMBOL_day_keyword = 840,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 841,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 842,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 843,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 844,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 845,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 846,             /* opt_interval  */
  YYSYMBOL_a_expr = 847,                   /* a_expr  */
  YYSYMBOL_b_expr = 848,                   /* b_expr  */
  YYSYMBOL_c_expr = 849,                   /* c_expr  */
  YYSYMBOL_d_expr = 850,                   /* d_expr  */
  YYSYMBOL_indirection_expr = 851,         /* indirection_expr  */
  YYSYMBOL_struct_expr = 852,              /* struct_expr  */
  YYSYMBOL_func_application = 853,         /* func_application  */
  YYSYMBOL_func_expr = 854,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 855,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 856, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 857,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 858,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 859,            /* filter_clause  */
  YYSYMBOL_export_clause = 860,            /* export_clause  */
  YYSYMBOL_window_clause = 861,            /* window_clause  */
  YYSYMBOL_window_definition_list = 862,   /* window_definition_list  */
  YYSYMBOL_window_definition = 863,        /* window_definition  */
  YYSYMBOL_over_clause = 864,              /* over_clause  */
  YYSYMBOL_window_specification = 865,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 866, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 867,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 868,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 869,             /* frame_extent  */
  YYSYMBOL_frame_bound = 870,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 871, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 872,            /* qualified_row  */
  YYSYMBOL_row = 873,                      /* row  */
  YYSYMBOL_dict_arg = 874,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 875,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 876, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 877,                  /* map_arg  */
  YYSYMBOL_map_arguments = 878,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 879,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 880, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 881,                 /* sub_type  */
  YYSYMBOL_all_Op = 882,                   /* all_Op  */
  YYSYMBOL_MathOp = 883,                   /* MathOp  */
  YYSYMBOL_qual_Op = 884,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 885,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 886,              /* subquery_Op  */
  YYSYMBOL_any_operator = 887,             /* any_operator  */
  YYSYMBOL_c_expr_list = 888,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 889,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 890,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 891,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 892,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 893,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 894,            /* func_arg_expr  */
  YYSYMBOL_type_list = 895,                /* type_list  */
  YYSYMBOL_extract_list = 896,             /* extract_list  */
  YYSYMBOL_extract_arg = 897,              /* extract_arg  */
  YYSYMBOL_overlay_list = 898,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 899,          /* overlay_placing  */
  YYSYMBOL_position_list = 900,            /* position_list  */
  YYSYMBOL_substr_list = 901,              /* substr_list  */
  YYSYMBOL_substr_from = 902,              /* substr_from  */
  YYSYMBOL_substr_for = 903,               /* substr_for  */
  YYSYMBOL_trim_list = 904,                /* trim_list  */
  YYSYMBOL_in_expr = 905,                  /* in_expr  */
  YYSYMBOL_case_expr = 906,                /* case_expr  */
  YYSYMBOL_when_clause_list = 907,         /* when_clause_list  */
  YYSYMBOL_when_clause = 908,              /* when_clause  */
  YYSYMBOL_case_default = 909,             /* case_default  */
  YYSYMBOL_case_arg = 910,                 /* case_arg  */
  YYSYMBOL_columnref = 911,                /* columnref  */
  YYSYMBOL_opt_slice_bound = 912,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 913,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 914,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 915,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 916, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 917,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 918, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 919,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 920,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 921,                /* target_el  */
  YYSYMBOL_except_list = 922,              /* except_list  */
  YYSYMBOL_opt_except_list = 923,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 924,          /* replace_list_el  */
  YYSYMBOL_replace_list = 925,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 926,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 927,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 928,      /* qualified_name_list  */
  YYSYMBOL_name_list = 929,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 930,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 931, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 932,                     /* name  */
  YYSYMBOL_func_name = 933,                /* func_name  */
  YYSYMBOL_AexprConst = 934,               /* AexprConst  */
  YYSYMBOL_Iconst = 935,                   /* Iconst  */
  YYSYMBOL_type_function_name = 936,       /* type_function_name  */
  YYSYMBOL_function_name_token = 937,      /* function_name_token  */
  YYSYMBOL_type_name_token = 938,          /* type_name_token  */
  YYSYMBOL_any_name = 939,                 /* any_name  */
  YYSYMBOL_attrs = 940,                    /* attrs  */
  YYSYMBOL_opt_name_list = 941,            /* opt_name_list  */
  YYSYMBOL_param_name = 942,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 943,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 944,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 945,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 946,               /* UpdateStmt  */
  YYSYMBOL_UseStmt = 947,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 948,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 949,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 950,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 951,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 952,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 953,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 954,            /* generic_reset  */
  YYSYMBOL_reset_rest = 955,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 956,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 957,                 /* set_rest  */
  YYSYMBOL_generic_set = 958,              /* generic_set  */
  YYSYMBOL_var_value = 959,                /* var_value  */
  YYSYMBOL_zone_value = 960,               /* zone_value  */
  YYSYMBOL_var_list = 961,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 962,         /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 963,         /* show_or_describe  */
  YYSYMBOL_opt_tables = 964,               /* opt_tables  */
  YYSYMBOL_var_name = 965,                 /* var_name  */
  YYSYMBOL_table_id = 966,                 /* table_id  */
  YYSYMBOL_ViewStmt = 967,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 968          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  688
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   70099

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  516
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  453
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2070
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3459

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   748


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   510,   511,   500,     2,     2,
     505,   506,   498,   496,   509,   497,   507,   499,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   515,   508,
     492,   494,   493,   512,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   503,     2,   504,   501,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   513,     2,   514,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   495,   502
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   496,   496,   512,   524,   533,   534,   535,   536,   537,
     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
     568,   569,   570,   572,     9,    18,    27,    36,    45,    54,
      63,    72,    85,    87,    93,    94,    99,   103,   107,   118,
     126,   130,   139,   148,   157,   166,   175,   184,   192,   200,
     209,   218,   227,   236,   253,   262,   271,   280,   290,   303,
     318,   327,   335,   350,   358,   368,   378,   385,   392,   400,
     407,   418,   419,   424,   428,   433,   438,   446,   447,   452,
     456,   457,   458,     7,    13,    19,    25,     9,    13,    44,
      45,    46,    50,    51,    55,    59,    60,    64,    70,    75,
      76,    77,    78,     6,    15,    25,    35,    45,    55,    65,
      75,    85,    95,   106,   117,   127,   140,   141,     9,    23,
      29,    36,    42,    49,    59,    63,    71,    72,    73,    77,
      86,    95,   102,   103,   108,   120,   125,   150,   155,   160,
     166,   176,   186,   192,   203,   214,   229,   230,   236,   237,
     242,   243,   249,   250,   254,   255,   260,   262,   268,   269,
     273,   274,   277,   278,   283,     7,    16,    25,    46,    47,
      50,    54,     7,    14,    22,     9,    19,    29,    42,    43,
       7,    18,    29,    44,    48,    49,    53,    54,    58,    59,
      64,    68,    69,    74,    78,    79,    83,    84,    85,     7,
      14,    31,    51,    55,    65,    69,    75,    76,     9,    17,
      29,    30,    34,    35,    36,    41,    42,    43,    48,    52,
      56,    60,    64,    68,    72,    76,    80,    84,    88,    92,
      97,   101,   105,   112,   113,   117,   118,   119,     2,     9,
      15,    21,    28,    35,    45,    46,    47,     2,     7,    21,
      36,    56,    57,    84,    85,    86,    87,    88,    89,    93,
      94,    99,   104,   105,   106,   107,   108,   113,   120,   121,
     122,   139,   146,   153,   163,   173,   185,   193,   202,   220,
     221,   225,   226,   230,   239,   262,   276,   283,   288,   290,
     292,   294,   297,   300,   301,   302,   303,   308,   312,   313,
     318,   325,   330,   331,   332,   333,   334,   335,   336,   337,
     343,   344,   348,   353,   360,   367,   374,   386,   387,   388,
     389,   393,   398,   399,   400,   405,   410,   411,   412,   413,
     414,   415,   420,   440,   469,   470,   474,   478,   479,   480,
     484,   488,   496,   497,   502,   503,   504,   508,   516,   517,
     522,   523,   527,   532,   536,   540,   545,   553,   554,   558,
     559,   563,   564,   570,   581,   594,   608,   622,   636,   650,
     673,   677,   684,   688,   696,   701,   708,   718,   719,   720,
     721,   722,   729,   736,   737,   742,   743,     9,    19,    29,
      39,    49,    59,    69,    79,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   114,   115,   116,   117,   118,   119,   124,   125,
     130,   131,   132,   137,   138,   139,   142,   143,     8,    20,
      33,    46,    58,    70,    86,    87,    91,    95,     7,     1,
      30,    53,    54,    59,    63,    68,    72,    80,    81,    85,
      86,    91,    92,    96,    97,   102,   103,   104,   105,   106,
     107,   112,   120,   124,   129,   130,   135,   139,   144,   148,
     152,   156,   160,   164,   168,   172,   176,   180,   184,   188,
     192,   196,   200,   204,   212,   218,   219,   220,   225,   229,
      47,    48,    52,    53,    68,    69,    76,    84,    92,   100,
     108,   116,   127,   128,   155,   160,   168,   184,   201,   218,
     235,   236,   255,   259,   263,   267,   271,   280,   290,   299,
     308,   318,   328,   339,   353,   370,   370,   374,   374,   378,
     378,   382,   388,   395,   399,   400,   404,   405,   419,   426,
     433,   443,   444,   447,   460,   461,   462,   466,   477,   485,
     490,   495,   500,   505,   513,   521,   526,   531,   538,   539,
     543,   544,   545,   549,   556,   557,   561,   562,   566,   567,
     568,   572,   573,   577,   578,   594,   595,   598,   607,   618,
     619,   620,   623,   624,   625,   629,   630,   631,   632,   636,
     637,   641,   643,   659,   661,   666,   669,   677,   681,   685,
     689,   693,   697,   704,   709,   716,   717,   721,   726,   730,
     734,   742,   749,   750,   755,   756,   760,   761,   766,   768,
     770,   775,   795,   796,   798,   803,   804,   808,   809,   812,
     813,   838,   839,   844,   848,   849,   853,   854,   858,   859,
     860,   861,   862,   866,   879,   886,   893,   900,   901,   905,
     906,   910,   911,   915,   916,   920,   921,   925,   926,   930,
     941,   942,   943,   944,   948,   949,   954,   955,   956,   965,
     971,   980,   981,   994,   995,   999,  1000,  1004,  1005,  1011,
    1017,  1025,  1034,  1042,  1051,  1060,  1064,  1069,  1079,  1092,
    1093,  1096,  1097,  1098,  1101,  1109,  1119,  1120,  1123,  1131,
    1140,  1144,  1151,  1152,  1156,  1165,  1169,  1194,  1198,  1211,
    1225,  1240,  1252,  1265,  1279,  1293,  1306,  1321,  1340,  1346,
    1351,  1357,  1364,  1365,  1373,  1377,  1381,  1387,  1394,  1399,
    1400,  1401,  1402,  1403,  1404,  1408,  1409,  1421,  1422,  1427,
    1434,  1441,  1448,  1480,  1491,  1504,  1509,  1510,  1513,  1514,
    1517,  1518,  1523,  1524,  1529,  1533,  1539,  1560,  1568,  1581,
    1584,  1588,  1588,  1591,  1592,  1594,  1599,  1606,  1611,  1617,
    1622,  1628,  1634,  1640,  1649,  1651,  1654,  1658,  1659,  1660,
    1661,  1662,  1663,  1668,  1688,  1689,  1690,  1691,  1702,  1716,
    1717,  1723,  1728,  1733,  1738,  1743,  1748,  1753,  1758,  1764,
    1770,  1776,  1783,  1805,  1814,  1818,  1826,  1830,  1838,  1850,
    1871,  1875,  1881,  1885,  1898,  1906,  1916,  1918,  1920,  1922,
    1924,  1926,  1931,  1932,  1939,  1948,  1956,  1965,  1976,  1984,
    1985,  1986,  1990,  1990,  1993,  1993,  1996,  1996,  1999,  1999,
    2002,  2002,  2005,  2005,  2008,  2008,  2011,  2011,  2014,  2016,
    2018,  2020,  2022,  2024,  2026,  2028,  2030,  2035,  2040,  2046,
    2053,  2058,  2064,  2070,  2101,  2103,  2105,  2113,  2128,  2130,
    2132,  2134,  2136,  2138,  2140,  2142,  2144,  2146,  2148,  2150,
    2152,  2154,  2156,  2158,  2161,  2163,  2165,  2168,  2170,  2172,
    2174,  2176,  2181,  2186,  2193,  2198,  2205,  2210,  2217,  2222,
    2230,  2238,  2246,  2254,  2272,  2280,  2288,  2296,  2304,  2312,
    2320,  2324,  2340,  2348,  2356,  2364,  2372,  2380,  2388,  2392,
    2396,  2400,  2404,  2412,  2420,  2428,  2436,  2456,  2478,  2489,
    2496,  2510,  2518,  2526,  2546,  2548,  2550,  2552,  2554,  2556,
    2558,  2560,  2562,  2564,  2566,  2568,  2570,  2572,  2574,  2576,
    2578,  2580,  2582,  2584,  2586,  2588,  2592,  2596,  2600,  2614,
    2615,  2619,  2633,  2634,  2635,  2642,  2646,  2650,  2653,  2664,
    2669,  2671,  2682,  2706,  2717,  2728,  2732,  2739,  2743,  2747,
    2764,  2772,  2781,  2785,  2792,  2800,  2808,  2819,  2839,  2875,
    2886,  2887,  2894,  2900,  2902,  2904,  2908,  2917,  2922,  2929,
    2944,  2951,  2955,  2959,  2963,  2967,  2977,  2986,  3008,  3009,
    3013,  3014,  3015,  3019,  3020,  3027,  3028,  3032,  3033,  3038,
    3046,  3048,  3062,  3065,  3092,  3093,  3096,  3097,  3105,  3113,
    3121,  3130,  3140,  3158,  3204,  3213,  3222,  3231,  3240,  3252,
    3253,  3254,  3255,  3256,  3270,  3271,  3274,  3275,  3279,  3289,
    3290,  3294,  3295,  3299,  3306,  3307,  3312,  3313,  3318,  3319,
    3322,  3323,  3324,  3327,  3328,  3331,  3332,  3333,  3334,  3335,
    3336,  3337,  3338,  3339,  3340,  3341,  3342,  3343,  3344,  3347,
    3349,  3354,  3356,  3361,  3363,  3365,  3367,  3369,  3371,  3373,
    3375,  3389,  3391,  3396,  3400,  3407,  3412,  3418,  3422,  3429,
    3434,  3441,  3446,  3454,  3458,  3464,  3468,  3477,  3488,  3489,
    3493,  3497,  3504,  3505,  3506,  3507,  3508,  3509,  3510,  3511,
    3512,  3513,  3523,  3527,  3534,  3541,  3542,  3558,  3562,  3567,
    3571,  3586,  3591,  3595,  3598,  3601,  3602,  3603,  3606,  3613,
    3623,  3637,  3638,  3642,  3653,  3654,  3657,  3658,  3661,  3665,
    3672,  3680,  3688,  3696,  3706,  3707,  3712,  3713,  3717,  3718,
    3719,  3723,  3732,  3740,  3748,  3757,  3772,  3773,  3778,  3779,
    3789,  3790,  3794,  3795,  3799,  3800,  3803,  3819,  3827,  3837,
    3838,  3841,  3842,  3845,  3849,  3850,  3854,  3855,  3858,  3859,
    3860,  3870,  3871,  3875,  3877,  3883,  3884,  3888,  3889,  3892,
    3903,  3906,  3917,  3921,  3925,  3937,  3941,  3950,  3957,  3995,
    3999,  4003,  4007,  4011,  4015,  4019,  4025,  4042,  4043,  4044,
    4047,  4048,  4049,  4052,  4053,  4054,  4057,  4058,  4061,  4063,
    4068,  4069,  4072,  4076,  4077,     7,    18,    19,    23,    24,
      25,    26,    27,     7,    26,    50,    73,    80,    85,    86,
      87,    88,     8,    33,    62,    66,    67,    72,    73,    78,
      79,    83,    84,    89,    90,     7,    16,    25,    34,    43,
      52,     5,    12,    22,    23,     7,    19,    33,     9,    16,
      26,    33,    44,    45,    50,    51,    52,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    90,    91,    92,
      97,    98,   103,   107,   115,   116,   121,   122,   123,   129,
     134,   142,   143,    10,    16,    22,    28,    38,    39,    47,
      58,    70,    78,    86,    93,   103,   105,   111,   115,   119,
     134,   141,   142,   143,   147,   148,     7,    15,    22,    29,
      36,    45,    46,    48,    49,     8,    22,    36,    48,    56,
      70,    71,    72,    73,    74,    87,    88,    93,    94,    98,
      99,     7,    18,    31,    35,    42,    53,    54,    60,    61,
       9,    19,     7,    18,    25,    34,    35,    39,    40,     2,
       7,    12,    17,    26,    33,    43,    44,    51,     3,    10,
      17,    24,    31,    38,    45,    52,    61,    61,    63,    63,
      65,    66,    70,    71,     6,     8,    21,    34,    47,    65,
      87,    88,    89,    90,    11,    24,    37,    54,    55,    56,
      61,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN",
  "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT",
  "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION",
  "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED",
  "COMPRESSION", "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION",
  "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P",
  "COPY", "COST", "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P",
  "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL",
  "ISOLATION", "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
  "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
  "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED",
  "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE",
  "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLISECOND_P",
  "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P",
  "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR",
  "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL",
  "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF",
  "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION",
  "OPTIONS", "OR", "ORDER", "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P",
  "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PIVOT", "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS",
  "POLICY", "POSITION", "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES",
  "PROCEDURAL", "PROCEDURE", "PROGRAM", "PUBLICATION", "QUALIFY", "QUOTE",
  "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE",
  "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE",
  "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE", "SCROLL", "SEARCH",
  "SECOND_P", "SECONDS_P", "SECRET", "SECURITY", "SELECT", "SEMI",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P",
  "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE",
  "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING", "VACUUM",
  "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR",
  "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW", "VIEWS",
  "VIRTUAL", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH",
  "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P",
  "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST",
  "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE",
  "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA",
  "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'",
  "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','",
  "'#'", "'$'", "'?'", "'{'", "'}'", "':'", "$accept", "stmtblock",
  "stmtmulti", "stmt", "AlterObjectSchemaStmt", "AlterSeqStmt",
  "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem", "opt_by",
  "SignedIconst", "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "AnalyzeStmt", "AttachStmt", "DetachStmt",
  "opt_database", "opt_database_alias", "CallStmt", "CheckPointStmt",
  "opt_col_id", "qualified_name", "ColId", "ColIdOrString", "Sconst",
  "indirection", "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_from", "copy_delimiter", "copy_generic_opt_arg_list", "opt_using",
  "opt_as", "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "CreateFunctionStmt", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSecretStmt", "secret_key",
  "secret_key_val", "opt_secret_key_val", "opt_secret_list",
  "provider_val", "opt_provider_val", "scope_list_val_item",
  "scope_list_val", "opt_scope_val", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "type_name_list", "ExecuteStmt", "execute_param_expr",
  "execute_param_list", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "file_name", "repo_path",
  "PragmaStmt", "PrepareStmt", "prep_type_clause", "PreparableStmt",
  "RenameStmt", "opt_column", "SelectStmt", "select_with_parens",
  "select_no_parens", "select_clause", "opt_select", "simple_select",
  "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "opt_materialized",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "by_name", "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr", "struct_expr", "func_application",
  "func_expr", "func_expr_windowless", "func_expr_common_subexpr",
  "list_comprehension", "within_group_clause", "filter_clause",
  "export_clause", "window_clause", "window_definition_list",
  "window_definition", "over_clause", "window_specification",
  "opt_existing_window_name", "opt_partition_clause", "opt_frame_clause",
  "frame_extent", "frame_bound", "opt_window_exclusion_clause",
  "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "map_arg", "map_arguments",
  "map_arguments_opt_comma", "opt_map_arguments_opt_comma", "sub_type",
  "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "c_expr_list", "c_expr_list_opt_comma", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "opt_slice_bound", "opt_indirection", "opt_func_arguments",
  "extended_indirection_el", "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "UseStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "VariableResetStmt", "generic_reset", "reset_rest",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "VariableShowStmt", "show_or_describe", "opt_tables",
  "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3066)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1999)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    6368,   415,   123, -3066, -3066,   261,   415, 47826, 62391,   415,
      88,  3120, 49770, -3066,   346,  5038,   415, 52686, 69577,   512,
     241, 30752,   637, 53172, 53172, -3066, -3066, -3066, 62391, 52686,
   53658,   415,   692, 62877, -3066,   415, 32696, 50256,   372, -3066,
   52686,    52,   294, 54144, 52686,  4103,   845,   358, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
     422, -3066, -3066, -3066, -3066,   100, -3066, -3066, -3066, -3066,
   -3066,   153, -3066,   132,   164, 30752, 30752,    93,   389, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, 32210, -3066, -3066,
   -3066, -3066, 54630, 52686, 55116, 50742, 55602, -3066,   909, -3066,
     171, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,   182,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
     185, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066,   186, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066,  -137,   187, -3066, -3066, -3066,   418,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
    4103, 52686,   360,   726,   607, 56088, 63363, -3066, -3066, 52686,
   -3066, -3066,   838,   790, -3066, -3066, 51228, -3066, -3066, -3066,
     753,   991,   761, -3066, -3066,   608, -3066,   168, -3066, -3066,
     659,   645, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
     745, -3066, 66765, -3066, 63849, 56574, 57060, -3066,   615,  2203,
   69594, 29778, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,   422,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, 53172, 62391, 53172,   627,   708,  1031,
     720, 31238,   732, 33183,   738,   749,  1093,   771,   900,   904,
     925,   294, 30265,   767,  -137, -3066, 57546, 57546,   -72,  2780,
   -3066, 57546, 58032, -3066,   807, -3066,   909, -3066, -3066, -3066,
    1114, -3066,   120,   929, -3066, 58518, 58518, 58518,   857,  1107,
   -3066, -3066, -3066,   882, -3066, -3066,  1131, 19697, 19697, 64335,
   64335,   909, 64335,   957, -3066, -3066,    42, -3066, -3066, -3066,
      93,   948,  -137, -3066, -3066, 50256, -3066, -3066,   196,  1285,
   19697, 52686,   952, -3066,   959,   952,   974,   982, -3066,  6368,
   -3066, 52686,  1323,  1209, 50256,   725,   725,  1447,   725,   673,
     962,   844,  2162, -3066,  1707, -3066,  1004,  1102,  1026,  1298,
   -3066,   948,  1387,   703,  1196,  1394,  3568,  1397,  1134,  1400,
    1410,  1510, 19697, 45396,  -137, -3066, 11029,  1052,  1058, -3066,
   -3066, -3066, -3066,  1734,  1340, -3066,  1345,  1189,  1526, -3066,
   -3066,  1156, 59004, 59490, 59976, 60462,  1544, -3066, -3066,  1493,
   -3066, -3066, -3066,  1173, -3066, -3066, -3066,   195, -3066, -3066,
   -3066, -3066, -3066, -3066,  1201, -3066,  1201,  1201, -3066, -3066,
   -3066, -3066,  1147,  1147,  1349,  1187, -3066, -3066, -3066,  1540,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
    1191,  1242, -3066,  1201, -3066,  1147, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, 69135, -3066, -3066, -3066, -3066,   536,   575,
   -3066,  1193, -3066, -3066, -3066, -3066,   174,  1200, -3066,  1672,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,  1208, -3066,
    3611,  1147,  1567,  1210,   175, -3066,  1568,   217, -3066,  1571,
    1437, 14095, -3066,  1378, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066,   294, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
     682, -3066, -3066, 42505, 69594,  1303,  1221, -3066,  1562, 19697,
   19697,  1226,  2400, 57546, 58032, 19697, 52686, -3066, 19697, 24296,
    1227, 19697, 19697, 11540, 19697, 28806, 57546,  2780,  1228, -3066,
     675, 52686,  1230, -3066,  1325,  1325,   692, 30752,  1522, -3066,
     843,  1518,  1448, -3066, 30752,  1448,   934,  1234,  1520,  1448,
   -3066,   628,  1523,  1325, 33669,  1237, -3066,  1325,  1454, -3066,
   -3066, 53172, 42505, 14095, 67236,  1705, -3066, -3066, -3066, -3066,
    1515, 62391,  1243, -3066, -3066, -3066, -3066, -3066, -3066,   652,
    1744,   161,  1745, 19697,   161,   161,  1246,   188,   188, -3066,
    1249, -3066,   190,  1253,  1257,  1758,  1759,   173,   133,  1242,
     161, 19697, -3066,   188,  1260,  1761,  1262,  1764,   142,   172,
   -3066,   191, 19697, 19697, 19697,  1632, 19697, 10518,  1768, 45396,
   -3066, 52686,   664, -3066,  -137,  1275,   909, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066,   176,  6927, -3066, -3066, -3066,
   -3066,  1314, -3066, -3066, -3066, -3066,  1502, 19697, -3066, -3066,
    1293,  1522, -3066,   201, -3066, -3066,  1522, -3066, -3066, -3066,
   -3066, -3066,   243,  1697, 41533, 42019, 62391,  -137, -3066, 64821,
   -3066, -3066, -3066, -3066, -3066, -3066,   696, -3066,   422, 44073,
    1295,  1299,   952, 52686, 52686,  1760, -3066, -3066, -3066,   959,
   50256,   245,  1591,  1428, -3066, -3066,    93,    93, 15098,   837,
     180,   699, 15609, 20208,  1647,  1531,   390,   742,  1653, -3066,
    1539,  1765, 24296, 19697, 19697,   673,   962, 19697, -3066, -3066,
   -3066,  1587, 52686, 48312,   687,   840,  1320,  1402,  1324,    46,
    1728, -3066,  1319, -3066,  1412, 52686, 69135,   267, -3066,  1772,
     267,   267,   268,  1773,  1413,   280,  1576,    14,   -96,  2758,
   -3066,  1319, 50256,   135,    15,  1319, 52686,  1415,    34,  1319,
   62391,  1221, 39165,  1326, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066,   143, 14095, -3066,  1304,  1355,  1360,
     562,   197,  1411,  1426, 14095,  1446,  1453,   160,  1455,  1462,
    1465,  1469,  1479,  1482,  1506,  1508,   149,  1541,  1569,  1573,
    1577,  1588,  1593, -3066,  1606,   166,  1610,   215, 14095,  1614,
   -3066,   170, -3066, 44073,   -10, -3066, -3066,  1622,  1419, 62391,
    1375, 52686, 62391,  1492,  1695,  1746,  1699, 62391, 67707, 52686,
    1581,  2758,  1584,  1350,  1805,  1589,  1058,  1603,  1351, -3066,
   65307,  1856, -3066, -3066, -3066, -3066, -3066, -3066,  1356, -3066,
   -3066, 19697, -3066, -3066, -3066,  1863, -3066, 67236, 67236,  1201,
    1201, -3066, -3066,  1835,  1475,  1476,  1863, -3066,  1863, -3066,
   62391, -3066, -3066, 67236, -3066, 62391,  1399,  1401,  1863, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066,  1863,  1485, -3066,  1487,  1488,
    1490, -3066, -3066, -3066, -3066, -3066, 62391, 45396,  1390, 62391,
   -3066, 52686, 52686, -3066, 52686, 62391, -3066,   701, 44073,  1902,
     688, 69594, 46854, -3066, -3066, -3066, -3066,   539,   839, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,   909, 45396,
   -3066,  3286, 53172, 43108,  1417, 19697, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066,  1420,  1749, -3066, -3066,
    6532,  1421, 43148,  1422, 24296, 24296,  -137,  3829, -3066, -3066,
   24296,  1423, 47340, 43028,  1408,  1427, 43494, 16120, 19697, 16120,
   16120, 43534, -3066,  1432, 43574, 57546,  1414, 52686, 51714, -3066,
   -3066, -3066, 19697, 19697,  2780, 52200,  1461, -3066, 30752, -3066,
    1698, 30752, -3066, -3066,  2591, -3066, 30752,  1719, 19697, 30752,
   -3066,  1670,  1671,  1438, 30752, -3066, 52686,  1442, 52686, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066,  1440,   735, -3066,
     739,  2014, -3066, -3066, 19697, 19697, -3066, 44073,  1494, 19697,
   -3066, 19697, 39502, 38045, 16631, 39502,  1942,  1942, 36099, -3066,
    1616, 43614, -3066,  1459,  2979,  6681,  1460, -3066, -3066,  1449,
   -3066,  1464,  1457, 40075,   127,  -137,  -137, 19697, -3066, 19697,
    4859,  4859, -3066,   205, 67236, 19697, 19697, 19697, 19697, 19697,
   19697, 19697, 19697, 44910,  1549,   159, 62391, 19697, 19697,  1470,
     855, -3066, 19697,  1701, -3066,  1471, 19697,  1557,   235, 19697,
   19697, 19697, 19697, 19697, 19697, 19697, 19697, 19697, -3066, -3066,
   26832,   211,   683,  1804,  1823,    40,   394, 19697,  1817, 11029,
   -3066,  1817, -3066, -3066, -3066, -3066, -3066,   203, -3066, -3066,
   -3066,  1440, -3066,  1440, -3066, 62391, -3066, 52686,   196, 49284,
   19697, -3066, -3066,  1477,  1486,   515, -3066,  1538, -3066, -3066,
   52686, 36585,  1775, -3066,   295,  1491, -3066, 42988,  1735,  1775,
      93, -3066, -3066, 25318,  1615,  1777,  1717, -3066, -3066,  1696,
    1700, -3066,  1499, 44145, 20719, 20719, -3066,  1280, 44073,  1291,
   -3066, -3066, -3066, -3066, -3066, -3066,    59, -3066, 52686,   154,
   34155, -3066,  1500,    63, -3066,  4211,  1834,  1799,  1647,   742,
    1512, -3066,  1729,  1516, 65793, 52686,  1798,  1754,  1801,  -112,
   67236, -3066, -3066, -3066, -3066, 52686, 62391, 60948, 66279, 45882,
   52686, 45396, -3066, -3066, -3066, -3066, 52686,   475, 52686,  7569,
   -3066, -3066, -3066,   267, -3066, -3066, -3066, -3066, -3066, 62391,
   52686, -3066, -3066,   267, 62391, 52686,   267, -3066,  1788, 52686,
   52686, 52686, 52686,  1822, 52686, 52686, -3066, -3066, -3066, 21230,
       4,     4,  1737, 12051,   169, -3066, 19697, 19697,  1703, -3066,
   -3066,   744,  1743,   150, -3066,  1598,  1575, 52686, 52686, 52686,
   52686, 52686,  1289, -3066, -3066, -3066, -3066, -3066, 62391,  1592,
    1530, -3066,  1533,  1892,  2758, -3066,  1893, 48798,   880,  1846,
    1895,  1580,  1900, 12562,  2010,  1784, -3066, -3066,  1770, -3066,
   19697,  1548,  1550,   174,   750, -3066, -3066,  1552,  1401,  1574,
    1582,  1553,  1559, 67236,   760, -3066,   764,  1863,   163,  1563,
    1565,  1398,   808,   762,  1290,   175, -3066, 45396, -3066,   217,
   -3066,  1795,   181, -3066, 14095, 19697, -3066, -3066, -3066, -3066,
   -3066, -3066,  1221, 27329, -3066,   765, -3066, -3066,  2040,   909,
    2040,   704, -3066, -3066,  2040, -3066,  2022,  2040, -3066, -3066,
   67236, -3066,  7487, -3066, 19697, 19697, -3066, 19697,  1915, -3066,
    2072,  2072, 67236, 24296, 24296, 24296, 24296, 24296, 24296,   183,
    1260, 24296, 24296, 24296, 24296, 24296, 24296, 24296, 24296, 24296,
   25829,   412, -3066, -3066,   769,  2044, 19697, 19697,  1923,  1915,
   19697, -3066, 67236,  1583, -3066,  1585,  1586, 19697, -3066, 67236,
   -3066, 52686,  1590,   -11,   -16, -3066,  1594,  1600, -3066,  1522,
   -3066,   770,   793, 52686,  3146,  3830,  4848, -3066, -3066, 19697,
    1911,  2591, 30752, -3066, 19697,  1601, -3066, -3066, 30752,  1928,
   -3066, -3066, -3066, 34641,  2591, 67236,   776, -3066, 52686, 67236,
     786, 42505, -3066, 14095, -3066, 67236, -3066, -3066, -3066, -3066,
   -3066, -3066,  1605,  1608, 19697,    78, -3066,  8013,  5814, -3066,
    1604, -3066,  1579, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,  1607, -3066,
    1609, -3066,  1611, 52686, -3066, 21741, -3066, 62391, -3066, -3066,
   19697, 19697, 52686, -3066,  1632, -3066,  1617,  8062, -3066, -3066,
   -3066,   178,   333, 44193,   394,  6872,  6872,  6872, 39502, -3066,
   -3066, -3066,  1628, -3066, 24296, 24296, -3066,  7284,  2174, 10518,
   -3066, -3066,  1953, -3066,   722, -3066,  1621, -3066, -3066,  3935,
   -3066, 38045,  5733, 19697,   177, -3066, 19697,  1470, 19697,  1674,
    6872,  6872,  6872,   403,   403,   178,   178,   178,   333,   394,
   -3066, -3066, -3066,  1623, 19697, 45396, -3066,  1624,  1625,  1976,
    1262, 19697, -3066, -3066, 30752,  1461,   -10,  1461,  1863,  4859,
   -3066,   959, -3066, -3066,   959, 44073, 52686, -3066, -3066,  1877,
    1627, 30752,  1669,  2096,  2078, 62391, -3066, -3066,  1629,  1817,
    1645, -3066, -3066,  1650, 19697,  3006,  1650, -3066,  1775,     3,
    1858,   865,   865,  1280,  1861, -3066, -3066,  1702, -3066, -3066,
   -3066, 19697, 13073,  1306, -3066,  1318, -3066, -3066, -3066, -3066,
   -3066,  1639, -3066,  1912, -3066, 52686, -3066, -3066, 24296,  2091,
   19697, 35127,  2098,  1899, -3066, -3066, -3066,  1738,  1319, 19697,
    1896, -3066,   433,  1656,  2015,   327,  1968, 62391, -3066,   283,
     289, -3066,   179,  2020,   181,  2026,   181, 45396, 45396, 45396,
     787, -3066, -3066, -3066,   909, -3066,  -120,   794, -3066, -3066,
   -3066, -3066,  1755,    75,  2758,  1319, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066,   141,   591,  1319,  1756, -3066,  1762, -3066,
    1763,   611,  1319, -3066, -3066,  8981, 44073,   582,   169,   169,
     169, 14095, -3066,  1905,  1913,  1680, 44073, 44073, -3066,   156,
   -3066, 62391, -3066, -3066, -3066,  1703,  1746, 62391, 52686,  2758,
    1682,  2151,  1058,  1351, -3066,  1847,   509,  1766, 62391, -3066,
    1829,   265, -3066, 62391, 52686, 52686, 52686, 61434, -3066, -3066,
   -3066,  1689,  1687, -3066,   -17,  1916,  1919, 52686,  1736, 52686,
    1324,  2165, 52686, -3066,   819, 17142,  2061, 52686,  1704, -3066,
   -3066, -3066, -3066,  1863, -3066, -3066,   428,   428, -3066, -3066,
   62391, -3066,  1708, -3066,  1709, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, 62391, -3066, -3066,
   44073, -3066, -3066, 46368, -3066, -3066, -3066, -3066, -3066, 45396,
   -3066,   909, -3066,   909,  1938, 62391, 40561,   909, 41047,   909,
    1710, -3066, 44073,  8193, 44073,  1923, -3066,   134,  2072,  1294,
    1294,  1294,  5684,  2052,   252,  1716,  1294,  1294,  1294,   311,
     311,   134,   134,   134,  2072,   412,   807, 47340,  1720, -3066,
   44073, 44073, -3066, -3066,  1718, -3066, -3066, -3066, -3066,  1722,
    1723, -3066, -3066, -3066, -3066, -3066, -3066, 62391,  1138,  1461,
     372,   372,   372,   372, -3066, 52686, 52686, 52686, 44073,  2163,
    2045, -3066,  2591, 44073, 52686, -3066, 28316, 52686, -3066,  2068,
   -3066,  2155, -3066, 52686,   821, -3066, -3066, -3066, -3066, -3066,
   43678, 19697, -3066,  2095, -3066, 19697, 19697, -3066, 38045, -3066,
   -3066,  1731, 10518, 44001, -3066,  2046,  8385, 44073, -3066,  1616,
   -3066,  4859, 19697,  3050,  4458, 19697,  1733, 19697,  2074, -3066,
   -3066,  1740, -3066, -3066, 67236, 19697,  1747,  4115, 24296, 24296,
    5159, -3066,  5594, 19697, 10518, -3066, 39205,  1727,  1751,  1737,
   17653, -3066,  1949,  1742, -3066,  1911,   169,  1911,  1748, -3066,
   -3066, -3066, -3066,  2014, -3066, 19697,  1898, 62391,   520,  3360,
     832, -3066,  -137, 36585,  1669, 19697,   199, -3066, -3066,  1771,
   -3066,  1650, -3066, -3066, -3066,  1975, -3066, -3066, -3066, 52686,
   -3066,  1769, -3066, 34155,  2084, 10518, -3066, 34155, 52686, 52686,
   38539,  2116, -3066, 62391, 62391, 62391, -3066, 62391,  1757,  1776,
     713,  1780,   322, -3066,  2645,   713,  2094,   206,  1324,   280,
    1668,   538, -3066, -3066, -3066,  1837, 52686, -3066, 62391, -3066,
   -3066, -3066, -3066, -3066, 45882, -3066, -3066, 37558, 45396, -3066,
   45396, 52686, 52686, 52686, 52686, 52686, 52686, 52686, 52686, 52686,
   52686, 19697, -3066, 19697,  1785,  1786,  1789,  1737, -3066, -3066,
   -3066, -3066, -3066, -3066,   -96, -3066,   156,  1592,  1792, -3066,
   48798,  4103,  1580,  2258,  1746,   848, 61905, 62391, -3066,   139,
    1833, -3066,  1796,  1794,   834,  2758,  1800,  2261, -3066,   880,
   48798, -3066, -3066, -3066,  2220, -3066,   615,   202, -3066,  1058,
   -3066,  4103,  1351, -3066,  4103, 44073, 62391,  1860, -3066,  1401,
    1806, -3066, -3066,  1401, 67236,  1401, -3066, -3066,   181,   847,
   -3066, -3066, -3066, -3066, -3066, 62391,  1802, -3066,  1802, -3066,
   -3066,  1802, -3066, -3066, -3066, -3066, 24296,  2141,  1809, 67236,
   -3066, -3066, 52686, -3066, -3066, -3066,   849,  1803,  1911, 52686,
   52686, 52686, 52686, -3066, -3066, -3066, 18164, 19697,  1850, -3066,
    1812, 14606,  2125, -3066, 27826, -3066,   209,  1814, 34641, 62391,
   -3066, -3066, -3066, 19697, 44073, -3066, 44073, -3066, -3066, -3066,
    7243, -3066,  1815,  1821, 62391, 19697, -3066, -3066, -3066,   352,
   19697, 19697,  7284, -3066, 44430, 19697, 67236,   851,  7284,   212,
   19697,  4762,  5384, 19697, 19697,  5959, 38579, -3066, 22252, 13584,
   -3066,  1825, 19697, 38619, 37071, -3066, 30752,  2045,  1826,  2045,
     909,  1827, 44073, 19697, -3066, -3066, -3066, -3066,  1875,   -55,
   32696,  2051, -3066,  1844, 62391, -3066,  1898, 44073, -3066, -3066,
   38045, -3066, -3066, -3066, -3066, -3066,  2270,  2127,  1838,  1842,
   -3066,  1238, -3066, -3066, 62391,  1851, -3066,  1855,   713, -3066,
   62391,  1872, -3066,   230,  2143,   130, -3066, 19697, -3066,  2249,
    2324,  2645,  1862, 62391, 52686, 24296, -3066,   249,   225, -3066,
    2147, 52686,  1872,  2279, -3066, -3066, -3066,   322, -3066,  2183,
    2099, -3066,   267, -3066, 19697,   322,  2100,   189, 62391, -3066,
   -3066,  2704, -3066, 67236,   181,   181, -3066,  1864,  1868,  1870,
    1873,  1874,  1878,  1880,  1881,  1886,  1887,  1888, -3066,  1889,
    1890,  1891,  1904,  1907,  1910,  1914,  1920,  1191,  1922, -3066,
    1924,  1771,  1925,  1927,  1929,  1937,  1941, 68178,  1943,  1947,
    1950,  1955,  1193,  1956,   539,   839, -3066, -3066, -3066, -3066,
    1957, -3066, -3066, -3066,  1210,  1885, -3066, -3066, -3066,  1963,
   -3066,  1978, -3066, -3066, -3066, -3066, -3066,  1908,  1918, -3066,
   -3066, -3066,   169,  1221,   152,  1829, 62391,  1894,  1736,  2379,
   18675,   554,  2152,  1921,  1592, -3066,  2444, -3066,  1960, -3066,
   -3066,   909,  1580, -3066, 48798,  3613,   679,  1919, -3066,   198,
    1736, -3066,  2365,  1580,  2004,  2432, -3066,  2191, 62391,  1970,
   -3066, -3066, -3066, -3066, 46368,  1802,  5717, 24296, 67236,   869,
     876, -3066,  2468,  2135,  2045, -3066, -3066, -3066, -3066, -3066,
    1979,   -71,  1980, 10007,  1974, -3066, -3066, -3066, -3066, -3066,
   -3066, 44073, 44073, 62391,  2158, -3066, -3066,  1981,  1986, 35613,
    2428,  1990, -3066, 14095, -3066,  2303, -3066, 29292, -3066, 44073,
   19697, -3066, -3066, 39551,  2312,  7284,  7284, 44430,   878, -3066,
    7284, 19697, 19697,  7284,  7284, 19697, -3066,  9494,   595, -3066,
     884, -3066, 38659, -3066, 68649, -3066, -3066,  1850,   909,  1850,
   -3066, -3066,  1991, -3066, -3066, -3066,  2054, -3066, -3066,   885,
    2414,  1898, 19697, -3066, -3066,  2003, 34155, -3066, -3066, -3066,
   -3066, 34155,   713, -3066,  2175,  1872,  2006, -3066, -3066, -3066,
   -3066, -3066, -3066, 38699, -3066,   111, 19697, -3066,  1091,  5684,
   -3066, -3066, -3066, -3066,  1872,  1058, -3066, 52686,  2475,  2370,
   -3066, -3066, 44073, -3066, -3066,  1863,  1863, -3066, -3066,  2155,
   -3066, -3066, -3066, -3066,  1210,   473, 37558, 52686, 52686, -3066,
   -3066,  2016, -3066, -3066,   -96,  2403,  1833,   889,   880, -3066,
    4103,  4103, 44073, 52686,  2372, 48798,  1829, -3066,   661, 62391,
   -3066,  2484,  2021, 52686,  1736,  1166,  1166, -3066,  2167, -3066,
    2169, -3066, -3066,  2489,   234, -3066, 19186, 52686, -3066, -3066,
   31724, -3066,  5717,   893, -3066, -3066,  2025,  2027, -3066,  1850,
   19697,  2029, 19697, -3066, 22763,  2496,  2030, -3066, 19697,  2101,
   26340, -3066, 19697, -3066, 52686, 57546,     4,  2033, 57546, -3066,
   -3066, -3066, 19697, -3066,  7284,  7284,  7284, 19697, -3066, 19697,
   -3066, -3066, -3066,  2242,  2158, -3066,  2158, 19697,  4103,  -137,
    4175, 62391,   -15, -3066, 44073, -3066, -3066, -3066, 52686, -3066,
   45396, -3066,   713,   -49,  2041, 19697, 39045,  2276, -3066, -3066,
    2306, -3066,  2366, -3066,  2106,   518,  2123, -3066, -3066, -3066,
   -3066,  1221,   909, -3066,  1580,  1919,  2004, -3066,  2055, 52686,
    1833, -3066,  2444,  2552, -3066,  2050,  2056,  4103,   880,   615,
   -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066, -3066,
   -3066, -3066, -3066,  4103,  2491,  2275,  2495,  4103, 44073,  1860,
   19697,    81, -3066,   901,  2490, -3066, -3066,  2560,  2158,  2064,
   22763,  2069, -3066,  2071, 62391, 44073,  2217, -3066, -3066,  2073,
   -3066, -3066,   169, 19697, -3066, 39592,  2076,  2079,  2523,  1737,
    2101,  2101, -3066,   -55, -3066, -3066,  2497, 31724,  2457,  1058,
     713,  2104,   907, -3066, -3066, -3066, -3066, -3066,  2758, -3066,
   39085,  2323,   442,  2310,  2041, 19697, -3066,  2168, -3066, -3066,
   -3066,  2559, -3066, -3066, 48798,  2097, -3066, -3066, -3066, 62391,
   -3066,  2004,  1919,  1736,  2004,  2317, -3066,  2319, -3066,  2103,
   39125, 62391, 62391,  1580, 31724, 62391,  2105,  2101, -3066,  2107,
   -3066, -3066, -3066, 51714, -3066,  2108,  2109, -3066, -3066, -3066,
   19697,   112, -3066, -3066,  2154, 52686,   943,    33,  2306, 37558,
   -3066, 45396,  1018,   -49,  2410, -3066, -3066, -3066, -3066,   122,
    2329, -3066,  2336, -3066, 44073, -3066,  4103, 48798, -3066, -3066,
   -3066, -3066, -3066, -3066, -3066, 31724,  2490, -3066,   295, -3066,
    1461, -3066,   295, -3066, -3066, -3066, -3066,   909, -3066,  1408,
   23274, 23274, 23274,  2115,  4103, -3066,  1461, -3066,  2243,  2310,
   -3066, -3066, -3066, -3066, -3066,   491,   491,  2506, -3066,  2181,
   -3066,  2004,   944, 62391,  1650, -3066,  1650, 24807,  2268,   193,
   43068,  2485, -3066,  2485,  2485, -3066, -3066, -3066, 36585, -3066,
   -3066,  2606, -3066,   200, -3066, -3066, -3066,  1580,   295, -3066,
   -3066,  2596, -3066, -3066, -3066, -3066, -3066,   763, -3066, -3066,
   -3066,  1461,   713, -3066, -3066, -3066,  1461,  1650, 23785,  2278,
   -3066,  2346, -3066, -3066, -3066, -3066, -3066, -3066, -3066
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     153,   266,     0,  1345,  1344,  1416,   266,     0,  1294,   266,
     487,   404,     0,  1437,  1416,     0,   266,     0,   153,     0,
       0,     0,     0,     0,     0,   547,   550,   548,     0,     0,
       0,   266,   587,     0,  1436,   266,     0,     0,   579,   549,
       0,  1396,     0,     0,     0,     0,     0,     2,     4,     5,
       6,     7,     8,     9,    22,    10,    11,    12,    18,    13,
      14,    15,    16,    17,    19,    20,    21,    23,    24,    25,
    1303,    26,    27,    28,    29,     0,    30,    31,    32,    33,
      34,   523,   510,   592,   522,     0,     0,   152,   691,   530,
      35,    36,    37,    38,    39,    40,    41,  1435,    42,   265,
     264,   258,     0,     0,     0,     0,     0,  1415,     0,   259,
     109,  1461,  1462,  1463,  1464,  1465,  1466,  1467,  1468,  1469,
    1470,  1471,  1829,  1472,  1473,  1474,  1475,  1476,  1830,  1477,
    1478,  1479,  1775,  1776,  1831,  1777,  1778,  1480,  1481,  1482,
    1483,  1484,  1485,  1486,  1487,  1779,  1780,  1488,  1489,  1490,
    1491,  1492,  1781,  1832,  1782,  1493,  1494,  1495,  1496,  1497,
    1833,  1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,
    1834,  1507,  1508,  1509,  1510,  1511,  1512,  1513,  1514,  1515,
    1516,  1783,  1784,  1517,  1518,  1519,  1520,  1521,  1522,  1523,
    1524,  1525,  1526,  1527,  1528,  1529,  1530,  1531,  1532,  1533,
    1534,  1535,  1536,  1537,  1538,  1539,  1540,  1541,  1542,  1543,
    1544,  1785,  1545,  1546,  1547,  1548,  1549,  1786,  1550,  1551,
    1552,  1787,  1553,  1554,  1555,  1835,  1836,  1556,  1557,  1788,
    1838,  1558,  1559,  1789,  1790,  1560,  1561,  1562,  1563,  1564,
    1565,  1566,  1567,  1568,  1839,  1569,  1570,  1571,  1572,  1573,
    1574,  1575,  1576,  1577,  1578,  1579,  1580,  1840,  1791,  1581,
    1582,  1583,  1584,  1585,  1792,  1793,  1794,  1586,  1841,  1842,
    1587,  1843,  1588,  1589,  1590,  1591,  1592,  1593,  1594,  1844,
    1595,  1845,  1596,  1597,  1598,  1599,  1600,  1601,  1602,  1603,
    1795,  1604,  1605,  1606,  1607,  1608,  1609,  1610,  1611,  1612,
    1613,  1614,  1615,  1616,  1617,  1618,  1619,  1620,  1621,  1796,
    1847,  1797,  1622,  1623,  1624,  1798,  1625,  1626,  1848,  1627,
    1799,  1628,  1800,  1629,  1630,  1631,  1632,  1633,  1634,  1635,
    1636,  1637,  1638,  1801,  1849,  1639,  1850,  1802,  1640,  1641,
    1642,  1643,  1644,  1645,  1646,  1647,  1648,  1649,  1650,  1651,
    1803,  1851,  1652,  1653,  1804,  1654,  1655,  1656,  1657,  1658,
    1659,  1660,  1661,  1662,  1663,  1664,  1665,  1805,  1666,  1667,
    1668,  1669,  1670,  1671,  1672,  1673,  1674,  1675,  1676,  1677,
    1678,  1679,  1680,  1681,  1682,  1683,  1684,  1852,  1685,  1686,
    1687,  1806,  1688,  1689,  1690,  1691,  1692,  1693,  1694,  1695,
    1696,  1697,  1698,  1699,  1700,  1701,  1702,  1703,  1704,  1705,
    1706,  1807,  1707,  1708,  1709,  1853,  1710,  1711,  1808,  1712,
    1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,
    1723,  1724,  1809,  1725,  1810,  1726,  1727,  1728,  1729,  1855,
    1730,  1731,  1732,  1733,  1734,  1735,  1811,  1812,  1736,  1737,
    1813,  1738,  1814,  1739,  1740,  1815,  1741,  1742,  1743,  1744,
    1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,  1753,  1754,
    1755,  1756,  1757,  1816,  1817,  1758,  1856,  1759,  1760,  1761,
    1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,  1770,  1818,
    1819,  1820,  1821,  1822,  1823,  1824,  1825,  1826,  1827,  1828,
    1771,  1772,  1773,  1774,     0,   110,   111,  1242,  1444,     0,
    1220,   109,  1788,  1795,  1809,  1292,  1293,   110,   261,   486,
       0,     0,     0,     0,     0,     0,     0,   398,   397,     0,
    1283,   403,     0,     0,   113,   105,  1654,   112,  1219,   103,
    1415,     0,     0,   424,   425,     0,   434,     0,   417,   422,
     418,     0,   443,   436,   444,   426,   416,   437,   427,   415,
       0,   445,     0,   420,     0,     0,     0,   262,   227,   404,
     153,     0,  1307,  1308,  1309,  1310,  1311,  1312,  1317,  1313,
    1314,  1315,  1316,  1318,  1319,  1320,  1321,  1322,  1298,  1303,
    1323,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,
    1333,  1334,  1335,  1336,     0,  1294,     0,     0,  1781,  1832,
    1786,     0,  1799,     0,  1802,  1803,  1688,  1810,  1813,  1814,
    1815,  1816,     0,   759,   112,   107,   743,     0,   525,   695,
     705,   743,   748,  1010,   771,  1011,     0,   114,  1382,  1381,
    1377,  1376,   192,  1257,  1424,  1558,  1598,  1705,  1811,  1736,
    1440,  1425,  1419,  1423,   263,   586,   584,     0,  1191,  1558,
    1598,  1692,  1705,  1811,  1353,  1357,     0,   260,  1442,  1429,
       0,  1430,   112,   531,   578,     0,   267,  1395,     0,  1400,
       0,  1668,   558,   561,  1251,   559,   523,     0,     1,   153,
    1302,  1410,     0,   159,     0,   582,   582,     0,   582,     0,
     515,     0,     0,   523,   518,   522,   692,  1439,  1811,  1736,
    1428,  1431,  1567,     0,     0,  1567,     0,  1567,     0,  1567,
       0,  1418,  1175,     0,  1221,   115,     0,     0,   369,   402,
     401,   400,   399,   404,  1567,  1267,  1567,     0,     0,   454,
     455,     0,     0,     0,     0,     0,  1278,   106,   104,     0,
    1413,   432,   433,     0,   423,   419,   421,     0,  1243,  1857,
    1858,  1859,   814,  1860,   843,   821,   843,   843,  1861,  1862,
    1863,  1864,   810,   810,  1532,   823,  1865,  1866,  1867,  1567,
    1868,  1869,   811,   812,   848,  1870,  1871,  1872,  1873,  1874,
       0,     0,  1875,   843,  1876,   810,  1877,  1878,  1879,   815,
    1880,   781,  1881,     0,  1882,   813,   782,  1883,   851,   851,
    1884,     0,   838,  1885,  1244,  1245,   442,     0,   446,   796,
     797,   798,   799,   824,   825,   800,   830,   831,   835,   801,
     883,   810,  1567,  1246,   442,   438,  1567,   442,  1213,  1567,
       0,     0,   219,     0,  1300,  1337,  1886,  1887,  1888,  1889,
    1890,  1891,  1892,  1893,  1895,  1894,  1896,  1897,  1898,  1899,
    1900,  1901,  1902,  1903,  1904,  1905,  1906,  1907,  1908,  1909,
    1910,  1911,  1912,  1913,  1914,  1917,  1915,  1916,  1918,  1919,
    1920,  1921,  1922,  1923,  1924,  1925,  1926,  1927,  1928,  1929,
    1930,  1932,  1931,  1933,  1934,  1935,  1936,  1937,  1938,  1939,
    1940,  1941,  1942,  1943,  1944,  1945,  1946,  1947,  1948,  1949,
    1950,  1951,  1952,  1953,  1954,  1955,  1956,  1957,  1958,  1959,
    1960,  1961,  1962,  1963,  1964,  1965,  1966,  1338,  1339,  1351,
       0,  1352,  1342,  1306,   153,     0,   485,  1291,  1378,     0,
       0,     0,  1131,   743,   748,     0,     0,   761,     0,  1146,
       0,  1152,     0,     0,     0,   743,   530,     0,   705,   760,
     108,     0,   741,   742,   633,   633,   587,     0,   568,   753,
       0,     0,   756,   754,     0,   756,     0,     0,     0,   756,
     752,   713,     0,   633,     0,   741,   744,   633,     0,   763,
    1297,     0,     0,     0,     0,     0,  1422,  1420,  1421,  1426,
       0,     0,     0,  1223,  1225,  1226,  1099,  1236,   996,     0,
    1776,  1777,  1778,  1167,  1779,  1780,  1782,  1783,  1784,   950,
    1785,  1234,  1787,  1789,  1790,  1792,  1793,  1794,  1795,  1796,
    1797,     0,  1235,  1800,  1634,  1805,  1806,  1808,  1811,  1812,
    1233,  1817,     0,     0,     0,  1202,  1122,     0,     0,     0,
     995,     0,  1168,  1176,   991,     0,     0,   804,   805,   826,
     827,   806,   832,   833,   807,     0,  1198,   884,   979,  1186,
     998,  1029,  1000,  1009,   987,  1066,   980,     0,   990,   982,
    1194,   568,  1192,     0,   983,  1222,   568,  1190,  1356,  1354,
    1360,  1355,     0,     0,     0,     0,     0,   108,  1402,  1403,
    1394,  1392,  1393,  1391,  1390,  1397,     0,  1399,  1303,  1117,
    1119,     0,   560,     0,     0,     0,   513,   512,     3,  1251,
       0,     0,     0,     0,   580,   581,     0,     0,     0,     0,
       0,     0,     0,     0,   676,   607,   608,   610,   673,   677,
     685,     0,     0,     0,     0,     0,   519,     0,  1438,  1434,
    1432,     0,     0,     0,   137,   137,     0,     0,     0,     0,
       0,    97,    46,    90,     0,     0,     0,     0,   241,   254,
       0,     0,     0,     0,     0,   251,     0,     0,   234,   228,
     230,    48,     0,   137,     0,    44,     0,     0,     0,    50,
       0,   485,  1174,     0,   119,  1999,  2000,  2001,  2002,  2003,
    2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,  2013,
    2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,  2023,
    2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,
    2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,
    2044,  2045,  2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,
    2054,  2055,  2056,  2057,  2058,  2059,  2060,  2061,  2062,  2063,
    2064,  2065,  1953,  2066,  2067,  2068,  2069,  2070,   117,   118,
     121,   120,   122,   116,   109,     0,  1967,  1829,  1830,  1831,
    1832,  1782,  1833,  1834,     0,  1835,  1836,  1788,  1838,  1839,
    1840,  1841,  1842,  1843,  1844,  1845,  1795,  1847,  1848,  1849,
    1850,  1851,  1852,  1993,  1853,  1809,  1855,  1815,     0,  1856,
    1002,   110,  1239,  1125,   592,  1123,  1252,     0,     0,     0,
     483,     0,     0,     0,     0,  1263,     0,     0,     0,     0,
    1567,   199,  1567,   369,     0,  1567,   369,  1567,     0,  1277,
    1280,     0,   435,   431,   429,   428,   430,   842,   829,   837,
     836,  1122,   819,   818,   817,     0,   816,     0,     0,   843,
     843,   841,   820,   796,     0,     0,     0,   847,     0,   845,
       0,   440,   441,     0,   413,     0,   789,   785,     0,   856,
     857,   858,   859,   866,   867,   864,   865,   860,   861,   854,
     855,   862,   863,   852,   853,     0,   868,   869,   870,   871,
     872,   873,   874,   875,   802,   808,     0,     0,  1247,     0,
     408,     0,     0,   410,     0,     0,   224,     0,   222,     0,
     404,   153,     0,   235,  1347,  1348,  1346,     0,     0,  1305,
     238,  1341,  1350,  1340,  1349,  1304,   255,  1299,     0,     0,
    1295,   473,     0,     0,     0,     0,  1132,  1141,  1133,  1134,
    1135,  1136,  1137,  1138,  1139,  1140,     0,     0,   704,   702,
       0,     0,     0,     0,     0,     0,  1168,     0,   954,   980,
       0,     0,     0,  1117,  1151,     0,     0,     0,     0,     0,
       0,  1117,  1157,     0,     0,   727,   739,     0,   626,   632,
     703,   701,     0,  1191,   696,     0,   773,   753,     0,   752,
       0,     0,   755,   749,     0,   750,     0,     0,     0,     0,
     751,     0,     0,     0,     0,   699,     0,   739,     0,   700,
     770,  1384,  1383,  1379,  1366,  1365,  1374,   193,     0,  1128,
       0,   153,  1427,  1441,     0,  1122,   988,  1166,     0,     0,
     993,  1079,   909,     0,     0,   910,   888,   889,     0,  1201,
    1210,  1117,  1121,     0,   991,  1117,     0,   984,   985,     0,
    1069,  1071,     0,     0,  1169,  1224,   992,     0,  1229,     0,
     883,   883,  1197,  1099,     0,  1089,  1092,     0,     0,  1096,
    1097,  1098,     0,     0,     0,  1189,     0,  1107,  1109,     0,
       0,   925,  1105,     0,   928,     0,     0,     0,     0,  1093,
    1094,  1095,  1085,  1086,  1087,  1088,  1090,  1091,  1103,  1084,
     906,     0,   981,     0,  1032,     0,   905,  1195,   694,     0,
    1227,   694,  1368,  1372,  1373,  1371,  1367,     0,  1359,  1358,
    1363,  1361,  1364,  1362,  1443,     0,  1404,  1388,     0,  1385,
    1120,   689,   562,  1215,     0,   566,  1411,  1409,   158,   157,
       0,     0,   535,   534,   601,   593,   595,   601,     0,   533,
       0,   649,   650,     0,     0,     0,     0,   682,   680,  1223,
    1236,   637,   611,   636,     0,     0,   615,     0,   641,   884,
     675,   517,   605,   606,   609,   516,     0,   678,     0,   688,
       0,   554,   556,   539,   553,   551,   536,   544,   676,   610,
       0,  1433,     0,     0,     0,     0,     0,  1567,     0,     0,
     784,    81,    62,   321,   136,     0,     0,     0,     0,     0,
       0,     0,    89,    86,    87,    88,     0,     0,     0,     0,
     239,   240,   253,     0,   244,   245,   242,   246,   247,     0,
       0,   232,   233,     0,     0,     0,     0,   231,     0,     0,
       0,     0,     0,     0,     0,     0,  1417,  1412,  1170,  1175,
     592,   592,   592,     0,   590,   591,     0,     0,   472,   367,
     377,     0,     0,     0,  1267,     0,     0,     0,     0,     0,
       0,     0,   404,  1268,  1266,  1270,  1269,  1271,     0,   211,
    1538,   187,     0,     0,   198,   195,     0,   366,   340,     0,
       0,  1282,     0,     0,     0,  1567,   356,  1279,     0,  1414,
       0,     0,     0,   442,     0,   840,   839,   790,   786,     0,
       0,     0,     0,     0,     0,   447,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   442,  1248,     0,   439,   442,
    1214,     0,   442,   226,     0,     0,  1301,  1343,   236,   256,
     237,   257,   485,   480,   508,     0,   488,   493,   470,     0,
     470,     0,   490,   494,   470,   489,     0,   470,   484,  1380,
       0,  1025,     0,  1015,     0,     0,   762,     0,     0,  1016,
     956,   957,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     974,   973,  1017,   766,     0,   769,     0,     0,  1149,  1150,
       0,  1018,     0,     0,  1156,     0,     0,     0,  1023,     0,
     706,     0,     0,     0,   621,   625,   628,     0,   631,   568,
     524,  1558,  1598,     0,   579,   579,   579,   577,   567,     0,
     653,     0,     0,   728,     0,     0,   730,   732,     0,     0,
     735,   712,   711,     0,     0,     0,     0,   774,     0,  1219,
       0,     0,   194,     0,  1256,     0,  1261,  1262,  1259,  1255,
    1258,  1260,     0,     0,     0,  1165,  1161,     0,     0,  1074,
    1076,  1078,     0,  1083,  1089,  1092,  1096,  1097,  1098,  1093,
    1094,  1095,  1085,  1086,  1087,  1088,  1090,  1091,     0,  1111,
       0,  1065,     0,     0,  1200,     0,   952,     0,   986,   997,
       0,     0,  1072,  1001,  1202,  1177,     0,     0,  1232,  1231,
     885,   894,   897,   929,   930,   901,   902,   903,   907,  1254,
    1253,  1196,     0,  1188,     0,     0,   886,   911,   916,     0,
    1158,   946,     0,   934,     0,   924,     0,   932,   936,   912,
     927,     0,   908,     0,  1189,  1108,  1110,     0,  1106,     0,
     898,   899,   900,   890,   891,   892,   893,   895,   896,   904,
    1082,  1080,  1081,     0,  1175,     0,  1187,     0,     0,  1034,
       0,     0,   931,  1193,     0,   773,   592,   773,     0,   883,
    1405,  1251,  1398,  1387,  1251,  1118,  1216,  1250,   564,     0,
       0,     0,  1407,   144,   148,     0,  1176,   178,   180,   694,
       0,   599,   600,   604,     0,     0,   604,   583,   532,  1806,
    1688,     0,     0,     0,     0,   642,   683,     0,   674,   639,
     640,     0,   638,  1223,   643,  1222,   644,   647,   648,   616,
    1211,   684,   686,     0,   679,     0,  1217,   538,   557,     0,
       0,     0,     0,     0,   521,   520,   690,     0,    47,     0,
    1567,    64,     0,     0,     0,     0,     0,     0,   271,     0,
     371,   271,   102,  1567,   442,  1567,   442,  1465,  1533,  1706,
       0,    60,   345,    93,     0,   130,   374,     0,   330,    83,
      98,   123,     0,     0,   229,    49,   243,   248,   126,   252,
     249,  1287,   250,   137,     0,    45,     0,   124,     0,  1285,
       0,     0,    51,   128,  1289,     0,  1174,     0,   590,   590,
     590,     0,  1124,     0,     0,     0,  1126,  1127,   471,     0,
     368,     0,   482,   461,   462,   472,  1265,     0,     0,   199,
     369,     0,   369,     0,  1267,     0,     0,     0,     0,   212,
     216,   189,   185,     0,     0,     0,     0,   367,   359,   357,
     390,     0,   364,   358,     0,     0,   316,     0,  1459,     0,
       0,     0,     0,   456,     0,     0,     0,     0,     0,   809,
     822,   414,   796,     0,   850,   849,   851,   851,   779,   796,
       0,   796,     0,   794,     0,   834,   803,   876,   877,   878,
     879,   880,   881,   882,   407,  1249,   409,     0,   411,   225,
     223,  1296,   477,     0,   476,   481,   475,   479,   474,     0,
     469,     0,   503,     0,     0,     0,     0,     0,     0,     0,
       0,  1012,  1130,     0,  1144,  1143,   955,   962,   965,   969,
     970,   971,  1145,     0,     0,     0,   966,   967,   968,   958,
     959,   960,   961,   963,   964,   972,   771,     0,     0,   765,
    1154,  1153,  1147,  1148,     0,  1020,  1021,  1022,  1155,     0,
       0,   740,   619,   617,   620,   622,   618,     0,     0,   773,
     579,   579,   579,   579,   576,     0,     0,     0,   772,     0,
     670,   734,     0,   758,     0,   731,     0,     0,   722,     0,
     729,   778,   745,     0,     0,   747,  1375,  1129,   585,   989,
       0,     0,  1162,     0,   951,     0,  1077,   999,     0,  1100,
    1064,     0,     0,     0,  1209,     0,  1118,  1068,  1070,  1210,
     994,   883,     0,     0,     0,     0,     0,     0,     0,   935,
     926,     0,   933,   937,     0,     0,     0,   920,     0,     0,
     918,   947,   914,     0,     0,   948,  1174,     0,  1178,     0,
       0,  1033,  1042,   697,   693,   653,   590,   653,     0,  1369,
    1389,  1386,   565,   153,  1408,     0,   167,     0,     0,     0,
       0,   170,   184,   181,  1407,     0,     0,   594,   596,     0,
    1101,   604,   598,   646,   645,     0,   614,   681,   612,     0,
     687,     0,   555,     0,   541,     0,   715,     0,     0,     0,
       0,     0,   320,     0,     0,     0,   271,     0,   379,     0,
     386,     0,     0,   371,   352,    82,     0,     0,     0,    56,
     101,    74,    66,    52,    80,     0,     0,    85,     0,    78,
      95,    96,    94,    99,     0,   281,   306,     0,     0,   317,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1175,  1171,  1175,     0,     0,     0,   592,   588,   589,
    1003,   506,   507,   505,   234,   378,     0,   211,     0,   197,
     366,     0,  1282,     0,  1264,   404,     0,     0,   210,     0,
     208,   190,     0,   188,     0,   199,   369,     0,   344,   340,
     365,   338,   337,   339,     0,  1460,   227,     0,  1454,   369,
    1281,     0,     0,   457,     0,   451,     0,  1276,   828,   792,
       0,   846,   844,   793,     0,   791,   787,   795,   442,     0,
     465,   504,   509,   491,   496,     0,   502,   498,   497,   492,
     500,   499,   495,  1013,  1024,  1142,     0,     0,     0,     0,
     764,   767,     0,  1019,  1014,   738,     0,     0,   653,     0,
       0,     0,     0,   570,   569,   575,     0,     0,  1036,   733,
       0,     0,     0,   720,   710,   716,     0,     0,     0,     0,
     776,   775,   746,     0,  1164,  1160,  1073,  1075,  1112,  1199,
    1117,  1204,  1206,     0,     0,     0,  1067,   953,  1230,   887,
       0,     0,   917,  1159,   938,     0,     0,     0,   913,  1100,
       0,     0,     0,     0,     0,   922,     0,  1182,  1175,     0,
    1181,     0,     0,     0,     0,  1008,   698,   670,     0,   670,
       0,     0,  1406,     0,  1401,   145,   146,   147,     0,     0,
       0,   162,   139,     0,     0,   179,   167,   155,   602,   603,
       0,   597,   613,  1212,  1218,   540,     0,   991,     0,     0,
     537,     0,   131,   271,     0,     0,    63,     0,   388,   332,
     380,   363,   347,     0,     0,     0,   272,     0,   405,     0,
       0,   353,     0,     0,     0,     0,   333,     0,     0,   292,
       0,     0,   363,     0,   370,   288,   289,     0,    55,    75,
       0,    71,     0,   100,     0,     0,     0,     0,     0,    58,
      70,     0,    53,     0,   442,   442,    61,  1243,  1857,  1858,
    1859,  1860,  1861,  1862,  1863,  1864,  1865,  1866,  1977,  1867,
    1868,  1869,  1870,  1871,  1872,  1873,  1874,  1986,  1875,   278,
    1876,  1634,  1877,  1878,  1879,  1880,  1881,     0,  1882,   782,
    1883,  1884,  2062,  1885,  1085,  1086,   276,   277,   373,   273,
    1244,   274,   381,   275,     0,   376,   331,   127,  1288,     0,
     125,     0,  1286,   134,   132,   129,  1290,     0,     0,  1006,
    1007,  1004,   590,   485,   464,   216,     0,     0,  1459,     0,
       0,     0,  1567,     0,   211,   213,     0,   218,     0,   200,
     186,     0,  1282,   196,   366,     0,   396,   316,   391,     0,
    1459,  1457,     0,  1282,  1453,     0,   448,     0,     0,     0,
     788,   780,   412,   478,     0,   501,   975,     0,     0,     0,
       0,   629,     0,   635,   670,   574,   573,   572,   571,   652,
    1508,  1789,  1687,     0,   656,   651,   654,   659,   661,   660,
     662,   658,   669,     0,   672,   757,  1113,  1115,     0,     0,
       0,     0,   721,     0,   723,     0,   725,     0,   777,  1163,
    1207,  1208,  1203,     0,   884,   944,   942,   939,     0,   940,
     921,     0,     0,   919,   915,     0,   949,     0,     0,  1179,
       0,  1028,     0,  1031,  1045,  1041,  1040,  1036,  1003,  1036,
    1370,   563,   166,   143,   169,   168,     0,  1176,   176,     0,
       0,   167,     0,   171,   458,     0,     0,   552,   714,   545,
     546,     0,   384,    65,     0,   363,     0,   271,   349,   348,
     351,   346,   350,     0,   406,     0,     0,   290,     0,   297,
     335,   336,   334,   291,   363,   369,   293,     0,     0,     0,
      67,    57,    54,    59,    68,     0,     0,    69,    72,   778,
      84,    77,  1986,  1995,     0,     0,     0,     0,     0,  1173,
    1172,     0,   460,   467,   234,     0,   208,     0,   340,  1456,
       0,     0,   453,     0,     0,   366,   216,   214,     0,   206,
     191,     0,     0,     0,  1459,     0,     0,   268,     0,   313,
       0,   220,  1458,     0,     0,  1445,     0,     0,  1274,  1275,
       0,   466,   976,     0,   977,   768,     0,     0,   627,  1036,
       0,     0,     0,   663,   657,     0,  1035,  1037,     0,   624,
    1116,   717,     0,   719,     0,   743,   592,     0,   743,   726,
    1205,  1026,     0,   941,   945,   943,   923,  1175,  1183,  1175,
    1180,  1030,  1044,  1047,   672,  1228,   672,     0,     0,   154,
       0,     0,   151,   138,   156,  1102,   542,   543,     0,   271,
       0,   362,   385,   302,   280,     0,     0,     0,   287,   294,
     395,   296,     0,    76,    92,     0,     0,   375,   135,   133,
    1005,   485,     0,   202,  1282,   316,  1453,   450,     0,     0,
     208,   217,     0,     0,   204,   207,     0,     0,   340,   227,
    1455,   329,   322,   323,   324,   325,   326,   327,   328,   343,
     342,   314,   315,     0,     0,     0,     0,     0,   452,  1276,
       0,   173,   182,     0,   173,   978,   630,     0,   672,     0,
       0,     0,   655,     0,     0,   671,     0,   528,  1114,     0,
     709,   707,   590,     0,   708,     0,     0,     0,     0,   592,
     624,   624,   140,     0,   141,   177,     0,     0,     0,   369,
     387,   361,     0,   354,   300,   299,   301,   305,     0,   303,
       0,   319,     0,   312,   280,     0,    79,     0,   382,   459,
     463,     0,   270,  1447,   366,     0,   201,   215,   203,     0,
     209,  1453,   316,  1459,  1453,     0,  1450,     0,   449,     0,
       0,     0,   175,  1282,     0,   175,     0,   624,   665,     0,
     664,  1039,  1038,   626,   718,     0,     0,  1027,  1185,  1184,
       0,  1051,   527,   526,     0,     0,     0,     0,   395,     0,
     341,     0,     0,   302,     0,   295,   392,   393,   394,     0,
     308,   298,   309,    73,    91,   383,     0,   366,   205,  1448,
     269,   221,  1446,  1451,  1452,     0,   173,   172,   601,   174,
     773,   183,   601,   634,   529,   666,   623,     0,   724,  1046,
       0,     0,     0,     0,     0,   150,   773,   161,     0,   312,
     360,   355,   279,   304,   318,     0,     0,     0,   310,     0,
     311,  1453,     0,   175,   604,  1272,   604,  1775,  1509,  1743,
       0,  1063,  1052,  1063,  1063,  1043,   142,   149,     0,   271,
     284,     0,   283,     0,   372,   307,  1449,  1282,   601,   163,
     164,     0,  1056,  1055,  1054,  1058,  1057,     0,  1050,  1048,
    1049,   773,   389,   282,   286,   285,   773,   604,     0,     0,
    1060,     0,  1061,   160,  1273,   165,  1053,  1059,  1062
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3066, -3066, -3066,  1951,    95,    96,  -713, -1143,  -904, -1149,
   -3066,  -169,    97, -3066, -3066,   137, -3066,   916, -3066,   102,
    -635,   482, -3066,  1006, -3066, -3066,  2633, -3066,    98,    99,
    2053,  1996,  2250,  2974,   718,  -502,  -707, -1314,  -939,    20,
   -3066, -3066, -3066, -3066,  -692,   420, -1158, -3066,   342, -3066,
   -3066, -3066, -3066,  -259,    90, -3066,     8, -2120, -2801,  -615,
   -3066,  -719, -3066,  -358, -3066,  -661, -3066,  -873,  -671,  -706,
   -2700, -1108, -3066,  1532,  -410, -3066,   524, -3066, -2487, -3066,
   -3066,   514, -3066, -1117, -3066, -2185,   121,  -646, -2455, -2489,
   -2114,  -696,   204,  -653,   151, -2067, -1072, -3066,   540, -3066,
    -638, -3066,  -689, -2437,   101, -2691, -1629,    -7, -3066, -3066,
   -3066,  -534, -3066, -2463,   104,  1381, -2031,   105, -1623, -3066,
   -3066,  -594, -3066, -3066, -2738, -3066, -2352, -2669, -3066, -2603,
      10, -2036,   108, -3066, -3066,   109,    21,  -525,   224, -3066,
     113, -3066, -3066,  1307,  -770, -3066,  1353,   114,   872, -3066,
   -2479, -3066,  -459, -3066,  -499,  -495, -3066, -3066,    25,  -887,
    1296, -3066, -3066, -3066,    11, -3066,  -509, -3066, -3066, -2449,
   -3066,    22, -3066, -3066, -3066, -3066, -3066,  -439,   242, -3066,
   -3066,  -590, -2477,  -533, -3066, -2886, -2981, -3066, -3066,  -687,
   -2498, -1998,   115,   107,  1292,   118,   119, -3066,   259,   124,
   -1103,     9,  3439,   -44,   -18, -3066,   -12, -3066, -3066, -3066,
     585, -3066, -3066,    16,    67,  1633, -3066,  -992, -3066, -1631,
     758, -3066,  1779,  1781, -2157,  -685,   -68, -3066,   621, -1650,
   -2075,  -476,  1038,  1612,  1618,   364, -2909, -3066,  -574, -3066,
      36, -3066, -3066,   619,  1089, -1515, -1443, -3066, -2137, -3066,
    -486,  -369, -3066, -3066, -3066, -3066, -3066, -2428, -2795,  -463,
    1059, -3066,  1634, -3066, -3066, -3066, -3066,   131, -1421,  2735,
     662,    35, -3066, -3066, -3066, -3066,    91, -3066,   809,  -200,
   -3066,  2159,  -550,  -625,  1836,  -601,   110, -1786,    29,  2166,
     416, -3066, -3066,   426, -2038, -1465,   380,  -275,  1418, -3066,
   -3066,  -536, -1293,  -790, -3066, -3066,   -36,  -266, -3066, -3066,
   -3066,   632,   968, -3066, -3066,  1971,  3223, -3066,  -626,  3540,
      60,  -782,  1843,  -883,  1845,  -870,  -874,  -877,  1848,  1852,
   -1497,  4680,  -213,  3696, -2163, -3066,   935,   116, -3066, -1441,
       2, -3066, -3066, -3066, -3066, -2650, -3066,  -455, -3066,  -451,
   -3066, -3066, -3066, -1687, -3065, -1713, -3066,  -664,   784, -3066,
   -3066,   383, -3066, -3066, -3066, -3066, -1488, -3066,  5662,   686,
   -3066, -1959, -3066, -3066,  -912,  -662, -1059,  -951, -1251, -1310,
   -3066, -3066, -3066, -3066, -3066, -3066, -1120, -1750,  -424,   747,
   -3066, -3066,   827, -3066, -3066, -3066, -1701, -2046, -3066, -3066,
   -3066,   751,  1316,    74,  -652, -1592, -3066,   796, -2306, -3066,
   -3066,   384, -3066,  -475, -1074, -2361,  3127,    17, -3066,  2999,
   -2461, -3066, -3066,  -560, -2570, -1063,  -787, -3066,   125,  1183,
      28, -3066,   126,  1174, -3066, -3066, -3066,   128, -3066,   716,
     129,   541, -3066,   858, -3066,   612,   136, -3066, -3066,   106,
    2723,    12, -2919
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    46,    47,    48,   572,   573,  1794,  1743,  1524,  1180,
    1733,  1430,   574,  2531,  2532,  2533,  2180,  1161,  3286,  2181,
    1162,  1163,  2535,    52,    53,    54,   108,  1191,   575,   576,
     515,   623,  1052,   625,  1053,  1566,   725,  1268,  1269,   577,
    2235,  3074,  2629,  3075,  2321,  2229,  1440,  2315,  1854,  1773,
    1441,   521,  1868,  2630,  2574,  1855,   578,  2520,  2858,  3279,
    2546,  3424,  2794,  2795,  3276,  3277,  2523,  2183,  3350,  3351,
    2605,  1725,  3345,  2258,  3219,  2187,  2168,  2796,  2266,  3171,
    2906,  2184,  2776,  2259,  3272,  1807,  2260,  3273,  3027,  2261,
    1770,  1798,  2524,  3352,  2188,  1771,  2519,  2859,  1713,  2262,
    3283,  2263,   532,  2780,   579,  2608,  1334,   517,   506,   507,
     815,  1271,  1312,  1272,   580,   745,  1804,   581,  1325,  1784,
      62,  3204,  3205,  3206,  2899,  2249,  2250,  2897,  3088,  2590,
     582,  1795,   583,  2592,  2593,   584,   585,  1098,  2476,  2102,
     586,   564,   565,   834,  1374,   566,   816,   587,  1416,  1417,
     842,    69,   691,  1432,   588,  1433,  1434,   930,    70,  1525,
     932,   933,    71,    72,   590,  3109,  2919,  1340,  1808,  2271,
     533,   591,  2741,  2104,  2479,  3268,    75,  3008,  2107,  1122,
    3011,  3232,  2734,  3006,  2480,  3312,  3368,  3009,  2108,  2109,
    3233,  2110,   592,   640,  1523,   593,   594,   995,  1969,   595,
    1716,   596,  1054,    82,    83,   968,    84,  3021,    85,    86,
    1691,  1692,  1693,   670,   682,   683,  2100,  1496,  1938,   675,
    1126,  1660,   657,   658,  2225,   699,  1765,  1655,  1656,  2113,
    2487,  1684,  1685,  1135,  1136,  1926,  3247,  1927,  1928,  1489,
    1490,  3118,  1672,  1676,  1677,  2134,  2124,  1663,  2390,  2944,
    2945,  2946,  2947,  2948,  2949,  2950,  1055,  2668,  3129,  1680,
    1681,  1138,  1139,  1140,  1689,  2144,    88,    89,  2085,  2463,
    2464,   629,  2961,  1513,  1694,  2672,  2673,  2674,  2965,  2966,
    2967,   630,   963,   964,   987,   982,  1503,  1946,   631,   632,
    1903,  1904,  2359,   989,  1940,  1956,  1957,  2680,  1824,   817,
    2169,  1529,  1377,   819,  1056,   820,  1352,  1057,  1356,   822,
    1058,  1059,  1060,   825,  1061,  1062,  1063,   828,  1348,  1064,
    1065,  1367,  1396,  1397,  1398,  1399,  1400,  1401,  1402,  1403,
    1404,  1109,  1695,  1067,  1068,  1069,  1070,  1071,  1072,   634,
    1073,  1074,  1614,  2079,  2462,  2954,  3126,  3127,  2725,  2996,
    3153,  3259,  3383,  3411,  3412,  3438,  1075,  1076,  1560,  1561,
    1562,  1979,  1980,  1981,  1982,  2073,  1608,  1609,  1077,  2863,
    1611,  2000,  2957,  2958,  1110,  1482,  1553,  1314,  1315,  1530,
    1456,  1457,  1463,  1878,  1471,  1475,  1908,  1909,  1483,  2041,
    1078,  1975,  1976,  2413,  1538,  1079,  1193,  1565,  2720,  2076,
    1612,  2035,  1086,  1080,  1087,  1082,  1549,  1550,  2424,  2692,
    2693,  2006,  2141,  1643,  2146,  2147,   838,  1083,  1084,  1085,
    1316,   510,   831,  3369,  1408,  1115,  1317,  2031,   597,   101,
     598,    92,   599,  1105,   679,  1106,  1108,   600,   651,   652,
     601,   664,   665,  1526,  1628,  1527,   602,    97,  1149,   653,
     671,   603,  3105
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     505,   687,   724,  1179,   835,  1081,   983,  2116,    58,    80,
      63,    73,    98,  1363,   505,   700,    87,  1273,  1111,  1145,
      57,    66,    74,   635,   509,  2083,   818,  1369,    91,  1429,
    1747,  1905,  1320,  1757,    87,  1746,  1712,   928,   509,  1474,
    1644,  2492,  1528,   589,  1323,   669,  1435,  2465,  1814,  2467,
    1722,  2525,  1718,  1960,  1419,  1999,  1646,  1762,  2217,  1449,
    2482,  2564,  2565,  2566,  1410,  1453,   673,  1413,  1452,   704,
    1818,   844,  1451,  2018,  2019,   705,   929,   965,   505,   505,
    1751,  1181,   986,  1185,  2861,  1189,  2864,   635,   635,  1618,
     837,  2887,  2446,  1836,  1621,    49,    50,    51,    55,    56,
    2518,    59,   509,   509,    60,    61,   710,  2481,    64,    65,
    1558,   685,  2907,    67,    68,    76,  2691,  2575,    77,    78,
     701,   702,   960,   508,    79,    90,    93,  2910,    94,    95,
     934,   641, -1221,  2889,   718,  1556,    96,   633, -1846,   666,
    1349,  1350,  2755,   519,  2895,  1882,  2760,  -851, -1240,  2241,
    1884,  2236,   627,  -511, -1846,  2391, -1237, -1237,  2362,  3311,
    2136,   637, -1986, -1986,  -514, -1837,  -843,  1361,  2400,  1123,
    1097, -1854,  1007, -1977, -1977, -1241, -1240,  -851,  -848, -1995,
   -1995,   637,  -848, -1238, -1238,  1007,  2594, -1837,  1625,  1574,
   -1846, -1854, -1241,  -810,  1576,  -823,  -838,  3079,  1007,  1100,
    2087,   633,   633,  2579,  2033,  2526,   637,  3097,   637,  1093,
   -1972, -1972,  2583,  2411,   637,  1714,   627,   627,   692,  3101,
     677,  1714,  2033,  1134,  1584,  2885,  1749,  3087, -1997, -1997,
       3,     4,  2553,  2675,  2139, -1083,  1137,  1371,  1371,  2149,
    3395,  2070, -1104, -1083,  1371,  3031,  1622,  1423,   637,  2071,
   -1104,  -511,  1007,  1273,  1723,  1723,  1586,  1369,  2636,  2638,
      21,  2641,  -514,  1731,  2601,  3187,  1734,  1735,  3266,  3014,
     637,  1423,  -468,   753,  1723,   695,  1007,  3293,  1444,   697,
    1371,  1664,  3076,  1343,  -234,  1469,  1723,  -647,  2054,  -234,
    2374,  3380,  1811,   697,  3065,  2372,   821,  3174,  3224,  2997,
     966,  2999,  3387,  2385,  2386,  2387,  3225,  2911,   693,  2728,
    3121,  2343,  2527,  3444,   605,  1723,  3098,  2233,  1458,  2798,
    1344,   102,  1882,  2521,  1760,  1665,  1883,  1884,  2727,  -783,
    2729,  3099,  2769,  1761,  3372,  2166,  2111,  3046,  3193,  1661,
    3042,  2658,  3431,  2375,  1574,   696,  3028,  3154,  3315,  3156,
    3274,  3332,  3333,  3004,  3433,  2778,  1623,  2223,  2748,  3260,
    3048,  3261,  1101,  1574,  1102,  3040,   722,   107,  3053,  1500,
     723,  1741,  1736,  2457,  2547,  1507,  1730,  1745,  1752,  1584,
    2647,  2779,  3359,  3456,  1552,  3362,  3064,  2548,  1349,  1350,
    1273,  3005,  2799,  2167,   986,  1742,  2768,  1755,  2080,   928,
      25,    26,    27,  3210,  1361,  1574,   965,  2055,  3374,  1575,
    1576,  1586,  3275,  1922,  1574,  3092,  2751,  2112,  1575,  1576,
    3029,   697,  3428,  1882,  2056,  2749,  2142,  1883,  1884,  2057,
    1586,  2917,    21,  1648,  -667,  1437,  -511,   967,  2552,  3041,
    1584,  1667,  3381,  3317,  1922,  1662,  2518,  -514,  2518,  1584,
     606,  2344,   540,  3091,  2522,  1724,  1724,   784,   928,  2688,
    -783,  2345,  3296,  1094,  3103,    32,  1156,  2058,  2912,  3238,
    3226,  3382,  1586,  3445,  2800,  1724,  1973,  3388,  1469,  1624,
    3403,  1586,  3426,  3200,  2376,  1700,   103,  1724,  1721,  2373,
    3267,  1696,  1697,  2404,  3185,  3292,  1345,   104,  3043,  1763,
    1853,  1153,    37,  1668,  -511,  1703,  3119,  1154,  1544,  3434,
    2150,  2675,  2222,  1963,  1737,  -514,  1724,  2224,  3100,  1721,
    1721,  2934,  1738,  2305,  1372,  1372,  2528,   687,  2529,   727,
    2648,  1372,   105,  3297,  3163,    39,  1095,   821,  3390,  1721,
    2143,  1974,  3086,  1848,   694,  2081,    42,  1130,  1007,  1001,
    1564,  1721,  2571,  2572,  3420,   814,  1750,   678,  2530,  2903,
     928,   928,  2554,  1999,   927,  2034,  3396,  1372,  2925,   698,
    3169,  2234,    25,    26,    27, -1971, -1971,   754,   687,  3032,
    1721,  2915,   106,  2448,   722,  2645,    87,  2161,   723,  3179,
    1649,  3195,  2469,   520, -1083,  1647,   931,  1706,    45,  3073,
    2072, -1104,  3360,  2861,   505,  2864,  2669,  2136,  1155,  1346,
    3346,  1364,  3361,   635,   992,   505,  3175,  1347,   604,  2059,
    -511,  2584,   830,  1132,   635,   993,  2597,  2490,   509,  1764,
     722,  -514, -1221,  1365,   723,  1899,  1146,    32, -1846,   509,
    1801,  1364,  2896,  3022,  2030,  1747,  1541,  1366, -1240,  1639,
     505,   505,   704,  1103, -1846,  3166,  2575,   957,   705,  -511,
    3167,  -511,  1541,  1365,  3140, -1837,  -843,  2293,  2086,  1698,
    -514, -1854,  -514,   505,    37, -1241, -1240,  1368,  -848,  1607,
    2495,  1569,  1699,  1373,  1409,  3055,  3056, -1837,  2484,  1552,
   -1846, -1854, -1241,  1351,  2311,  1355,  -838,    58,    80,    63,
      73,    98,  1539,  1104,  1099,    87,  1619,    39,  2088,    57,
      66,    74,  2222,   938,  2963,   505,  1270,    91,    42,  1311,
     954,  3302,   655,  1099,   941,  3071,  1412,   633,   821,  1153,
    3303,  1323,    43,  1815,  1816,  1154,  1467,  1353,   633,  1427,
    1428,   639,   639,   636,  3347,  3291,  3013,  1741,  1112,  2659,
    2660,  2661,  2662,   956,  1708,  1124,    44,  3421,  2335,  1362,
    2098,  2458,  1156,  1427,  1428,   666,   666,  1714,   666,  3336,
      45,  1742,  1511,   729,  2166,   730,  -234,  -234,  1715,  2736,
    2182,   674,  2186,  2099,    49,    50,    51,    55,    56,  2363,
      59,  3015,  1791,    60,    61,  1405,   814,    64,    65,   680,
    1469,  1469,    67,    68,    76,  2887,  1469,    77,    78,  1896,
    1897,  1898,  1899,    79,    90,    93,  1914,    94,    95,  3077,
     656,   818,  1158,  1512,  3095,    96,   721,  3348,  2772,  2196,
    1130,  1723,  2515,  2737,  1311,  1131,  1155,  1825,    99,  2199,
    1929,  3422,  2202,  1850,   741,   688,   835,  2370,  1007,  1838,
    2438,  1723,  2274,  1125,  1159,  1842,  1949,  1273,  2015,  1273,
    2877,   522,  2878,   830,  3370,  3449,   689,  3402,  3092,  2493,
    3423,  1709,  1972,  1552,  1007,  3096,  2861,  2439,  2864,   690,
    1497,   969,  2002,   742,  2370,   100,   970,  2529,   928,  1776,
    1602,  1603,  1604,  1605,  1606,  1607,  1658,  1364,   706,  1130,
     821,  1604,  1605,  1606,  1607,  2016,  1132,  3172,  1894,  1895,
    1896,  1897,  1898,  1899,   637,  2773,  1905,  2811,  2586,  1365,
    1714,  1664,  1846,   726,   523,  1160,   927,   929,  1777,  2421,
    1999,  1717,   505,   505,  2698,  1920,  1839,  2379,   505,  3450,
     749,   505,   505,   971,   505,   505,   505,   505,  2297,  2314,
      87,  2082,   733,  1133,  2556,  2300,  2302,  2303,  2299,  2301,
     505,  3159,  2298,  3083,  1564,  1665,  2316,   505,   744,   635,
    2567,  1497,  2324,  3186,  2560,  1132,   635,  2325,  3446,  2774,
    1837,  2775,  1353,  2042,   509,   927,  1311,   814,   746,  2619,
    1156,   509,  1381,  1382,   750,  2440,  2623,  1362,  2625,  1469,
    2441,  1491,  1494,   687,    21,  1364,   505,   739,   751,  1504,
    2043,   972,   972,  1779,  1387,  1388,  2194,  2988,  3287,  1515,
    1141,   522,  1133,  1519,   505,  1837,  2036,  1365,  2470,  3451,
    1666,  2471,  1724,  2326,   752,   505,   505,   505,  2020,   505,
     505,  1366,  1270,  2281,  1364,  1747,  1157,   973,   973,  3270,
    1158,  1321,  1724,  1913,   830,  1915,  1916,  1419,  1166,  2490,
    1387,  1388,   821,  1498,   974,  2304,  1365,  2158,   755,  2306,
     505,  2501,  2308,   975,   975,  2218,  2219,  2220,  1167,   740,
    1368,  1667,  1159,   633,   523,  1505,  2562,   927,   927,  1510,
     633,   821,   821,  2246,  2195,  3325,  1721,  2563,   627,  3148,
    2555,   527,   972,   528,   756,   627,   976,   821,  1652,  1653,
    3149,  1659,   757,  2205,   705,   705,  1721,   705,  2212,  -591,
     841,   505,  1168,  2044,  -591,   505,   505,  1142,  2045,   531,
    1391,  1392,   939,  2046,  2707,   505,   505,   505,   973,   731,
     505,   732,  1923,  1668,    25,    26,    27,  1924,  2278,  1099,
    2442,   977,  1627,  1160,  1506,  1535,  2602,    45,   978,   814,
    1153,  2443,  2610,  2782,   975,  3201,  1154,   722,  2323,  1556,
    3202,  1563,  2327,   741,  2170,  2329,  1391,  1392,   722,  2197,
   -1221,  3452,   723,  2380,  2200,  2381,  2074,  2930,  1421,   109,
    2075,  1422,   518,   941,   823,  -591,  3211,   979,   979,   567,
    1088,  1089,  1637,  1091,  2785,  1638,  2382,  1843,  2383,    32,
    1844,  1748,   742,   940,   654,  1169,  1499,   980,   667,  1469,
    1469,  1469,  1469,  1469,  1469,   942,   830,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,   945,  2182,  2182,
    2182,  1962,  -591,   948,  1963,  1964,    37,   743,  1965,  3212,
    2230,  1880,  1881,  2231,   949,  2368,  2282,  1901,  3213,  1965,
     950,   527,  1999,   528,  1170,   959,  2289,  1155,  1311,  2290,
    2291,  2318,  1171,  2290,  2319,  2356,   951,  1311,  2357,    39,
    3214,   991,  2402,  2047,  1172,  2403,   981,  2288,   979,   531,
      42,  1143,  2405,  2543,  2048,  2403,  2544,   744,   988,  3442,
    2549,  1311,  1006,  2550,  2540,  1882,  2542,  1499,   821,  1883,
    1884,  1359,  1360, -1999, -1999, -1999,  1173, -1968, -1968,   928,
    2670,   814,   936,  2677,   639,  2613,  1000,  2682,  1963,  3429,
    2403,  3430,  3405,  1783,  2330,  1785,  1786,  1787,  2743,  2929,
    2902,  2744,    45,  2231,   505,   999,  2336,  2264,  3417,  2265,
     814,   814,  3215,  2923,   990,  2931,  2924,  2979,  2932,  3177,
    1965,   996,   997,   998,  2789,  3216,   814,  1175, -1969, -1969,
    1469,  1469,  3455, -1970, -1970,  3114,  2364,  2436,  1965,  1090,
    1853,  2809,  3115,  2369,  3143,  2403,  2802,  1965,   830,  1001,
    3150,  3160,  1176,  1963,  3161,  3194,  2978,  2766,  2231,  3235,
    1270,  2466,  1965,  3453,  2537,   952,  2539,  3313,  3454,   953,
    3314,  1178,  2790,  3340,  1002,   927,  3341,   830,   830,  2401,
    2801,  1156,  2810,  2401, -1973, -1973,  2631,   928,  2791,  2407,
     954,  2883,  1270,   830,   994,   823,  1153,    87,   505, -1974,
   -1974,  2765,  1154,  2767,   821,  1092,  3256,   931,  3257,  3386,
    3427,  1107,  3314,  3314,  1127,  1096,  1129,   505,   505, -1975,
   -1975,  1113,   522,   505,  1114,   505, -1976, -1976, -1978, -1978,
     505,   505,   505,   505,   635, -1979, -1979,  1183, -1980, -1980,
    1116,  1158, -1981, -1981,  1469,   505,   505, -1284,  1117,   509,
    1120,   505, -1982, -1982,   505, -1983, -1983,  1121,  2504,   505,
     635,   505,   505,   635,  2621,  2622,  1128,   505,   635,  1147,
    1556,   635,  1148,  1184,  1150,   509,   635,  1151,   509, -1984,
   -1984, -1985, -1985,   509,  3392,   523,   509,   505,   505,  2792,
     824,   509,   505,  1941,   505,  1152,  1943,   505,  2793,  1164,
    1970,  1947,  1165,  1155,  1950,  1182,  2582,    87,  1186,  1954,
    1190,  1966,  1967,  1968, -1987, -1987,  1270,   821,  1318,  1971,
     505,  3217,   505,  1319,  3218,  2083,  1328,   814,   505,   505,
     505,   505,   505,   505,   505,   505,  1270,  2245,  2490,  1890,
     505,   505, -1988, -1988,  1160,   505, -1989, -1989,   633,   505,
   -1990, -1990,   505,   505,   505,   505,   505,   505,   505,   505,
     505, -1991, -1991,   505,   821,  2182, -1992, -1992,  1324,  2865,
     505,  2186,  1311,  1326,   633,  1329,   821,   633,  3113, -1994,
   -1994,  1327,   633, -1996, -1996,   633,   823, -1998, -1998,   627,
     633,  1339,   627,   505,   830,  1766,  1767,   627,  2137,  2138,
     627,  1341,  2118,  2856,  1342,   627,   821,  3023,   705,  -642,
    -642,  1431,  1351,   821,  1389,  1390,   505,  1347,  1391,  1392,
    1447,   739,  2809,  1104,  -646,  -646,  1354,   505,   505,  3234,
    2337,  2338,  2339,  2340,  2341,  2342,  -645,  -645,  2346,  2347,
    2348,  2349,  2350,  2351,  2352,  2353,  2354,  2355,  1357,   821,
    3019,  3020,  1355,   821,  3413,  3414,  1358,  1156,  1370,   821,
    3439,  3440,   527,   814,   528,  1375,  1631,  1633,  1166,  1522,
    1431,  1376,  1270,  1378,  1270,  1406,  1411,  1407,  3404,  1414,
    1415,  2170,  3406,  1420,  1438,  3072,  1439,   530,  1167,  1442,
     531,  1445,  1472,   740,  1485,  1487,  1488,  1495,  1501,  1508,
    1509,  1502,  1518,  1514,  1520,  1531,  1532,  2628,  1534,  -814,
    -821,  1539,   505,  1187,    45,  1153,  1311,  1158,  -667,   505,
     505,  1154,  -668,  -811,  -812,  1543,  -815,  1544,  2990,  -813,
     830,   824,  1168,  2803,  1568,  2015,  1548,  1557,  3447,   928,
    1567,  2804,  1613,  1570,  1469,  1469, -1999, -1999, -1999,  1188,
    1894,  1895,  1896,  1897,  1898,  1899,  1311,  1615,   823,  1629,
    1645,  1620,  1617,   505,  1640,  1641,  1650,  1651,  2268,  1131,
    1626,  1133,  1431,  1431,  1153,  1686,   814,  1688,  1701,  1726,
    1154,  2433,  2434,  1720,  1690,  1719,  3234,  1776,  1727,  1721,
    1270,  1732,  1739,  1728,  1740,  1744,  1754,  1311,   505,  2805,
    1768,  1759,  1772,  1781,  1782,  1799,   927,  1788,  1153,  1793,
     695,  2490,  1796,  2759,  1154,  1797,  1803,  1800,  2922,  1809,
    1160,  1810,  1155,   814,  -592,  1169,  1777,   505,   505,  -592,
     505,  1802,  1007,  3234,  1817,   814,   505,   505,   505,   505,
     505,   505,  2882,   830,   505,   505,   505,   505,   505,   505,
     505,   505,   505,   505,  1819,  1820,  2891,  1837,  3051,   505,
     505,  1778,  1827,   505,  1828,   814,  1831,   522,  1832,  1833,
     505,  1834,   814,  2913,  1170,  1845,  1874,  1910,  1942,  1921,
     696,  1155,  1171,  1871,  3234,  1939,  1873,  1876,  1879,  1902,
     830,  3191,   505,  1911,  1172,   505,  2806,   505,  1918,  1948,
    -592,   505,   830,  1953,   635,  1951,  1952,  1958,   814,  1961,
     635,  1779,   814,  1574,   927,  1155,  1311,  1974,   814,   509,
     823,  2005,   824,  2008,  2011,   509,  1173,   505,  2032,  2010,
     523,  2013,   830,  2012,  2050,  2039,  2051,  2392,  2053,   830,
    2077,  2078,  1469,  2395,  2084,  2101,  2096,  -592,   696,   823,
     823,   821,  2097,  2267,  2117,   687,   697,  2126,   505,  2127,
    2114,  2128,  2129,   505,   505,   823,  2130,  1469,  2131,  2148,
    2152,  2862,  3136,    21,  2153,   830,  1156,  1175,  2156,   830,
    2163,  2159,  2164,  2165,  2232,   830,   697,   505,   505,  2228,
    2237,  1556,   505,  3289,  2238,  2251,   676,  2631,  2253,  2248,
    2254,  2255,  1176,  2269,  3060,  3061,   505,  2270,  2272,   505,
    2275,   505,  2276,  2277,  2279,  2283,  2280,  1363,   633,  2286,
    3250,  1178,  2284,  2807,   633,  2287,  2808,   505,  1270,  2295,
    2285,  2296,  2157,   627,   505,  1156,  1158,   505,  2307,   627,
    2320,  2328,  1907,  1882,  2358,  1906,   635,  2389,  2921,  2365,
    2396,  2366,  2367,  2417,   505,  2453,  2371,  1321,   713,  2377,
     716,   509,   720,   635,  1322,  2378,  2394,   505,  1159,  1156,
      10,  2408,  2409,  2416,  2418,  2419,  2432,  2420,   509,  2968,
    2437,  1469,  2472,  2430,   505,   505,  2444,  2461,  2454,  2459,
    2460,  2203,  2473,  2475,   824,  1158,  2477,  2478,  2483,  2485,
    2486,   505,  -648,   505,   698,  2496,  2497,   527,  2499,   528,
    2503,  2500,   505,    25,    26,    27,  1852,  2507,  2508,  2509,
    1522,  2513,  2856,  2514,  2511,  2210,  2517,  2204,  2536,  1158,
    1270,  1270,  1270,  1721,  2538,   531,  2551,  2557,   821,  1160,
    2568,    21,  1573,  2558,  2559,  1574,  2570,  2580,  2569,  1575,
    1576,  2581,  2585,  1747,  2589,  2599,  2600,  2603,  2587,   969,
     633,  2211,  2604,  2607,   970,  2611,   823,   687,   505,  2616,
    2618,  2635,  2626,  2627,  1311,   627,  2643,   633,    32,  2646,
    1584,  2649,  2666,  3037,  2653,  2652,  2667, -1999,  2654,  2655,
    2678,  3271,   627,  2679,  2685,  2711,  2712,  2689,  1160,  2703,
    2695,  2705,  2718,  2724,  1783,  2706,  1785,  1786,  1787,  2733,
     814,  2726,  1586,  2709,  2730,    37,  2719,   504,   516,  2752,
    2756,   971,   537,  1469,  2764,  2797,  2770,   537,   505,  2813,
    -523,   624,  1160,   638,   638,  2754,  2750,  3059,   642,   537,
     650,   821,  2771,   650,  -523,  2777,   668,   672,    39,  -523,
     672,  2879,  2880,   537,   537,  2881,   824,  2886,  2890,    42,
    2898,  2905,  2900,  2901,  2909,  2904,   927,  2918,  2927,  2933,
    2920,  2231,  1270,    43,  2928,  2435,  2953,   830,  2955,  2959,
    2964,    25,    26,    27,  2970,   824,   824,  2971,  3003,  3016,
     972,  2991,  2998,  3001,  3010,   624,   624,    44,  3012,  3026,
    -523,   824,   823,  3030,  3017,  2089, -1999,   668,  3018,  3180,
     505,    45,   672,   537,   672,   672,   672,  3024,   821,   635,
    -523,  3025,  3034, -1999,  3035,  3047,   973,  3036, -1999,  3044,
    3049, -1237,  3050,  3054,   509, -1967,   522, -1968,   687,  3066,
   -1969, -1970,   974,   821,  3067, -1971,    32, -1972, -1973,   505,
     928,  2721,   975, -1974, -1975, -1976, -1978, -1979, -1980,  3068,
    3078, -1284,  3271,  1446,   505,   637, -1999,  -523,   505,   505,
     687, -1981,  3069,  2676, -1982,   505,  -523, -1983,  3379,  3080,
    3084, -1984,  3070,    37,   976,   505,  3085, -1985,   505, -1987,
     505, -1988, -1989,  2926, -1990,  2856, -1991,   814,   505,   523,
     821,   505,   505,    38, -1992,  1144,   505,   505, -1993,  2895,
   -1994,  3252,  2015,   505, -1995,   823,    39, -1996,  3239,  1595,
    3241,  2758, -1997, -1998, -1238,  3089,  1469,    42,   505,   977,
    3102,  3104,  3106,   633,  3107,  3110,   978,  3116,   505,  3117,
    3249,    43,  1970,  3124,  3120,  3122,  3128,  3134,  2742,    87,
    3130,   843,  3131,  1966,  1967,  1968,  3135,  3137,   505,  3142,
    3157,  1971,   823,  3162,   830,    44,  3158,  1379,  1380,  3165,
    3251,  3170,  3168,  3254,   823,  3182,   979,   728,  3183,    45,
    3199,   735,  3190,  3192,  3207,   738,  3221,  3208,  3222,  3223,
    2862,  3236,  3237,   826,  3240,   980,  3243,  1270,  3253,  3244,
    2860,  1270,   824,  1270,   823,  3258,  3278,   821,  3246,  3043,
    3282,   823,  3284,  3285,   505,  3288,   505,  3298, -1999,  3299,
    3294,  3306,  3300,  3305,  -523,  3342,   525,  3307,  3311,  3316,
    3318,  1431,  3039,  3338,  3331,  3320,  2994,  2322,  3323,  3324,
    3328,   821,  3330,  3329,  1381,  1382,  3337,   823,  3335,  3344,
    2888,   823,  1783,  3349,  1785,  1786,  1787,   823,  3339,  3356,
    3355,  3326,  3357,  3363,   981,  3364,  3384,   830,  3365,   947,
    3394,  3373,  3397,  3375,  3377,  3378,   527,   814,   528,  3399,
    2914,  3415,  3418,  2916,  3395,  3396,  3432,   687,   969,  3437,
     722,  3443,  3448,   970,   723,   529,  3457,  3458,  3057,   505,
    1118,   530,   814,  2190,   531,  2093,  2816,   541,  1383,  1384,
    1385,  1386,  1387,  1388,  2534,  2576,  1389,  1390,   937,   505,
     505,  2632,   821, -1999,   505,  3111,  2884,   505,  2812,  3353,
    1602,  1603,  1604,  1605,  1606,  1607,   505,  3425,   824,  1431,
    3178,  3400,  3393,  3419,   830,  1711,  3220,  1119,   505,  2516,
     971,  2676,  2541,   505,   505,  3391,   687,  3398,   505,   814,
    3389,  2866,  2512,   505,  1780,  3358,   505,   505,  2746,   830,
    1813,   505,  1311,  1835,  3112,   505,  2309,  2782,  1847,   505,
    3309,  2908,  3265,  2783,  3371,  2745,   505,  2781,   635,   724,
    3334,  3441,  2731,  2502,  1869,  2488,  2784,  2155,  1331,  1333,
    1336,  1338,  2657,   509,  1166,  1492,  1642,  1493,  1683,  3376,
    2498,  3367,  2123,  1682,  3319,  3242,   628,  2154,  2785,   972,
    2786,  1494,  2399,  2474,  1167,  2962,   830,  3139,  1391,  1392,
     505,   672,  1687,  2651,   826,   672,   737,   944,   505,   672,
    1459,   958,  2650,  2681,  3184,  1448,   537,  1450,  2317,  3322,
    1454,   824,  3321,  1826,  1455,   973,  2428,   505,  1166,  2687,
     821,  2491,  2412,  2862,  2451,  2449,   814,  3002,  1168,  1930,
    2429,   974,  2092,  2697,   833,   537,   537,   969,  1167,  2406,
     711,   975,   970,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   824,     0,
    2860,     0,   633,     0,     0,     0,     0,  2787,     0,     0,
     824,     0,     0,   976,   935,   516,   638,   627,     0,     0,
       0,   504,  1168,   672,     0,     0,     0,     0,     0,     0,
       0,     0,   624,   830,  1944,  2805,   962,   962,     0,   971,
     824,   962,   985,   505,     0,  1393,  1394,   824,     0,   823,
       0,     0,     0,     0,     0,   650,   650,   650,   977,   687,
       0,  1169,  2545,     0,     0,   978,     0,   830,     0,   650,
     650,     0,   650,  2788,  3094,     0,     0,   927,  2789,     0,
     505,   814,     0,   824,     0,   672,     0,   824,     0,     0,
       0,   537,     0,   824,     0,     0,   505,     0,     0,     0,
       0,   672,  1461,     0,   672,   979,     0,  2573,   972,     0,
    1170,     0,     0,     0,     0,  1169,  1311,     0,  1171,     0,
       0,     0,     0,   505,   980,   826,  2790,     0,     0,  2591,
    1172,     0,     0,     0,   505,   505,     0,     0,   505,     0,
     505,     0,  2791,     0,   973,     0,   538,     0,   830,     0,
       0,   538,   672,   672,   672,   672,     0,     0,     0,     0,
     974,     0,  1173,   538,  1170,   505,     0,     0,     0,     0,
     975,     0,  1171,     0,  1983,     0,     0,   538,   538,     0,
       0,  1984,  1985,     0,  1172,  1986,  1987,  1988,     0,   505,
       0,  1431,     0,   981,     0,     0,     0,     0,  1945,  2633,
       0,  2634,   976,     0,     0,  2639,     0,  2642,     0,     0,
       0,     0,     0,  1175,     0,     0,  1173,     0,  1006,  2860,
       0,  1882,     0,     0,     0,  1883,  1884,     0,     0,  1885,
    1886,  1887,     0,   821,     0,     0,   823,   538,  1176,     0,
       0,     0,     0,  2792,     0,     0,  2700,   977,     0,  3196,
    3197,     0,  2793,     0,   978,     0,     0,  1178,     0,   505,
       0,     0,     0,   505,     0,     0,     0,  1175,     0,     0,
       0,     0,   635,   505,     0,   505,     0,   505,     0,     0,
       0,   505,  -523,   505,     0,   505,   830,   509,     0,     0,
       0,     0,  1176,     0,   979,   505,  -523,   826,     0,   539,
     505,  -523,   505,     0,   568,     0, -1731,     0,  1702,     0,
     505,  1178,     0,   980,     0,     0,   643,     0,     0,     0,
       0,  1729,     0,  1270,     0,     0,     0,  3262,   505,  3264,
     684,   684,     0,     0,     0,     0,     0,     0,     0,   823,
       0,     0,  1753,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -523,   962,   985,     0,   672,     0,     0,  1466,
       0,     0,     0,     0,     0,   962,   962,     0,     0,     0,
       0,   537,  -523,     0,     0,     0,  3301,   624,     0,     0,
       0,     0,   981,   505,   624,   824,   633,     0,     0,     0,
     714,     0,  3304,   505,   537,     0,  3308,     0,     0,     0,
       0,  1521,     0,     0, -1731,     0,   505,     0,     0,     0,
       0,  1533,     0,     0,     0,     0,   823,     0,     0,  -523,
     505,     0,     0,     0,     0,  2857,     0,  1889,  -523,   635,
       0,     0,     0,     0,     0,     0,     0,     0,   505,     0,
       0,   823,     0,     0,   509,     0,     0,     0,     0, -1731,
       0,  2489,     0,   522,  2573,     0,     0,     0,     0,   826,
       0,   537,     0, -1731,     0,     0,     0,   505, -1731,     0,
       0,     0,     0, -1731,     0,     0,   635,  1774, -1284,     0,
       0,     0, -1731,   505,     0,  1792,     0, -1731,   826,   826,
       0,   509,  2860,     0,  1270,  1890,     0,     0,   823,     0,
       0,  1856,     0,     0,   826,     0,  1634,     0,     0,  1636,
       0,     0,     0,     0,     0,     0,   523,     0,   505, -1731,
       0,     0,     0,   537,   537,  3401,     0,   635,     0,     0,
     672,     0,     0,   505,   505,   505,     0,     0,     0, -1731,
       0,     0,   509,   633,     0,     0,  1857,     0,     0,     0,
       0,     0,  1466,  3416,  1620,     0,     0,     0,     0,   830,
     505,     0,   672,  1710,     0,  1858,     0,     0,   524,     0,
       0,     0,   824,     0,     0,   672,  -523,     0,     0,     0,
       0,     0,     0,  1859,     0,     0, -1731,  1860,     0, -1731,
     633,     0,   672,     0,     0, -1731,   672,     0,     0,    81,
    1756,   505,     0,     0,     0,   823,     0,     0,  3000,  1861,
       0,     0,  1862,     0,     0,     0,     0,    81,     0,     0,
     626,     0,     0,     0,     0,     0,     0,     0,  1863,     0,
       0,     0,     0,  2738, -1731,    81,     0,     0,     0,   823,
       0,   633,   722,   525,   686,  1116,   723,     0,     0,     0,
     526,  1937,     0,     0,     0,     0,     0, -1731,  1989,  1990,
    1991,     0,  1992,  1993,  1994,  1995,  1996,  1997,     0,     0,
     538,     0,     0,     0,     0,   824,     0,     0,     0,     0,
       0,     0,     0,     0,   626,   626,   703,    21,     0,     0,
       0,     0,     0,   527,     0,   528,    81,     0,     0,   538,
     538,     0,  1891,  1892,  1893,   826,  1894,  1895,  1896,  1897,
    1898,  1899,   529,     0,     0,   674,     0,     0,   530,  1864,
     823,   531,     0,     0,     0,     0,     0,  1865,     0,  1769,
       0,   672,  1775,     0,     0,     0,     0,  1789,     0,   672,
       0,     0,     0, -1731,     0,     0,     0,     0,     0,  1866,
    1806,     0,   824, -1731,  1153,     0,     0,     0,     0,     0,
    1154,     0,     0,     0,     0,     0,     0,     0,  1166,     0,
   -1731,     0, -1731, -1731,     0,  1867,     0,   824,     0,  3090,
    1823,     0,     0,     0,     0,  1823,     0,     0,  1167,     0,
       0,     0,     0,  2091,     0,  2094,     0,     0,     0,     0,
       0,     0,  1431,     0,     0,     0,  2103,     0,     0, -1731,
       0,     0, -1731, -1731, -1731,   538,   833,  2739,     0,   833,
       0,   537,   537,   748,   537,   833,     0,    25,    26,    27,
       0,     0,  1168,     0,   824,     0,     0,     0,     0,     0,
       0,   826,     0,     0,  2140,     0,     0,     0,     0,     0,
       0,     0,  1521,   840,     0,     0,     0,     0,   823,     0,
       0,  1155,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1466,  1466,  3155,     0,  1379,  1380,
    1466,     0,   504,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    32,     0,     0,   962,     0,   537,  1925,     0,
       0,     0,     0,     0,     0,   672,     0,     0,   624,     0,
       0,   624,     0,     0,     0,     0,   624,     0,     0,   624,
    3093,     0,     0,     0,   624,  1169,   537,     0,   537,    37,
       0,     0,     0,  2239,  2240,  2242,  2243,  2244,     0,     0,
      21,   824,     0,     0,  2857,   827,     0,     0,     0,     0,
       0,     0,     0,  1998,   826,  1381,  1382,     0,  2004,     0,
       0,     0,    39,     0,     0,     0,     0,     0,   684,     0,
       0,     0,     0,    42,  1170,   824,     0,     0,     0,     0,
       0,     0,  1171,     0,     0,     0,     0,    43,     0,     0,
   -1733,     0,     0,     0,  1172,     0,   833,  1006,     0,     0,
    1882,   826,     0,     0,  1883,  1884,     0,     0,  1885,  1886,
    1887,    44,     0,   826,     0,  1156,     0,     0,     0,  1383,
    1384,  1385,  1386,  1387,  1388,  2740,  1173,  1389,  1390,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   826,     0,  2090,     0,   672,     0,   672,
     826,     0,     0,     0,     0,     0,   824,     0,     0,     0,
     672,  2106,     0,     0,     0,     0,     0,     0,     0,     0,
    3290,  1174,     0,  1466,     0,  1158,     0,  1175,     0,     0,
      25,    26,    27,     0,     0,     0,   826,     0, -1733,  2384,
     826,     0,  1436,     0,     0,  1486,   826,     0,   672,     0,
     537,     0,  1176,  1573,     0,     0,  1574,  1177,     0,     0,
    1575,  1576,     0,     0,  1710,   537,     0,     0,  1517,    81,
       0,  1178,     0,     0,     0,   537,  2172,   537,  2176,     0,
     537,   823,     0, -1733,     0,     0,   537,     0,   537,  1391,
    1392,  1584,     0,     0,     0,    32,     0, -1733, -1999,   833,
     537,  1436, -1733,     0,   833,   537,     0, -1733,     0,   537,
     537,   537,   537,     0,   537,   537, -1733,     0,     0,    81,
     686, -1733,     0,  1586,     0,     0,     0,     0,  1160,     0,
       0,     0,    37,  1888,     0,  1559,   827,   672,   672,   672,
     672,   672,     0,     0,   824,     0,     0,     0,  2247,     0,
       0,     0,     0, -1733,     0,     0,  1889,  2257,     0,     0,
     943,     0,     0,     0,     0,    39,     0,  2857,     0,     0,
       0,   955,     0, -1733,  1571,     0,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2445,     0,     0,     0,
      43,     0,     0,     0,     0,     0,     0,   538,   538,     0,
       0,  1436,     0,  1436,  1436,  3155,  1393,  1394,     0,     0,
       0,     0,   829,     0,    44,     0,     0, -1999,     0,   703,
   -1733,     0,     0, -1733,  1890,     0,  1395,     0,    45, -1733,
       0,     0,     0,  1573, -1999,     0,  1574,     0,    81, -1999,
    1575,  1576,     0,  1466,  1466,  1466,  1466,  1466,  1466,     0,
       0,  1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,
    1466,     0,     0,     0,     0,     0,     0,     0, -1733,     0,
       0,  1584,     0,     0,     0,     0,  1436, -1999, -1999,  1436,
    1436,   537,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1733,     0,   672,     0,     0,     0,     0,     0,     0,
       0,     0,   624,  1586,     0,     0,     0,     0,   624,     0,
       0,     0,     0,   537,     0,     0,     0,     0,   537,     0,
       0,     0,     0,     0,     0,     0,     0,   827,     0,  1006,
    1595,     0,  1882,     0,     0,     0,  1883,  1884,   826,     0,
    1885,  1886,  1887,     0,  2578,     0,     0,     0,     0,   674,
     684,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2595,  2596,  2598,   537,     0,     0,  2710,  2425,     0,     0,
       0,     0,   537,     0,     0,  2609,     0, -1733,  2612,     0,
      21,     0,     0,  2617,     0,     0,     0, -1733,     0,     0,
       0,     0,     0,     0,  1466,  1466,     0, -1999,     0,     0,
       0,     0,     0,     0, -1733,     0, -1733, -1733,     0,     0,
       0,  1998,     0,     0, -1999,     0,     0,   824,     0, -1999,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1999,
       0,  1891,  1892,  1893,     0,  1894,  1895,  1896,  1897,  1898,
    1899,     0,     0, -1733,   624,     0, -1733, -1733, -1733,     0,
       0,     0,    21,   829,     0,     0,   537, -1999,     0,     0,
       0,   624,     0,     0,  1812,  2106,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1821,     0,  1822,     0,     0,
       0,     0,     0,    81,     0,     0,     0,  1829,     0,     0,
       0,  2663,  2664,  2665,     0,   538,   538,     0,   538,   827,
       0,     0,     0,     0,  1830,   537,     0,     0,  1466,     0,
    1595,   537,     0,     0,     0,  2151,   626,     0,     0,     0,
      25,    26,    27,   626,     0,   826,     0,  1769,     0,     0,
       0,     0,     0,     0, -1999,     0,  1849,  1851,  1889,     0,
       0,  1602,  1603,  1604,  1605,  1606,  1607,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1536,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1540,
       0,   538,     0,     0,     0,     0,  1006,     0,     0,  1882,
       0,     0,  3263,  1883,  1884,    32,     0,  1885,  1886,  1887,
       0,  1769,    25,    26,    27,     0,  1554,  2577,   672,     0,
    1955,     0,  1959,     0,  2701,  2753,  1890,     0,  2588, -1999,
       0,     0,     0,  1769,   672,   672,   672,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,   537,   826,   672,
       0,     0,   672,     0,     0,     0,     0,   672,     0,     0,
       0,     0,     0,     0,   829,     0,     0,     0,     0,  1840,
    2624,  1841,     0,     0,     0,    39,     0,    32,     0,     0,
       0,   827,     0,     0,     0,     0,    42,   833,     0,     0,
       0,     0,     0,     0,     0,   703,   703,     0,   703,     0,
      43,     0,     0,     0,     0,  1769,  1769,     0,  1769,     0,
     827,   827,  2893,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,   826,   827,     0,     0,     0,
       0,     0,     0,     0, -1999,     0,     0,   504,    45,     0,
       0,  1602,  1603,  1604,  1605,  1606,  1607,    39,     0,     0,
     826,     0,     0,     0,     0,     0,     0,  2656,    42,     0,
       0,     0,     0,     0,     0,   672,   672,   672,     0,     0,
       0,     0,    43,     0,   537,  1468,  1466,   537,     0,     0,
       0,     0,     0,   537,     0,  2935,  2936,  2937,  2938,     0,
       0,     0,     0,     0,   538,     0,    44,     0,  1998,     0,
       0,     0,     0,  2135,  2135,  1889,     0,   826,     0,   538,
      45,     0,     0,     0,     0,     0,     0,     0,     0,   538,
       0,   538,     0,     0,   538,     0,     0,     0,  1466,  1466,
     538,     0,   538,  1891,  1892,  1893,   829,  1894,  1895,  1896,
    1897,  1898,  1899,     0,   538,     0,     0,     0,     0,   538,
       0,     0,     0,   538,   538,   538,   538,  2735,   538,   538,
       0,     0,  1436,  2106,     0,     0,     0,     0,     0,     0,
       0,     0,  1436,  1890,     0,  1436,     0,     0,     0,   672,
       0,     0,     0,   537,     0,     0,     0,   537,   537,   537,
       0,     0,     0,  1769,  1710,  1769,     0,  1806,     0,     0,
    1006,     0,     0,  1882,     0,     0,     0,  1883,  1884,     0,
       0,  1885,  1886,  1887,   826,     0,   537,  3045,  2815,     0,
       0,     0,     0,     0,     0,     0,     0,   827,  2981,     0,
       0,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,     0,     0,     0,     0,     0,     0,     0,   826,     0,
       0,     0,     0,     0,     0,     0,  2292,  2294,     0,  1679,
    2257,     0,  2162,     0,     0,     0,   672,  2894,  1468,     0,
       0,     0,  2171,     0,  2174,     0,     0,  2185, -1748,     0,
    1710,     0,  1436,  2189,     0,  2191,     0,     0,     0,     0,
      81,     0,     0,     0,     0,     0,  1806,  2198,   829,     0,
       0,     0,  2201,     0,     0,     0,  2206,  2207,  2208,  2209,
       0,  2213,  2214,     0,     0,  1769,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   538,  1466,   829,   829,   826,
       0,     0,   537,     0,     0,     0,     0,     0,     0,   672,
     672,   672,   672,   829,     0,     0,     0,     0,     0,     0,
       0,  1466,     0,     0,  1466,     0,     0,  2398,   537,   833,
       0,     0,  1959,   827,     0,     0,     0,   626,     0,     0,
     626,     0,     0,     0,  2972,   626, -1748,     0,   626,     0,
    1891,  1892,  1893,   626,  1894,  1895,  1896,  1897,  1898,  1899,
    1436,     0,     0,     0,     0,     0,  1379,  1380,     0,     0,
      81,     0,     0,     0,  2995,     0,   624,   538,     0,  1889,
       0,     0,     0,     0,     0,     0,  1559,     0,     0,     0,
    3007, -1748,     0,     0,  2106,     0,     0,     0,     0,     0,
    1998,     0,     0,     0,     0, -1748,     0,     0,     0,     0,
   -1748,     0,     0,     0,  1710, -1748,     0,     0,     0,     0,
    1769,     0,     0,     0, -1748,     0,     0,     0,  2040, -1748,
       0,     0,     0,   833,   537,  1466,     0,   826,     0,     0,
       0,   672,     0,  1381,  1382,     0,   827,  1890,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3058,     0,
       0, -1748,   542,     0,     0,     0,     0,     0,     0,     0,
     538,     0,     0,     0,     0,     0,     0,     0,     0,  3198,
       0, -1748,     0,     0,     0,     0,     0,  2468,     0,     0,
       0,     0,     0,   827,     0,     0,     0,     0,     0,   703,
       0,     0,     0,  3229,     0,   827,     0,  1383,  1384,  1385,
    1386,  1387,  1388,     0,   829,  1389,  1390,   543,     0,   538,
    2494,  2494,     0,     0,     0,  2506,     0,     0, -1748,     0,
       0, -1748,     0,   544,     0,   827,  1769, -1748,     0,     0,
       0,     0,   827,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2257,     0,     0,     0,     0,     0,
    1468,  1468,     0,     0,  3269,     0,  1468,  1573,  3108,     0,
    1574,     0,     0,     0,  1575,  1576, -1748,  1466,   827,     0,
     545,     0,   827,     0,     0,     0,     0,     0,   827,     0,
     546,     0,     0,     0,     0,  3295,     0,     0,     0, -1748,
       0,     0,   547,  3125,     0,  1584,     0,   548,     0,   537,
       0,     0, -1999,     0,     0,     0,     0,   537,     0,     0,
       0,     0,     0,  1840,     0,     0,     0,  1391,  1392,  2252,
       0,     0,     0,     0,     0,     0,   549,  1586,    81,     0,
       0,   538,     0,     0,  3152,     0,     0,     0,     0,     0,
     829,     0,     0,     0,  1891,  1892,  1893,   674,  1894,  1895,
    1896,  1897,  1898,  1899,     0,     0,   537,     0,     0,     0,
       0,   537,     0,     0,     0,     0,     0,     0,     0,   550,
       0,     0,  2620,   551,     0, -1748,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1748,     0,   537,     0,     0,
    2713,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     826,     0, -1748,     0, -1748, -1748,     0,   537,   537,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1999,     0,   672,     0,  1710,     0,  1066,  1066,  3203,
       0,     0,     0,   537,  1393,  1394,     0,     0, -1999,     0,
     552, -1748,     0, -1999, -1748, -1748, -1748,   672,     0,  2125,
    3231,     0,     0,   829,     0,   553,     0,     0,   538,     0,
       0,   538,     0,     0,     0,     0,     0,  1955,     0,     0,
    1466,   626,     0,     0,   537,   962,     0,   626,   962,     0,
       0, -1999,  1006,     0,  2606,  1882,     0,     0,   554,  1883,
    1884,   555,  1192,  1885,  1886,  1887,  1313,     0,     0,     0,
     829,  3007,   556,     0,     0,   557,     0,     0,   672,     0,
    2982,     0,   829,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   558,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1595,     0,     0,   559,     0,   672,
       0,     0,   829,     0,   560,     0,     0,     0,     0,   829,
       0,     0,     0,     0,   561,     0,     0,     0,     0,     0,
     562,     0,     0,     0,     0,     0,     0,   538,  1554,     0,
     827,   538,   538,   538,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3125,   829,  2040,   563,     0,   829,
       0,     0,     0,     0,     0,   829,     0,     0,     0,     0,
     538,     0,  2455,     0,     0,     0,     0,  3231,     0,     0,
       0,  1418,     0,   626,     0,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,     0,     0,     0,     0,     0,
     626,     0,     0, -1999,  1710,     0,  1436,     0,     0,  3203,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   833,   833,     0,  3231,   833,     0,     0,     0,     0,
       0,     0,     0,  1925,     0,     0,     0,     0,     0,  1468,
    1468,  1468,  1468,  1468,  1468,   537,     0,  1468,  1468,  1468,
    1468,  1468,  1468,  1468,  1468,  1468,  1468,     0,     0,     0,
       0,  1889,  1573,     0,     0,  1574,     0,  1710,     0,  1575,
    1576,     0,     0,     0,     0,  3231,     0,     0,     0,  1443,
       0,     0,     0,     0,     0,  1460,  1955,     0,  1462,     0,
       0,  1473,  1476,  1481,  1484,  2761,  2762,     0,     0,     0,
    1584,     0,     0,     0,     0,     0,     0, -1999, -1999,     0,
       0,     0,  2398,   833,     0,  1602,  1603,  1604,  1605,  1606,
    1607,     0,     0,  2814,     0,     0,     0,   827,  2106,  1890,
       0,     0,  1586,  1313,     0,     0,     0,     0,  2867,  2868,
    2869,  2870,  2871,  2872,  2873,  2874,  2875,  2876,     0,     0,
     686,     0,  1006,  1537,     0,  1882,     0,     0,     0,  1883,
    1884,     0,     0,  1885,  1886,  1887,     0,     0,     0,     0,
       0,  1542,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1545,  1546,  1547,  1006,  1551,  1555,  1882,     0,
    1468,  1468,  1883,  1884,     0,  2714,  1885,  1886,  1887,     0,
       0,  1573,     0,     0,  1574,     0,     0,     0,  1575,  1576,
       0,     0,  1579,  1580,  1581,     0,     0,  1616,   538,     0,
       0,     0,     0,     0,     0,     0, -1999,     0,     0,  1582,
     827,     0,     0,     0,     0,     0,     0,     0,     0,  1584,
       0,     0,     0, -1999,     0,     0,  1585,     0, -1999,     0,
       0,     0,     0,     0,     0,     0,     0,   829,     0,     0,
       0,  1436,     0,     0,     0,     0,  1436,     0,  1657,     0,
       0,  1586,  1673,  1678,     0,     0,     0,     0,     0,     0,
       0,     0,  1573,  1066,  1066,  1574, -1999,     0,     0,  1575,
    1576,  1577,  1578,  1579,  1580,  1581,     0,     0,     0,     0,
       0,     0,     0,     0,  1468,     0,     0,   827,     0,     0,
    1582,     0,     0,  1849,  1851,     0,     0,     0,     0,     0,
    1584,  1554,     0,     0,     0,     0,     0,  1585,     0,     0,
       0,     0,   827,     0,     0,     0,  1891,  1892,  1893,  1595,
    1894,  1895,  1896,  1897,  1898,  1899,     0,     0,     0,     0,
       0,     0,  1586,  1554,     0,     0,     0,     0,     0,     0,
       0,  1889,     0,     0,     0,  1587,     0,     0,     0,     0,
       0,  3038,    81,     0,     0,     0,     0,     0,    81,     0,
       0,     0,  1588,     0,     0,     0,     0,  1589,     0,   827,
       0,     0,     0,  3133, -1999,     0,     0,     0,     0,     0,
       0,  2398,     0,     0,  2757,     0,     0,     0,     0,     0,
    1590,  1591,     0,     0,     0,  1313,     0,     0,     0,     0,
       0,     0,     0,     0,  1313,  1592,     0,  1573,     0,  1890,
    1574,     0,     0,     0,  1575,  1576,     0,     0, -1999,     0,
       0,     0,     0,     0,   829,     0,  1587,     0,  1313,     0,
     538,     0,     0,     0,     0,   538,     0,     0,     0,     0,
       0,  1593,  1890,  1588,  1594,  1584,     0,     0,  1589,     0,
       0,     0, -1999,     0,     0,     0,     0,     0,  1595,     0,
      81,   538,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1590,  1591,     0,     0,     0,   827,  1586,     0,     0,
       0,   538,   538,     0,     0,     0,  1592,     0,     0,     0,
      81,     0,     0,    81,  1849,  1851,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1436,     0,   538,     0,     0,
     827,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1593, -1999,     0,  1594,     0,   829,     0,     0,
    1602,  1603,  1604,  1605,  1606,  1607,     0,     0,     0,  1595,
    2985,     0,  1596,     0,     0,     0,     0,     0,   538,     0,
    1554,     0,     0,     0,     0,     0,     0,  1597,     0,     0,
       0,     0,     0,     0,     0,  1872,     0,     0,     0,     0,
       0, -1999,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1468,  1468,     0,     0, -1999,     0,
       0,   827,     0, -1999,     0,     0,     0,  1481,     0,  1481,
    1481,     0,     0,     0,   829,   626,     0,     0,     0,     0,
       0,     0,  1066,  1066,  3181,     0,  1891,  1892,  1893,   686,
    1894,  1895,  1896,  1897,  1898,  1899,     0,     0,  1066,   829,
       0, -1999,     0,     0,  3188,  3189,     0,     0,  1597,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1891,
    1892,  1893,     0,  1894,  1895,  1896,  1897,  1898,  1899,  1977,
    3209,  1978,  1598,     0,     0,  1599,  1600,  1601,     0,  1602,
    1603,  1604,  1605,  1606,  1607,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1595,     0,   829,     0,     0,  2017,
       0,     0,     0,     0,     0,  2021,  2022,  2023,  2024,  2025,
    2026,  2027,  2028,     0,     0,     0,     0,  2037,  2038,     0,
       0,     0,  2049,     0,     0,     0,  2052,     0,     0,  2060,
    2061,  2062,  2063,  2064,  2065,  2066,  2067,  2068,     0,   827,
    2069,     0,     0,     0,     0,     0,     0,  1066,     0,  1313,
       0,     0,     0,  1598,     0,     0,  1599,  1600,  1601,   538,
    1602,  1603,  1604,  1605,  1606,  1607,     0,     0,     0,     0,
    2095,     0,     0,     0,     0,     0,     0,     0,     0,  2415,
       0,     0,     0,     0,     0,     0,     0,     0,  1436,     0,
       0,     0,  1468, -1999,    81,     0,     0,     0,     0,     0,
       0,     0,     0,   829,  1546,  1547,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2956,   -43,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1554,     0,     0,     0,     0,   829,     0,     0,
       1,  2974,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     3,     4,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     5,     0,     0,     0,     0,
       6,     0,     0,     0,     0,     0,     0,     0,     0,     7,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2216,
       0,     8,     0,  1313,     0,     0,  2226,  2227, -1999,     0,
       0,     0,     9,     0,     0,  1602,  1603,  1604,  1605,  1606,
    1607,     0,  3385,     0,    10,     0,    11,     0,   829,     0,
       0,     0,     0,     0,     0,     0,     0,    12,     0,     0,
       0,  1468,     0,  1313,     0,     0,     0,     0,     0,     0,
       0,    13,    14,     0,     0,     0,     0,     0,     0,     0,
       0,    15,     0,     0,     0,     0,     0,    16,     0,     0,
       0,     0,     0,     0,     0,    17,     0,    18,    19,    81,
      81,     0,     0,     0,  1418,  2310,     0,     0,     0,     0,
       0,    20,     0,     0,     0,    21,     0,     0,     0,     0,
    1573,     0,     0,  1574,     0,     0,     0,  1575,  1576,  1577,
    1578,  1579,  1580,  1581,  2332,  2333,     0,  2334,     0,     0,
       0,    22,   827,     0,     0,     0,     0,     0,  1582,     0,
       0,     0,     0,     0,     0,     0,     0,    23,  1584,     0,
       0,     0,     0,     0,     0,  1585,  2360,  2361,     0,     0,
    2095,     0,     0,     0,     0,     0,     0,    81,     0,    81,
       0,     0,     0,    24,     0,     0,   829,     0,     0,     0,
    1586,  1470,     0,     0,     0,     0,     0,     0,     0,  2388,
       0,     0,     0,  1468,  2393,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1313,     0,     0,    81,     0,     0,     0,
       0,     0,     0,     0,  2410,     0,     0,     0,     0,     0,
       0,     0,    81,     0,     0,     0,    81,     0,     0,     0,
       0,     0,     0,     0,     0,    25,    26,    27,     0,     0,
       0,     0,     0,    28,     0,  2423,    29,     0,     0,  1573,
    2426,  2427,  1574,     0,     0,     0,  1575,  1576,  1577,  1578,
    1579,  1580,  1581,     0,  1587,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,  1582,     0,     0,
       0,  1588,     0,     0,    31,     0,  1589,  1584,  1610,     0,
       0,     0,     0,  2447,  1585,     0,  2450,     0,  2452,     0,
      32,     0,     0,     0,     0,     0,     0,    33,     0,  1590,
    1591,    34,     0,     0,  2456,     0,     0,     0,     0,  1586,
       0,    35,     0,     0,  1592,     0,     0,     0,     0,     0,
       0,  1610,     0,    36,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1657,    81,     0,    38,     0,     0,
    1593,     0,     0,  1594,  1470,     0,     0,     0,     0,     0,
      39,  1678,  2067,    40,     0,     0,    41,  1595,     0,     0,
    1596,    42,     0,    81,     0,     0,  3248,     0,     0,     0,
    1066,     0,     0,     0,     0,    43,     0,     0,     0,  2510,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1587,  1610,     0,     0,     0,     0,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1588,     0,     0,    45,     0,  1589,   -43,     0,     0,   829,
    1573,     0,     0,  1574,     0,     0,     0,  1575,  1576,     0,
       0, -1999, -1999, -1999,     0,  1547,     0,     0,  1590,  1591,
       0,  1313,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1592,     0,     0,  1597,     0,  1584,     0,
       0,     0,     0,     0,     0,  1585,     0,     0,     0,     0,
    1572,     0,     0,     0,     0,  1573,     0,     0,  1574,     0,
       0,     0,  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1593,
    1586,     0,  1594,     0,     0,  2615,     0,     0,     0,     0,
       0,     0,     0,  1582,     0,     0,  1595,  1583,     0,  1596,
       0,     0,     0,  1584,     0,  1610,     0,     0,     0,     0,
    1585,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1586,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1598,     0,     0,  1599,  1600,  1601,     0,  1602,  1603,
    1604,  1605,  1606,  1607,     0,     0,     0,     0,     0,     0,
       0,  1875,     0,     0,  1587,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1588,     0,     0,     0,  1597,  1589,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1610,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2684,     0,     0,     0,  2686,  1978,     0,     0,  1587,
       0,     0,  2690,     0,  1592,  1610,     0,     0,     0,     0,
       0,     0,  2699,     0,     0,  2702,  1588,  2704,     0,     0,
       0,  1589,  1610,     0,  1610,  2708,  1470,  1470,     0,  1900,
       0,     0,  1470,  2715,  2716,  1610,     0,     0,  1610,     0,
    2723,     0,     0,  1610,  1590,  1591,  1610,     0,     0,     0,
       0,     0,     0,     0,     0,  2732,     0,  1595,     0,  1592,
       0,     0,     0,     0,     0,  2747,     0,     0,     0,     0,
    1598,     0,     0,  1599,  1600,  1601,     0,  1602,  1603,  1604,
    1605,  1606,  1607,     0,     0,  1066,     0,  2009,     0,     0,
       0,     0,     0,     0,     0,  1593,     0,     0,  1594,  1610,
       0,     0,     0,     0,  1610,     0,     0,  1610,  1610,  1610,
       0,     0,  1595,  1610,     0,  1596,     0,  1610,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2216,     0,  2216,     0,     0,     0,     0,     0,     0,
       0,  1573,     0,     0,  1574,     0,  1597,     0,  1575,  1576,
    1577,  1578,  1579,  1580,  1581,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1610,  1582,
       0,     0,     0,  2694,     0,     0,     0,     0,     0,  1584,
       0,     0,  1573,     0,     0,  1574,  1585,     0,     0,  1575,
    1576,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1597,     0,     0,     0,     0,     0,     0,     0,  1610,
       0,  1586,     0,     0,     0,     0,     0,     0,     0,     0,
    1584,     0,     0,     0,     0,  1610,     0, -1999,     0,     0,
    1610,     0,     0,     0,     0,     0,  2951,  2952,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1900,     0,     0,
       0,  1598,  1586,  2969, -1999, -1999, -1999,     0,  1602,  1603,
    1604,  1605,  1606,  1607,     0,  2973,     0,     0,     0,     0,
    2975,  2976,     0,     0,     0,  2977,     0,     0,     0,     0,
    2980,     0,     0,  2983,  2984,     0,     0,     0,  2216,  1313,
       0,     0,  2992,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1066,     0,  1587,  1598,     0,     0,  1599,
    1600,  1601,     0,  1602,  1603,  1604,  1605,  1606,  1607,     0,
       0,     0,  1588,     0,     0,     0,     0,  1589,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1999,  3033,     0,     0,
    1590,  1591,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1999,     0,  1592,     0,     0, -1999,     0,
       0,     0,     0,     0,  3052,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1573,     0,     0,  1574,     0,
       0,     0,  1575,  1576,  1577,  1578,  1579,  1580,  1581,     0,
       0,  1593,     0,     0,  1594,     0, -1999,     0,     0,     0,
       0,     0,     0,  1582,     0,     0,     0,     0,  1595,     0,
       0,  1596,     0,  1584,  1610,     0,     0,     0,     0,     0,
    1585,     0,  1900,  1900,     0,  1470,  1470,  1470,  1470,  1470,
    1470,     0,     0,  1470,  1470,  1470,  1470,  1470,  1470,  1470,
    1470,  1470,  1470,  1900,     0,  1586,     0,     0,     0,  1595,
    3082,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1153,     0,     0,     0,     0,
       0,  1154,     0,     0,     0,     0,     0,     0,     0,  1166,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1555,     0,     0,     0,  1597,     0,  1167,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1610,
    1610,     0,     0,  1313,     0,     0,     0,     0,     0,     0,
    2423,     0,     0,     0,     0,     0,     0,     0,     0,  1587,
       0,  3144,  3145,     0,     0,  3146,     0,  1547, -1999,     0,
       0,     0,     0,  1168,     0,     0,  1588,     0,     0,  1610,
       0,  1589,     0,  1610,  1610,  1610,  1610,  1610,  1610,  1610,
    1610,     0,  3164,     0,     0,     0,  1470,  1470,     0,  1610,
    1610,     0,  1155,     0,  1590,  1591,     0,     0,     0,     0,
       0,  1610,     0,     0,  1610,     0,  3176,     0,     0,  1592,
       0,     0,  1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610,
    1610,  1610,  1598,     0,     0,  1599,  1600,  1601,     0,  1602,
    1603,  1604,  1605,  1606,  1607,     0,     0,     0,     0,  2009,
       0,     0,     0,     0,     0,  1593,     0,  1610,  1594,     0,
       0,     0,     0,     0,     0,     0,  1169,     0,     0,     0,
       0,     0,  1595, -1999,     0,  1596,     0,     0,     0,     0,
    1602,  1603,  1604,  1605,  1606,  1607,  3228,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2951,     0,     0,     0,  3245,     0,
    1470,     0,  1066,     0,     0,  1170,     0,     0,     0,     0,
       0,     0,  3255,  1171,     0,     0,     0,  2216,     0,  2216,
       0,     0,     0,     0,     0,  1172,     0,  1066,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3280,  1156,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1173,     0,     0,
       0,  1597,     0,     0,     0,     0,     0,     0,  1610,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1610,  1610,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3310,     0,  2192,     0,     0,     0,  1158,     0,  1175,     0,
    2951,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1066,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1176,     0,     0,     0,     0,  2193,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1178,     0,     0,  3354,     0,     0,     0,     0,
       0,     0,  1610,     0,     0,     0,  1598,     0,     0,  1599,
    1600,  1601,     0,  1602,  1603,  1604,  1605,  1606,  1607,     0,
       0,     0,     0,  2331,  1610,  1610,  1610,     0,     0,  1900,
    1900,  1900,  1900,  1900,  1900,     0,     0,     0,  1900,  1900,
    1900,  1900,  1900,  1900,  1900,  1900,  1900,  1900,     0,  1160,
       0,  1573,  1610,  1610,  1574,     0,     0,     0,  1575,  1576,
    1577,  1578,  1579,  1580,  1581,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1582,
    1610,     0,     0,     0,     0,  1610,     0,     0,     0,  1584,
    3410,  3410,  3410,     0,     0,     0,  1585,     0,     0,     0,
    1573,     0,  1610,  1574,     0,     0,     0,  1575,  1576,  1577,
    1578,  1579,  1580,  1581,     0,  1610,     0,  3410,  1610,  1610,
       0,  1586,     0,     0,     0,  1900,  1900,     0,  1582,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1584,  1610,
    1470,  1470,  1610,     0,  1610,  1585,     0,     0,  1610,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3410,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1586,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1610,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1587,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1573,  1588,     0,  1574,     0,     0,  1589,  1575,  1576,
    1577,  1578,  1579,  1580,  1581,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1582,
    1590,  1591,     0,     0,  1587,     0,     0,     0,     0,  1584,
       0,     0,     0,     0,     0,  1592,  1585,     0,     0,     0,
       0,  1588,     0,     0,     0,     0,  1589,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1586,     0,     0,     0,     0,     0,  1610,     0,  1590,
    1591,  1593,     0,     0,  1594,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1592,     0,     0,     0,  1595,     0,
       0,  1596,     0,     0,     0,     0,     0,     0,  1470,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1593,     0,     0,  1594,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1610,  1595,  1610,     0,
    1596,     0,  1610,     0,     0,     0,     0,     0,     0,     0,
       0,  1610,     0,     0,  1610,  1587,  1610,     0,     0,     0,
    1610,     0,     0,  1900,  1900,     0,     0,  1610,  1610,     0,
       0,     0,  1588,     0,     0,  1610,     0,  1589,     0,     0,
       0,     0,     0,  1573,  1610,     0,  1574,  1597,     0,     0,
    1575,  1576,  1577,  1578,  1579,  1580,  1581,     0,     0,  1610,
    1590,  1591,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1582,     0,     0,     0,  1592,     0,     0,     0,     0,
       0,  1584,     0,     0,     0,     0,     0,     0,  1585,     0,
       0,     0,     0,     0,     0,     0,  1597,  1470,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1593,     0,  1586,  1594,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1595,     0,
       0,  1596,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1598,     0,     0,  1599,  1600,  1601,     0,  1602,
    1603,  1604,  1605,  1606,  1607,     0,     0,     0,     0,  2414,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1598,     0,     0,  1599,  1600,  1601,  1587,  1602,  1603,
    1604,  1605,  1606,  1607,     0,     0,     0,     0,  2431,     0,
       0,     0,     0,     0,  1588,     0,     0,  1597,     0,  1589,
       0,     0,     0,     0,     0,     0,     0,     0,  1900,  1470,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1590,  1591,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1610,  1610,     0,     0,  1592,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1610,     0,     0,     0,  1610,     0,  1610,  1610,  1610,
       0,     0,  1610,     0,     0,  1610,  1610,     0,     0,     0,
       0,     0,     0,  1593,  1610,     0,  1594,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1595,     0,     0,  1596,     0,     0,     0,     0,     0,     0,
       0,     0,  1598,     0,     0,  1599,  1600,  1601,     0,  1602,
    1603,  1604,  1605,  1606,  1607,  1610,     0,     0,     0,  2644,
       0,  1900,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1610,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1610,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1597,
       0,     0,     0,     0,  1900,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1610,  1610,  1610,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1610,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1610,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1598,     0,     0,  1599,  1600,  1601,
       0,  1602,  1603,  1604,  1605,  1606,  1607,     0,     0,     0,
    1610,  2696,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1610,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1610,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1610,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1610,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   110,  1003,   637,  1004,  1005,  1006,
    1007,  1008,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,  1610,     0,     0,     0,
    1009,     0,     0,   122,   123,   124,     0,   125,   126,   127,
     128,   129,   130,   131,   132,  1010,   134,  1011,  1012,     0,
     137,   138,   139,   140,   141,   142,  1013,   607,   143,   144,
    1014,  1015,   147,     0,   148,   149,   150,   151,   608,     0,
     609,     0,  1016,   155,   156,   157,   158,   159,   160,   161,
     162,   163,  1610,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1017,  1018,   183,  1019,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   774,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1020,
     212,   213,   214,   215,   216,   610,  1021,   218,     0,   219,
     220,  1022,   222,     0,   223,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,   232,     0,  1023,  1024,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,  1025,  1026,     0,  1027,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1028,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1029,   310,  1030,   312,   313,   314,   315,  1031,
     316,   317,   318,   319,  1032,   612,   321,  1033,   323,   324,
     325,     0,   326,   327,     0,     0,  1034,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   614,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   615,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,  1035,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,  1036,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,     0,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,  1037,   419,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   617,   435,     0,   436,   437,
       0,   438,   439,   440,   441,   442,   443,   444,     0,   445,
    1038,  1039,     0,     0,   448,   449,   618,   451,   619,  1040,
     453,   454,   620,   456,   457,   458,   459,   460,     0,     0,
     461,   462,   463,     0,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,  1041,     0,   475,   476,   477,
     478,   479,   480,   481,     0,     0,   482,     0,     0,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
    1042,     0,     0,     0,     0,     0,     0,  1043,  1044,  1045,
       0,     0,     0,     0,  1046,     0,  1047,     0,     0,     0,
       0,  1048,  1049,  1050,  1051,     0,  2561,   110,  1003,   637,
    1004,  1005,  1006,  1007,  1008,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,  1009,     0,     0,   122,   123,   124,     0,
     125,   126,   127,   128,   129,   130,   131,   132,  1010,   134,
    1011,  1012,     0,   137,   138,   139,   140,   141,   142,  1013,
     607,   143,   144,  1014,  1015,   147,     0,   148,   149,   150,
     151,   608,     0,   609,     0,  1016,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,  1017,  1018,   183,  1019,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   774,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1020,   212,   213,   214,   215,   216,   610,  1021,
     218,     0,   219,   220,  1022,   222,     0,   223,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,
       0,  1023,  1024,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,  1025,  1026,     0,  1027,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,     0,     0,   278,   279,   280,   281,     0,   282,   283,
     284,   285,   286,   287,   288,   289,  1028,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,  1029,   310,  1030,   312,   313,
     314,   315,  1031,   316,   317,   318,   319,  1032,   612,   321,
    1033,   323,   324,   325,     0,   326,   327,     0,     0,  1034,
     329,   330,     0,     0,   331,   332,   333,   334,   335,   336,
     614,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,     0,     0,   348,   349,   615,   351,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   363,     0,   364,   365,   366,  1035,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,  1036,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,  1037,   419,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   617,   435,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
     444,     0,   445,  1038,  1039,     0,     0,   448,   449,   618,
     451,   619,  1040,   453,   454,   620,   456,   457,   458,   459,
     460,     0,     0,   461,   462,   463,     0,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,  1041,     0,
     475,   476,   477,   478,   479,   480,   481,     0,     0,   482,
       0,     0,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,  1042,     0,     0,     0,     0,     0,     0,
    1043,  1044,  1045,     0,     0,     0,     0,  1046,     0,  1047,
       0,     0,     0,     0,  1048,  1049,  1050,  1051,     0,  3147,
     110,  1003,   637,  1004,  1005,  1006,  1007,  1008,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,  1009,     0,     0,   122,
     123,   124,     0,   125,   126,   127,   128,   129,   130,   131,
     132,  1010,   134,  1011,  1012,     0,   137,   138,   139,   140,
     141,   142,  1013,   607,   143,   144,  1014,  1015,   147,     0,
     148,   149,   150,   151,   608,     0,   609,     0,  1016,   155,
     156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,  1017,  1018,   183,
    1019,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   774,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,  1020,   212,   213,   214,   215,
     216,   610,  1021,   218,     0,   219,   220,  1022,   222,     0,
     223,     0,   224,   225,    21,   226,   227,   228,   229,   230,
     231,     0,   232,     0,  1023,  1024,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,  1025,  1026,
       0,  1027,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,  1028,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,  1029,   310,
    1030,   312,   313,   314,   315,  1031,   316,   317,   318,   319,
    1032,   612,   321,  1033,   323,   324,   325,     0,   326,   327,
       0,     0,  1034,   329,   330,     0,     0,   331,   332,   333,
     334,   335,   336,   614,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    25,    26,    27,     0,   348,   349,
     615,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,  1035,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,  1036,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    32,
       0,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,  1037,   419,     0,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   617,   435,     0,   436,   437,    37,   438,   439,   440,
     441,   442,   443,   444,     0,   445,  1038,  1039,     0,     0,
     448,   449,   618,   451,   619,  1040,   453,   454,   620,   456,
     457,   458,   459,   460,     0,     0,   461,   462,   463,    39,
     464,   465,   466,   467,     0,   468,   469,   470,   471,   472,
     621,  1041,     0,   475,   476,   477,   478,   479,   480,   481,
       0,     0,   482,     0,    43,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,  1042,     0,    44,     0,
       0,     0,     0,  1043,  1044,  1045,     0,     0,     0,     0,
    1046,     0,  1047,  3123,     0,     0,     0,  1048,  1049,  1050,
    1051,   110,  1003,   637,  1004,  1005,  1006,  1007,  1008,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,  1009,     0,     0,
     122,   123,   124,     0,   125,   126,   127,   128,   129,   130,
     131,   132,  1010,   134,  1011,  1012,     0,   137,   138,   139,
     140,   141,   142,  1013,   607,   143,   144,  1014,  1015,   147,
       0,   148,   149,   150,   151,   608,     0,   609,     0,  1016,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,  1017,  1018,
     183,  1019,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     774,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1020,   212,   213,   214,
     215,   216,   610,  1021,   218,     0,   219,   220,  1022,   222,
       0,   223,     0,   224,   225,    21,   226,   227,   228,   229,
     230,   231,     0,   232,     0,  1023,  1024,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,  1025,
    1026,     0,  1027,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,     0,     0,   278,   279,   280,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
    1028,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,  1029,
     310,  1030,   312,   313,   314,   315,  1031,   316,   317,   318,
     319,  1032,   612,   321,  1033,   323,   324,   325,     0,   326,
     327,     0,     0,  1034,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   614,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    25,    26,    27,     0,   348,
     349,   615,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
    1035,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,  1036,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      32,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,  1037,   419,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   617,   435,     0,   436,   437,    37,   438,   439,
     440,   441,   442,   443,   444,     0,   445,  1038,  1039,     0,
       0,   448,   449,   618,   451,   619,  1040,   453,   454,   620,
     456,   457,   458,   459,   460,     0,     0,   461,   462,   463,
      39,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   621,  1041,     0,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,     0,    43,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,  1042,     0,    44,
       0,     0,     0,     0,  1043,  1044,  1045,     0,     0,     0,
       0,  1046,     0,  1047,     0,     0,     0,     0,  1048,  1049,
    1050,  1051,  1274,  1003,   637,  1004,  1005,  1006,  1007,  1008,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,  1275,
     119,   120,   121,     0,     0,     0,  1276,     0,  1009,     0,
       0,  1277,   123,   124,     0,   125,   126,   127,  1278,   129,
     130,   131,   132,  1010,  1279,  1011,  1012,     0,   137,   138,
     139,   140,   141,   142,  1013,   607,   143,   144,  1014,  1015,
     147,     0,   148,   149,   150,   151,   608,     0,  1280,     0,
    1281,   155,   156,   157,   158,   159,  1282,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,  1283,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,  1017,
    1018,   183,  1019,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,  1284,     0,   196,
     197,   774,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,  1020,   212,   213,
     214,   215,   216,   610,  1021,   218,     0,   219,   220,  1022,
     222,     0,   223,     0,   224,  1285,     0,  1286,   227,   228,
    1287,  1288,   231,     0,   232,     0,  1023,  1024,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,  1289,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,  1290,   258,   259,   260,   261,   262,   263,
    1025,  1026,     0,  1027,     0,   267,  1291,  1292,   270,  1293,
     272,   273,   274,   275,   276,   277,     0,     0,   278,  1294,
     280,  1295,     0,   282,   283,   284,   285,   286,   287,   288,
     289,  1296,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
    1029,  1297,  1030,   312,   313,   314,   315,  1031,   316,   317,
    1298,   319,  1032,   612,   321,  1033,   323,   324,   325,     0,
     326,   327,     0,     0,  1034,   329,   330,     0,     0,   331,
     332,   333,  1299,   335,  1300,   614,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,     0,     0,
     348,   349,   615,  1301,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   363,     0,   364,   365,
     366,  1035,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,  1302,   388,   389,   390,  1036,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,  1303,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,  1304,   416,   417,  1037,   419,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,  1305,   433,   617,   435,     0,   436,   437,     0,   438,
    1306,   440,   441,   442,   443,   444,     0,   445,  1038,  1039,
       0,     0,   448,   449,   618,   451,   619,  1040,   453,   454,
    1307,   456,   457,   458,   459,   460,     0,     0,   461,   462,
     463,     0,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,   473,  1041,  1308,   475,  1309,   477,   478,   479,
     480,   481,     0,     0,   482,     0,     0,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,  1042,     0,
       0,     0,     0,     0,     0,  1043,  1044,  1045,     0,     0,
       0,     0,  1046,     0,  1047,  1310,     0,     0,     0,  1048,
    1049,  1050,  1051,   110,  1003,   637,  1004,  1005,  1006,  1007,
    1008,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,  1009,
       0,     0,   122,   123,   124,     0,   125,   126,   127,   128,
     129,   130,   131,   132,  1010,   134,  1011,  1012,  1477,   137,
     138,   139,   140,   141,   142,  1013,   607,   143,   144,  1014,
    1015,   147,     0,   148,   149,   150,   151,   608,     0,   609,
       0,  1016,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
    1017,  1018,   183,  1019,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   774,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,  1020,   212,
     213,   214,   215,   216,   610,  1021,   218,     0,   219,   220,
    1022,   222,     0,   223,     0,   224,   225,  1478,   226,   227,
     228,   229,   230,   231,     0,   232,     0,  1023,  1024,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,  1025,  1026,     0,  1027,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,     0,  1479,   278,
     279,   280,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,  1028,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,  1029,   310,  1030,   312,   313,   314,   315,  1031,   316,
     317,   318,   319,  1032,   612,   321,  1033,   323,   324,   325,
       0,   326,   327,     0,     0,  1034,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   614,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,     0,
       0,   348,   349,   615,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,  1035,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,  1036,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,  1037,   419,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   617,   435,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,   444,     0,   445,  1038,
    1039,     0,  1480,   448,   449,   618,   451,   619,  1040,   453,
     454,   620,   456,   457,   458,   459,   460,     0,     0,   461,
     462,   463,     0,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,  1041,     0,   475,   476,   477,   478,
     479,   480,   481,     0,     0,   482,     0,     0,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,  1042,
       0,     0,     0,     0,     0,     0,  1043,  1044,  1045,     0,
       0,     0,     0,  1046,     0,  1047,     0,     0,     0,     0,
    1048,  1049,  1050,  1051,  1274,  1003,   637,  1004,  1005,  1006,
    1007,  1008,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,  1276,     0,
    1009,     0,     0,  1277,   123,   124,     0,   125,   126,   127,
    1278,   129,   130,   131,   132,  1010,  1279,  1011,  1012,     0,
     137,   138,   139,   140,   141,   142,  1013,   607,   143,   144,
    1014,  1015,   147,     0,   148,   149,   150,   151,   608,     0,
    1280,     0,  1281,   155,   156,   157,   158,   159,  1282,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
    1283,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1017,  1018,   183,  1019,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   774,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1020,
     212,   213,   214,   215,   216,   610,  1021,   218,     0,   219,
     220,  1022,   222,     0,   223,     0,   224,  1285,     0,  1286,
     227,   228,  1287,  1288,   231,     0,   232,     0,  1023,  1024,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
    1289,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,  1290,   258,   259,   260,   261,
     262,   263,  1025,  1026,     0,  1027,     0,   267,  1291,  1292,
     270,  1293,   272,   273,   274,   275,   276,   277,     0,     0,
     278,  1294,   280,  1295,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1296,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1029,  1297,  1030,   312,   313,   314,   315,  1031,
     316,   317,  1298,   319,  1032,   612,   321,  1033,   323,   324,
     325,     0,   326,   327,     0,     0,  1034,   329,   330,     0,
       0,   331,   332,   333,  1299,   335,  1300,   614,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   615,  1301,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,  1035,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,  1302,   388,   389,   390,  1036,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,  1303,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,  1304,   416,   417,  1037,   419,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,  1305,   433,   617,   435,     0,   436,   437,
       0,   438,  1306,   440,   441,   442,   443,   444,     0,   445,
    1038,  1039,     0,     0,   448,   449,   618,   451,   619,  1040,
     453,   454,  1307,   456,   457,   458,   459,   460,     0,     0,
     461,   462,   463,     0,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,  1041,  2221,   475,  1309,   477,
     478,   479,   480,   481,     0,     0,   482,     0,     0,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
    1042,     0,     0,     0,     0,     0,     0,  1043,  1044,  1045,
       0,     0,     0,     0,  1046,     0,  1047,     0,     0,     0,
       0,  1048,  1049,  1050,  1051,  1274,  1003,   637,  1004,  1005,
    1006,  1007,  1008,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,  1276,
       0,  1009,     0,     0,  1277,   123,   124,     0,   125,   126,
     127,  1278,   129,   130,   131,   132,  1010,  1279,  1011,  1012,
       0,   137,   138,   139,   140,   141,   142,  1013,   607,   143,
     144,  1014,  1015,   147,     0,   148,   149,   150,   151,   608,
       0,  1280,     0,  1281,   155,   156,   157,   158,   159,  1282,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,  1283,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1017,  1018,   183,  1019,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   774,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1020,   212,   213,   214,   215,   216,   610,  1021,   218,     0,
     219,   220,  1022,   222,     0,   223,     0,   224,  1285,     0,
    1286,   227,   228,  1287,  1288,   231,     0,   232,     0,  1023,
    1024,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,  1289,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,  1290,   258,   259,   260,
     261,   262,   263,  1025,  1026,     0,  1027,     0,   267,  1291,
    1292,   270,  1293,   272,   273,   274,   275,   276,   277,     0,
       0,   278,  1294,   280,  1295,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1296,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1029,  1297,  1030,   312,   313,   314,   315,
    1031,   316,   317,  1298,   319,  1032,   612,   321,  1033,   323,
     324,   325,     0,   326,   327,     0,     0,  1034,   329,   330,
       0,     0,   331,   332,   333,  1299,   335,  1300,   614,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   615,  1301,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1035,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,  1302,   388,   389,   390,
    1036,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,     0,  1303,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,  1304,   416,   417,  1037,
     419,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,  1305,   433,   617,   435,     0,   436,
     437,     0,   438,  1306,   440,   441,   442,   443,   444,     0,
     445,  1038,  1039,     0,     0,   448,   449,   618,   451,   619,
    1040,   453,   454,  1307,   456,   457,   458,   459,   460,     0,
       0,   461,   462,   463,     0,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,  1041,     0,   475,  1309,
     477,   478,   479,   480,   481,     0,     0,   482,     0,     0,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,  1042,     0,     0,     0,     0,     0,     0,  1043,  1044,
    1045,     0,     0,     0,     0,  1046,     0,  1047,  2273,     0,
       0,     0,  1048,  1049,  1050,  1051,   110,  1003,   637,  1004,
    1005,  1006,  1007,  1008,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118, -1090,   119,   120,   121,     0,     0,     0,
       0, -1090,  1009,     0,     0,   122,   123,   124,     0,   125,
     126,   127,   128,   129,   130,   131,   132,  1010,   134,  1011,
    1012,     0,   137,   138,   139,   140,   141,   142,  1013,   607,
     143,   144,  1014,  1015,   147,     0,   148,   149,   150,   151,
     608,     0,   609,     0,  1016,   155,   156,   157,   158,   159,
     160,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,  1017,  1018,   183,  1019,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   774,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,  1020,   212,   213,   214,   215,   216,   610,  1021,   218,
       0,   219,   220,  1022,   222,     0,   223,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,   232,     0,
    1023,  1024,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,  1025,  1026,     0,  1027,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
       0,     0,   278,   279,   280,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,  1028,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,  1029,   310,  1030,   312,   313,   314,
     315,  1031,   316,   317,   318,   319,  1032,   612,   321,  1033,
     323,   324,   325,     0,   326,   327,     0,     0,  1034,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   614,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,     0,     0,   348,   349,   615,   351,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     363,     0,   364,   365,   366,  1035,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,  1036,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,     0,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
    1037,   419, -1090,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   617,   435,     0,
     436,   437,     0,   438,   439,   440,   441,   442,   443,   444,
       0,   445,  1038,  1039,     0,     0,   448,   449,   618,   451,
     619,  1040,   453,   454,   620,   456,   457,   458,   459,   460,
       0,     0,   461,   462,   463,     0,   464,   465,   466,   467,
       0,   468,   469,   470,   471,   472,   473,  1041,     0,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,     0,
       0,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,  1042,     0,     0,     0,     0,     0,     0,  1043,
    1044,  1045,     0,     0,     0,     0,  1046,     0,  1047,     0,
       0,     0,     0,  1048,  1049,  1050,  1051,  1274,  1003,   637,
    1004,  1005,  1006,  1007,  1008,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,  1276,     0,  1009,     0,     0,  1277,   123,   124,     0,
     125,   126,   127,  1278,   129,   130,   131,   132,  1010,  1279,
    1011,  1012,     0,   137,   138,   139,   140,   141,   142,  1013,
     607,   143,   144,  1014,  1015,   147,     0,   148,   149,   150,
     151,   608,     0,  1280,     0,  1281,   155,   156,   157,   158,
     159,  1282,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,  1283,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,  1017,  1018,   183,  1019,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   774,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1020,   212,   213,   214,   215,   216,   610,  1021,
     218,     0,   219,   220,  1022,   222,     0,   223,     0,   224,
    1285,     0,  1286,   227,   228,  1287,  1288,   231,     0,   232,
       0,  1023,  1024,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,  1289,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,  1290,   258,
     259,   260,   261,   262,   263,  1025,  1026,     0,  1027,     0,
     267,  1291,  1292,   270,  1293,   272,   273,   274,   275,   276,
     277,     0,     0,   278,  1294,   280,  1295,     0,   282,   283,
     284,   285,   286,   287,   288,   289,  1296,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,  1029,  1297,  1030,   312,   313,
     314,   315,  1031,   316,   317,  1298,   319,  1032,   612,   321,
    1033,   323,   324,   325,     0,   326,   327,     0,     0,  1034,
     329,   330,     0,     0,   331,   332,   333,  1299,   335,  1300,
     614,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,     0,     0,   348,   349,   615,  1301,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   363,     0,   364,   365,   366,  1035,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,  1302,   388,
     389,   390,  1036,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,  1303,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,  1304,   416,
     417,  1037,   419,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,  1305,   433,   617,   435,
       0,   436,   437,     0,   438,  1306,   440,   441,   442,   443,
     444,     0,   445,  1038,  1039,     0,     0,   448,   449,   618,
     451,   619,  1040,   453,   454,  1307,   456,   457,   458,   459,
     460,     0,     0,   461,   462,   463,     0,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,  1041,     0,
     475,  1309,   477,   478,   479,   480,   481,     0,     0,   482,
       0,     0,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,  1042,     0,     0,     0,     0,     0,     0,
    1043,  1044,  1045,     0,     0,     0,     0,  1046,     0,  1047,
    2989,     0,     0,     0,  1048,  1049,  1050,  1051,  1274,  1003,
     637,  1004,  1005,  1006,  1007,  1008,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,  1276,     0,  1009,     0,     0,  1277,   123,   124,
       0,   125,   126,   127,  1278,   129,   130,   131,   132,  1010,
    1279,  1011,  1012,     0,   137,   138,   139,   140,   141,   142,
    1013,   607,   143,   144,  1014,  1015,   147,     0,   148,   149,
     150,   151,   608,     0,  1280,     0,  1281,   155,   156,   157,
     158,   159,  1282,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,  1283,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,  1017,  1018,   183,  1019,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   774,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,  1020,   212,   213,   214,   215,   216,   610,
    1021,   218,     0,   219,   220,  1022,   222,     0,   223,     0,
     224,  1285,     0,  1286,   227,   228,  1287,  1288,   231,     0,
     232,     0,  1023,  1024,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,  1289,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,  1290,
     258,   259,   260,   261,   262,   263,  1025,  1026,     0,  1027,
       0,   267,  1291,  1292,   270,  1293,   272,   273,   274,   275,
     276,   277,     0,     0,   278,  1294,   280,  1295,     0,   282,
     283,   284,   285,   286,   287,   288,   289,  1296,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,  1029,  1297,  1030,   312,
     313,   314,   315,  1031,   316,   317,  1298,   319,  1032,   612,
     321,  1033,   323,   324,   325,     0,   326,   327,     0,     0,
    1034,   329,   330,     0,     0,   331,   332,   333,  1299,   335,
    1300,   614,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,   615,  1301,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,  1035,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,  1302,
     388,   389,   390,  1036,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,  1303,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,  1304,
     416,   417,  1037,   419,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,  1305,   433,   617,
     435,     0,   436,   437,     0,   438,  1306,   440,   441,   442,
     443,   444,     0,   445,  1038,  1039,     0,     0,   448,   449,
     618,   451,   619,  1040,   453,   454,  1307,   456,   457,   458,
     459,   460,     0,     0,   461,   462,   463,     0,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,  1041,
       0,   475,  1309,   477,   478,   479,   480,   481,     0,     0,
     482,     0,     0,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,  1042,     0,     0,     0,     0,     0,
       0,  1043,  1044,  1045,     0,     0,     0,     0,  1046,     0,
    1047,     0,     0,     0,     0,  1048,  1049,  1050,  1051,   110,
    1003,   637,  1004,  1005,     0,  1007,  1008,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,  1009,     0,     0,   122,   123,
     124,     0,   125,   126,   127,   128,   129,   130,   131,   132,
    1010,   134,  1011,  1012,     0,   137,   138,   139,   140,   141,
     142,  1013,   607,   143,   144,  1014,  1015,   147,     0,   148,
     149,   150,   151,   608,     0,   609,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,  1017,  1018,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   774,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1020,   212,   213,   214,   215,   216,
     610,  1021,   218,     0,   219,   220,  1022,   222,     0,   223,
       0,   224,   225,    21,   226,   227,   228,   229,   230,   231,
       0,   232,     0,  1023,  1024,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,  1025,  1026,     0,
    1027,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,   281,     0,
     282,   283,   284,   285,   286,   287,   288,   289,  1028,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,  1029,   310,  1030,
     312,   313,   314,   315,     0,   316,   317,   318,   319,  1032,
     612,   321,  1033,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,   333,   334,
     335,   336,   614,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    25,    26,    27,     0,   348,   349,   615,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,  1035,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,  1036,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    32,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,  1037,   419,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     617,   435,     0,   436,   437,    37,   438,   439,   440,   441,
     442,   443,   444,     0,   445,  1038,  1039,     0,     0,   448,
     449,   618,   451,   619,  1040,   453,   454,   620,   456,   457,
     458,   459,   460,     0,     0,   461,   462,   463,    39,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   621,
    1041,     0,   475,   476,   477,   478,   479,   480,   481,     0,
       0,   482,     0,    43,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     0,     0,    44,     0,     0,
       0,   110,  1003,   637,  1004,  1005,  1006,  1007,  1008,  1046,
       0,  1047,     0,     0,     0,     0,  1048,  1049,  1050,  1051,
     111,   112,   113,   114,   115,   116,   117,   118,  1654,   119,
     120,   121,     0,     0,     0,     0,     0,  1009,     0,     0,
     122,   123,   124,     0,   125,   126,   127,   128,   129,   130,
     131,   132,  1010,   134,  1011,  1012,     0,   137,   138,   139,
     140,   141,   142,  1013,   607,   143,   144,  1014,  1015,   147,
       0,   148,   149,   150,   151,   608,     0,   609,     0,  1016,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,  1017,  1018,
     183,  1019,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     774,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1020,   212,   213,   214,
     215,   216,   610,  1021,   218,     0,   219,   220,  1022,   222,
       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,   232,     0,  1023,  1024,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,  1025,
    1026,     0,  1027,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,     0,     0,   278,   279,   280,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
    1028,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,  1029,
     310,  1030,   312,   313,   314,   315,  1031,   316,   317,   318,
     319,  1032,   612,   321,  1033,   323,   324,   325,     0,   326,
     327,     0,     0,  1034,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   614,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,     0,     0,   348,
     349,   615,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
    1035,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,  1036,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,  1037,   419,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   617,   435,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,   444,     0,   445,  1038,  1039,     0,
       0,   448,   449,   618,   451,   619,  1040,   453,   454,   620,
     456,   457,   458,   459,   460,     0,     0,   461,   462,   463,
       0,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   473,  1041,     0,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,     0,     0,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,  1042,     0,     0,
       0,     0,     0,     0,  1043,  1044,  1045,     0,     0,     0,
       0,  1046,     0,  1047,     0,     0,     0,     0,  1048,  1049,
    1050,  1051,   110,  1669,   637,  1004,  1005,  1006,  1670,  1008,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,  1671,
     119,   120,   121,     0,     0,     0,     0,     0,  1009,     0,
       0,   122,   123,   124,     0,   125,   126,   127,   128,   129,
     130,   131,   132,  1010,   134,  1011,  1012,     0,   137,   138,
     139,   140,   141,   142,  1013,   607,   143,   144,  1014,  1015,
     147,     0,   148,   149,   150,   151,   608,     0,   609,     0,
    1016,   155,   156,   157,   158,   159,   160,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,  1017,
    1018,   183,  1019,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   774,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,  1020,   212,   213,
     214,   215,   216,   610,  1021,   218,     0,   219,   220,  1022,
     222,     0,   223,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,   232,     0,  1023,  1024,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
    1025,  1026,     0,  1027,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,  1028,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
    1029,   310,  1030,   312,   313,   314,   315,  1031,   316,   317,
     318,   319,  1032,   612,   321,  1033,   323,   324,   325,     0,
     326,   327,     0,     0,  1034,   329,   330,     0,     0,   331,
     332,   333,   334,   335,   336,   614,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,     0,     0,
     348,   349,   615,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   363,     0,   364,   365,
     366,  1035,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,  1036,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,     0,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,  1037,   419,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   617,   435,     0,   436,   437,     0,   438,
     439,   440,   441,   442,   443,   444,     0,   445,  1038,  1039,
       0,     0,   448,   449,   618,   451,   619,  1040,   453,   454,
     620,   456,   457,   458,   459,   460,     0,     0,   461,   462,
     463,     0,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,   473,  1041,     0,   475,   476,   477,   478,   479,
     480,   481,     0,     0,   482,     0,     0,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,  1042,     0,
       0,     0,     0,     0,     0,  1043,  1044,  1045,     0,     0,
       0,     0,  1046,     0,  1047,     0,     0,     0,     0,  1048,
    1049,  1050,  1051,   110,  1003,   637,  1004,  1005,  1006,  1007,
    1008,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,  1009,
       0,     0,   122,   123,   124,     0,   125,   126,   127,   128,
     129,   130,   131,   132,  1010,   134,  1011,  1012,     0,   137,
     138,   139,   140,   141,   142,  1013,   607,   143,   144,  1014,
    1015,   147,     0,   148,   149,   150,   151,   608,     0,   609,
       0,  1016,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
    1017,  1018,   183,  1019,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   774,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,  1020,   212,
     213,   214,   215,   216,   610,  1021,   218,     0,   219,   220,
    1022,   222,     0,   223,     0,   224,   225,  1478,   226,   227,
     228,   229,   230,   231,     0,   232,     0,  1023,  1024,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,  1025,  1026,     0,  1027,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,  1028,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,  1029,   310,  1030,   312,   313,   314,   315,  1031,   316,
     317,   318,   319,  1032,   612,   321,  1033,   323,   324,   325,
       0,   326,   327,     0,     0,  1034,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   614,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,     0,
       0,   348,   349,   615,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,  1035,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,  1036,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,  1037,   419,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   617,   435,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,   444,     0,   445,  1038,
    1039,     0,     0,   448,   449,   618,   451,   619,  1040,   453,
     454,   620,   456,   457,   458,   459,   460,     0,     0,   461,
     462,   463,     0,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,  1041,     0,   475,   476,   477,   478,
     479,   480,   481,     0,     0,   482,     0,     0,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,  1042,
       0,     0,     0,     0,     0,     0,  1043,  1044,  1045,     0,
       0,     0,     0,  1046,     0,  1047,     0,     0,     0,     0,
    1048,  1049,  1050,  1051,   110,  1003,   637,  1004,  1005,  1006,
    1007,  1008,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
    1009,     0,     0,   122,   123,   124,     0,   125,   126,   127,
     128,   129,   130,   131,   132,  1010,   134,  1011,  1012,     0,
     137,   138,   139,   140,   141,   142,  1013,   607,   143,   144,
    1014,  1015,   147,     0,   148,   149,   150,   151,   608,     0,
     609,     0,  1016,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1017,  1018,   183,  1019,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   774,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1020,
     212,   213,   214,   215,   216,   610,  1021,   218,     0,   219,
     220,  1022,   222,     0,   223,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,   232,     0,  1023,  1024,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,  1025,  1026,     0,  1027,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1028,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1029,   310,  1030,   312,   313,   314,   315,  1031,
     316,   317,   318,   319,  1032,   612,   321,  1033,   323,   324,
     325,     0,   326,   327,     0,     0,  1034,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   614,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   615,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,  1035,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,  1036,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,     0,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,  1037,   419,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   617,   435,     0,   436,   437,
       0,   438,   439,   440,   441,   442,   443,   444,     0,   445,
    1038,  1039,     0,     0,   448,   449,   618,   451,   619,  1040,
     453,   454,   620,   456,   457,   458,   459,   460,     0,     0,
     461,   462,   463,     0,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,  1041,     0,   475,   476,   477,
     478,   479,   480,   481,     0,     0,   482,     0,     0,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
    1042,     0,     0,     0,     0,     0,     0,  1043,  1044,  1045,
       0,     0,     0,     0,  1046,     0,  1047,  2001,     0,     0,
       0,  1048,  1049,  1050,  1051,   110,  1003,   637,  1004,  1005,
    1006,  1007,  1008,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1009,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1010,   134,  1011,  1012,
       0,   137,   138,   139,   140,   141,   142,  1013,   607,   143,
     144,  1014,  1015,   147,     0,   148,   149,   150,   151,   608,
       0,   609,     0,  1016,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1017,  1018,   183,  1019,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   774,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1020,   212,   213,   214,   215,   216,   610,  1021,   218,     0,
     219,   220,  1022,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1023,
    1024,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1025,  1026,     0,  1027,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1028,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1029,   310,  1030,   312,   313,   314,   315,
    1031,   316,   317,   318,   319,  1032,   612,   321,  1033,   323,
     324,   325,     0,   326,   327,     0,     0,  1034,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   614,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   615,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1035,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1036,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,     0,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,  1037,
     419,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   617,   435,     0,   436,
     437,  2614,   438,   439,   440,   441,   442,   443,   444,     0,
     445,  1038,  1039,     0,     0,   448,   449,   618,   451,   619,
    1040,   453,   454,   620,   456,   457,   458,   459,   460,     0,
       0,   461,   462,   463,     0,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,  1041,     0,   475,   476,
     477,   478,   479,   480,   481,     0,     0,   482,     0,     0,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,  1042,     0,     0,     0,     0,     0,     0,  1043,  1044,
    1045,     0,     0,     0,     0,  1046,     0,  1047,     0,     0,
       0,     0,  1048,  1049,  1050,  1051,   110,  1003,   637,  1004,
    1005,  1006,  1007,  1008,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,  1009,     0,     0,   122,   123,   124,     0,   125,
     126,   127,   128,   129,   130,   131,   132,  1010,   134,  1011,
    1012,     0,   137,   138,   139,   140,   141,   142,  1013,   607,
     143,   144,  1014,  1015,   147,     0,   148,   149,   150,   151,
     608,     0,   609,     0,  1016,   155,   156,   157,   158,   159,
     160,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,  1017,  1018,   183,  1019,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   774,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,  1020,   212,   213,   214,   215,   216,   610,  1021,   218,
       0,   219,   220,  1022,   222,     0,   223,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,   232,     0,
    1023,  1024,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,  1025,  1026,     0,  1027,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
       0,     0,   278,   279,   280,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,  1028,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,  1029,   310,  1030,   312,   313,   314,
     315,  1031,   316,   317,   318,   319,  1032,   612,   321,  1033,
     323,   324,   325,     0,   326,   327,     0,     0,  1034,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   614,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,     0,     0,   348,   349,   615,   351,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     363,     0,   364,   365,   366,  1035,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,  1036,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,     0,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
    1037,   419,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   617,   435,     0,
     436,   437,     0,   438,   439,   440,   441,   442,   443,   444,
       0,   445,  1038,  1039,     0,     0,   448,   449,   618,   451,
     619,  1040,   453,   454,   620,   456,   457,   458,   459,   460,
       0,     0,   461,   462,   463,     0,   464,   465,   466,   467,
       0,   468,   469,   470,   471,   472,   473,  1041,     0,   475,
     476,   477,   478,   479,   480,   481,     0,  2722,   482,     0,
       0,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,  1042,     0,     0,     0,     0,     0,     0,  1043,
    1044,  1045,     0,     0,     0,     0,  1046,     0,  1047,     0,
       0,     0,     0,  1048,  1049,  1050,  1051,   110,  1003,   637,
    1004,  1005,  1006,  1007,  1008,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,  2939,   119,   120,   121,     0,     0,
       0,     0,     0,  1009,     0,     0,   122,   123,   124,     0,
     125,   126,   127,   128,   129,   130,   131,   132,  1010,   134,
    1011,  1012,     0,   137,   138,   139,   140,   141,   142,  1013,
     607,   143,   144,  1014,  1015,   147,     0,   148,   149,   150,
     151,   608,     0,   609,     0,  1016,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,   171,  2940,   173,   174,   175,   176,
     177,   178,   179,   180,  1017,  1018,   183,  1019,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   774,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1020,   212,   213,   214,   215,   216,   610,  1021,
     218,     0,   219,   220,  1022,   222,     0,   223,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,
       0,  2941,  1024,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,  1025,  1026,     0,  1027,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,     0,     0,   278,   279,   280,   281,     0,   282,   283,
     284,   285,   286,   287,   288,   289,  1028,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,  1029,   310,  1030,   312,   313,
     314,   315,  1031,   316,   317,   318,   319,  1032,   612,   321,
    1033,   323,   324,   325,     0,   326,   327,     0,     0,  1034,
     329,   330,     0,     0,   331,   332,   333,   334,   335,   336,
     614,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,     0,     0,   348,   349,   615,   351,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   363,     0,   364,   365,   366,  1035,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,  2942,  1036,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,  1037,   419,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   617,   435,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
     444,     0,   445,  1038,  1039,     0,     0,   448,   449,   618,
     451,   619,  1040,   453,   454,   620,   456,   457,   458,   459,
     460,     0,     0,   461,   462,   463,     0,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,  1041,     0,
     475,   476,   477,   478,   479,   480,   481,     0,     0,   482,
       0,     0,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,  1042,     0,     0,     0,     0,     0,     0,
    1043,  1044,  1045,     0,     0,     0,     0,  1046,     0,  2943,
       0,     0,     0,     0,  1048,  1049,  1050,  1051,   110,  1003,
     637,  1004,  1005,  1006,  1007,  1008,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,  1009,     0,     0,   122,   123,   124,
       0,   125,   126,   127,   128,   129,   130,   131,   132,  1010,
     134,  1011,  1012,     0,   137,   138,   139,   140,   141,   142,
    1013,   607,   143,   144,  1014,  1015,   147,     0,   148,   149,
     150,   151,   608,     0,   609,     0,  1016,   155,   156,   157,
     158,   159,   160,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,  1017,  1018,   183,  1019,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   774,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,  1020,   212,   213,   214,   215,   216,   610,
    1021,   218,     0,   219,   220,  1022,   222,     0,   223,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
     232,     0,  1023,  1024,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,  1025,  1026,     0,  1027,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,  1028,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,  1029,   310,  1030,   312,
     313,   314,   315,  1031,   316,   317,   318,   319,  1032,   612,
     321,  1033,   323,   324,   325,     0,   326,   327,     0,     0,
    1034,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   614,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,   615,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,  1035,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,  1036,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,  1037,   419,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   617,
     435,     0,   436,   437,  3081,   438,   439,   440,   441,   442,
     443,   444,     0,   445,  1038,  1039,     0,     0,   448,   449,
     618,   451,   619,  1040,   453,   454,   620,   456,   457,   458,
     459,   460,     0,     0,   461,   462,   463,     0,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,  1041,
       0,   475,   476,   477,   478,   479,   480,   481,     0,     0,
     482,     0,     0,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,  1042,     0,     0,     0,     0,     0,
       0,  1043,  1044,  1045,     0,     0,     0,     0,  1046,     0,
    1047,     0,     0,     0,     0,  1048,  1049,  1050,  1051,   110,
    1003,   637,  1004,  1005,  1006,  1007,  1008,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,  1009,     0,     0,   122,   123,
     124,     0,   125,   126,   127,   128,   129,   130,   131,   132,
    1010,   134,  1011,  1012,     0,   137,   138,   139,   140,   141,
     142,  1013,   607,   143,   144,  1014,  1015,   147,     0,   148,
     149,   150,   151,   608,     0,   609,     0,  1016,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,  1017,  1018,   183,  1019,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   774,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1020,   212,   213,   214,   215,   216,
     610,  1021,   218,     0,   219,   220,  1022,   222,     0,   223,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,   232,     0,  1023,  1024,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,  1025,  1026,     0,
    1027,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,   281,     0,
     282,   283,   284,   285,   286,   287,   288,   289,  1028,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,  1029,   310,  1030,
     312,   313,   314,   315,  1031,   316,   317,   318,   319,  1032,
     612,   321,  1033,   323,   324,   325,     0,   326,   327,     0,
       0,  1034,   329,   330,     0,     0,   331,   332,   333,   334,
     335,   336,   614,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   615,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,  1035,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,  1036,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,     0,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,  1037,   419,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     617,   435,     0,   436,   437,  3227,   438,   439,   440,   441,
     442,   443,   444,     0,   445,  1038,  1039,     0,     0,   448,
     449,   618,   451,   619,  1040,   453,   454,   620,   456,   457,
     458,   459,   460,     0,     0,   461,   462,   463,     0,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
    1041,     0,   475,   476,   477,   478,   479,   480,   481,     0,
       0,   482,     0,     0,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,  1042,     0,     0,     0,     0,
       0,     0,  1043,  1044,  1045,     0,     0,     0,     0,  1046,
       0,  1047,     0,     0,     0,     0,  1048,  1049,  1050,  1051,
     110,  1003,   637,  1004,  1005,  1006,  1007,  1008,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,  1009,     0,     0,   122,
     123,   124,     0,   125,   126,   127,   128,   129,   130,   131,
     132,  1010,   134,  1011,  1012,     0,   137,   138,   139,   140,
     141,   142,  1013,   607,   143,   144,  1014,  1015,   147,     0,
     148,   149,   150,   151,   608,     0,   609,     0,  1016,   155,
     156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,  1017,  1018,   183,
    1019,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   774,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,  1020,   212,   213,   214,   215,
     216,   610,  1021,   218,     0,   219,   220,  1022,   222,     0,
     223,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,   232,     0,  1023,  1024,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,  1025,  1026,
       0,  1027,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,  1028,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,  1029,   310,
    1030,   312,   313,   314,   315,  1031,   316,   317,   318,   319,
    1032,   612,   321,  1033,   323,   324,   325,     0,   326,   327,
       0,     0,  1034,   329,   330,     0,     0,   331,   332,   333,
     334,   335,   336,   614,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     615,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,  1035,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,  1036,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
       0,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,  1037,   419,     0,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   617,   435,     0,   436,   437,     0,   438,   439,   440,
     441,   442,   443,   444,     0,   445,  1038,  1039,     0,     0,
     448,   449,   618,   451,   619,  1040,   453,   454,   620,   456,
     457,   458,   459,   460,     0,     0,   461,   462,   463,     0,
     464,   465,   466,   467,     0,   468,   469,   470,   471,   472,
     473,  1041,     0,   475,   476,   477,   478,   479,   480,   481,
       0,     0,   482,     0,     0,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,  1042,     0,     0,     0,
       0,     0,     0,  1043,  1044,  1045,     0,     0,     0,     0,
    1046,     0,  1047,     0,     0,     0,     0,  1048,  1049,  1050,
    1051,   110,  1003,   637,  1004,  1005,  1006,  1007,  1008,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,  1009,     0,     0,
     122,   123,   124,     0,   125,   126,   127,   128,   129,   130,
     131,   132,  1010,   134,  1011,  1012,     0,   137,   138,   139,
     140,   141,   142,  1013,   607,   143,   144,  1014,  1015,   147,
       0,   148,   149,   150,   151,   608,     0,   609,     0,  1016,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,  1017,  1018,
     183,  1019,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     774,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1020,   212,   213,   214,
     215,   216,   610,  1021,   218,     0,   219,   220,  1022,   222,
       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,   232,     0,  1023,  1024,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,  1025,
    1026,     0,  1027,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,     0,     0,   278,   279,   280,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
    1028,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,  1029,
     310,  1030,   312,   313,   314,   315,  1031,   316,   317,   318,
     319,  1032,   612,   321,  1033,   323,   324,   325,     0,   326,
     327,     0,     0,  1034,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   614,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,     0,     0,   348,
     349,   615,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
    1035,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,  1036,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,  1037,   419,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   617,   435,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,   444,     0,   445,  1038,  1039,     0,
       0,   448,   449,   618,   451,   619,  1040,   453,   454,   620,
     456,   457,   458,   459,   460,     0,     0,   461,   462,   463,
       0,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   473,  1041,     0,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,     0,     0,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,  1042,     0,     0,
       0,     0,     0,     0,  1674,  1675,  1045,     0,     0,     0,
       0,  1046,     0,  1047,     0,     0,     0,     0,  1048,  1049,
    1050,  1051,   110,  2133,   637,  1004,  1005,  1006,  1007,  1008,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,     0,     0,  1009,     0,
       0,   122,   123,   124,     0,   125,   126,   127,   128,   129,
     130,   131,   132,  1010,   134,  1011,  1012,     0,   137,   138,
     139,   140,   141,   142,  1013,   607,   143,   144,  1014,  1015,
     147,     0,   148,   149,   150,   151,   608,     0,   609,     0,
    1016,   155,   156,   157,   158,   159,   160,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,  1017,
    1018,   183,  1019,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   774,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,  1020,   212,   213,
     214,   215,   216,   610,  1021,   218,     0,   219,   220,  1022,
     222,     0,   223,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,   232,     0,  1023,  1024,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
    1025,  1026,     0,  1027,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,  1028,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
    1029,   310,  1030,   312,   313,   314,   315,  1031,   316,   317,
     318,   319,  1032,   612,   321,  1033,   323,   324,   325,     0,
     326,   327,     0,     0,  1034,   329,   330,     0,     0,   331,
     332,   333,   334,   335,   336,   614,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,     0,     0,
     348,   349,   615,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   363,     0,   364,   365,
     366,  1035,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,  1036,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,     0,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,  1037,   419,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   617,   435,     0,   436,   437,     0,   438,
     439,   440,   441,   442,   443,   444,     0,   445,  1038,  1039,
       0,     0,   448,   449,   618,   451,   619,  1040,   453,   454,
     620,   456,   457,   458,   459,   460,     0,     0,   461,   462,
     463,     0,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,   473,  1041,     0,   475,   476,   477,   478,   479,
     480,   481,     0,     0,   482,     0,     0,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,  1042,     0,
       0,     0,     0,     0,     0,  1043,  1044,  1045,     0,     0,
       0,     0,  1046,     0,  1047,     0,     0,     0,     0,  1048,
    1049,  1050,  1051,   110,  1003,   637,  1004,  1005,  1006,  1007,
    1008,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,  1009,
       0,     0,   122,   123,   124,     0,   125,   126,   127,   128,
     129,   130,   131,   132,  1010,   134,  1011,  1012,     0,   137,
     138,   139,   140,   141,   142,  1013,   607,   143,   144,  1014,
    1015,   147,     0,   148,   149,   150,   151,   608,     0,   609,
       0,  1016,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
    1017,  1018,   183,  1019,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   774,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,  1020,   212,
     213,   214,   215,   216,   610,  1021,   218,     0,   219,   220,
    1022,   222,     0,   223,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,   232,     0,  1023,  1024,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,  1025,  1026,     0,  1027,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,  1028,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,  1029,   310,  1030,   312,   313,   314,   315,  1031,   316,
     317,   318,   319,  1032,   612,   321,  1033,   323,   324,   325,
       0,   326,   327,     0,     0,  1034,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   614,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,     0,
       0,   348,   349,   615,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,  1035,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,  1036,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,  1037,   419,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   617,   435,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,   444,     0,   445,  1038,
    1039,     0,     0,   448,   449,   618,   451,   619,  1040,   453,
     454,   620,   456,   457,   458,   459,   460,     0,     0,   461,
     462,   463,     0,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,  1041,     0,   475,   476,   477,   478,
     479,   480,   481,     0,     0,   482,     0,     0,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,  1042,
       0,     0,     0,     0,     0,     0,  1043,  2215,  1045,     0,
       0,     0,     0,  1046,     0,  1047,     0,     0,     0,     0,
    1048,  1049,  1050,  1051,   110,  1003,   637,  1004,  1005,  1006,
    1007,  1008,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
    1009,     0,     0,   122,   123,   124,     0,   125,   126,   127,
     128,   129,   130,   131,   132,  1010,   134,  1011,  1012,     0,
     137,   138,   139,   140,   141,   142,  1013,   607,   143,   144,
    1014,  1015,   147,     0,   148,   149,   150,   151,   608,     0,
     609,     0,  1016,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1017,  1018,   183,  1019,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   774,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1020,
     212,   213,   214,   215,   216,   610,  1021,   218,     0,   219,
     220,  1022,   222,     0,   223,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,   232,     0,  1023,  1024,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,  1025,  1026,     0,  1027,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1028,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1029,   310,  1030,   312,   313,   314,   315,  1031,
     316,   317,   318,   319,  1032,   612,   321,  1033,   323,   324,
     325,     0,   326,   327,     0,     0,  1034,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   614,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   615,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,  1035,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,  1036,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,     0,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,  1037,   419,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   617,   435,     0,   436,   437,
       0,   438,   439,   440,   441,   442,   443,   444,     0,   445,
    1038,  1039,     0,     0,   448,   449,   618,   451,   619,  1040,
     453,   454,   620,   456,   457,   458,   459,   460,     0,     0,
     461,   462,   463,     0,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,  1041,     0,   475,   476,   477,
     478,   479,   480,   481,     0,     0,   482,     0,     0,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
    1042,     0,     0,     0,     0,     0,     0,  1043,  1044,  1045,
       0,     0,     0,     0,  1046,     0,  2422,     0,     0,     0,
       0,  1048,  1049,  1050,  1051,   110,  1003,   637,  1004,  1005,
    1006,  1007,  1008,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1009,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1010,   134,  1011,  1012,
       0,   137,   138,   139,   140,   141,   142,  1013,   607,   143,
     144,  1014,  1015,   147,     0,   148,   149,   150,   151,   608,
       0,   609,     0,  1016,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1017,  1018,   183,  1019,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   774,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1020,   212,   213,   214,   215,   216,   610,  1021,   218,     0,
     219,   220,  1022,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1023,
    1024,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1025,  1026,     0,  1027,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1028,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1029,   310,  1030,   312,   313,   314,   315,
    1031,   316,   317,   318,   319,  1032,   612,   321,  1033,   323,
     324,   325,     0,   326,   327,     0,     0,  1034,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   614,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   615,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1035,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1036,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,     0,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,  1037,
     419,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   617,   435,     0,   436,
     437,     0,   438,   439,   440,   441,   442,   443,   444,     0,
     445,  1038,  1039,     0,     0,   448,   449,   618,   451,   619,
    1040,   453,   454,   620,   456,   457,   458,   459,   460,     0,
       0,   461,   462,   463,     0,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,  1041,     0,   475,   476,
     477,   478,   479,   480,   481,     0,     0,   482,     0,     0,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,  1042,     0,     0,     0,     0,     0,     0,  1043,  2987,
    1045,     0,     0,     0,     0,  1046,     0,  1047,     0,     0,
       0,     0,  1048,  1049,  1050,  1051,   110,  1003,   637,  1004,
    1005,  1006,  1007,  1008,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,  1009,     0,     0,   122,   123,   124,     0,   125,
     126,   127,   128,   129,   130,   131,   132,  1010,   134,  1011,
    1012,     0,   137,   138,   139,   140,   141,   142,  1013,   607,
     143,   144,  1014,  1015,   147,     0,   148,   149,   150,   151,
     608,     0,   609,     0,  1016,   155,   156,   157,   158,   159,
     160,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,  2940,   173,   174,   175,   176,   177,
     178,   179,   180,  1017,  1018,   183,  1019,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   774,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,  1020,   212,   213,   214,   215,   216,   610,  1021,   218,
       0,   219,   220,  1022,   222,     0,   223,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,   232,     0,
    2941,  1024,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,  1025,  1026,     0,  1027,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
       0,     0,   278,   279,   280,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,  1028,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,  1029,   310,  1030,   312,   313,   314,
     315,  1031,   316,   317,   318,   319,  1032,   612,   321,  1033,
     323,   324,   325,     0,   326,   327,     0,     0,  1034,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   614,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,     0,     0,   348,   349,   615,   351,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     363,     0,   364,   365,   366,  1035,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
    2942,  1036,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,     0,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
    1037,   419,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   617,   435,     0,
     436,   437,     0,   438,   439,   440,   441,   442,   443,   444,
       0,   445,  1038,  1039,     0,     0,   448,   449,   618,   451,
     619,  1040,   453,   454,   620,   456,   457,   458,   459,   460,
       0,     0,   461,   462,   463,     0,   464,   465,   466,   467,
       0,   468,   469,   470,   471,   472,   473,  1041,     0,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,     0,
       0,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,  1042,     0,     0,     0,     0,     0,     0,  1043,
    1044,  1045,     0,     0,     0,     0,  1046,     0,  2943,     0,
       0,     0,     0,  1048,  1049,  1050,  1051,   110,  1003,   637,
    1004,  1005,  1006,  1007,  1008,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,  1009,     0,     0,   122,   123,   124,     0,
     125,   126,   127,   128,   129,   130,   131,  3407,  1010,   134,
    1011,  1012,     0,   137,   138,   139,   140,   141,   142,  1013,
     607,   143,   144,  1014,  1015,   147,     0,   148,   149,   150,
     151,   608,     0,   609,     0,  1016,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,   171,   172,  3408,   174,   175,   176,
     177,   178,   179,   180,  1017,  1018,   183,  1019,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   774,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1020,   212,   213,   214,   215,   216,   610,  1021,
     218,     0,   219,   220,  1022,   222,     0,   223,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,
       0,  1023,  1024,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,  1025,  1026,     0,  1027,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,     0,     0,   278,   279,   280,   281,     0,   282,   283,
     284,   285,   286,   287,   288,   289,  1028,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,  1029,   310,  1030,   312,   313,
     314,   315,  1031,   316,   317,   318,   319,  1032,   612,   321,
    1033,   323,   324,   325,     0,   326,   327,     0,     0,  1034,
     329,   330,     0,     0,   331,   332,   333,   334,   335,   336,
     614,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,     0,     0,   348,   349,   615,   351,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   363,     0,   364,   365,   366,  1035,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,  1036,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,  1037,   419,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   617,   435,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
     444,     0,   445,  1038,  1039,     0,     0,   448,   449,   618,
     451,   619,  1040,   453,   454,   620,   456,   457,  3409,   459,
     460,     0,     0,   461,   462,   463,     0,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,  1041,     0,
     475,   476,   477,   478,   479,   480,   481,     0,     0,   482,
       0,     0,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,  1042,     0,     0,     0,     0,     0,     0,
    1043,  1044,  1045,     0,     0,     0,     0,  1046,     0,  1047,
       0,     0,     0,     0,  1048,  1049,  1050,  1051,   110,  1003,
     637,  1004,  1005,  1006,  1007,  1008,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,  1009,     0,     0,   122,   123,   124,
       0,   125,   126,   127,   128,   129,   130,   131,   132,  1010,
     134,  1011,  1012,     0,   137,   138,   139,   140,   141,   142,
    1013,   607,   143,   144,  1014,  1015,   147,     0,   148,   149,
     150,   151,   608,     0,   609,     0,  1016,   155,   156,   157,
     158,   159,   160,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,  3408,   174,   175,
     176,   177,   178,   179,   180,  1017,  1018,   183,  1019,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   774,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,  1020,   212,   213,   214,   215,   216,   610,
    1021,   218,     0,   219,   220,  1022,   222,     0,   223,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
     232,     0,  1023,  1024,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,  1025,  1026,     0,  1027,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,  1028,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,  1029,   310,  1030,   312,
     313,   314,   315,  1031,   316,   317,   318,   319,  1032,   612,
     321,  1033,   323,   324,   325,     0,   326,   327,     0,     0,
    1034,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   614,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,   615,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,  1035,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,  1036,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,  1037,   419,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   617,
     435,     0,   436,   437,     0,   438,   439,   440,   441,   442,
     443,   444,     0,   445,  1038,  1039,     0,     0,   448,   449,
     618,   451,   619,  1040,   453,   454,   620,   456,   457,  3409,
     459,   460,     0,     0,   461,   462,   463,     0,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,  1041,
       0,   475,   476,   477,   478,   479,   480,   481,     0,     0,
     482,     0,     0,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,  1042,     0,     0,     0,     0,     0,
       0,  1043,  1044,  1045,     0,     0,     0,     0,  1046,     0,
    1047,     0,     0,     0,     0,  1048,  1049,  1050,  1051,   110,
    1003,   637,  1004,  1005,  1006,  1007,  1008,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,  1009,     0,     0,   122,   123,
     124,     0,   125,   126,   127,   128,   129,   130,   131,   132,
    1010,   134,  1011,  1012,     0,   137,   138,   139,   140,   141,
     142,  1013,   607,   143,   144,  1014,  1015,   147,     0,   148,
     149,   150,   151,   608,     0,   609,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,  1017,  1018,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   774,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1020,   212,   213,   214,   215,   216,
     610,  1021,   218,     0,   219,   220,  1022,   222,     0,   223,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,   232,     0,  1023,  1024,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,  1025,  1026,     0,
    1027,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,   281,     0,
     282,   283,   284,   285,   286,   287,   288,   289,  1028,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,  1029,   310,  1030,
     312,   313,   314,   315,     0,   316,   317,   318,   319,  1032,
     612,   321,  1033,   323,   324,   325,     0,   326,   327,     0,
       0,  1034,   329,   330,     0,     0,   331,   332,   333,   334,
     335,   336,   614,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   615,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,  1035,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,  1036,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,     0,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,  1037,   419,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     617,   435,     0,   436,   437,     0,   438,   439,   440,   441,
     442,   443,   444,     0,   445,  1038,  1039,     0,     0,   448,
     449,   618,   451,   619,  1040,   453,   454,   620,   456,   457,
     458,   459,   460,     0,     0,   461,   462,   463,     0,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
    1041,     0,   475,   476,   477,   478,   479,   480,   481,     0,
       0,   482,     0,     0,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     0,     0,     0,     0,     0,
       0,     0,  1464,  1465,     0,     0,     0,     0,     0,  1046,
       0,  1047,     0,     0,     0,     0,  1048,  1049,  1050,  1051,
     110,  1003,   637,  1004,  1005,  1006,  1007,  1008,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,  1009,     0,     0,   122,
     123,   124,     0,   125,   126,   127,   128,   129,   130,   131,
   -1999,  1010,   134,  1011,  1012,     0,   137,   138,   139,   140,
     141,   142,  1013,   607,   143,   144,  1014,  1015,   147,     0,
     148,   149,   150,   151,   608,     0,   609,     0,  1016,   155,
     156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,  3408,
     174,   175,   176,   177,   178,   179,   180,  1017,  1018,   183,
    1019,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   774,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,  1020,   212,   213,   214,   215,
     216,   610,  1021,   218,     0,   219,   220,  1022,   222,     0,
     223,     0,   224,   225,     0,   226,   227,   228,   229, -1999,
     231,     0,   232,     0,  1023,  1024,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243, -1999,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,  1025,  1026,
       0,  1027,     0,   267,     0,     0,   270,   271,   272,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280, -1999,
       0,   282,   283,   284,   285,   286,   287,   288,   289,  1028,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,  1029,   310,
    1030,   312,   313,   314,   315,     0,   316,   317,     0,   319,
    1032,   612,   321,  1033,   323,   324,   325,     0,   326,   327,
       0,     0,  1034,   329,   330,     0,     0,   331,   332,   333,
     334,   335,   336,   614,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     615,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,  1035,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,  1036,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
       0,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414, -1999,   416,   417,  1037,   419,     0,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   617,   435,     0,   436,   437,     0,   438,   439,   440,
     441,   442,   443,   444,     0,   445,  1038,  1039,     0,     0,
     448,   449,   618,   451,   619,  1040,   453,   454,   620,   456,
     457,  3409,   459,   460,     0,     0,   461,   462,   463,     0,
     464,   465,   466,   467,     0,   468,   469,   470,   471,   472,
     473,  1041,     0,   475,   476,   477,   478,   479,   480,   481,
       0,     0,   482,     0,     0,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503, -1999,     0,     0,     0,
       0,     0,     0,  1043,  1044,  1045,     0,     0,     0,     0,
    1046,     0,  1047,     0,     0,     0,     0,  1048,  1049,  1050,
    1051,   110,  1003,   637,  1004,  1005,     0,  1007,  1008,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,  1009,     0,     0,
     122,   123,   124,     0,   125,   126,   127,   128,   129,   130,
     131,   132,  1010,   134,  1011,  1012,     0,   137,   138,   139,
     140,   141,   142,  1013,   607,   143,   144,  1014,  1015,   147,
       0,   148,   149,   150,   151,   608,     0,   609,     0,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,  1017,  1018,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     774,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1020,   212,   213,   214,
     215,   216,   610,  1021,   218,     0,   219,   220,  1022,   222,
       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,   232,     0,  1023,  1024,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,  1025,
    1026,     0,  1027,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,     0,     0,   278,   279,   280,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
    1028,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,  1029,
     310,  1030,   312,   313,   314,   315,     0,   316,   317,   318,
     319,  1032,   612,   321,  1033,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   614,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,     0,     0,   348,
     349,   615,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
    1035,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,  2119,  2120,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,  1037,   419,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   617,   435,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,   444,     0,   445,  1038,  1039,     0,
       0,   448,   449,   618,   451,   619,  1040,   453,   454,   620,
     456,   457,   458,   459,   460,     0,     0,   461,   462,   463,
       0,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   473,  1041,     0,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,     0,     0,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     0,     0,     0,
       0,     0,     0,     0,  2121,  2122,     0,     0,     0,     0,
       0,  1046,     0,  1047,     0,     0,     0,     0,  1048,  1049,
    1050,  1051,   110,  1003,   637,  1004,  1005,  1006,  1007,  1008,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,     0,     0,  1009,     0,
       0,   122,   123,   124,     0,   125,   126,   127,   128,   129,
     130,   131,   132,  1010,   134,  1011,  1012,     0,   137,   138,
     139,   140,   141,   142,  1013,   607,   143,   144,  1014,  1015,
     147,     0,   148,   149,   150,   151,   608,     0,   609,     0,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,  1017,
    1018,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   774,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,  1020,   212,   213,
     214,   215,   216,   610,  1021,   218,     0,   219,   220,  1022,
     222,     0,   223,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,   232,     0,  1023,  1024,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
    1025,  1026,     0,  1027,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,  1028,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
    1029,   310,  1030,   312,   313,   314,   315,     0,   316,   317,
     318,   319,  1032,   612,   321,  1033,   323,   324,   325,     0,
     326,   327,     0,     0,  1034,   329,   330,     0,     0,   331,
     332,   333,   334,   335,   336,   614,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,     0,     0,
     348,   349,   615,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   363,     0,   364,   365,
     366,  1035,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,  1036,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,     0,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,  1037,   419,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   617,   435,     0,   436,   437,     0,   438,
     439,   440,   441,   442,   443,   444,     0,   445,  1038,  1039,
       0,     0,   448,   449,   618,   451,   619,  1040,   453,   454,
     620,   456,   457,   458,   459,   460,     0,     0,   461,   462,
     463,     0,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,   473,  1041,     0,   475,   476,   477,   478,   479,
     480,   481,     0,     0,   482,     0,     0,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     0,     0,
       0,     0,     0,     0,     0,  1464,  1465,     0,     0,     0,
       0,     0,  1046,     0,  1047,     0,     0,     0,     0,  1048,
    1049,  1050,  1051,   110,  1003,   637,  1004,  1005,     0,  1007,
    1008,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,  1009,
       0,     0,   122,   123,   124,     0,   125,   126,   127,   128,
     129,   130,   131,   132,  1010,   134,  1011,  1012,     0,   137,
     138,   139,   140,   141,   142,  1013,   607,   143,   144,  1014,
    1015,   147,     0,   148,   149,   150,   151,   608,     0,   609,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
    1017,  1018,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   774,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,  1020,   212,
     213,   214,   215,   216,   610,  1021,   218,     0,   219,   220,
    1022,   222,     0,   223,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,   232,     0,  1023,  1024,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,  1025,  1026,     0,  1027,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,  1028,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,  1029,   310,  1030,   312,   313,   314,   315,     0,   316,
     317,   318,   319,  1032,   612,   321,  1033,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   614,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,     0,
       0,   348,   349,   615,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,  1035,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,  1036,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,  1037,   419,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   617,   435,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,   444,     0,   445,  1038,
    1039,     0,     0,   448,   449,   618,   451,   619,  1040,   453,
     454,   620,   456,   457,   458,   459,   460,     0,     0,   461,
     462,   463,     0,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,  1041,     0,   475,   476,   477,   478,
     479,   480,   481,     0,     0,   482,     0,     0,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     0,
       0,     0,     0,     0,     0,   110,  1003,   637,  1004,  1005,
    1006,  1007,  1008,  1046,     0,  1047,     0,     0,     0,     0,
    1048,  1049,  1050,  1051,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1009,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,     0,  1010,   134,  1011,  1012,
       0,   137,   138,   139,   140,   141,   142,  1013,   607,   143,
     144,  1014,  1015,   147,     0,   148,   149,   150,   151,   608,
       0,   609,     0,  1016,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1017,  1018,   183,  1019,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   774,   199,   200,     0,   201,   202,
     203,     0,   204,     0,   206,     0,   207,   208,   209,   210,
    1020,   212,   213,   214,   215,   216,   610,  1021,   218,     0,
     219,   220,  1022,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,     0,   231,     0,   232,     0,  1023,
    1024,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1025,  1026,     0,  1027,     0,   267,     0,
       0,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1028,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1029,   310,  1030,   312,   313,   314,   315,
       0,   316,   317,     0,   319,  1032,   612,   321,  1033,   323,
     324,   325,     0,   326,   327,     0,     0,  1034,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   614,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   615,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1035,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1036,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,     0,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   416,   417,  1037,
     419,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   617,   435,     0,   436,
     437,     0,   438,   439,   440,   441,   442,   443,   444,     0,
     445,  1038,  1039,     0,     0,   448,   449,   618,   451,   619,
    1040,   453,   454,   620,   456,   457,   458,   459,   460,     0,
       0,   461,   462,   463,     0,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,  1041,     0,   475,   476,
     477,   478,   479,   480,   481,     0,     0,   482,     0,     0,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     0,     0,     0,     0,     0,     0,     0,  1043,  1044,
    1045,     0,   845,  1423,   637,  1046,     0,  1047,  1007,     0,
       0,     0,  1048,  1049,  1050,  1051,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,   846,     0,     0,     0,
       0,   847,   123,   124,     0,   125,   126,   127,   848,   129,
     130,   131,   849,   850,   851,   852,   853,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   854,   855,
     147,     0,   148,   149,   150,   151,   856,     0,   857,     0,
     858,   155,   156,   157,   158,   159,   859,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   860,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   861,
     862,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   863,   212,   213,
     214,   215,   216,   864,  1424,   218,     0,   219,   220,   865,
     222,     0,   223,     0,   224,   866,     0,   867,   227,   228,
     868,   869,   231,     0,   232,     0,   870,   871,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   872,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   873,   874,   259,   260,   261,   262,   263,
     875,   876,     0,   877,     0,   267,   878,   879,   270,   880,
     272,   273,   274,   275,   276,   277,     0,     0,   278,   881,
     280,   882,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   883,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     884,   885,   886,   312,   313,   314,   887,     0,   316,   317,
     888,   319,     0,   889,   321,   890,   323,   324,   325,     0,
     326,   327,  1425,     0,   328,   329,   330,     0,     0,   331,
     332,   891,   892,   335,   893,   894,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,     0,     0,
     348,   349,   895,   896,   352,   353,   897,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   363,     0,   364,   365,
     366,   898,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   899,   388,   389,   390,   900,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   901,   405,   406,   407,   408,   409,   410,   902,
     412,   413,   414,   903,   416,   417,   904,   419,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   905,   433,   906,   435,     0,   436,   437,     0,   438,
     907,   440,   441,   442,   443,   444,     0,   445,   908,   909,
       0,     0,   448,   449,   910,   451,   911,  1426,   453,   454,
     912,   456,   457,   458,   459,   460,     0,     0,   461,   462,
     463,     0,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,  1262,   914,     0,   475,   915,   477,   478,   479,
     480,   481,     0,     0,   482,     0,     0,   483,   484,   485,
     486,   487,   488,   916,   917,   918,   919,   920,   921,   922,
     923,   924,   925,   926,   500,   501,   502,   503,     0,     0,
       0,     0,     0,     0,     0,  1427,  1428,  2312,     0,   110,
    1003,   637,  1004,  1005,  2313,  1007,     0,     0,     0,     0,
       0,     0,  1051,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,  1009,     0,     0,   122,   123,
     124,     0,   125,   126,   127,   128,   129,   130,   131,   132,
    1010,   134,  1011,  1012,     0,   137,   138,   139,   140,   141,
     142,  1013,     0,   143,   144,  1014,  1015,   147,     0,   148,
     149,   150,   151,   152,     0,   153,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,  1017,  1018,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   774,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1020,   212,   213,   214,   215,   216,
     217,  1021,   218,     0,   219,   220,  1022,   222,     0,   223,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,   232,  2960,  1023,  1024,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,  1025,  1026,     0,
    1027,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,   281,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,  1029,   310,  1030,
     312,   313,   314,   315,     0,   316,   317,   318,   319,  1032,
     320,   321,  1033,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,  1035,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,     0,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,  1037,   419,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,   436,   437,     0,   438,   439,   440,   441,
     442,   443,   444,     0,   445,  1038,  1039,     0,     0,   448,
     449,   450,   451,   452,  1040,   453,   454,   455,   456,   457,
     458,   459,   460,     0,     0,   461,   462,   463,     0,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
    1041,     0,   475,   476,   477,   478,   479,   480,   481,     0,
       0,   482,     0,     0,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     0,     0,     0,     0,   110,
    1003,   637,  1004,  1005,     0,  1007,     0,     0,     0,  1046,
       0,  2671,     0,     0,     0,     0,  1048,  1049,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,  1009,     0,     0,   122,   123,
     124,     0,   125,   126,   127,   128,   129,   130,   131,   132,
    1010,   134,  1011,  1012,     0,   137,   138,   139,   140,   141,
     142,  1013,     0,   143,   144,  1014,  1015,   147,     0,   148,
     149,   150,   151,   152,     0,   153,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,  1017,  1018,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   774,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1020,   212,   213,   214,   215,   216,
     217,  1021,   218,     0,   219,   220,  1022,   222,     0,   223,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,   232,     0,  1023,  1024,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,  1025,  1026,     0,
    1027,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,   281,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,  1029,   310,  1030,
     312,   313,   314,   315,     0,   316,   317,   318,   319,  1032,
     320,   321,  1033,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,  1035,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,     0,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,  1037,   419,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,   436,   437,     0,   438,   439,   440,   441,
     442,   443,   444,     0,   445,  1038,  1039,     0,     0,   448,
     449,   450,   451,   452,  1040,   453,   454,   455,   456,   457,
     458,   459,   460,     0,     0,   461,   462,   463,     0,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
    1041,     0,   475,   476,   477,   478,   479,   480,   481,     0,
       0,   482,     0,     0,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     0,     0,     0,     0,   511,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1046,
       0,  2671,     0,     0,     0,     0,  1048,  1049,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,   961,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,  -523,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,  -523,   219,   220,   221,   222,  -523,   223,
       0,   224,     0,     0,     0,   227,   228,   512,     0,   231,
       0,   232,     0,   233,   234,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,  -523,
     266,     0,   267,     0,     0,   270,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,  -523,
     282,   283,   284,   285,   286,   287,   288,   289,   513,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,  -523,   326,   327,     0,
       0,   328,   329,   330,     0,  -523,   331,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,     0,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   416,   417,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   514,   433,
     434,   435,     0,   436,   437,     0,   438,     0,   440,   441,
     442,   443,   444,     0,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,     0,   453,   454,   455,   456,   457,
     458,   459,   460,  -523,     0,   461,   462,   463,     0,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
     474,     0,   475,     0,   477,   478,   479,   480,   481,     0,
       0,   482,     0,     0,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   511,     0,   534,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1116,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   512,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   513,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,     0,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   416,   417,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   514,   433,   434,   435,     0,   436,
     437,     0,   438,     0,   440,   441,   442,   443,   444,     0,
     445,   446,   447,     0,     0,   448,   449,   450,   451,   452,
       0,   453,   454,   455,   456,   457,   458,   459,   460,     0,
       0,   461,   462,   463,     0,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,   474,     0,   475,     0,
     477,   478,   479,   480,   481,     0,     0,   482,     0,     0,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   845,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2397,  3138,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     3,     4,     0,   846,     0,     0,     0,     0,
     847,   123,   124,     0,   125,   126,   127,   848,   129,   130,
     131,   849,   850,   851,   852,   853,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   854,   855,   147,
       0,   148,   149,   150,   151,   856,     0,   857,     0,   858,
     155,   156,   157,   158,   159,   859,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   860,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   861,   862,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   863,   212,   213,   214,
     215,   216,   864,     0,   218,     0,   219,   220,   865,   222,
       0,   223,     0,   224,   866,    21,   867,   227,   228,   868,
     869,   231,     0,   232,     0,   870,   871,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   872,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,   873,   874,   259,   260,   261,   262,   263,   875,
     876,     0,   877,     0,   267,   878,   879,   270,   880,   272,
     273,   274,   275,   276,   277,     0,     0,   278,   881,   280,
     882,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     883,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   884,
     885,   886,   312,   313,   314,   887,     0,   316,   317,   888,
     319,     0,   889,   321,   890,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
     891,   892,   335,   893,   894,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    25,    26,    27,     0,   348,
     349,   895,   896,   352,   353,   897,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
     898,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   899,   388,   389,   390,   900,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      32,   901,   405,   406,   407,   408,   409,   410,   902,   412,
     413,   414,   903,   416,   417,   904,   419,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     905,   433,   906,   435,     0,   436,   437,    37,   438,   907,
     440,   441,   442,   443,   444,     0,   445,   908,   909,     0,
       0,   448,   449,   910,   451,   911,     0,   453,   454,   912,
     456,   457,   458,   459,   460,     0,     0,   461,   462,   463,
      39,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   913,   914,     0,   475,   915,   477,   478,   479,   480,
     481,     0,     0,   482,     0,    43,   483,   484,   485,   486,
     487,   488,   916,   917,   918,   919,   920,   921,   922,   923,
     924,   925,   926,   500,   501,   502,   503,     0,   110,    44,
     534,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
       0,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,   607,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   608,     0,   609,     0,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   610,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,   225,    21,   226,   227,   228,   229,   230,   231,     0,
     232,     0,   233,   234,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   611,     0,   278,   279,   280,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,   317,   318,   319,     0,   612,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   613,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   614,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    25,    26,    27,     0,   348,   349,   615,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   616,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    32,     0,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   617,
     435,     0,   436,   437,    37,   438,   439,   440,   441,   442,
     443,   444,     0,   445,   446,   447,     0,     0,   448,   449,
     618,   451,   619,     0,   453,   454,   620,   456,   457,   458,
     459,   460,     0,     0,   461,   462,   463,    39,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   621,   474,
       0,   475,   476,   477,   478,   479,   480,   481,     0,     0,
     482,     0,    43,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     0,   110,    44,   534,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     622,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,   607,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   608,
       0,   609,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   610,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   611,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       0,   316,   317,   318,   319,     0,   612,   321,   322,   323,
     324,   325,     0,   326,   327,     0,   613,   328,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   614,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   615,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   616,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,     0,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   617,   435,     0,   436,
     437,     0,   438,   439,   440,   441,   442,   443,   444,     0,
     445,   446,   447,     0,     0,   448,   449,   618,   451,   619,
       0,   453,   454,   620,   456,   457,   458,   459,   460,     0,
       0,   461,   462,   463,     0,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   621,   474,     0,   475,   476,
     477,   478,   479,   480,   481,     0,     0,   482,     0,     0,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   110,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   622,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,   124,     0,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,   137,   138,   139,
     140,   141,   142,     0,   607,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   608,     0,   609,     0,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   610,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,   232,     0,   233,   234,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,     0,     0,   278,   279,   280,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   612,   321,   322,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
     333,   334,   335,   336,   614,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,     0,     0,   348,
     349,   615,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,   390,   391,   616,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   617,   435,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,   444,     0,   445,   446,   447,     0,
       0,   448,   449,   618,   451,   619,     0,   453,   454,   620,
     456,   457,   458,   459,   460,     0,     0,   461,   462,   463,
       0,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   473,   474,     0,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,     0,     0,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   110,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,     0,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,
     607,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   608,     0,   609,     0,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   610,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,
       0,   233,   234,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,     0,     0,   278,   279,   280,   281,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     0,   316,   317,   318,   319,     0,   612,   321,
     322,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   332,   333,   334,   335,   336,
     614,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,     0,     0,   348,   349,   615,   351,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   617,   435,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,   447,     0,     0,   448,   449,   618,
     451,   619,     0,   453,   454,   620,   456,   457,   458,   459,
     460,     0,     0,   461,   462,   463,     0,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,   474,     0,
     475,   476,   477,   478,   479,   480,   481,     0,     0,   482,
       0,     0,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   511,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3230,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
     707,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,
     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,     0,     0,
       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,    21,     0,   227,
     228,   512,     0,   231,     0,   232,     0,   233,   234,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,     0,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,   267,     0,     0,   270,
       0,   272,   273,   274,   275,   276,   277,     0,     0,   278,
       0,   280,     0,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   513,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,     0,   311,   312,   313,   314,   315,     0,   316,
     317,     0,   319,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,   333,     0,   335,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    25,    26,    27,
       0,   348,   349,   350,     0,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    32,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   416,   417,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   514,   433,   434,   435,     0,   436,   437,    37,
     438,     0,   440,   441,   442,   443,   444,     0,   445,   708,
     447,     0,     0,   709,   449,   450,   451,   452,     0,   453,
     454,   455,   456,   457,   458,   459,   460,     0,     0,   461,
     462,   463,    39,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   621,   474,     0,   475,     0,   477,   478,
     479,   480,   481,     0,     0,   482,     0,    43,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   511,
       0,    44,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,    21,     0,   227,   228,   512,     0,   231,
       0,   232,     0,   233,   234,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   513,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    25,    26,    27,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    32,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   416,   417,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   514,   433,
     434,   435,     0,   436,   437,    37,   438,     0,   440,   441,
     442,   443,   444,     0,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,     0,   453,   454,   455,   456,   457,
     458,   459,   460,     0,     0,   461,   462,   463,    39,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   621,
     474,     0,   475,     0,   477,   478,   479,   480,   481,     0,
       0,   482,     0,    43,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     0,   511,    44,   534,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,
     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,
     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,
       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   512,     0,   231,     0,   232,     0,
     233,   234,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,     0,   258,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,   267,
       0,     0,   270,     0,   272,   273,   274,   275,   276,   277,
       0,     0,   278,     0,   280,     0,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   513,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,     0,   311,   312,   313,   314,
     315,     0,   316,   317,     0,   319,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,     0,   328,   329,
     330,     0,     0,   331,   332,   333,     0,   335,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,     0,     0,   348,   349,   350,     0,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,     0,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   416,   417,
     418,   419,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   514,   433,   434,   435,     0,
     436,   437,     0,   438,     0,   440,   441,   442,   443,   444,
       0,   445,   446,   447,     0,     0,   448,   449,   450,   451,
     452,     0,   453,   454,   455,   456,   457,   458,   459,   460,
       0,     0,   461,   462,   463,     0,   464,   465,   466,   467,
       0,   468,   469,   470,   471,   472,   473,   474,     0,   475,
       0,   477,   478,   479,   480,   481,     0,     0,   482,     0,
       0,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   511,     0,   534,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   946,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   123,   124,     0,   125,   126,   127,     0,   129,
     130,   131,   132,   133,     0,   135,   136,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   152,     0,     0,     0,
     154,   155,   156,   157,   158,   159,     0,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     512,     0,   231,     0,   232,     0,   233,   234,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,     0,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,   267,     0,     0,   270,     0,
     272,   273,   274,   275,   276,   277,     0,     0,   278,     0,
     280,     0,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   513,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,     0,   311,   312,   313,   314,   315,     0,   316,   317,
       0,   319,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,     0,   328,   329,   330,     0,     0,   331,
     332,   333,     0,   335,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,     0,     0,
     348,   349,   350,     0,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,     0,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   416,   417,   418,   419,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   514,   433,   434,   435,     0,   436,   437,     0,   438,
       0,   440,   441,   442,   443,   444,     0,   445,   446,   447,
       0,     0,   448,   449,   450,   451,   452,     0,   453,   454,
     455,   456,   457,   458,   459,   460,     0,     0,   461,   462,
     463,     0,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,   473,   474,     0,   475,     0,   477,   478,   479,
     480,   481,     0,     0,   482,     0,     0,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   511,     0,
     534,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1516,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,
       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,
     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   512,     0,   231,     0,
     232,     0,   233,   234,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,     0,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,     0,     0,   270,     0,   272,   273,   274,   275,
     276,   277,     0,     0,   278,     0,   280,     0,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   513,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,     0,   311,   312,
     313,   314,   315,     0,   316,   317,     0,   319,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,   333,     0,   335,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,   350,     0,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     416,   417,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   514,   433,   434,
     435,     0,   436,   437,     0,   438,     0,   440,   441,   442,
     443,   444,     0,   445,   446,   447,     0,     0,   448,   449,
     450,   451,   452,     0,   453,   454,   455,   456,   457,   458,
     459,   460,     0,     0,   461,   462,   463,     0,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,   474,
       0,   475,     0,   477,   478,   479,   480,   481,     0,     0,
     482,     0,     0,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   511,     0,   534,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2145,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   512,     0,   231,     0,   232,     0,   233,   234,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,     0,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,   267,     0,     0,
     270,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,     0,   280,     0,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   513,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,     0,   311,   312,   313,   314,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,     0,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   416,   417,   418,   419,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   514,   433,   434,   435,     0,   436,   437,
       0,   438,     0,   440,   441,   442,   443,   444,     0,   445,
     446,   447,     0,     0,   448,   449,   450,   451,   452,     0,
     453,   454,   455,   456,   457,   458,   459,   460,     0,     0,
     461,   462,   463,     0,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,   474,     0,   475,     0,   477,
     478,   479,   480,   481,     0,     0,   482,     0,     0,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     511,     0,   534,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2397,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   512,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   513,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
       0,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   416,   417,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   514,
     433,   434,   435,     0,   436,   437,     0,   438,     0,   440,
     441,   442,   443,   444,     0,   445,   446,   447,     0,     0,
     448,   449,   450,   451,   452,     0,   453,   454,   455,   456,
     457,   458,   459,   460,     0,     0,   461,   462,   463,     0,
     464,   465,   466,   467,     0,   468,   469,   470,   471,   472,
     473,   474,     0,   475,     0,   477,   478,   479,   480,   481,
       0,     0,   482,     0,     0,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   511,     0,   534,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2505,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,
     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,
     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,
       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   512,     0,   231,     0,   232,     0,
     233,   234,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,     0,   258,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,   267,
       0,     0,   270,     0,   272,   273,   274,   275,   276,   277,
       0,     0,   278,     0,   280,     0,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   513,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,     0,   311,   312,   313,   314,
     315,     0,   316,   317,     0,   319,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,     0,   328,   329,
     330,     0,     0,   331,   332,   333,     0,   335,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,     0,     0,   348,   349,   350,     0,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,     0,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   416,   417,
     418,   419,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   514,   433,   434,   435,     0,
     436,   437,     0,   438,     0,   440,   441,   442,   443,   444,
       0,   445,   446,   447,     0,     0,   448,   449,   450,   451,
     452,     0,   453,   454,   455,   456,   457,   458,   459,   460,
       0,     0,   461,   462,   463,     0,   464,   465,   466,   467,
       0,   468,   469,   470,   471,   472,   473,   474,     0,   475,
       0,   477,   478,   479,   480,   481,     0,     0,   482,     0,
       0,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   511,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3132,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   123,   124,     0,   125,   126,   127,     0,   129,
     130,   131,   132,   133,     0,   135,   136,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   152,     0,     0,     0,
     154,   155,   156,   157,   158,   159,     0,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     512,     0,   231,     0,   232,     0,   233,   234,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,     0,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,   267,     0,     0,   270,     0,
     272,   273,   274,   275,   276,   277,     0,     0,   278,     0,
     280,     0,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   513,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,     0,   311,   312,   313,   314,   315,     0,   316,   317,
       0,   319,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,     0,   328,   329,   330,     0,     0,   331,
     332,   333,     0,   335,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,     0,     0,
     348,   349,   350,     0,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,     0,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   416,   417,   418,   419,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   514,   433,   434,   435,     0,   436,   437,     0,   438,
       0,   440,   441,   442,   443,   444,     0,   445,   446,   447,
       0,     0,   448,   449,   450,   451,   452,     0,   453,   454,
     455,   456,   457,   458,   459,   460,     0,     0,   461,   462,
     463,     0,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,   473,   474,     0,   475,     0,   477,   478,   479,
     480,   481,     0,     0,   482,     0,     0,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   511,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2003,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,
       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,
     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   512,     0,   231,     0,
     232,     0,   233,   234,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,     0,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,     0,     0,   270,     0,   272,   273,   274,   275,
     276,   277,     0,     0,   278,     0,   280,     0,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   513,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,     0,   311,   312,
     313,   314,   315,     0,   316,   317,     0,   319,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,   333,     0,   335,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,   350,     0,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     416,   417,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   514,   433,   434,
     435,     0,   436,   437,     0,   438,     0,   440,   441,   442,
     443,   444,     0,   445,   446,   447,     0,     0,   448,   449,
     450,   451,   452,     0,   453,   454,   455,   456,   457,   458,
     459,   460,     0,     0,   461,   462,   463,     0,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,   474,
       0,   475,     0,   477,   478,   479,   480,   481,     0,     0,
     482,     0,     0,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   511,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2105,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   512,     0,   231,     0,   232,     0,   233,   234,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,     0,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,   267,     0,     0,
     270,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,     0,   280,     0,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   513,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,     0,   311,   312,   313,   314,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,     0,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   416,   417,   418,   419,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   514,   433,   434,   435,     0,   436,   437,
       0,   438,     0,   440,   441,   442,   443,   444,     0,   445,
     446,   447,     0,     0,   448,   449,   450,   451,   452,     0,
     453,   454,   455,   456,   457,   458,   459,   460,     0,     0,
     461,   462,   463,     0,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,   474,     0,   475,     0,   477,
     478,   479,   480,   481,     0,     0,   482,     0,     0,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       0,  2817,  1423,   637,     0,     0,  1983,  1007,     0,     0,
       0,     0,     0,  1984,  1985,     0,  2994,  1986,  1987,  1988,
     111,   112,   113,   114,   115,   116,   117,   118,  1195,   119,
     120,   121,  1196,  1197,  1198,  2818,  1199,  1200,  1201,  1202,
    2819,   123,   124,  1203,   125,   126,   127,  2820,   129,   130,
     131,     0,   762,  2821,   764,   765,  1204,   137,   138,   139,
     140,   141,   142,  1205,  1206,   143,   144,   766,   767,   147,
    1207,   148,   149,   150,   151,     0,  1208,  2822,  1209,  2823,
     155,   156,   157,   158,   159,  2824,   161,   162,   163,  1210,
     164,   165,   166,   167,   168,   169,  1211,  2825,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   772,   773,
     183,  1212,   184,  1213,   185,   186,   187,   188,   189,   190,
    1214,   191,   192,   193,   194,   195,  1215,  1216,   196,   197,
     774,   199,   200,  1217,   201,   202,   203,  1218,   204,   205,
     206,  1219,   207,   208,   209,   210,     0,   212,   213,   214,
     215,   216,     0,  1220,   218,  1221,   219,   220,   775,   222,
    1222,   223,  1223,   224,  2826,  1224,  2827,   227,   228,  2828,
    2829,   231,  1225,   232,  1226,     0,     0,   235,   236,  1227,
     237,   238,   239,   240,   241,   242,   243,  2830,   245,   246,
     247,   248,  1228,   249,   250,   251,   252,   253,   254,   255,
    1229,   256,  2831,     0,   259,   260,   261,   262,   263,   782,
     783,  1230,   784,  1231,   267,  2832,  2833,   270,  2834,   272,
     273,   274,   275,   276,   277,  1232,  1233,   278,  2835,   280,
    2836,  1234,   282,   283,   284,   285,   286,   287,   288,   289,
    2837,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   791,
    2838,   793,   312,   313,   314,  2839,  1235,   316,   317,  2840,
     319,  1236,     0,   321,   795,   323,   324,   325,  1237,   326,
     327,  1238,  1239,  2841,   329,   330,  1240,  1241,   331,   332,
       0,  2842,   335,  2843,     0,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,  1242,  1243,  1244,  1245,   348,
     349,     0,  2844,   352,   353,     0,   355,   356,   357,  1246,
     358,   359,   360,   361,   362,   363,  1247,   364,   365,   366,
     799,   368,   369,   370,   371,  1248,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,  1249,
     385,   386,  2845,   388,   389,   390,   801,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
    1250,  2846,   405,   406,   407,   408,   409,   410,  2847,   412,
     413,   414,  2848,   416,   417,   805,   419,  1251,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
    2849,   433,     0,   435,  1252,   436,   437,  1253,   438,  2850,
     440,   441,   442,   443,   444,  1254,   445,   808,   809,  1255,
    1256,   448,   449,     0,   451,     0,  1257,   453,   454,  2851,
     456,   457,   458,   459,   460,  2852,  1259,   461,   462,   463,
    1260,   464,   465,   466,   467,  1261,   468,   469,   470,   471,
     472,     0,   812,  1263,   475,  2853,   477,   478,   479,   480,
     481,  1264,  1265,   482,  1266,  1267,   483,   484,   485,   486,
     487,   488,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   500,   501,   502,   503,     0,   511,     0,
    1989,  1990,  1991,  1983,  2854,  2855,  1994,  1995,  1996,  1997,
    1984,  1985,     0,     0,  1986,  1987,  1988,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,
       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,
     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   512,     0,   231,     0,
     232,     0,   233,   234,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,     0,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,     0,     0,   270,     0,   272,   273,   274,   275,
     276,   277,     0,     0,   278,     0,   280,     0,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   513,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,     0,   311,   312,
     313,   314,   315,     0,   316,   317,     0,   319,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,   333,     0,   335,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,   350,     0,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     416,   417,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   514,   433,   434,
     435,     0,   436,   437,     0,   438,     0,   440,   441,   442,
     443,   444,     0,   445,   446,   447,     0,     0,   448,   449,
     450,   451,   452,     0,   453,   454,   455,   456,   457,   458,
     459,   460,     0,     0,   461,   462,   463,     0,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,   474,
       0,   475,     0,   477,   478,   479,   480,   481,     0,     0,
     482,     0,     0,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     0,     0,     0,  1989,  1990,  1991,
       0,  1992,  1993,  1994,  1995,  1996,  1997,  1573,     0,     0,
    1574,     0,     0,     0,  1575,  1576,  1577,  1578,  1579,  1580,
    1581,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1582,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1584,     0,  1573,     0,     0,
    1574,     0,  1585,     0,  1575,  1576,  1577,  1578,  1579,  1580,
    1581,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1582,     0,  1586,     0,     0,
       0,     0,     0,     0,     0,  1584,     0,  1573,     0,     0,
    1574,     0,  1585,     0,  1575,  1576,  1577,  1578,  1579,  1580,
    1581,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1582,     0,  1586,     0,     0,
       0,     0,     0,     0,     0,  1584,     0,  1573,     0,     0,
    1574,     0,  1585,     0,  1575,  1576,  1577,  1578,  1579,  1580,
    1581,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1582,     0,  1586,     0,     0,
       0,     0,     0,     0,     0,  1584,     0,  1573,     0,     0,
    1574,  1587,  1585,     0,  1575,  1576,  1577,  1578,  1579,  1580,
    1581,     0,     0,     0,     0,     0,     0,     0,  1588,     0,
       0,     0,     0,  1589,     0,  1582,     0,  1586,     0,     0,
       0,     0,     0,     0,     0,  1584,     0,     0,     0,     0,
       0,  1587,  1585,     0,     0,     0,  1590,  1591,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1588,     0,
       0,  1592,     0,  1589,     0,     0,     0,  1586,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1587,     0,     0,     0,     0,  1590,  1591,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1593,  1588,     0,
    1594,  1592,     0,  1589,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1595,     0,     0,  1596,     0,     0,
       0,  1587,     0,     0,     0,     0,  1590,  1591,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1593,  1588,     0,
    1594,  1592,     0,  1589,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1595,     0,     0,  1596,     0,     0,
       0,  1587,     0,     0,     0,     0,  1590,  1591,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1593,  1588,     0,
    1594,  1592,     0,  1589,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1595,     0,     0,  1596,     0,     0,
       0,     0,     0,     0,     0,     0,  1590,  1591,     0,     0,
       0,     0,     0,  1597,     0,     0,     0,  1593,     0,     0,
    1594,  1592,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1595,     0,     0,  1596,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1597,     0,     0,     0,  1593,     0,     0,
    1594,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1595,     0,     0,  1596,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1597,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1598,     0,
       0,  1599,  1600,  1601,     0,  1602,  1603,  1604,  1605,  1606,
    1607,     0,     0,  1597,     0,  2763,     0,     0,     0,     0,
       0,     0,     0,  1573,     0,     0,  1574,     0,     0,     0,
    1575,  1576,  1577,  1578,  1579,  1580,  1581,     0,  1598,     0,
       0,  1599,  1600,  1601,     0,  1602,  1603,  1604,  1605,  1606,
    1607,  1582,     0,  1597,     0,  2986,     0,     0,     0,     0,
       0,  1584,     0,  1573,     0,     0,  1574,     0,  1585,     0,
    1575,  1576,  1577,  1578,  1579,  1580,  1581,     0,  1598,     0,
       0,  1599,  1600,  1601,     0,  1602,  1603,  1604,  1605,  1606,
    1607,  1582,     0,  1586,     0,  2993,     0,     0,     0,     0,
       0,  1584,     0,  1573,     0,     0,  1574,     0,  1585,     0,
    1575,  1576,  1577,  1578,  1579,  1580,  1581,     0,  1598,     0,
       0,  1599,  1600,  1601,     0,  1602,  1603,  1604,  1605,  1606,
    1607,  1582,     0,  1586,     0,  3151,     0,     0,     0,     0,
       0,  1584,     0,  1573,     0,     0,  1574,     0,  1585,     0,
    1575,  1576,  1577,  1578,  1579,  1580,  1581,     0,  1598,     0,
       0,  1599,  1600,  1601,     0,  1602,  1603,  1604,  1605,  1606,
    1607,  1582,     0,  1586,     0,  3173,     0,     0,     0,     0,
       0,  1584,     0,  1573,     0,     0,  1574,  1587,  1585,     0,
    1575,  1576,  1577,  1578,  1579,  1580,  1581,     0,     0,     0,
       0,     0,     0,     0,  1588,     0,     0,     0,     0,  1589,
       0,  1582,     0,  1586,     0,     0,     0,     0,     0,     0,
       0,  1584,     0,     0,     0,     0,     0,  1587,  1585,     0,
       0,     0,  1590,  1591,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1588,     0,     0,  1592,     0,  1589,
       0,     0,     0,  1586,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1587,     0,     0,
       0,     0,  1590,  1591,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1593,  1588,     0,  1594,  1592,     0,  1589,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1595,     0,     0,  1596,     0,     0,     0,  1587,     0,     0,
       0,     0,  1590,  1591,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1593,  1588,     0,  1594,  1592,     0,  1589,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1595,     0,     0,  1596,     0,     0,     0,  1587,     0,     0,
       0,     0,  1590,  1591,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1593,  1588,     0,  1594,  1592,     0,  1589,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1595,     0,     0,  1596,     0,     0,     0,     0,     0,     0,
       0,     0,  1590,  1591,     0,     0,     0,     0,     0,  1597,
       0,     0,     0,  1593,     0,     0,  1594,  1592,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1595,     0,     0,  1596,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1597,
       0,     0,     0,  1593,     0,     0,  1594,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1595,     0,     0,  1596,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1597,
    1573,     0,     0,  1574,     0,     0,     0,  1575,  1576,     0,
       0,  1579,  1580,  1581,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1598,     0,     0,  1599,  1600,  1601,
       0,  1602,  1603,  1604,  1605,  1606,  1607,     0,  1584,  1597,
       0,  3281,     0,     0,     0,  1585,     0,     0,     0,  1573,
       0,     0,  1574,     0,     0,     0,  1575,  1576,  1577,  1578,
    1579,  1580,  1581,     0,  1598,     0,     0,  1599,  1600,  1601,
    1586,  1602,  1603,  1604,  1605,  1606,  1607,  1582,     0,  1597,
       0,  3343,     0,     0,     0,     0,     0,  1584,     0,     0,
    1573,     0,     0,  1574,  1585,     0,     0,  1575,  1576,  1577,
    1578,  1579,  1580,  1581,  1598,     0,     0,  1599,  1600,  1601,
       0,  1602,  1603,  1604,  1605,  1606,  1607,     0,  1582,  1586,
       0,  3366,     0,     0,     0,     0,     0,     0,  1584,     0,
       0,     0,     0,     0,     0,  1585,     0,     0,     0,     0,
       0,     0,     0,     0,  1598,     0,     0,  1599,  1600,  1601,
       0,  1602,  1603,  1604,  1605,  1606,  1607,     0,     0,  1758,
    1586,     0,     0,     0,  1587,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1588,     0,     0,  1598,     0,  1589,  1599,  1600,  1601,
       0,  1602,  1603,  1604,  1605,  1606,  1607,     0,     0,  2717,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1590,
    1591,     0,     0,  1587,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1592,     0,     0,     0,     0,     0,
    1588,     0,     0,     0,     0,  1589,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1587,     0,     0,     0,  1590,  1591,
    1593,     0,     0,  1594,     0,     0,     0,     0,     0,     0,
       0,  1588,     0,  1592,     0,     0,  1589,  1595,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1590,
    1591,     0,     0,     0,     0,     0,     0,     0,     0,  1593,
       0,     0,  1594,     0,  1592,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1595,     0,     0,  1596,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1593,     0,     0,  1594,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1595,     0,     0,
    1596,     0,     0,     0,     0,     0,  1597,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1597,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1597,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1598,     0,     0,  1599,  1600,  1601,     0,  1602,  1603,
    1604,  1605,  1606,  1607,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1598,     0,     0,  1599,  1600,  1601,     0,  1602,  1603,  1604,
    1605,  1606,  1607,     0,     0,  3141,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1194,     0,
       0,  1598,     0,     0,  1599,  1600,  1601,     0,  1602,  1603,
    1604,  1605,  1606,  1607,     0,     0,  3327,   111,   112,   113,
     114,   115,   116,   117,   118,  1195,   119,   120,   121,  1196,
    1197,  1198,   846,  1199,  1200,  1201,  1202,   847,   123,   124,
    1203,   125,   126,   127,   848,   129,   130,   131,   849,   850,
     851,   852,   853,  1204,   137,   138,   139,   140,   141,   142,
    1205,  1206,   143,   144,   854,   855,   147,  1207,   148,   149,
     150,   151,   856,  1208,   857,  1209,   858,   155,   156,   157,
     158,   159,   859,   161,   162,   163,  1210,   164,   165,   166,
     167,   168,   169,  1211,   860,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   861,   862,   183,  1212,   184,
    1213,   185,   186,   187,   188,   189,   190,  1214,   191,   192,
     193,   194,   195,  1215,  1216,   196,   197,   198,   199,   200,
    1217,   201,   202,   203,  1218,   204,   205,   206,  1219,   207,
     208,   209,   210,   863,   212,   213,   214,   215,   216,   864,
    1220,   218,  1221,   219,   220,   865,   222,  1222,   223,  1223,
     224,   866,  1224,   867,   227,   228,   868,   869,   231,  1225,
     232,  1226,   870,   871,   235,   236,  1227,   237,   238,   239,
     240,   241,   242,   243,   872,   245,   246,   247,   248,  1228,
     249,   250,   251,   252,   253,   254,   255,  1229,   256,   873,
     874,   259,   260,   261,   262,   263,   875,   876,  1230,   877,
    1231,   267,   878,   879,   270,   880,   272,   273,   274,   275,
     276,   277,  1232,  1233,   278,   881,   280,   882,  1234,   282,
     283,   284,   285,   286,   287,   288,   289,   883,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   884,   885,   886,   312,
     313,   314,   887,  1235,   316,   317,   888,   319,  1236,   889,
     321,   890,   323,   324,   325,  1237,   326,   327,  1238,  1239,
     328,   329,   330,  1240,  1241,   331,   332,   891,   892,   335,
     893,   894,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,  1242,  1243,  1244,  1245,   348,   349,   895,   896,
     352,   353,   897,   355,   356,   357,  1246,   358,   359,   360,
     361,   362,   363,  1247,   364,   365,   366,   898,   368,   369,
     370,   371,  1248,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,  1249,   385,   386,   899,
     388,   389,   390,   900,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,  1250,   901,   405,
     406,   407,   408,   409,   410,   902,   412,   413,   414,   903,
     416,   417,   904,   419,  1251,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   905,   433,   906,
     435,  1252,   436,   437,  1253,   438,   907,   440,   441,   442,
     443,   444,  1254,   445,   908,   909,  1255,  1256,   448,   449,
     910,   451,   911,  1257,   453,   454,   912,   456,   457,   458,
     459,   460,  1258,  1259,   461,   462,   463,  1260,   464,   465,
     466,   467,  1261,   468,   469,   470,   471,   472,  1262,   914,
    1263,   475,   915,   477,   478,   479,   480,   481,  1264,  1265,
     482,  1266,  1267,   483,   484,   485,   486,   487,   488,   916,
     917,   918,   919,   920,   921,   922,   923,   924,   925,   926,
     500,   501,   502,   503,   511,     0,     0,     0,     0,     0,
       0,     0,     0,  2014,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   512,     0,   231,     0,   232,     0,   233,   234,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,     0,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,   267,     0,     0,
     270,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,     0,   280,     0,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   513,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,     0,   311,   312,   313,   314,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,     0,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   416,   417,   418,   419,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   514,   433,   434,   435,     0,   436,   437,
       0,   438,     0,   440,   441,   442,   443,   444,     0,   445,
     446,   447,     0,     0,   448,   449,   450,   451,   452,     0,
     453,   454,   455,   456,   457,   458,   459,   460,     0,     0,
     461,   462,   463,     0,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,   474,     0,   475,     0,   477,
     478,   479,   480,   481,     0,     0,   482,     0,     0,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     511,     0,     0,     0,     0,     0,     0,     0,     0,  2637,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   512,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   513,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
       0,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   416,   417,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   514,
     433,   434,   435,     0,   436,   437,     0,   438,     0,   440,
     441,   442,   443,   444,     0,   445,   446,   447,     0,     0,
     448,   449,   450,   451,   452,     0,   453,   454,   455,   456,
     457,   458,   459,   460,     0,     0,   461,   462,   463,     0,
     464,   465,   466,   467,     0,   468,   469,   470,   471,   472,
     473,   474,     0,   475,     0,   477,   478,   479,   480,   481,
       0,     0,   482,     0,     0,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   845,  1423,   637,     0,
       0,     0,  1007,     0,     0,  2640,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
     846,     0,     0,     0,     0,   847,   123,   124,     0,   125,
     126,   127,   848,   129,   130,   131,   849,   850,   851,   852,
     853,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   854,   855,   147,     0,   148,   149,   150,   151,
     856,     0,   857,     0,   858,   155,   156,   157,   158,   159,
     859,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   860,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   861,   862,   183,  1630,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   863,   212,   213,   214,   215,   216,   864,  1424,   218,
       0,   219,   220,   865,   222,     0,   223,     0,   224,   866,
       0,   867,   227,   228,   868,   869,   231,     0,   232,     0,
     870,   871,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,   872,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   873,   874,   259,
     260,   261,   262,   263,   875,   876,     0,   877,     0,   267,
     878,   879,   270,   880,   272,   273,   274,   275,   276,   277,
       0,     0,   278,   881,   280,   882,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   883,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   884,   885,   886,   312,   313,   314,
     887,     0,   316,   317,   888,   319,     0,   889,   321,   890,
     323,   324,   325,     0,   326,   327,  1425,     0,   328,   329,
     330,     0,     0,   331,   332,   891,   892,   335,   893,   894,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,     0,     0,   348,   349,   895,   896,   352,   353,
     897,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     363,     0,   364,   365,   366,   898,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   899,   388,   389,
     390,   900,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   901,   405,   406,   407,
     408,   409,   410,   902,   412,   413,   414,   903,   416,   417,
     904,   419,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   905,   433,   906,   435,     0,
     436,   437,     0,   438,   907,   440,   441,   442,   443,   444,
       0,   445,   908,   909,     0,     0,   448,   449,   910,   451,
     911,  1426,   453,   454,   912,   456,   457,   458,   459,   460,
       0,     0,   461,   462,   463,     0,   464,   465,   466,   467,
       0,   468,   469,   470,   471,   472,  1262,   914,     0,   475,
     915,   477,   478,   479,   480,   481,     0,     0,   482,     0,
       0,   483,   484,   485,   486,   487,   488,   916,   917,   918,
     919,   920,   921,   922,   923,   924,   925,   926,   500,   501,
     502,   503,   845,  1423,   637,     0,     0,     0,  1007,  1427,
    1428,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,   846,     0,     0,     0,
       0,   847,   123,   124,     0,   125,   126,   127,   848,   129,
     130,   131,   849,   850,   851,   852,   853,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   854,   855,
     147,     0,   148,   149,   150,   151,   856,     0,   857,     0,
     858,   155,   156,   157,   158,   159,   859,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   860,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   861,
     862,   183,  1632,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   863,   212,   213,
     214,   215,   216,   864,  1424,   218,     0,   219,   220,   865,
     222,     0,   223,     0,   224,   866,     0,   867,   227,   228,
     868,   869,   231,     0,   232,     0,   870,   871,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   872,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   873,   874,   259,   260,   261,   262,   263,
     875,   876,     0,   877,     0,   267,   878,   879,   270,   880,
     272,   273,   274,   275,   276,   277,     0,     0,   278,   881,
     280,   882,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   883,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     884,   885,   886,   312,   313,   314,   887,     0,   316,   317,
     888,   319,     0,   889,   321,   890,   323,   324,   325,     0,
     326,   327,  1425,     0,   328,   329,   330,     0,     0,   331,
     332,   891,   892,   335,   893,   894,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,     0,     0,
     348,   349,   895,   896,   352,   353,   897,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   363,     0,   364,   365,
     366,   898,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   899,   388,   389,   390,   900,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   901,   405,   406,   407,   408,   409,   410,   902,
     412,   413,   414,   903,   416,   417,   904,   419,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   905,   433,   906,   435,     0,   436,   437,     0,   438,
     907,   440,   441,   442,   443,   444,     0,   445,   908,   909,
       0,     0,   448,   449,   910,   451,   911,  1426,   453,   454,
     912,   456,   457,   458,   459,   460,     0,     0,   461,   462,
     463,     0,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,  1262,   914,     0,   475,   915,   477,   478,   479,
     480,   481,     0,     0,   482,     0,     0,   483,   484,   485,
     486,   487,   488,   916,   917,   918,   919,   920,   921,   922,
     923,   924,   925,   926,   500,   501,   502,   503,   845,  1423,
     637,     0,     0,     0,  1007,  1427,  1428,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,   846,     0,     0,     0,     0,   847,   123,   124,
       0,   125,   126,   127,   848,   129,   130,   131,   849,   850,
     851,   852,   853,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   854,   855,   147,     0,   148,   149,
     150,   151,   856,     0,   857,     0,   858,   155,   156,   157,
     158,   159,   859,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   860,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   861,   862,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   863,   212,   213,   214,   215,   216,   864,
    1424,   218,     0,   219,   220,   865,   222,     0,   223,     0,
     224,   866,     0,   867,   227,   228,   868,   869,   231,     0,
     232,     0,   870,   871,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   872,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   873,
     874,   259,   260,   261,   262,   263,   875,   876,     0,   877,
       0,   267,   878,   879,   270,   880,   272,   273,   274,   275,
     276,   277,     0,     0,   278,   881,   280,   882,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   883,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   884,   885,   886,   312,
     313,   314,   887,     0,   316,   317,   888,   319,     0,   889,
     321,   890,   323,   324,   325,     0,   326,   327,  1425,     0,
     328,   329,   330,     0,     0,   331,   332,   891,   892,   335,
     893,   894,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,   895,   896,
     352,   353,   897,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,   898,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   899,
     388,   389,   390,   900,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,   901,   405,
     406,   407,   408,   409,   410,   902,   412,   413,   414,   903,
     416,   417,   904,   419,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   905,   433,   906,
     435,     0,   436,   437,     0,   438,   907,   440,   441,   442,
     443,   444,     0,   445,   908,   909,     0,     0,   448,   449,
     910,   451,   911,  1426,   453,   454,   912,   456,   457,   458,
     459,   460,     0,     0,   461,   462,   463,     0,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,  1262,   914,
       0,   475,   915,   477,   478,   479,   480,   481,     0,     0,
     482,     0,     0,   483,   484,   485,   486,   487,   488,   916,
     917,   918,   919,   920,   921,   922,   923,   924,   925,   926,
     500,   501,   502,   503,     0,     0,  1573,     0,     0,  1574,
       0,  1427,  1428,  1575,  1576,  1577,  1578,  1579,  1580,  1581,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1582,     0,     0,     0,     0,  2111,
       0,     0,     0,     0,  1584,     0,  1573,     0,     0,  1574,
       0,  1585,     0,  1575,  1576,  1577,  1578,  1579,  1580,  1581,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1582,     0,  1586,     0,     0,     0,
       0,     0,     0,     0,  1584,     0,  1573,     0,     0,  1574,
       0,  1585,     0,  1575,  1576,  1577,  1578,  1579,  1580,  1581,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1582,     0,  1586,     0,     0,     0,
    2112,     0,     0,     0,  1584,     0,  1573,     0,     0,  1574,
       0,  1585,     0,  1575,  1576,  1577,  1578,  1579,  1580,  1581,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1582,     0,  1586,     0,  1870,     0,
       0,     0,     0,     0,  1584,     0,  1573,     0,     0,  1574,
    1587,  1585,     0,  1575,  1576,  1577,  1578,  1579,  1580,  1581,
       0,     0,     0,     0,     0,     0,     0,  1588,     0,     0,
       0,     0,  1589,     0,  1582,     0,  1586,     0,     0,     0,
    1906,     0,     0,     0,  1584,  1907,     0,     0,     0,     0,
    1587,  1585,     0,     0,     0,  1590,  1591,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1588,     0,     0,
    1592,     0,  1589,     0,     0,     0,  1586,     0,     0,  3435,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1587,     0,     0,     0,     0,  1590,  1591,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1593,  1588,     0,  1594,
    1592,     0,  1589,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1595,     0,     0,  1596,     0,     0,     0,
    1587,     0,     0,     0,     0,  1590,  1591,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1593,  1588,     0,  1594,
    1592,     0,  1589,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1595,     0,     0,  1596,     0,     0,     0,
    1587,     0,     0,     0,     0,  1590,  1591,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1593,  1588,     0,  1594,
    1592,     0,  1589,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1595,     0,     0,  1596,     0,     0,     0,
       0,     0,     0,     0,     0,  1590,  1591,     0,     0,     0,
       0,     0,  1597,     0,     0,     0,  1593,     0,     0,  1594,
    1592,     0,     0,     0,  3436,     0,     0,     0,     0,     0,
       0,     0,     0,  1595,     0,     0,  1596,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1597,     0,     0,     0,  1593,     0,     0,  1594,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1595,     0,  2115,  1596,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1597,     0,     0,     0,     0,     0,  1877,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1598,     0,     0,
    1599,  1600,  1601,     0,  1602,  1603,  1604,  1605,  1606,  1607,
       0,     0,  1597,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1573,     0,     0,  1574,     0,     0,     0,  1575,
    1576,  1577,  1578,  1579,  1580,  1581,     0,  1598,     0,     0,
    1599,  1600,  1601,     0,  1602,  1603,  1604,  1605,  1606,  1607,
    1582,     0,  1597,     0,  1912,     0,     0,     0,     0,     0,
    1584,     0,  1573,     0,     0,  1574,     0,  1585,     0,  1575,
    1576,  1577,  1578,  1579,  1580,  1581,     0,  1598,     0,     0,
    1599,  1600,  1601,     0,  1602,  1603,  1604,  1605,  1606,  1607,
    1582,     0,  1586,     0,     0,     0,     0,     0,     0,     0,
    1584,     0,  1573,     0,     0,  1574,     0,  1585,     0,  1575,
    1576,  1577,  1578,  1579,  1580,  1581,     0,  1598,     0,     0,
    1599,  1600,  1601,     0,  1602,  1603,  1604,  1605,  1606,  1607,
    1582,     0,  1586,     0,  1919,     0,     0,     0,     0,     0,
    1584,     0,  1573,     0,     0,  1574,     0,  1585,     0,  1575,
    1576,  1577,  1578,  1579,  1580,  1581,     0,  1598,     0,     0,
    1599,  1600,  1601,     0,  1602,  1603,  1604,  1605,  1606,  1607,
    1582,     0,  1586,     0,     0,     0,     0,     0,     0,     0,
    1584,     0,     0,     0,     0,     0,  1587,  1585,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1588,     0,     0,  1573,     0,  1589,  1574,
       0,     0,  1586,  1575,  1576,  1577,  1578,  1579,  1580,  1581,
       0,  1917,     0,     0,     0,     0,  1587,     0,     0,     0,
       0,  1590,  1591,     0,  1582,     0,     0,     0,     0,     0,
       0,     0,     0,  1588,  1584,     0,  1592,     0,  1589,     0,
       0,  1585,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1587,     0,     0,     0,
       0,  1590,  1591,     0,     0,     0,  1586,     0,     0,     0,
       0,     0,  1593,  1588,     0,  1594,  1592,     0,  1589,     0,
       0,     0,     0,     0,     0,     0,  2007,     0,     0,  1595,
       0,     0,  1596,     0,     0,     0,  1587,     0,     0,     0,
       0,  1590,  1591,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1593,  1588,     0,  1594,  1592,     0,  1589,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1595,
       0,     0,  1596,     0,     0,     0,     0,     0,     0,     0,
       0,  1590,  1591,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1593,     0,     0,  1594,  1592,     0,     0,     0,
    1587,     0,     0,     0,     0,     0,     0,     0,     0,  1595,
       0,     0,  1596,     0,     0,     0,     0,  1588,     0,     0,
       0,     0,  1589,     0,     0,     0,     0,     0,  1597,     0,
       0,     0,  1593,     0,     0,  1594,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1590,  1591,     0,     0,  1595,
       0,     0,  1596,     0,     0,     0,     0,     0,     0,     0,
    1592,     0,     0,     0,     0,     0,     0,     0,  1597,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1593,     0,     0,  1594,
       0,     0,     0,     0,     0,     0,     0,     0,  1597,     0,
       0,     0,     0,  1595,     0,     0,  1596,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1598,     0,     0,  1599,  1600,  1601,     0,
    1602,  1603,  1604,  1605,  1606,  1607,     0,     0,  1597,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1573,
       0,     0,  1574,     0,     0,     0,  1575,  1576,  1577,  1578,
    1579,  1580,  1581,  1598,     0,     0,  1599,  1600,  1601,     0,
    1602,  1603,  1604,  1605,  1606,  1607,     0,  1582,     0,     0,
       0,  2694,     0,     0,     0,     0,     0,  1584,     0,     0,
       0,     0,     0,     0,  1585,     0,     0,     0,     0,     0,
       0,     0,  1597,  1598,     0,     0,  1599,  1600,  1601,     0,
    1602,  1603,  1604,  1605,  1606,  1607,     0,     0,     0,  1586,
       0,  1573,     0,     0,  1574,     0,     0,     0,  1575,  1576,
    1577,  1578,  1579,  1580,  1581,  2683,     0,     0,     0,     0,
       0,     0,     0,  1598,     0,     0,  1599,  1600,  1601,  1582,
    1602,  1603,  1604,  1605,  1606,  1607,     0,     0,     0,  1584,
       0,     0,     0,     0,     0,     0,  1585,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1586,     0,  1573,     0,     0,  1574,     0,     0,     0,
    1575,  1576,  1577,  1578,  1579,  1580,  1581,  1598,     0,     0,
    1599,  1600,  1601,  1587,  1602,  1603,  1604,  1605,  1606,  1607,
       0,  1582,     0,     0,     0,     0,     0,     0,     0,     0,
    1588,  1584,     0,     0,     0,  1589,     0,     0,  1585,     0,
       0,  1573,     0,     0,  1574,     0,     0,     0,  1575,  1576,
       0,     0,  1579,  1580,  1581,     0,     0,     0,  1590,  1591,
       0,     0,     0,  1586,     0,     0,     0,     0,     0,  1582,
       0,     0,     0,  1592,     0,     0,     0,     0,     0,  1584,
       0,     0,     0,     0,     0,  1587,  1585,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1588,     0,     0,     0,     0,  1589,     0,  1593,
       0,  1586,  1594,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1595,     0,     0,  1596,
    1590,  1591,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1592,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1587,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1588,     0,     0,     0,     0,  1589,
       0,  1593,     0,     0,  1594,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1595,     0,
       0,  1596,  1590,  1591,     0,  1587,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1592,     0,     0,
       0,     0,  1588,     0,     0,  1597,     0,  1589,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1590,  1591,     0,  1593,     0,     0,  1594,     0,     0,     0,
       0,     0,     0,     0,     0,  1592,     0,     0,     0,     0,
    1595,     0,     0,  1596,     0,     0,     0,     0,  1573,     0,
       0,  1574,     0,     0,     0,  1575,  1576,     0,     0,  1579,
    1580,  1581,     0,     0,     0,     0,     0,  1597,     0,     0,
       0,  1593,     0,     0,  1594,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1584,     0,  1595,     0,
       0,  1596,     0,  1585,     0,     0,     0,     0,     0,     0,
    1598,     0,     0,  1599,  1600,  1601,     0,  1602,  1603,  1604,
    1605,  1606,  1607,     0,     0,     0,     0,     0,  1586,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1597,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1598,     0,     0,  1599,  1600,  1601,     0,  1602,
    1603,  1604,  1605,  1606,  1607,     0,     0,  1597,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1587,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1588,
       0,     0,     0,     0,  1589,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1598,     0,     0,  1599,  1600,  1601,
       0,  1602,  1603,  1604,  1605,  2132,  1607, -1999, -1999,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1592,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1598,     0,     0,  1599,  1600,  1601,     0,  1602,
    1603,  1604,  1605,  1606,  1607,     0,     0,     0,     0,     0,
       0, -1999,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1595,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1597,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1194,     0,  2029,     0,     0,     0,  1598,
       0,     0,  1599,  1600,  1601,     0,  1602,  1603,  1604,  1605,
    1606,  1607,   111,   112,   113,   114,   115,   116,   117,   118,
    1195,   119,   120,   121,  1196,  1197,  1198,   846,  1199,  1200,
    1201,  1202,   847,   123,   124,  1203,   125,   126,   127,   848,
     129,   130,   131,   849,   850,   851,   852,   853,  1204,   137,
     138,   139,   140,   141,   142,  1205,  1206,   143,   144,   854,
     855,   147,  1207,   148,   149,   150,   151,   856,  1208,   857,
    1209,   858,   155,   156,   157,   158,   159,   859,   161,   162,
     163,  1210,   164,   165,   166,   167,   168,   169,  1211,   860,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     861,   862,   183,  1212,   184,  1213,   185,   186,   187,   188,
     189,   190,  1214,   191,   192,   193,   194,   195,  1215,  1216,
     196,   197,   198,   199,   200,  1217,   201,   202,   203,  1218,
     204,   205,   206,  1219,   207,   208,   209,   210,   863,   212,
     213,   214,   215,   216,   864,  1220,   218,  1221,   219,   220,
     865,   222,  1222,   223,  1223,   224,   866,  1224,   867,   227,
     228,   868,   869,   231,  1225,   232,  1226,   870,   871,   235,
     236,  1227,   237,   238,   239,   240,   241,   242,   243,   872,
     245,   246,   247,   248,  1228,   249,   250,   251,   252,   253,
     254,   255,  1229,   256,   873,   874,   259,   260,   261,   262,
     263,   875,   876,  1230,   877,  1231,   267,   878,   879,   270,
     880,   272,   273,   274,   275,   276,   277,  1232,  1233,   278,
     881,   280,   882,  1234,   282,   283,   284,   285,   286,   287,
     288,   289,   883,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   884,   885,   886,   312,   313,   314,   887,  1235,   316,
     317,   888,   319,  1236,   889,   321,   890,   323,   324,   325,
    1237,   326,   327,  1238,  1239,   328,   329,   330,  1240,  1241,
     331,   332,   891,   892,   335,   893,   894,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,  1242,  1243,  1244,
    1245,   348,   349,   895,   896,   352,   353,   897,   355,   356,
     357,  1246,   358,   359,   360,   361,   362,   363,  1247,   364,
     365,   366,   898,   368,   369,   370,   371,  1248,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,  1249,   385,   386,   899,   388,   389,   390,   900,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,  1250,   901,   405,   406,   407,   408,   409,   410,
     902,   412,   413,   414,   903,   416,   417,   904,   419,  1251,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   905,   433,   906,   435,  1252,   436,   437,  1253,
     438,   907,   440,   441,   442,   443,   444,  1254,   445,   908,
     909,  1255,  1256,   448,   449,   910,   451,   911,  1257,   453,
     454,   912,   456,   457,   458,   459,   460,  1258,  1259,   461,
     462,   463,  1260,   464,   465,   466,   467,  1261,   468,   469,
     470,   471,   472,  1262,   914,  1263,   475,   915,   477,   478,
     479,   480,   481,  1264,  1265,   482,  1266,  1267,   483,   484,
     485,   486,   487,   488,   916,   917,   918,   919,   920,   921,
     922,   923,   924,   925,   926,   500,   501,   502,   503,  1194,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,  1195,   119,   120,   121,
    1196,  1197,  1198,   846,  1199,  1200,  1201,  1202,   847,   123,
     124,  1203,   125,   126,   127,   848,   129,   130,   131,   849,
     850,   851,   852,   853,  1204,   137,   138,   139,   140,   141,
     142,  1205,  1206,   143,   144,   854,   855,   147,  1207,   148,
     149,   150,   151,   856,  1208,   857,  1209,   858,   155,   156,
     157,   158,   159,   859,   161,   162,   163,  1210,   164,   165,
     166,   167,   168,   169,  1211,   860,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   861,   862,   183,  1212,
     184,  1213,   185,   186,   187,   188,   189,   190,  1214,   191,
     192,   193,   194,   195,  1215,  1216,   196,   197,   198,   199,
     200,  1217,   201,   202,   203,  1218,   204,   205,   206,  1219,
     207,   208,   209,   210,   863,   212,   213,   214,   215,   216,
     864,  1220,   218,  1221,   219,   220,   865,   222,  1222,   223,
    1223,   224,   866,  1224,   867,   227,   228,   868,   869,   231,
    1225,   232,  1226,   870,   871,   235,   236,  1227,   237,   238,
     239,   240,   241,   242,   243,   872,   245,   246,   247,   248,
    1228,   249,   250,   251,   252,   253,   254,   255,  1229,   256,
     873,   874,   259,   260,   261,   262,   263,   875,   876,  1230,
     877,  1231,   267,   878,   879,   270,   880,   272,   273,   274,
     275,   276,   277,  1232,  1233,   278,   881,   280,   882,  1234,
     282,   283,   284,   285,   286,   287,   288,   289,   883,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   884,   885,   886,
     312,   313,   314,   887,  1235,   316,   317,   888,   319,  1236,
     889,   321,   890,   323,   324,   325,  1237,   326,   327,  1238,
    1239,   328,   329,   330,  1240,  1241,   331,   332,   891,   892,
     335,   893,   894,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,  1242,  1243,  1244,  1245,   348,   349,   895,
     896,   352,   353,   897,   355,   356,   357,  1246,   358,   359,
     360,   361,   362,   363,  1247,   364,   365,   366,   898,   368,
     369,   370,   371,  1248,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,  1249,   385,   386,
     899,   388,   389,   390,   900,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,  1250,   901,
     405,   406,   407,   408,   409,   410,   902,   412,   413,   414,
     903,   416,   417,   904,   419,  1251,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   905,   433,
     906,   435,  1252,   436,   437,  1253,   438,   907,   440,   441,
     442,   443,   444,  1254,   445,   908,   909,  1255,  1256,   448,
     449,   910,   451,   911,  1257,   453,   454,   912,   456,   457,
     458,   459,   460,  1258,  1259,   461,   462,   463,  1260,   464,
     465,   466,   467,  1261,   468,   469,   470,   471,   472,  1262,
     914,  1263,   475,   915,   477,   478,   479,   480,   481,  1264,
    1265,   482,  1266,  1267,   483,   484,   485,   486,   487,   488,
     916,   917,   918,   919,   920,   921,   922,   923,   924,   925,
     926,   500,   501,   502,   503,  1194,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,  2177,   116,
     117,   118,  1195,   119,   120,   121,  1196,  1197,  1198,   846,
    1199,  1200,  1201,  1202,   847,   123,   124,  1203,   125,   126,
     127,   848,   129,   130,   131,   849,   850,   851,   852,   853,
    1204,   137,   138,   139,   140,   141,   142,  1205,  1206,   143,
     144,   854,   855,   147,  1207,   148,   149,   150,   151,   856,
    1208,   857,  1209,   858,   155,   156,   157,   158,   159,   859,
     161,   162,   163,  1210,   164,   165,   166,   167,   168,   169,
    1211,   860,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   861,   862,   183,  1212,   184,  1213,   185,   186,
     187,   188,   189,   190,  1214,   191,   192,   193,   194,   195,
    1215,  1216,   196,   197,   198,  2178,   200,  1217,   201,   202,
     203,  1218,   204,   205,   206,  1219,   207,   208,   209,   210,
     863,   212,   213,   214,   215,   216,   864,  1220,   218,  1221,
     219,   220,   865,   222,  1222,   223,  1223,   224,   866,  1224,
     867,   227,   228,   868,   869,   231,  1225,   232,  1226,   870,
     871,   235,   236,  1227,   237,   238,   239,   240,   241,   242,
     243,   872,   245,   246,   247,   248,  1228,   249,   250,   251,
     252,   253,   254,   255,  1229,   256,   873,   874,   259,   260,
     261,   262,   263,   875,   876,  1230,   877,  1231,   267,   878,
     879,   270,   880,   272,   273,   274,   275,   276,   277,  1232,
    1233,   278,   881,   280,   882,  1234,   282,   283,   284,   285,
     286,   287,   288,   289,   883,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   884,   885,   886,   312,   313,   314,   887,
    1235,   316,   317,   888,   319,  1236,   889,   321,   890,   323,
     324,   325,  1237,   326,   327,  1238,  1239,   328,   329,   330,
    1240,  1241,   331,   332,   891,   892,   335,   893,   894,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,  1242,
    1243,  1244,  1245,   348,   349,   895,   896,   352,   353,   897,
     355,   356,   357,  1246,   358,   359,   360,   361,   362,   363,
    1247,   364,   365,   366,   898,   368,   369,   370,   371,  1248,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,  1249,   385,   386,   899,   388,   389,   390,
     900,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,  1250,   901,   405,   406,   407,   408,
     409,  2179,   902,   412,   413,   414,   903,   416,   417,   904,
     419,  1251,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   905,   433,   906,   435,  1252,   436,
     437,  1253,   438,   907,   440,   441,   442,   443,   444,  1254,
     445,   908,   909,  1255,  1256,   448,   449,   910,   451,   911,
    1257,   453,   454,   912,   456,   457,   458,   459,   460,  1258,
    1259,   461,   462,   463,  1260,   464,   465,   466,   467,  1261,
     468,   469,   470,   471,   472,  1262,   914,  1263,   475,   915,
     477,   478,   479,   480,   481,  1264,  1265,   482,  1266,  1267,
     483,   484,   485,   486,   487,   488,   916,   917,   918,   919,
     920,   921,   922,   923,   924,   925,   926,   500,   501,   502,
     503,   845,     0,   637,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,   846,     0,     0,     0,     0,
     847,   123,   124,     0,   125,   126,   127,   848,   129,   130,
     131,   849,   850,   851,   852,   853,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   854,   855,   147,
       0,   148,   149,   150,   151,   856,     0,   857,     0,   858,
     155,   156,   157,   158,   159,   859,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   860,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   861,   862,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   863,   212,   213,   214,
     215,   216,   864,  1424,   218,     0,   219,   220,   865,   222,
       0,   223,     0,   224,   866,     0,   867,   227,   228,   868,
     869,   231,     0,   232,     0,   870,   871,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   872,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,   873,   874,   259,   260,   261,   262,   263,   875,
     876,     0,   877,     0,   267,   878,   879,   270,   880,   272,
     273,   274,   275,   276,   277,     0,     0,   278,   881,   280,
     882,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     883,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   884,
     885,   886,   312,   313,   314,   887,     0,   316,   317,   888,
     319,     0,   889,   321,   890,   323,   324,   325,     0,   326,
     327,  1425,     0,   328,   329,   330,     0,     0,   331,   332,
     891,   892,   335,   893,   894,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,     0,     0,   348,
     349,   895,   896,   352,   353,   897,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
     898,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,   899,   388,   389,   390,   900,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,   901,   405,   406,   407,   408,   409,   410,   902,   412,
     413,   414,   903,   416,   417,   904,   419,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     905,   433,   906,   435,     0,   436,   437,     0,   438,   907,
     440,   441,   442,   443,   444,     0,   445,   908,   909,     0,
       0,   448,   449,   910,   451,   911,  1426,   453,   454,   912,
     456,   457,   458,   459,   460,     0,     0,   461,   462,   463,
       0,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,  1262,   914,     0,   475,   915,   477,   478,   479,   480,
     481,     0,     0,   482,     0,     0,   483,   484,   485,   486,
     487,   488,   916,   917,   918,   919,   920,   921,   922,   923,
     924,   925,   926,   500,   501,   502,   503,   845,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     3,     4,
       0,   846,     0,     0,     0,     0,   847,   123,   124,     0,
     125,   126,   127,   848,   129,   130,   131,   849,   850,   851,
     852,   853,     0,   137,   138,   139,   140,   141,   142,     0,
       0,   143,   144,   854,   855,   147,     0,   148,   149,   150,
     151,   856,     0,   857,     0,   858,   155,   156,   157,   158,
     159,   859,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   860,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   861,   862,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   863,   212,   213,   214,   215,   216,   864,     0,
     218,     0,   219,   220,   865,   222,     0,   223,     0,   224,
     866,     0,   867,   227,   228,   868,   869,   231,     0,   232,
       0,   870,   871,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   872,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   873,   874,
     259,   260,   261,   262,   263,   875,   876,     0,   877,     0,
     267,   878,   879,   270,   880,   272,   273,   274,   275,   276,
     277,     0,     0,   278,   881,   280,   882,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   883,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   884,   885,   886,   312,   313,
     314,   887,     0,   316,   317,   888,   319,     0,   889,   321,
     890,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   332,   891,   892,   335,   893,
     894,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,     0,     0,   348,   349,   895,   896,   352,
     353,   897,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   363,     0,   364,   365,   366,   898,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   899,   388,
     389,   390,   900,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,   901,   405,   406,
     407,   408,   409,   410,   902,   412,   413,   414,   903,   416,
     417,   904,   419,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   905,   433,   906,   435,
       0,   436,   437,     0,   438,   907,   440,   441,   442,   443,
     444,     0,   445,   908,   909,     0,     0,   448,   449,   910,
     451,   911,     0,   453,   454,   912,   456,   457,   458,   459,
     460,     0,     0,   461,   462,   463,     0,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,  1262,   914,     0,
     475,   915,   477,   478,   479,   480,   481,     0,     0,   482,
       0,     0,   483,   484,   485,   486,   487,   488,   916,   917,
     918,   919,   920,   921,   922,   923,   924,   925,   926,   500,
     501,   502,   503,   110,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,     0,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,   607,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   608,     0,   609,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   610,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,   232,     0,   233,   234,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     0,   316,
     317,   318,   319,     0,   612,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   614,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,     0,
       0,   348,   349,   615,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   617,   435,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,   444,     0,   445,   446,
     447,     0,     0,   448,   449,   618,   451,   619,     0,   453,
     454,   620,   456,   457,   458,   459,   460,     0,     0,   461,
     462,   463,     0,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,   474,     0,   475,   476,   477,   478,
     479,   480,   481,     0,     0,   482,     0,     0,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   110,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,     0,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,   153,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,   232,     0,   233,   234,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,   280,   281,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,   316,   317,   318,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,     0,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,   436,   437,     0,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,     0,   453,   454,   455,   456,   457,
     458,   459,   460,     0,     0,   461,   462,   463,     0,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
     474,     0,   475,   476,   477,   478,   479,   480,   481,     0,
       0,   482,     0,     0,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   511,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,  1703,   148,   149,   150,   151,   152,
       0,     0,  1704,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,  1705,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,  1706,   224,     0,     0,
       0,   227,   228,   512,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,  1707,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   513,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,  1708,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,     0,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   416,   417,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   514,   433,   434,   435,     0,   436,
     437,     0,   438,     0,   440,   441,   442,   443,   444,     0,
     445,   446,   447,     0,     0,   448,   449,   450,   451,   452,
       0,   453,   454,   455,   456,   457,   458,   459,   460,     0,
    1709,   461,   462,   463,     0,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,   474,     0,   475,     0,
     477,   478,   479,   480,   481,     0,     0,   482,     0,     0,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   511,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,
     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,
    1703,   148,   149,   150,   151,   152,     0,     0,     0,   154,
     155,   156,   157,   158,   159,     0,   161,   162,   163,  1705,
     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,  1706,   224,     0,     0,     0,   227,   228,   512,
       0,   231,     0,   232,     0,   233,   234,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,     0,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,     0,     0,   270,     0,   272,
     273,   274,   275,   276,   277,     0,     0,   278,     0,   280,
    2256,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     513,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
       0,   311,   312,   313,   314,   315,     0,   316,   317,     0,
     319,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
     333,     0,   335,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,     0,     0,   348,
     349,   350,     0,   352,   353,   354,   355,   356,   357,  1708,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   416,   417,   418,   419,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     514,   433,   434,   435,     0,   436,   437,     0,   438,     0,
     440,   441,   442,   443,   444,     0,   445,   446,   447,     0,
       0,   448,   449,   450,   451,   452,     0,   453,   454,   455,
     456,   457,   458,   459,   460,     0,  1709,   461,   462,   463,
       0,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   473,   474,     0,   475,     0,   477,   478,   479,   480,
     481,     0,     0,   482,     0,     0,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   511,     0,   534,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     3,     4,
       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,
     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,
     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,
       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,
     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,     0,     0,   227,   228,   512,     0,   231,     0,   232,
       0,   233,   234,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,     0,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
     267,     0,     0,   270,     0,   272,   273,   274,   275,   276,
     277,     0,     0,   278,     0,   280,     0,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   513,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,     0,   311,   312,   313,
     314,   315,     0,   316,   317,     0,   319,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   332,   333,     0,   335,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,     0,     0,   348,   349,   350,     0,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   416,
     417,   418,   419,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   514,   433,   434,   435,
       0,   436,   437,     0,   438,     0,   440,   441,   442,   443,
     444,     0,   445,   446,   447,     0,     0,   448,   449,   450,
     451,   452,     0,   453,   454,   455,   456,   457,   458,   459,
     460,     0,     0,   461,   462,   463,     0,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,   474,     0,
     475,     0,   477,   478,   479,   480,   481,     0,     0,   482,
       0,     0,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   511,     0,   534,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
     535,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,
     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,     0,     0,
       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,
     228,   512,     0,   231,     0,   232,     0,   233,   234,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,     0,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,   267,     0,     0,   270,
       0,   272,   273,   274,   275,   276,   277,     0,     0,   278,
       0,   280,     0,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   513,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,     0,   311,   312,   313,   314,   315,     0,   316,
     317,     0,   319,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,   333,     0,   335,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,     0,
       0,   348,   349,   350,     0,   352,   353,   354,   536,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   416,   417,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   514,   433,   434,   435,     0,   436,   437,     0,
     438,     0,   440,   441,   442,   443,   444,     0,   445,   446,
     447,     0,     0,   448,   449,   450,   451,   452,     0,   453,
     454,   455,   456,   457,   458,   459,   460,     0,     0,   461,
     462,   463,     0,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,   474,     0,   475,     0,   477,   478,
     479,   480,   481,     0,     0,   482,     0,     0,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   511,
       0,   534,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   512,     0,   231,
       0,   232,     0,   233,   234,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   513,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
     613,   328,   329,   330,     0,     0,   331,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,     0,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   416,   417,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   514,   433,
     434,   435,     0,   436,   437,     0,   438,     0,   440,   441,
     442,   443,   444,     0,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,     0,   453,   454,   455,   456,   457,
     458,   459,   460,     0,     0,   461,   462,   463,     0,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
     474,     0,   475,     0,   477,   478,   479,   480,   481,     0,
       0,   482,     0,     0,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   511,     0,   534,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   512,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   717,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   513,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,   613,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,     0,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   416,   417,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   514,   433,   434,   435,     0,   436,
     437,     0,   438,     0,   440,   441,   442,   443,   444,     0,
     445,   446,   447,     0,     0,   448,   449,   450,   451,   452,
       0,   453,   454,   455,   456,   457,   458,   459,   460,     0,
       0,   461,   462,   463,     0,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,   474,     0,   475,     0,
     477,   478,   479,   480,   481,     0,     0,   482,     0,     0,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   511,     0,   534,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,   747,   119,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,
     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,
     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,     0,     0,     0,   227,   228,   512,
       0,   231,     0,   232,     0,   233,   234,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,     0,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,     0,     0,   270,     0,   272,
     273,   274,   275,   276,   277,     0,     0,   278,     0,   280,
       0,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     513,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
       0,   311,   312,   313,   314,   315,     0,   316,   317,     0,
     319,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
     333,     0,   335,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,     0,     0,   348,
     349,   350,     0,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   416,   417,   418,   419,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     514,   433,   434,   435,     0,   436,   437,     0,   438,     0,
     440,   441,   442,   443,   444,     0,   445,   446,   447,     0,
       0,   448,   449,   450,   451,   452,     0,   453,   454,   455,
     456,   457,   458,   459,   460,     0,     0,   461,   462,   463,
       0,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   473,   474,     0,   475,     0,   477,   478,   479,   480,
     481,     0,     0,   482,     0,     0,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   511,  1923,     0,
       0,     0,     0,  1924,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,
     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,
     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,
       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,
     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,     0,     0,   227,   228,   512,     0,   231,     0,   232,
       0,   233,   234,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,     0,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
     267,     0,     0,   270,     0,   272,   273,   274,   275,   276,
     277,     0,     0,   278,     0,   280,     0,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   513,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,     0,   311,   312,   313,
     314,   315,     0,   316,   317,     0,   319,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   332,   333,     0,   335,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,     0,     0,   348,   349,   350,     0,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   416,
     417,   418,   419,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   514,   433,   434,   435,
       0,   436,   437,     0,   438,     0,   440,   441,   442,   443,
     444,     0,   445,   446,   447,     0,     0,   448,   449,   450,
     451,   452,     0,   453,   454,   455,   456,   457,   458,   459,
     460,     0,     0,   461,   462,   463,     0,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,   474,     0,
     475,     0,   477,   478,   479,   480,   481,     0,     0,   482,
       0,     0,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   511,     0,   534,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,
     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,     0,     0,
       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,
     228,   512,     0,  1931,     0,   232,     0,   233,   234,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,     0,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,   267,     0,     0,   270,
       0,   272,   273,   274,   275,   276,   277,     0,     0,   278,
       0,   280,     0,     0,   282,   283,  1932,   285,   286,   287,
     288,   289,   513,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,     0,   311,   312,   313,   314,   315,     0,   316,
     317,     0,   319,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,   333,     0,   335,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,     0,
       0,   348,   349,   350,     0,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   416,   417,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   514,   433,   434,   435,     0,   436,   437,  1933,
     438,     0,   440,  1934,   442,  1935,   444,     0,   445,   446,
     447,     0,     0,   448,   449,   450,   451,   452,     0,   453,
     454,   455,   456,   457,   458,   459,   460,     0,     0,   461,
     462,  1936,     0,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,   474,     0,   475,     0,   477,   478,
     479,   480,   481,     0,     0,   482,     0,     0,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   511,
       0,   534,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   512,     0,   231,
       0,   232,     0,   233,   234,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   513,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,     0,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   416,   417,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   514,   433,
     434,   435,     0,   436,   437,     0,   438,     0,   440,   441,
     442,   443,   444,     0,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,     0,   453,   454,   455,   456,   457,
     458,   459,   460,     0,     0,   461,   462,   463,     0,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
     474,     0,   475,     0,   477,   478,   479,   480,   481,     0,
       0,   482,     0,     0,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   511,     0,   637,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   512,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   513,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,     0,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   416,   417,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   514,   433,   434,   435,     0,   436,
     437,     0,   438,     0,   440,   441,   442,   443,   444,     0,
     445,   446,   447,     0,     0,   448,   449,   450,   451,   452,
       0,   453,   454,   455,   456,   457,   458,   459,   460,     0,
       0,   461,   462,   463,     0,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,   474,     0,   475,     0,
     477,   478,   479,   480,   481,     0,     0,   482,     0,     0,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   511,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,   644,   119,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,
     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,
     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,     0,     0,     0,   227,   228,   512,
       0,   645,     0,   232,     0,   233,   234,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,     0,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,     0,     0,   270,     0,   272,
     273,   274,   275,   276,   277,     0,     0,   278,     0,   280,
       0,     0,   282,   283,   646,   285,   286,   287,   288,   289,
     513,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
       0,   311,   312,   313,   314,   315,     0,   316,   317,     0,
     319,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
     333,     0,   335,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,     0,     0,   348,
     349,   350,     0,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,     0,   405,   406,   407,   408,   647,   410,   411,   412,
     413,   414,     0,   416,   417,   418,   419,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     514,   433,   434,   435,     0,   436,   437,     0,   438,     0,
     440,   441,   442,   443,   444,     0,   445,   648,   447,     0,
       0,   649,   449,   450,   451,   452,     0,   453,   454,   455,
     456,   457,   458,   459,   460,     0,     0,   461,   462,   463,
       0,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   473,   474,     0,   475,     0,   477,   478,   479,   480,
     481,     0,     0,   482,     0,     0,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   511,     0,   534,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,
     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,
     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,
       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,
     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,     0,     0,   227,   228,   512,     0,   231,     0,   232,
       0,   233,   234,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,     0,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
     267,     0,     0,   270,     0,   272,   273,   274,   275,   276,
     277,     0,     0,   278,     0,   280,     0,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   513,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,     0,   311,   312,   313,
     314,   315,     0,   316,   317,     0,   319,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   332,   333,     0,   335,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,     0,     0,   348,   349,   350,     0,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   363,     0,   364,   365,   366,   367,   368,   369,   681,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   416,
     417,   418,   419,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   514,   433,   434,   435,
       0,   436,   437,     0,   438,     0,   440,   441,   442,   443,
     444,     0,   445,   446,   447,     0,     0,   448,   449,   450,
     451,   452,     0,   453,   454,   455,   456,   457,   458,   459,
     460,     0,     0,   461,   462,   463,     0,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,   474,     0,
     475,     0,   477,   478,   479,   480,   481,     0,     0,   482,
       0,     0,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   511,     0,   534,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,
     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,     0,     0,
       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,
     228,   512,     0,   231,     0,   232,     0,   233,   234,   235,
     236,     0,   237,   238,   239,   240,   241,   712,   243,     0,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,     0,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,   267,     0,     0,   270,
       0,   272,   273,   274,   275,   276,   277,     0,     0,   278,
       0,   280,     0,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   513,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,     0,   311,   312,   313,   314,   315,     0,   316,
     317,     0,   319,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,   333,     0,   335,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,     0,
       0,   348,   349,   350,     0,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   416,   417,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   514,   433,   434,   435,     0,   436,   437,     0,
     438,     0,   440,   441,   442,   443,   444,     0,   445,   446,
     447,     0,     0,   448,   449,   450,   451,   452,     0,   453,
     454,   455,   456,   457,   458,   459,   460,     0,     0,   461,
     462,   463,     0,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,   474,     0,   475,     0,   477,   478,
     479,   480,   481,     0,     0,   482,     0,     0,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   511,
       0,   534,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   512,     0,   231,
       0,   232,     0,   233,   234,   235,   236,     0,   237,   238,
     239,   240,   241,   715,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   513,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,     0,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   416,   417,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   514,   433,
     434,   435,     0,   436,   437,     0,   438,     0,   440,   441,
     442,   443,   444,     0,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,     0,   453,   454,   455,   456,   457,
     458,   459,   460,     0,     0,   461,   462,   463,     0,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
     474,     0,   475,     0,   477,   478,   479,   480,   481,     0,
       0,   482,     0,     0,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   511,     0,   534,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   512,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   719,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   513,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,     0,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   416,   417,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   514,   433,   434,   435,     0,   436,
     437,     0,   438,     0,   440,   441,   442,   443,   444,     0,
     445,   446,   447,     0,     0,   448,   449,   450,   451,   452,
       0,   453,   454,   455,   456,   457,   458,   459,   460,     0,
       0,   461,   462,   463,     0,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,   474,     0,   475,     0,
     477,   478,   479,   480,   481,     0,     0,   482,     0,     0,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   511,     0,   534,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,
     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,
     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,     0,     0,     0,   227,   228,   512,
       0,   231,     0,   232,     0,   233,   234,   235,   236,     0,
     237,   238,   239,   240,   241,   734,   243,     0,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,     0,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,     0,     0,   270,     0,   272,
     273,   274,   275,   276,   277,     0,     0,   278,     0,   280,
       0,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     513,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
       0,   311,   312,   313,   314,   315,     0,   316,   317,     0,
     319,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
     333,     0,   335,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,     0,     0,   348,
     349,   350,     0,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   416,   417,   418,   419,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     514,   433,   434,   435,     0,   436,   437,     0,   438,     0,
     440,   441,   442,   443,   444,     0,   445,   446,   447,     0,
       0,   448,   449,   450,   451,   452,     0,   453,   454,   455,
     456,   457,   458,   459,   460,     0,     0,   461,   462,   463,
       0,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   473,   474,     0,   475,     0,   477,   478,   479,   480,
     481,     0,     0,   482,     0,     0,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   511,     0,   534,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,
     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,
     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,
       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,
     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,     0,     0,   227,   228,   512,     0,   231,     0,   232,
       0,   233,   234,   235,   236,     0,   237,   238,   239,   240,
     241,   836,   243,     0,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,     0,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
     267,     0,     0,   270,     0,   272,   273,   274,   275,   276,
     277,     0,     0,   278,     0,   280,     0,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   513,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,     0,   311,   312,   313,
     314,   315,     0,   316,   317,     0,   319,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   332,   333,     0,   335,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,     0,     0,   348,   349,   350,     0,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   416,
     417,   418,   419,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   514,   433,   434,   435,
       0,   436,   437,     0,   438,     0,   440,   441,   442,   443,
     444,     0,   445,   446,   447,     0,     0,   448,   449,   450,
     451,   452,     0,   453,   454,   455,   456,   457,   458,   459,
     460,     0,     0,   461,   462,   463,     0,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,   474,     0,
     475,     0,   477,   478,   479,   480,   481,     0,     0,   482,
       0,     0,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   511,     0,   534,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,
     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,     0,     0,
       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,
     228,   512,     0,   231,     0,   232,     0,   233,   234,   235,
     236,     0,   237,   238,   239,   240,   241,   839,   243,     0,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,     0,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,   267,     0,     0,   270,
       0,   272,   273,   274,   275,   276,   277,     0,     0,   278,
       0,   280,     0,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   513,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,     0,   311,   312,   313,   314,   315,     0,   316,
     317,     0,   319,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,   333,     0,   335,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,     0,
       0,   348,   349,   350,     0,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   416,   417,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   514,   433,   434,   435,     0,   436,   437,     0,
     438,     0,   440,   441,   442,   443,   444,     0,   445,   446,
     447,     0,     0,   448,   449,   450,   451,   452,     0,   453,
     454,   455,   456,   457,   458,   459,   460,     0,     0,   461,
     462,   463,     0,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,   474,     0,   475,     0,   477,   478,
     479,   480,   481,     0,     0,   482,     0,     0,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   511,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,   961,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   512,     0,   231,
       0,   232,     0,   233,   234,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   513,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,     0,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   416,   417,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   514,   433,
     434,   435,     0,   436,   437,     0,   438,     0,   440,   441,
     442,   443,   444,     0,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,     0,   453,   454,   455,   456,   457,
     458,   459,   460,     0,     0,   461,   462,   463,     0,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
     474,     0,   475,     0,   477,   478,   479,   480,   481,     0,
       0,   482,     0,     0,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   511,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,   984,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   512,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   513,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,     0,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   416,   417,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   514,   433,   434,   435,     0,   436,
     437,     0,   438,     0,   440,   441,   442,   443,   444,     0,
     445,   446,   447,     0,     0,   448,   449,   450,   451,   452,
       0,   453,   454,   455,   456,   457,   458,   459,   460,     0,
       0,   461,   462,   463,     0,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,   474,     0,   475,     0,
     477,   478,   479,   480,   481,     0,     0,   482,     0,     0,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   511,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,   644,   119,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,
     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,
     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,     0,     0,     0,   227,   228,   512,
       0,   231,     0,   232,     0,   233,   234,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,     0,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,     0,     0,   270,     0,   272,
     273,   274,   275,   276,   277,     0,     0,   278,     0,   280,
       0,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     513,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
       0,   311,   312,   313,   314,   315,     0,   316,   317,     0,
     319,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
     333,     0,   335,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,     0,     0,   348,
     349,   350,     0,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   416,   417,   418,   419,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     514,   433,   434,   435,     0,   436,   437,     0,   438,     0,
     440,   441,   442,   443,   444,     0,   445,   648,   447,     0,
       0,   649,   449,   450,   451,   452,     0,   453,   454,   455,
     456,   457,   458,   459,   460,     0,     0,   461,   462,   463,
       0,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   473,   474,     0,   475,     0,   477,   478,   479,   480,
     481,     0,     0,   482,     0,     0,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   511,     0,   534,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,
     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,
     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,
       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,
     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,     0,     0,   227,   228,   512,     0,   231,     0,   232,
       0,   233,   234,   235,   236,     0,   237,   238,   239,   240,
     241,  1330,   243,     0,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,     0,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,     0,
     267,     0,     0,   270,     0,   272,   273,   274,   275,   276,
     277,     0,     0,   278,     0,   280,     0,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   513,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,     0,   311,   312,   313,
     314,   315,     0,   316,   317,     0,   319,     0,   320,   321,
     322,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   332,   333,     0,   335,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,     0,     0,   348,   349,   350,     0,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,     0,   416,
     417,   418,   419,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   514,   433,   434,   435,
       0,   436,   437,     0,   438,     0,   440,   441,   442,   443,
     444,     0,   445,   446,   447,     0,     0,   448,   449,   450,
     451,   452,     0,   453,   454,   455,   456,   457,   458,   459,
     460,     0,     0,   461,   462,   463,     0,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,   474,     0,
     475,     0,   477,   478,   479,   480,   481,     0,     0,   482,
       0,     0,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   511,     0,   534,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,
     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,     0,     0,
       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,
     228,   512,     0,   231,     0,   232,     0,   233,   234,   235,
     236,     0,   237,   238,   239,   240,   241,  1332,   243,     0,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,     0,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,   267,     0,     0,   270,
       0,   272,   273,   274,   275,   276,   277,     0,     0,   278,
       0,   280,     0,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   513,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,     0,   311,   312,   313,   314,   315,     0,   316,
     317,     0,   319,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,   333,     0,   335,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,     0,
       0,   348,   349,   350,     0,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,     0,   416,   417,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   514,   433,   434,   435,     0,   436,   437,     0,
     438,     0,   440,   441,   442,   443,   444,     0,   445,   446,
     447,     0,     0,   448,   449,   450,   451,   452,     0,   453,
     454,   455,   456,   457,   458,   459,   460,     0,     0,   461,
     462,   463,     0,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,   474,     0,   475,     0,   477,   478,
     479,   480,   481,     0,     0,   482,     0,     0,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   511,
       0,   534,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   512,     0,   231,
       0,   232,     0,   233,   234,   235,   236,     0,   237,   238,
     239,   240,   241,  1335,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   513,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,     0,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
       0,   416,   417,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   514,   433,
     434,   435,     0,   436,   437,     0,   438,     0,   440,   441,
     442,   443,   444,     0,   445,   446,   447,     0,     0,   448,
     449,   450,   451,   452,     0,   453,   454,   455,   456,   457,
     458,   459,   460,     0,     0,   461,   462,   463,     0,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
     474,     0,   475,     0,   477,   478,   479,   480,   481,     0,
       0,   482,     0,     0,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   511,     0,   534,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   512,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,  1337,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   513,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,     0,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,   416,   417,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   514,   433,   434,   435,     0,   436,
     437,     0,   438,     0,   440,   441,   442,   443,   444,     0,
     445,   446,   447,     0,     0,   448,   449,   450,   451,   452,
       0,   453,   454,   455,   456,   457,   458,   459,   460,     0,
       0,   461,   462,   463,     0,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,   474,     0,   475,     0,
     477,   478,   479,   480,   481,     0,     0,   482,     0,     0,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   511,     0,   534,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,
     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,
     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,     0,     0,     0,   227,   228,   512,
       0,   231,     0,   232,     0,   233,   234,   235,   236,     0,
     237,   238,   239,   240,   241,  2173,   243,     0,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,     0,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,     0,     0,   270,     0,   272,
     273,   274,   275,   276,   277,     0,     0,   278,     0,   280,
       0,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     513,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
       0,   311,   312,   313,   314,   315,     0,   316,   317,     0,
     319,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
     333,     0,   335,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,     0,     0,   348,
     349,   350,     0,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,   416,   417,   418,   419,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     514,   433,   434,   435,     0,   436,   437,     0,   438,     0,
     440,   441,   442,   443,   444,     0,   445,   446,   447,     0,
       0,   448,   449,   450,   451,   452,     0,   453,   454,   455,
     456,   457,   458,   459,   460,     0,     0,   461,   462,   463,
       0,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   473,   474,     0,   475,     0,   477,   478,   479,   480,
     481,     0,     0,   482,     0,     0,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   758,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,   759,     0,     0,  -784,     0,   760,   123,   124,     0,
     125,   126,   127,   761,   129,   130,   131,     0,   762,   763,
     764,   765,     0,   137,   138,   139,   140,   141,   142,     0,
       0,   143,   144,   766,   767,   147,     0,   148,   149,   150,
     151,     0,     0,   768,     0,   769,   155,   156,   157,   158,
     159,   770,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   771,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   772,   773,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   774,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,     0,   212,   213,   214,   215,   216,     0,     0,
     218,     0,   219,   220,   775,   222,     0,   223,     0,   224,
     776,     0,   777,   227,   228,  -784,   778,   231,     0,   232,
       0,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   780,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   781,     0,
     259,   260,   261,   262,   263,   782,   783,     0,   784,     0,
     267,   785,   786,   270,   787,   272,   273,   274,   275,   276,
     277,     0,     0,   278,   788,   280,   789,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   790,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   791,   792,   793,   312,   313,
     314,     0,     0,   316,   317,   794,   319,     0,     0,   321,
     795,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   332,     0,   796,   335,   797,
       0,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,     0,     0,   348,   349,     0,   798,   352,
     353,     0,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   363,     0,   364,   365,   366,   799,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   800,   388,
     389,   390,   801,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,   802,   405,   406,
     407,   408,   409,   410,   803,   412,   413,   414,   804,   416,
     417,   805,   419,     0,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   806,   433,     0,   435,
       0,   436,   437,     0,   438,   807,   440,   441,   442,   443,
     444,     0,   445,   808,   809,     0,     0,   448,   449,     0,
     451,     0,     0,   453,   454,   810,   456,   457,   458,   459,
     460,   811,     0,   461,   462,   463,     0,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,     0,   812,     0,
     475,   813,   477,   478,   479,   480,   481,     0,     0,   482,
       0,     0,   483,   484,   485,   486,   487,   488,   511,     0,
     534,     0,     0,     0,     0,     0,     0,     0,     0,   500,
     501,   502,   503,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,
       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,
     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   512,     0,   231,     0,
     232,     0,   233,   234,   235,   236,     0,   237,   238,   239,
     240,   241,  2892,   243,     0,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,     0,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,     0,     0,   270,     0,   272,   273,   274,   275,
     276,   277,     0,     0,   278,     0,   280,     0,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   513,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,     0,   311,   312,
     313,   314,   315,     0,   316,   317,     0,   319,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,   333,     0,   335,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,   350,     0,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     416,   417,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   514,   433,   434,
     435,     0,   436,   437,     0,   438,     0,   440,   441,   442,
     443,   444,     0,   445,   446,   447,     0,     0,   448,   449,
     450,   451,   452,     0,   453,   454,   455,   456,   457,   458,
     459,   460,     0,     0,   461,   462,   463,     0,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,   474,
       0,   475,     0,   477,   478,   479,   480,   481,     0,     0,
     482,     0,     0,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   511,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   512,     0,   231,     0,   232,     0,   233,   234,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,     0,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,   267,     0,     0,
     270,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,     0,   280,     0,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   513,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,     0,   311,   312,   313,   314,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,     0,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,   416,   417,   418,   419,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   514,   433,   434,   435,     0,   436,   437,
       0,   438,     0,   440,   441,   442,   443,   444,     0,   445,
     446,   447,     0,     0,   448,   449,   450,   451,   452,     0,
     453,   454,   455,   456,   457,   458,   459,   460,     0,     0,
     461,   462,   463,     0,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,   474,     0,   475,     0,   477,
     478,   479,   480,   481,     0,     0,   482,     0,     0,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     511,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   512,     0,
     659,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   660,   285,   286,   287,   288,   289,   513,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     661,   397,   398,   399,   400,   401,   402,   403,   404,     0,
       0,   405,   406,   407,   408,   662,   410,   411,   412,   413,
     414,     0,   416,   417,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   514,
     433,   434,   435,     0,   436,   437,     0,   438,     0,   440,
     441,   442,   443,   444,     0,   445,   663,   447,     0,     0,
     448,   449,   450,   451,   452,     0,   453,   454,   455,   456,
     457,   458,   459,   460,     0,     0,   461,   462,   463,     0,
     464,   465,   466,   467,     0,   468,   469,   470,   471,   472,
     473,   474,     0,   475,     0,   477,   478,   479,   480,   481,
       0,     0,   482,     0,     0,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   511,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,
     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,
     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,
       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   512,     0,   231,     0,   232,     0,
     233,   234,   235,   236,     0,   237,   238,   239,   240,   241,
     736,   243,     0,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,     0,   258,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,   267,
       0,     0,   270,     0,   272,   273,   274,   275,   276,   277,
       0,     0,   278,     0,   280,     0,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   513,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,     0,   311,   312,   313,   314,
     315,     0,   316,   317,     0,   319,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,     0,   328,   329,
     330,     0,     0,   331,   332,   333,     0,   335,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,     0,     0,   348,   349,   350,     0,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,     0,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   416,   417,
     418,   419,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   514,   433,   434,   435,     0,
     436,   437,     0,   438,     0,   440,   441,   442,   443,   444,
       0,   445,   446,   447,     0,     0,   448,   449,   450,   451,
     452,     0,   453,   454,   455,   456,   457,   458,   459,   460,
       0,     0,   461,   462,   463,     0,   464,   465,   466,   467,
       0,   468,   469,   470,   471,   472,   473,   474,     0,   475,
       0,   477,   478,   479,   480,   481,     0,     0,   482,     0,
       0,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   511,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   123,   124,     0,   125,   126,   127,     0,   129,
     130,   131,   132,   133,     0,   135,   136,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   152,     0,     0,     0,
     154,   155,   156,   157,   158,   159,     0,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     512,     0,   231,     0,   232,     0,   233,   234,   235,   236,
       0,   237,   238,   239,   240,   241,   832,   243,     0,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,     0,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,   267,     0,     0,   270,     0,
     272,   273,   274,   275,   276,   277,     0,     0,   278,     0,
     280,     0,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   513,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,     0,   311,   312,   313,   314,   315,     0,   316,   317,
       0,   319,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,     0,   328,   329,   330,     0,     0,   331,
     332,   333,     0,   335,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,     0,     0,
     348,   349,   350,     0,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,     0,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   416,   417,   418,   419,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   514,   433,   434,   435,     0,   436,   437,     0,   438,
       0,   440,   441,   442,   443,   444,     0,   445,   446,   447,
       0,     0,   448,   449,   450,   451,   452,     0,   453,   454,
     455,   456,   457,   458,   459,   460,     0,     0,   461,   462,
     463,     0,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,   473,   474,     0,   475,     0,   477,   478,   479,
     480,   481,     0,     0,   482,     0,     0,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   511,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,
       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,
     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   512,     0,   231,     0,
     232,     0,   233,   234,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,     0,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,     0,     0,   270,     0,   272,   273,   274,   275,
     276,   277,     0,     0,   278,     0,   280,     0,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   513,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,     0,   311,   312,
     313,   314,   315,     0,   316,   317,     0,   319,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,   333,     0,   335,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,   350,     0,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   661,   397,
     398,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
     416,   417,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   514,   433,   434,
     435,     0,   436,   437,     0,   438,     0,   440,   441,   442,
     443,   444,     0,   445,   663,   447,     0,     0,   448,   449,
     450,   451,   452,     0,   453,   454,   455,   456,   457,   458,
     459,   460,     0,     0,   461,   462,   463,     0,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,   474,
       0,   475,     0,   477,   478,   479,   480,   481,     0,     0,
     482,     0,     0,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   511,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,  1635,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   512,     0,   231,     0,   232,     0,   233,   234,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,     0,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,   267,     0,     0,
     270,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,     0,   280,     0,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   513,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,     0,   311,   312,   313,   314,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,     0,   405,   406,   407,   408,   409,
       0,   411,   412,   413,   414,     0,   416,   417,   418,   419,
       0,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   514,   433,   434,   435,     0,   436,   437,
       0,   438,     0,   440,   441,   442,   443,   444,     0,   445,
     446,   447,     0,     0,   448,   449,   450,   451,   452,     0,
     453,   454,   455,   456,   457,   458,   459,   460,     0,     0,
     461,   462,   463,     0,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,   474,     0,   475,     0,   477,
     478,   479,   480,   481,     0,     0,   482,     0,     0,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     511,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   512,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,  1805,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   513,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
       0,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,     0,   416,   417,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   514,
     433,   434,   435,     0,   436,   437,     0,   438,     0,   440,
     441,   442,   443,   444,     0,   445,   446,   447,     0,     0,
     448,   449,   450,   451,   452,     0,   453,   454,   455,   456,
     457,   458,   459,   460,     0,     0,   461,   462,   463,     0,
     464,   465,   466,   467,     0,   468,   469,   470,   471,   472,
     473,   474,     0,   475,     0,   477,   478,   479,   480,   481,
       0,     0,   482,     0,     0,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   511,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,
     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,
     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,
       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   512,     0,   231,     0,   232,     0,
     233,   234,   235,   236,     0,   237,   238,   239,   240,   241,
    2160,   243,     0,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,     0,   258,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,   267,
       0,     0,   270,     0,   272,   273,   274,   275,   276,   277,
       0,     0,   278,     0,   280,     0,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   513,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,     0,   311,   312,   313,   314,
     315,     0,   316,   317,     0,   319,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,     0,   328,   329,
     330,     0,     0,   331,   332,   333,     0,   335,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,     0,     0,   348,   349,   350,     0,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,     0,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,   416,   417,
     418,   419,     0,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   514,   433,   434,   435,     0,
     436,   437,     0,   438,     0,   440,   441,   442,   443,   444,
       0,   445,   446,   447,     0,     0,   448,   449,   450,   451,
     452,     0,   453,   454,   455,   456,   457,   458,   459,   460,
       0,     0,   461,   462,   463,     0,   464,   465,   466,   467,
       0,   468,   469,   470,   471,   472,   473,   474,     0,   475,
       0,   477,   478,   479,   480,   481,     0,     0,   482,     0,
       0,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   511,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   123,   124,     0,   125,   126,   127,     0,   129,
     130,   131,   132,   133,     0,   135,   136,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   152,     0,     0,     0,
     154,   155,   156,   157,   158,   159,     0,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     512,     0,   231,     0,   232,     0,   233,   234,   235,   236,
       0,   237,   238,   239,   240,   241,  2175,   243,     0,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,     0,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,   267,     0,     0,   270,     0,
     272,   273,   274,   275,   276,   277,     0,     0,   278,     0,
     280,     0,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   513,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,     0,   311,   312,   313,   314,   315,     0,   316,   317,
       0,   319,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,     0,   328,   329,   330,     0,     0,   331,
     332,   333,     0,   335,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,     0,     0,
     348,   349,   350,     0,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,     0,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   416,   417,   418,   419,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   514,   433,   434,   435,     0,   436,   437,     0,   438,
       0,   440,   441,   442,   443,   444,     0,   445,   446,   447,
       0,     0,   448,   449,   450,   451,   452,     0,   453,   454,
     455,   456,   457,   458,   459,   460,     0,     0,   461,   462,
     463,     0,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,   473,   474,     0,   475,     0,   477,   478,   479,
     480,   481,     0,     0,   482,     0,     0,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   758,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,   759,     0,     0,     0,     0,   760,   123,   124,
       0,   125,   126,   127,   761,   129,   130,   131,     0,   762,
     763,   764,   765,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   766,   767,   147,     0,   148,   149,
     150,   151,     0,     0,   768,     0,   769,   155,   156,   157,
     158,   159,   770,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   771,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   772,   773,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   774,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,     0,   212,   213,   214,   215,   216,     0,
       0,   218,     0,   219,   220,   775,   222,     0,   223,     0,
     224,   776,     0,   777,   227,   228,     0,   778,   231,     0,
     232,     0,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   779,   243,   780,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   781,
       0,   259,   260,   261,   262,   263,   782,   783,     0,   784,
       0,   267,   785,   786,   270,   787,   272,   273,   274,   275,
     276,   277,     0,     0,   278,   788,   280,   789,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   790,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   791,   792,   793,   312,
     313,   314,     0,     0,   316,   317,   794,   319,     0,     0,
     321,   795,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,     0,   796,   335,
     797,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,     0,   798,
     352,   353,     0,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,   799,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   800,
     388,   389,   390,   801,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,   802,   405,
     406,   407,   408,   409,   410,   803,   412,   413,   414,   804,
     416,   417,   805,   419,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   806,   433,     0,
     435,     0,   436,   437,     0,   438,   807,   440,   441,   442,
     443,   444,     0,   445,   808,   809,     0,     0,   448,   449,
       0,   451,     0,     0,   453,   454,   810,   456,   457,   458,
     459,   460,   811,     0,   461,   462,   463,     0,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,     0,   812,
       0,   475,   813,   477,   478,   479,   480,   481,     0,     0,
     482,     0,     0,   483,   484,   485,   486,   487,   488,   758,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     500,   501,   502,   503,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,   759,     0,     0,     0,     0,   760,   123,
     124,     0,   125,   126,   127,   761,   129,   130,   131,     0,
     762,   763,   764,   765,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   766,   767,   147,     0,   148,
     149,   150,   151,     0,     0,   768,     0,   769,   155,   156,
     157,   158,   159,   770,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   771,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   772,   773,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   774,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,     0,   212,   213,   214,   215,   216,
       0,     0,   218,     0,   219,   220,   775,   222,     0,   223,
       0,   224,   776,     0,   777,   227,   228,     0,   778,   231,
       0,   232,     0,     0,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   780,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     781,     0,   259,   260,   261,   262,   263,   782,   783,     0,
     784,     0,   267,   785,   786,   270,   787,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   788,   280,   789,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   790,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   791,   792,   793,
     312,   313,   314,     0,     0,   316,   317,   794,   319,     0,
       0,   321,   795,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,     0,   796,
     335,   797,     0,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,     0,
     798,   352,   353,     0,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,   799,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
     800,   388,   389,   390,   801,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,     0,   802,
     405,   406,   407,   408,   409,   410,   803,   412,   413,   414,
     804,   416,   417,   805,   419,     0,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   806,   433,
       0,   435,     0,   436,   437,     0,   438,   807,   440,   441,
     442,   443,   444,     0,   445,   808,   809,     0,     0,   448,
     449,     0,   451,     0,     0,   453,   454,   810,   456,   457,
     458,   459,   460,   811,     0,   461,   462,   463,     0,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,     0,
     812,     0,   475,   813,   477,   478,   479,   480,   481,     0,
       0,   482,     0,     0,   483,   484,   485,   486,   487,   488,
     758,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   500,   501,   502,   503,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,   759,     0,     0,     0,     0,   760,
     123,   124,     0,   125,   126,   127,   761,   129,   130,   131,
       0,   762,   763,   764,   765,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   766,   767,   147,     0,
     148,   149,   150,   151,     0,     0,   768,     0,   769,   155,
     156,   157,   158,   159,   770,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   771,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   772,   773,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   774,
     199,   200,     0,   201,   202,   203,     0,  1790,   205,   206,
       0,   207,   208,   209,   210,     0,   212,   213,   214,   215,
     216,     0,     0,   218,     0,   219,   220,   775,   222,     0,
     223,     0,   224,   776,     0,   777,   227,   228,     0,   778,
     231,     0,   232,     0,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   780,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   781,     0,   259,   260,   261,   262,   263,   782,   783,
       0,   784,     0,   267,   785,   786,   270,   787,   272,   273,
     274,   275,   276,   277,     0,     0,   278,   788,   280,   789,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   790,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   791,   792,
     793,   312,   313,   314,     0,     0,   316,   317,   794,   319,
       0,     0,   321,   795,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,     0,
     796,   335,   797,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
       0,   798,   352,   353,     0,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   799,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   800,   388,   389,   390,   801,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     802,   405,   406,   407,   408,   409,   410,   803,   412,   413,
     414,   804,   416,   417,   805,   419,     0,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   806,
     433,     0,   435,     0,   436,   437,     0,   438,   807,   440,
     441,   442,   443,   444,     0,   445,   808,   809,     0,     0,
     448,   449,     0,   451,     0,     0,   453,   454,   810,   456,
     457,   458,   459,   460,   811,     0,   461,   462,   463,     0,
     464,   465,   466,   467,     0,   468,   469,   470,   471,   472,
       0,   812,     0,   475,   813,   477,   478,   479,   480,   481,
       0,     0,   482,     0,     0,   483,   484,   485,   486,   487,
     488,  2817,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   500,   501,   502,   503,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,  2818,     0,     0,     0,     0,
    2819,   123,   124,     0,   125,   126,   127,  2820,   129,   130,
     131,     0,   762,  2821,   764,   765,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   766,   767,   147,
       0,   148,   149,   150,   151,     0,     0,  2822,     0,  2823,
     155,   156,   157,   158,   159,  2824,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,  2825,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   772,   773,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     774,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,     0,   212,   213,   214,
     215,   216,     0,     0,   218,     0,   219,   220,   775,   222,
       0,   223,     0,   224,  2826,     0,  2827,   227,   228,  2828,
    2829,   231,     0,   232,     0,     0,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,  2830,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,  2831,     0,   259,   260,   261,   262,   263,   782,
     783,     0,   784,     0,   267,  2832,  2833,   270,  2834,   272,
     273,   274,   275,   276,   277,     0,     0,   278,  2835,   280,
    2836,     0,   282,   283,   284,   285,   286,   287,   288,   289,
    3062,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   791,
    2838,   793,   312,   313,   314,     0,     0,   316,   317,  2840,
     319,     0,     0,   321,   795,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
       0,  2842,   335,  2843,     0,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,     0,     0,   348,
     349,     0,  2844,   352,   353,     0,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
     799,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,  2845,   388,   389,   390,     0,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,  2846,   405,   406,   407,   408,   409,   410,     0,   412,
     413,   414,  2848,   416,   417,   805,   419,     0,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
    3063,   433,     0,   435,     0,   436,   437,     0,   438,  2850,
     440,   441,   442,   443,   444,     0,   445,   808,   809,     0,
       0,   448,   449,     0,   451,     0,     0,   453,   454,  2851,
     456,   457,   458,   459,   460,     0,     0,   461,   462,   463,
       0,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,     0,   812,     0,   475,  2853,   477,   478,   479,   480,
     481,     0,     0,   482,     0,     0,   483,   484,   485,   486,
     487,   488,   511,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   500,   501,   502,   503,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   123,   124,     0,   125,   126,   127,     0,   129,
     130,   131,   132,   133,     0,   135,   136,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   152,     0,     0,     0,
     154,   155,   156,   157,   158,   159,     0,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     512,     0,   231,     0,   232,     0,   233,   234,     0,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,     0,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,   267,     0,     0,   270,     0,
     272,   273,   274,   275,   276,   277,     0,     0,   278,     0,
     280,     0,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   513,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,     0,   311,   312,   313,   314,   315,     0,   316,   317,
       0,   319,     0,   320,   321,   322,   323,   324,   325,     0,
     326,   327,     0,     0,   328,   329,   330,     0,     0,   331,
     332,   333,     0,   335,     0,   337,   338,   339,   340,   341,
     342,   343,     0,   345,   346,   347,     0,     0,     0,     0,
     348,   349,   350,     0,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   363,     0,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   388,   389,   390,   391,     0,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,     0,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,     0,   416,   417,   418,   419,     0,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   514,   433,   434,   435,     0,   436,   437,     0,   438,
       0,   440,   441,   442,   443,   444,     0,   445,   446,   447,
       0,     0,   448,   449,   450,   451,   452,     0,   453,   454,
     455,   456,   457,   458,   459,   460,     0,     0,   461,   462,
     463,     0,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,   473,   474,     0,   475,     0,   477,   478,   479,
     480,   481,     0,     0,   482,     0,     0,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   758,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,   759,     0,     0,     0,     0,   760,   123,   124,
       0,   125,   126,   127,   761,   129,   130,   131,     0,   762,
     763,   764,   765,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   766,   767,   147,     0,   148,   149,
     150,   151,     0,     0,   768,     0,   769,   155,   156,   157,
     158,   159,   770,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   771,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   772,   773,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   774,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,     0,   212,   213,   214,   215,   216,     0,
       0,   218,     0,   219,   220,   775,   222,     0,   223,     0,
     224,   776,     0,   777,   227,   228,     0,   778,   231,     0,
     232,     0,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   780,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   781,
       0,   259,   260,   261,   262,   263,   782,   783,     0,   784,
       0,   267,   785,   786,   270,   787,   272,   273,   274,   275,
     276,   277,     0,     0,   278,   788,   280,   789,     0,   282,
     283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   791,   792,   793,   312,
     313,   314,     0,     0,   316,   317,   794,   319,     0,     0,
     321,   795,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,     0,   796,   335,
     797,     0,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,     0,   798,
     352,   353,     0,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,   799,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   800,
     388,   389,   390,     0,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,   802,   405,
     406,   407,   408,   409,   410,     0,   412,   413,   414,   804,
     416,   417,   805,   419,     0,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,     0,   433,     0,
     435,     0,   436,   437,     0,   438,   807,   440,   441,   442,
     443,   444,     0,   445,   808,   809,     0,     0,   448,   449,
       0,   451,     0,     0,   453,   454,   810,   456,   457,   458,
     459,   460,     0,     0,   461,   462,   463,     0,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,     0,   812,
       0,   475,   813,   477,   478,   479,   480,   481,     0,     1,
     482,     0,     0,   483,   484,   485,   486,   487,   488,     2,
       0,     3,     4,     0,     0,     0,     1,     0,     0,     0,
     500,   501,   502,   503,     0,     0,     2,     0,     0,     6,
       0,     0,     0,     0,     0,     0,     0,     0,     7,     0,
       0,     0,     0,     0,     0,     0,     6,     0,     0,     0,
       8,     0,     0,     0,     0,     7,     0,     0,     0,     0,
       0,     9,     0,     0,     0,     0,     0,     8,     0,     0,
       0,     0,     0,    10,     0,   569,     0,     0,     9,     0,
       0,     0,     0,     0,     0,     0,    12,     0,     0,     0,
      10,     0,   569,     0,     0,     0,     0,     0,     0,     0,
      13,     0,     0,    12,     0,     0,     0,     0,     0,     0,
      15,     0,     0,     0,     0,     0,    16,    13,     0,     0,
       0,     0,     0,     0,    17,     0,     0,    15,     0,     0,
       0,     0,     0,    16,     0,     0,     0,     0,     0,     0,
      20,    17,     0,     0,    21,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    20,     0,     0,
       0,    21,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    23,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
       0,     0,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    25,    26,    27,     0,     0,     0,
       0,     0,    28,     0,     0,    29,     0,     0,     0,     0,
       0,    25,    26,    27,     0,     0,     0,     0,     0,    28,
       0,     0,    29,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,    32,
      31,     0,     0,     0,     0,     0,    33,     0,     0,     0,
      34,     0,     0,     0,     0,     0,    32,     0,     0,     0,
      35,     0,     0,    33,     0,     0,     0,    34,     0,     0,
       0,     0,    36,     0,     0,     0,    37,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
       0,     0,     0,    37,     0,     0,    38,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    39,
       0,     0,     0,    38,     0,    41,     0,     0,     0,     0,
      42,     0,     0,     0,   570,     0,    39,     0,     0,     0,
       0,     0,    41,     0,    43,     0,     0,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,     0,     0,     0,     0,     0,     0,    44,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   571,     0,     0,    44,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45
};

static const yytype_int16 yycheck[] =
{
       7,    45,   504,   716,   564,   657,   631,  1657,     0,     0,
       0,     0,     0,   803,    21,    83,     0,   724,   680,   704,
       0,     0,     0,    21,     7,  1617,   562,   809,     0,   933,
    1179,  1472,   728,  1191,    18,  1178,  1153,   571,    21,   951,
    1114,  2116,   993,    18,   733,    36,   933,  2085,  1358,  2087,
    1158,  2171,  1155,  1518,   841,  1543,  1119,  1308,  1759,   942,
    2106,  2218,  2219,  2220,   834,   942,    37,   837,   942,    87,
    1363,   570,   942,  1570,  1571,    87,   571,   627,    85,    86,
    1183,   716,   632,   718,  2547,   720,  2547,    85,    86,  1081,
     565,  2580,  2051,  1407,  1086,     0,     0,     0,     0,     0,
    2167,     0,    85,    86,     0,     0,    97,  2105,     0,     0,
    1049,    44,  2599,     0,     0,     0,  2422,  2231,     0,     0,
      85,    86,   624,     7,     0,     0,     0,  2606,     0,     0,
     589,    24,     5,  2582,   105,  1047,     0,    21,     5,    33,
     766,   767,  2503,    55,     5,    11,  2507,     5,     5,  1778,
      16,  1774,    21,     0,     5,  1941,    13,    14,  1908,    78,
    1675,     5,    13,    14,     0,     5,     5,   793,  1954,   694,
     672,     5,     9,    13,    14,     5,     5,     5,     5,    13,
      14,     5,     9,    13,    14,     9,  2253,     5,  1092,    11,
       5,     5,     5,     5,    16,     5,     5,  2888,     9,     3,
    1621,    85,    86,  2239,    45,    26,     5,  2907,     5,   167,
      13,    14,  2243,   135,     5,    80,    85,    86,   118,  2910,
     168,    80,    45,   699,    46,  2577,    91,  2896,    13,    14,
      34,    35,    91,  2396,  1677,    30,   699,    63,    63,   176,
     118,    30,    30,    38,    63,   115,     3,     4,     5,    38,
      38,    98,     9,   960,   240,   240,    78,  1039,  2325,  2326,
     167,  2328,    98,  1167,   281,  3066,  1170,  1171,   283,  2746,
       5,     4,   120,   105,   240,   143,     9,  3196,   940,   289,
      63,   222,  2885,    88,     4,   949,   240,   284,    53,     9,
     306,   179,  1351,   289,  2864,   306,   562,   186,    64,  2727,
     372,  2729,   269,  1934,  1935,  1936,    72,   105,   208,  2466,
     381,   128,   133,   113,    73,   240,   118,   167,   943,   113,
     125,   198,    11,    40,  1275,   266,    15,    16,  2465,    40,
    2467,   133,  2517,  1284,  3315,   447,    41,  2792,  3076,   159,
     115,  2379,  3407,   359,    11,   213,   116,  2997,  3234,  2999,
     399,  3260,  3261,   408,   161,    33,   113,   188,   159,  3154,
    2797,  3156,   166,    11,   168,   116,   503,   106,  2805,   970,
     507,   467,   104,  2074,   494,   976,  1166,   363,   363,    46,
     128,    59,  3301,  3448,  1046,  3304,  2847,   507,  1014,  1015,
    1097,   446,   186,   505,   944,   491,  2516,   363,   358,   933,
     307,   308,   309,  3094,  1030,    11,   956,   172,  3317,    15,
      16,    78,   461,  1487,    11,  2904,  2491,   122,    15,    16,
     190,   289,  3403,    11,   189,   226,   272,    15,    16,   194,
      78,  2616,   167,   188,   505,   934,   283,   509,   363,   190,
      46,   382,   330,  3238,  1518,   265,  2513,   283,  2515,    46,
     209,   268,   106,  2902,   171,   441,   441,   214,   992,  2418,
     171,   278,  3200,   421,  2913,   372,   287,   232,   266,  3119,
     236,   359,    78,   273,   268,   441,  1535,   444,  1142,   236,
    3366,    78,  3401,  3086,   500,  1147,   363,   441,   505,   500,
     505,  1143,  1144,  1958,  3064,  3195,   301,   374,   273,   509,
    1439,    26,   409,   444,   351,    72,  2934,    32,   505,   316,
     447,  2674,  1763,   509,   246,   351,   441,   348,   320,   505,
     505,  2658,   254,  1837,   350,   350,   347,   571,   349,   520,
     278,   350,   409,  3202,  3011,   442,   494,   803,  3339,   505,
     386,   463,  2894,     4,   444,   505,   453,   157,     9,   507,
    1052,   505,   396,   397,    63,   562,   421,   505,   379,  2595,
    1094,  1095,   421,  2051,   571,   406,   444,   350,  2635,   437,
    3025,   421,   307,   308,   309,    13,    14,   409,   622,   449,
     505,  2612,   459,   406,   503,  2335,   570,  1704,   507,  3044,
     345,  3078,  2089,   505,   389,  1120,   571,   164,   505,   447,
     389,   389,  3302,  3066,   611,  3066,  2392,  2122,   133,   414,
     168,   469,  3303,   611,   494,   622,   505,   456,   106,   384,
     467,  2244,   562,   233,   622,   505,  2255,  2115,   611,  1314,
     503,   467,   505,   491,   507,   501,   704,   372,   505,   622,
    1336,   469,   503,  2763,  1583,  1794,   513,   505,   505,  1108,
     657,   658,   670,   457,   505,  3016,  2770,   622,   670,   506,
    3021,   508,   513,   491,  2970,   505,   505,   504,  1619,  1145,
     506,   505,   508,   680,   409,   505,   505,   505,   505,   501,
    2123,   505,  1145,   509,   509,   496,   497,   505,  2109,  1351,
     505,   505,   505,   505,  1852,   505,   505,   689,   689,   689,
     689,   689,   505,   678,   675,   689,   505,   442,   505,   689,
     689,   689,  1963,   606,   505,   722,   723,   689,   453,   726,
     505,  3208,    30,   694,   162,  2882,   509,   611,   994,    26,
    3209,  1420,   467,  1359,  1360,    32,   949,   773,   622,   496,
     497,    23,    24,   106,   302,  3194,  2744,   467,   681,  2380,
    2381,  2382,  2383,   622,   321,    30,   491,   266,  1878,   795,
     245,  2075,   287,   496,   497,   659,   660,    80,   662,  3267,
     505,   491,   144,   413,   447,   415,   496,   497,    91,   259,
    1719,   409,  1721,   268,   689,   689,   689,   689,   689,  1909,
     689,  2750,  1328,   689,   689,   831,   803,   689,   689,   505,
    1464,  1465,   689,   689,   689,  3294,  1470,   689,   689,   498,
     499,   500,   501,   689,   689,   689,  1478,   689,   689,  2886,
     128,  1357,   347,   195,   145,   689,   108,   385,   115,  1733,
     157,   240,   505,   313,   841,   162,   133,  1373,   423,  1743,
    1492,   350,  1746,     4,   335,     0,  1406,  1921,     9,  1409,
     128,   240,  1803,   128,   379,  1415,  1508,  1564,  1565,  1566,
    2561,   173,  2563,   803,  3313,   102,   508,  3365,  3357,     4,
     379,   438,  1534,  1535,     9,   196,  3339,   155,  3339,   457,
      37,    37,  1544,   374,  1958,   470,    42,   349,  1422,   335,
     496,   497,   498,   499,   500,   501,    59,   469,   509,   157,
    1166,   498,   499,   500,   501,  1567,   233,  3027,   496,   497,
     498,   499,   500,   501,     5,   202,  2357,   379,   409,   491,
      80,   222,  1421,   505,   236,   450,   933,  1422,   374,  2003,
    2418,    91,   939,   940,  2431,  1485,  1411,  1929,   945,   176,
     187,   948,   949,    99,   951,   952,   953,   954,  1831,  1853,
     934,  1615,   345,   280,   363,  1832,  1833,  1834,  1832,  1833,
     967,  3007,  1832,   409,  1466,   266,  1853,   974,   459,   967,
    2221,    37,   268,   500,   363,   233,   974,   273,  3427,   266,
     507,   268,  1018,   128,   967,   992,   993,   994,   198,  2282,
     287,   974,   184,   185,     3,   273,  2289,  1033,  2291,  1663,
     278,   965,   967,  1047,   167,   469,  1013,   169,   247,   974,
     155,   168,   168,   459,   252,   253,  1729,  2718,   500,   983,
     176,   173,   280,   987,  1031,   507,  1586,   491,  2091,   266,
     331,  2094,   441,   329,   426,  1042,  1043,  1044,  1574,  1046,
    1047,   505,  1049,  1813,   469,  2194,   343,   204,   204,  3169,
     347,   363,   441,  1477,   994,  1479,  1480,  1844,    40,  2547,
     252,   253,  1328,   220,   220,  1835,   491,  1702,   409,  1839,
    1077,  2145,  1842,   230,   230,  1760,  1761,  1762,    60,   241,
     505,   382,   379,   967,   236,   975,   504,  1094,  1095,   979,
     974,  1357,  1358,  1782,  1729,  3252,   505,   515,   967,   504,
    2203,   413,   168,   415,   459,   974,   262,  1373,  1126,  1127,
     515,  1129,   367,  1748,  1126,  1127,   505,  1129,  1753,   157,
     505,  1128,   104,   268,   162,  1132,  1133,   283,   273,   441,
     368,   369,   505,   278,  2444,  1142,  1143,  1144,   204,   413,
    1147,   415,     4,   444,   307,   308,   309,     9,  1810,  1120,
     428,   307,  1092,   450,   220,   503,  2264,   505,   314,  1166,
      26,   439,  2270,    72,   230,   504,    32,   503,  1860,  2081,
     509,   507,  1864,   335,  1710,  1867,   368,   369,   503,  1739,
     505,   418,   507,   413,  1744,   415,   503,  2652,   506,     6,
     507,   509,     9,   162,   562,   233,    30,   354,   354,    16,
     659,   660,   506,   662,   113,   509,   413,   506,   415,   372,
     509,  1182,   374,   505,    31,   197,   373,   373,    35,  1883,
    1884,  1885,  1886,  1887,  1888,   505,  1166,  1891,  1892,  1893,
    1894,  1895,  1896,  1897,  1898,  1899,  1900,   505,  2177,  2178,
    2179,   506,   280,   505,   509,   506,   409,   409,   509,    83,
     506,  1464,  1465,   509,   505,  1917,   506,  1470,    92,   509,
     167,   413,  2750,   415,   246,   498,   506,   133,  1275,   509,
     506,   506,   254,   509,   509,   506,   505,  1284,   509,   442,
     114,   167,   506,   428,   266,   509,   442,  1823,   354,   441,
     453,   447,   506,   506,   439,   509,   509,   459,   491,  3419,
     506,  1308,     8,   509,  2177,    11,  2179,   373,  1574,    15,
      16,    69,    70,    19,    20,    21,   298,    13,    14,  1853,
    2394,  1328,   604,  2397,   606,   506,   219,   506,   509,  3404,
     509,  3406,  3370,  1325,  1870,  1325,  1325,  1325,   506,  2649,
     506,   509,   505,   509,  1351,   488,  1882,   467,  3386,   469,
    1357,  1358,   186,   506,   636,   506,   509,   506,   509,   268,
     509,   645,   646,   647,   273,   199,  1373,   349,    13,    14,
    2034,  2035,  3447,    13,    14,   506,  1912,  2039,   509,   661,
    2319,  2530,   506,  1919,   506,   509,  2529,   509,  1328,   507,
     506,   506,   374,   509,   509,   506,  2706,  2514,   509,   506,
    1407,  2086,   509,  3441,  2174,   505,  2176,   506,  3446,   505,
     509,   393,   321,   506,   283,  1422,   509,  1357,  1358,  1955,
    2528,   287,  2530,  1959,    13,    14,  2313,  1961,   337,  1965,
     505,  2574,  1439,  1373,   505,   803,    26,  1421,  1445,    13,
      14,  2513,    32,  2515,  1710,   488,  3147,  1422,  3149,   506,
     506,   166,   509,   509,   696,   507,   698,  1464,  1465,    13,
      14,   509,   173,  1470,   505,  1472,    13,    14,    13,    14,
    1477,  1478,  1479,  1480,  1472,    13,    14,   343,    13,    14,
     506,   347,    13,    14,  2148,  1492,  1493,   198,   506,  1472,
     167,  1498,    13,    14,  1501,    13,    14,   288,  2150,  1506,
    1498,  1508,  1509,  1501,  2286,  2287,    59,  1514,  1506,   505,
    2422,  1509,   410,   379,   488,  1498,  1514,   219,  1501,    13,
      14,    13,    14,  1506,   506,   236,  1509,  1534,  1535,   438,
     562,  1514,  1539,  1498,  1541,   148,  1501,  1544,   447,   343,
    1531,  1506,   148,   133,  1509,   148,  2242,  1531,   148,  1514,
      40,  1531,  1531,  1531,    13,    14,  1563,  1823,   506,  1531,
    1567,   395,  1569,   505,   398,  3157,    40,  1574,  1575,  1576,
    1577,  1578,  1579,  1580,  1581,  1582,  1583,   288,  3066,   285,
    1587,  1588,    13,    14,   450,  1592,    13,    14,  1472,  1596,
      13,    14,  1599,  1600,  1601,  1602,  1603,  1604,  1605,  1606,
    1607,    13,    14,  1610,  1870,  2544,    13,    14,   268,  2548,
    1617,  2550,  1619,   268,  1498,   459,  1882,  1501,  2928,    13,
      14,   432,  1506,    13,    14,  1509,   994,    13,    14,  1498,
    1514,    87,  1501,  1640,  1574,    13,    14,  1506,   358,   359,
    1509,   148,  1660,  2547,   471,  1514,  1912,  2764,  1660,   358,
     359,   933,   505,  1919,   256,   257,  1663,   456,   368,   369,
     942,   169,  2811,  1638,   358,   359,   317,  1674,  1675,  3110,
    1883,  1884,  1885,  1886,  1887,  1888,   358,   359,  1891,  1892,
    1893,  1894,  1895,  1896,  1897,  1898,  1899,  1900,   148,  1955,
     452,   453,   505,  1959,  3381,  3382,   505,   287,   505,  1965,
    3413,  3414,   413,  1710,   415,   505,  1094,  1095,    40,   991,
     992,    39,  1719,   505,  1721,   148,   148,   507,  3368,   148,
     283,  2257,  3372,   345,   421,  2883,   505,   438,    60,   167,
     441,   505,   505,   241,   506,   505,   411,   215,   220,   505,
     220,   293,   505,   220,   290,    40,   231,  2307,   505,     5,
       5,   505,  1759,   343,   505,    26,  1763,   347,   505,  1766,
    1767,    32,   505,     5,     5,   505,     5,   505,  2719,     5,
    1710,   803,   104,   105,  1056,  2482,   144,     9,  3428,  2313,
     505,   113,   468,  1065,  2448,  2449,   492,   493,   494,   379,
     496,   497,   498,   499,   500,   501,  1803,   295,  1166,   102,
      40,  1083,   509,  1810,   509,   506,   215,   379,  1799,   162,
    1092,   280,  1094,  1095,    26,   162,  1823,   278,   231,    91,
      32,  2034,  2035,   421,    59,   505,  3267,   335,   509,   505,
    1837,    59,    59,   421,   421,   259,   421,  1844,  1845,   171,
     421,   515,   467,   148,    98,    40,  1853,   148,    26,   268,
     143,  3339,   268,  2505,    32,   505,   505,   268,  2628,     3,
     450,   505,   133,  1870,   157,   197,   374,  1874,  1875,   162,
    1877,   268,     9,  3314,    39,  1882,  1883,  1884,  1885,  1886,
    1887,  1888,  2567,  1823,  1891,  1892,  1893,  1894,  1895,  1896,
    1897,  1898,  1899,  1900,   419,   419,  2585,   507,  2802,  1906,
    1907,   409,   503,  1910,   503,  1912,   421,   173,   421,   421,
    1917,   421,  1919,  2609,   246,    13,   167,   509,   220,   505,
     213,   133,   254,   506,  3365,   464,   506,   506,   506,   506,
    1870,  3074,  1939,   506,   266,  1942,   268,  1944,   506,   220,
     233,  1948,  1882,   505,  1942,   275,   275,   505,  1955,   509,
    1948,   459,  1959,    11,  1961,   133,  1963,   463,  1965,  1942,
    1328,   345,   994,   504,   515,  1948,   298,  1974,   419,   509,
     236,   514,  1912,   509,   273,   505,   505,  1942,   421,  1919,
     176,   158,  2646,  1948,   167,   447,   509,   280,   213,  1357,
    1358,  2257,   506,   147,   259,  2039,   289,   382,  2005,   222,
     509,   284,   306,  2010,  2011,  1373,   306,  2671,   509,   509,
     176,  2547,  2963,   167,   215,  1955,   287,   349,   506,  1959,
     222,   505,   268,   222,   281,  1965,   289,  2034,  2035,   326,
     432,  2943,  2039,  3191,   459,   505,    40,  2924,   505,   447,
     148,   148,   374,   148,  2814,  2815,  2053,   467,   148,  2056,
      40,  2058,   268,   283,   506,   503,   506,  2847,  1942,   506,
    3134,   393,   488,   395,  1948,   506,   398,  2074,  2075,   506,
     488,   506,   343,  1942,  2081,   287,   347,  2084,   283,  1948,
      40,    59,   167,    11,    40,   162,  2084,   176,  2624,   506,
     162,   506,   506,   514,  2101,   421,   506,   363,   102,   505,
     104,  2084,   106,  2101,   370,   505,   505,  2114,   379,   287,
      96,   506,   504,   509,   507,   506,   488,   506,  2101,  2679,
     167,  2785,   245,   506,  2131,  2132,   505,   151,   505,   505,
     505,   343,   505,   464,  1166,   347,    40,    59,   509,   494,
     490,  2148,   284,  2150,   437,   284,   444,   413,   509,   415,
      59,   239,  2159,   307,   308,   309,  1438,    59,   259,   421,
    1442,   505,  3066,   148,   268,   343,   198,   379,   148,   347,
    2177,  2178,  2179,   505,   148,   441,   421,   421,  2444,   450,
     275,   167,     8,   421,   421,    11,   506,   505,   275,    15,
      16,    40,   345,  3342,   365,   506,   509,   281,   432,    37,
    2084,   379,   283,   467,    42,    40,  1574,  2251,  2215,   148,
     506,   273,   504,   504,  2221,  2084,   506,  2101,   372,   167,
      46,   505,    59,  2783,   506,   505,   181,    53,   506,   506,
     162,  3170,  2101,    78,   139,  2448,  2449,   506,   450,   506,
     194,   167,   515,   294,  2236,   505,  2236,  2236,  2236,   351,
    2257,   509,    78,   506,   506,   409,   505,     7,     8,   284,
     176,    99,    12,  2927,   148,   171,   509,    17,  2275,   432,
     143,    21,   450,    23,    24,   506,   505,  2813,    28,    29,
      30,  2547,   506,    33,   157,   505,    36,    37,   442,   162,
      40,   506,   506,    43,    44,   506,  1328,   505,    40,   453,
     467,    40,   506,   509,    84,   505,  2313,   447,   167,   506,
     504,   509,  2319,   467,   505,   141,   466,  2257,   506,   194,
     506,   307,   308,   309,   509,  1357,  1358,   506,   453,    59,
     168,   506,   506,   506,   283,    85,    86,   491,   494,   467,
     213,  1373,  1710,   200,   506,  1627,   172,    97,   506,  3045,
    2357,   505,   102,   103,   104,   105,   106,   506,  2624,  2357,
     233,   506,   113,   189,    40,    86,   204,   505,   194,   222,
     187,   507,   273,   273,  2357,   507,   173,   507,  2422,   494,
     507,   507,   220,  2649,   421,   507,   372,   507,   507,  2396,
    2924,  2459,   230,   507,   507,   507,   507,   507,   507,   421,
     506,   198,  3341,     3,  2411,     5,   232,   280,  2415,  2416,
    2454,   507,   504,  2396,   507,  2422,   289,   507,  3330,    40,
     268,   507,   504,   409,   262,  2432,   505,   507,  2435,   507,
    2437,   507,   507,  2646,   507,  3339,   507,  2444,  2445,   236,
    2706,  2448,  2449,   429,   507,   283,  2453,  2454,   507,     5,
     507,  3136,  3159,  2460,   507,  1823,   442,   507,  3120,   285,
    3122,  2505,   507,   507,   507,   505,  3130,   453,  2475,   307,
     105,   467,    40,  2357,   283,   505,   314,     9,  2485,   344,
    3132,   467,  2473,   509,   505,   505,   328,    59,  2479,  2473,
     509,   288,   506,  2473,  2473,  2473,   506,   194,  2505,   187,
     509,  2473,  1870,    89,  2444,   491,   452,   107,   108,   506,
    3135,   505,   337,  3138,  1882,    40,   354,   521,   148,   505,
     148,   525,   506,   120,    40,   529,   359,   506,   359,    40,
    3066,   506,   505,   562,   505,   373,    40,  2544,   505,   509,
    2547,  2548,  1574,  2550,  1912,   303,   505,  2813,   447,   273,
     244,  1919,   186,   447,  2561,   432,  2563,     5,   384,   509,
     505,   286,   506,    72,   437,  3278,   363,    72,    78,     9,
     506,  1853,  2785,  3269,  3259,   506,   505,  1859,   361,   506,
     504,  2847,    59,   504,   184,   185,   129,  1955,    91,   266,
    2581,  1959,  2584,   283,  2584,  2584,  2584,  1965,   494,    40,
     432,  3253,   505,   286,   442,   286,   452,  2547,   505,   613,
     200,   506,   283,   506,   506,   506,   413,  2624,   415,   283,
    2611,   506,   379,  2614,   118,   444,   358,  2671,    37,   144,
     503,    25,    36,    42,   507,   432,   358,   291,  2807,  2646,
     689,   438,  2649,  1727,   441,  1639,  2544,    14,   248,   249,
     250,   251,   252,   253,  2172,  2235,   256,   257,   605,  2666,
    2667,  2319,  2928,   489,  2671,  2924,  2576,  2674,  2531,  3284,
     496,   497,   498,   499,   500,   501,  2683,  3396,  1710,  1961,
    3038,  3352,  3343,  3389,  2624,  1153,  3096,   691,  2695,  2165,
      99,  2674,  2178,  2700,  2701,  3341,  2740,  3350,  2705,  2706,
    3338,  2550,  2162,  2710,  1323,  3299,  2713,  2714,  2484,  2649,
    1357,  2718,  2719,  1406,  2927,  2722,  1844,    72,  1422,  2726,
    3229,  2600,  3161,    78,  3314,  2483,  2733,  2523,  2726,  3231,
    3263,  3418,  2473,  2148,  1442,  2114,    91,  1699,   742,   743,
     744,   745,  2378,  2726,    40,   966,  1113,   966,  1136,  3323,
    2131,  3311,  1663,  1135,  3240,  3124,    21,  1698,   113,   168,
     115,  2726,  1953,  2101,    60,  2674,  2706,  2967,   368,   369,
    2777,   521,  1138,  2357,   803,   525,   526,   611,  2785,   529,
     944,   622,  2356,  2403,  3059,   942,   536,   942,  1853,  3244,
     942,  1823,  3243,  1375,   942,   204,  2012,  2804,    40,  2416,
    3066,  2115,  1975,  3339,  2057,  2054,  2813,  2733,   104,  1493,
    2014,   220,  1638,  2429,   564,   565,   566,    37,    60,  1961,
      97,   230,    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1870,    -1,
    2847,    -1,  2726,    -1,    -1,    -1,    -1,   202,    -1,    -1,
    1882,    -1,    -1,   262,   604,   605,   606,  2726,    -1,    -1,
      -1,   611,   104,   613,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   622,  2813,   283,   171,   626,   627,    -1,    99,
    1912,   631,   632,  2890,    -1,   485,   486,  1919,    -1,  2257,
      -1,    -1,    -1,    -1,    -1,   645,   646,   647,   307,  2943,
      -1,   197,  2184,    -1,    -1,   314,    -1,  2847,    -1,   659,
     660,    -1,   662,   268,  2905,    -1,    -1,  2924,   273,    -1,
    2927,  2928,    -1,  1955,    -1,   675,    -1,  1959,    -1,    -1,
      -1,   681,    -1,  1965,    -1,    -1,  2943,    -1,    -1,    -1,
      -1,   691,   946,    -1,   694,   354,    -1,  2229,   168,    -1,
     246,    -1,    -1,    -1,    -1,   197,  2963,    -1,   254,    -1,
      -1,    -1,    -1,  2970,   373,   994,   321,    -1,    -1,  2251,
     266,    -1,    -1,    -1,  2981,  2982,    -1,    -1,  2985,    -1,
    2987,    -1,   337,    -1,   204,    -1,    12,    -1,  2928,    -1,
      -1,    17,   742,   743,   744,   745,    -1,    -1,    -1,    -1,
     220,    -1,   298,    29,   246,  3012,    -1,    -1,    -1,    -1,
     230,    -1,   254,    -1,     8,    -1,    -1,    43,    44,    -1,
      -1,    15,    16,    -1,   266,    19,    20,    21,    -1,  3036,
      -1,  2313,    -1,   442,    -1,    -1,    -1,    -1,   447,  2321,
      -1,  2323,   262,    -1,    -1,  2327,    -1,  2329,    -1,    -1,
      -1,    -1,    -1,   349,    -1,    -1,   298,    -1,     8,  3066,
      -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,    19,
      20,    21,    -1,  3339,    -1,    -1,  2444,   103,   374,    -1,
      -1,    -1,    -1,   438,    -1,    -1,    36,   307,    -1,  3080,
    3081,    -1,   447,    -1,   314,    -1,    -1,   393,    -1,  3106,
      -1,    -1,    -1,  3110,    -1,    -1,    -1,   349,    -1,    -1,
      -1,    -1,  3110,  3120,    -1,  3122,    -1,  3124,    -1,    -1,
      -1,  3128,   143,  3130,    -1,  3132,  3066,  3110,    -1,    -1,
      -1,    -1,   374,    -1,   354,  3142,   157,  1166,    -1,    12,
    3147,   162,  3149,    -1,    17,    -1,     0,    -1,  1152,    -1,
    3157,   393,    -1,   373,    -1,    -1,    29,    -1,    -1,    -1,
      -1,  1165,    -1,  3170,    -1,    -1,    -1,  3158,  3175,  3160,
      43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2547,
      -1,    -1,  1186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   213,   943,   944,    -1,   946,    -1,    -1,   949,
      -1,    -1,    -1,    -1,    -1,   955,   956,    -1,    -1,    -1,
      -1,   961,   233,    -1,    -1,    -1,  3207,   967,    -1,    -1,
      -1,    -1,   442,  3230,   974,  2257,  3110,    -1,    -1,    -1,
     103,    -1,  3223,  3240,   984,    -1,  3227,    -1,    -1,    -1,
      -1,   991,    -1,    -1,    98,    -1,  3253,    -1,    -1,    -1,
      -1,  1001,    -1,    -1,    -1,    -1,  2624,    -1,    -1,   280,
    3267,    -1,    -1,    -1,    -1,  2547,    -1,   217,   289,  3267,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3285,    -1,
      -1,  2649,    -1,    -1,  3267,    -1,    -1,    -1,    -1,   143,
      -1,   285,    -1,   173,  2576,    -1,    -1,    -1,    -1,  1328,
      -1,  1051,    -1,   157,    -1,    -1,    -1,  3314,   162,    -1,
      -1,    -1,    -1,   167,    -1,    -1,  3314,  1321,   198,    -1,
      -1,    -1,   176,  3330,    -1,  1329,    -1,   181,  1357,  1358,
      -1,  3314,  3339,    -1,  3341,   285,    -1,    -1,  2706,    -1,
      -1,    55,    -1,    -1,  1373,    -1,  1096,    -1,    -1,  1099,
      -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,  3365,   213,
      -1,    -1,    -1,  1113,  1114,  3356,    -1,  3365,    -1,    -1,
    1120,    -1,    -1,  3380,  3381,  3382,    -1,    -1,    -1,   233,
      -1,    -1,  3365,  3267,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,  1142,  3384,  2676,    -1,    -1,    -1,    -1,  3339,
    3407,    -1,  1152,  1153,    -1,   119,    -1,    -1,   288,    -1,
      -1,    -1,  2444,    -1,    -1,  1165,   437,    -1,    -1,    -1,
      -1,    -1,    -1,   137,    -1,    -1,   280,   141,    -1,   283,
    3314,    -1,  1182,    -1,    -1,   289,  1186,    -1,    -1,     0,
    1190,  3448,    -1,    -1,    -1,  2813,    -1,    -1,  2730,   163,
      -1,    -1,   166,    -1,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,
      -1,    -1,    -1,   113,   328,    36,    -1,    -1,    -1,  2847,
      -1,  3365,   503,   363,    45,   506,   507,    -1,    -1,    -1,
     370,  1495,    -1,    -1,    -1,    -1,    -1,   351,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,    -1,    -1,
     536,    -1,    -1,    -1,    -1,  2547,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,   167,    -1,    -1,
      -1,    -1,    -1,   413,    -1,   415,    97,    -1,    -1,   565,
     566,    -1,   492,   493,   494,  1574,   496,   497,   498,   499,
     500,   501,   432,    -1,    -1,   409,    -1,    -1,   438,   273,
    2928,   441,    -1,    -1,    -1,    -1,    -1,   281,    -1,  1319,
      -1,  1321,  1322,    -1,    -1,    -1,    -1,  1327,    -1,  1329,
      -1,    -1,    -1,   437,    -1,    -1,    -1,    -1,    -1,   303,
    1340,    -1,  2624,   447,    26,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,
     464,    -1,   466,   467,    -1,   329,    -1,  2649,    -1,  2901,
    1370,    -1,    -1,    -1,    -1,  1375,    -1,    -1,    60,    -1,
      -1,    -1,    -1,  1637,    -1,  1639,    -1,    -1,    -1,    -1,
      -1,    -1,  2924,    -1,    -1,    -1,  1650,    -1,    -1,   503,
      -1,    -1,   506,   507,   508,   681,  1406,   297,    -1,  1409,
      -1,  1411,  1412,   536,  1414,  1415,    -1,   307,   308,   309,
      -1,    -1,   104,    -1,  2706,    -1,    -1,    -1,    -1,    -1,
      -1,  1710,    -1,    -1,  1688,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1442,   566,    -1,    -1,    -1,    -1,  3066,    -1,
      -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1464,  1465,  2998,    -1,   107,   108,
    1470,    -1,  1472,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   372,    -1,    -1,  1485,    -1,  1487,  1488,    -1,
      -1,    -1,    -1,    -1,    -1,  1495,    -1,    -1,  1498,    -1,
      -1,  1501,    -1,    -1,    -1,    -1,  1506,    -1,    -1,  1509,
     147,    -1,    -1,    -1,  1514,   197,  1516,    -1,  1518,   409,
      -1,    -1,    -1,  1777,  1778,  1779,  1780,  1781,    -1,    -1,
     167,  2813,    -1,    -1,  3066,   562,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1543,  1823,   184,   185,    -1,  1548,    -1,
      -1,    -1,   442,    -1,    -1,    -1,    -1,    -1,   681,    -1,
      -1,    -1,    -1,   453,   246,  2847,    -1,    -1,    -1,    -1,
      -1,    -1,   254,    -1,    -1,    -1,    -1,   467,    -1,    -1,
       0,    -1,    -1,    -1,   266,    -1,  1586,     8,    -1,    -1,
      11,  1870,    -1,    -1,    15,    16,    -1,    -1,    19,    20,
      21,   491,    -1,  1882,    -1,   287,    -1,    -1,    -1,   248,
     249,   250,   251,   252,   253,   505,   298,   256,   257,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1912,    -1,  1635,    -1,  1637,    -1,  1639,
    1919,    -1,    -1,    -1,    -1,    -1,  2928,    -1,    -1,    -1,
    1650,  1651,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3192,   343,    -1,  1663,    -1,   347,    -1,   349,    -1,    -1,
     307,   308,   309,    -1,    -1,    -1,  1955,    -1,    98,  1933,
    1959,    -1,   933,    -1,    -1,   961,  1965,    -1,  1688,    -1,
    1690,    -1,   374,     8,    -1,    -1,    11,   379,    -1,    -1,
      15,    16,    -1,    -1,  1704,  1705,    -1,    -1,   984,   520,
      -1,   393,    -1,    -1,    -1,  1715,  1716,  1717,  1718,    -1,
    1720,  3339,    -1,   143,    -1,    -1,  1726,    -1,  1728,   368,
     369,    46,    -1,    -1,    -1,   372,    -1,   157,    53,  1739,
    1740,   992,   162,    -1,  1744,  1745,    -1,   167,    -1,  1749,
    1750,  1751,  1752,    -1,  1754,  1755,   176,    -1,    -1,   570,
     571,   181,    -1,    78,    -1,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   409,   194,    -1,  1051,   803,  1777,  1778,  1779,
    1780,  1781,    -1,    -1,  3066,    -1,    -1,    -1,  1788,    -1,
      -1,    -1,    -1,   213,    -1,    -1,   217,  1797,    -1,    -1,
     611,    -1,    -1,    -1,    -1,   442,    -1,  3339,    -1,    -1,
      -1,   622,    -1,   233,  1065,    -1,   453,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   141,    -1,    -1,    -1,
     467,    -1,    -1,    -1,    -1,    -1,    -1,  1113,  1114,    -1,
      -1,  1092,    -1,  1094,  1095,  3377,   485,   486,    -1,    -1,
      -1,    -1,   562,    -1,   491,    -1,    -1,   172,    -1,   670,
     280,    -1,    -1,   283,   285,    -1,   505,    -1,   505,   289,
      -1,    -1,    -1,     8,   189,    -1,    11,    -1,   689,   194,
      15,    16,    -1,  1883,  1884,  1885,  1886,  1887,  1888,    -1,
      -1,  1891,  1892,  1893,  1894,  1895,  1896,  1897,  1898,  1899,
    1900,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   328,    -1,
      -1,    46,    -1,    -1,    -1,    -1,  1167,   232,    53,  1170,
    1171,  1921,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,    -1,  1933,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1942,    78,    -1,    -1,    -1,    -1,  1948,    -1,
      -1,    -1,    -1,  1953,    -1,    -1,    -1,    -1,  1958,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   994,    -1,     8,
     285,    -1,    11,    -1,    -1,    -1,    15,    16,  2257,    -1,
      19,    20,    21,    -1,  2238,    -1,    -1,    -1,    -1,   409,
    1113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2254,  2255,  2256,  2003,    -1,    -1,   141,  2007,    -1,    -1,
      -1,    -1,  2012,    -1,    -1,  2269,    -1,   437,  2272,    -1,
     167,    -1,    -1,  2277,    -1,    -1,    -1,   447,    -1,    -1,
      -1,    -1,    -1,    -1,  2034,  2035,    -1,   172,    -1,    -1,
      -1,    -1,    -1,    -1,   464,    -1,   466,   467,    -1,    -1,
      -1,  2051,    -1,    -1,   189,    -1,    -1,  3339,    -1,   194,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
      -1,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,    -1,    -1,   503,  2084,    -1,   506,   507,   508,    -1,
      -1,    -1,   167,   803,    -1,    -1,  2096,   232,    -1,    -1,
      -1,  2101,    -1,    -1,  1355,  2105,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1366,    -1,  1368,    -1,    -1,
      -1,    -1,    -1,   934,    -1,    -1,    -1,  1378,    -1,    -1,
      -1,  2385,  2386,  2387,    -1,  1411,  1412,    -1,  1414,  1166,
      -1,    -1,    -1,    -1,  1395,  2145,    -1,    -1,  2148,    -1,
     285,  2151,    -1,    -1,    -1,   194,   967,    -1,    -1,    -1,
     307,   308,   309,   974,    -1,  2444,    -1,  2167,    -1,    -1,
      -1,    -1,    -1,    -1,   489,    -1,  1427,  1428,   217,    -1,
      -1,   496,   497,   498,   499,   500,   501,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1009,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1020,
      -1,  1487,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,   297,    15,    16,   372,    -1,    19,    20,    21,
      -1,  2231,   307,   308,   309,    -1,  1047,  2237,  2238,    -1,
    1516,    -1,  1518,    -1,    36,  2499,   285,    -1,  2248,   384,
      -1,    -1,    -1,  2253,  2254,  2255,  2256,    -1,    -1,    -1,
      -1,    -1,   409,    -1,    -1,    -1,    -1,  2267,  2547,  2269,
      -1,    -1,  2272,    -1,    -1,    -1,    -1,  2277,    -1,    -1,
      -1,    -1,    -1,    -1,   994,    -1,    -1,    -1,    -1,  1412,
    2290,  1414,    -1,    -1,    -1,   442,    -1,   372,    -1,    -1,
      -1,  1328,    -1,    -1,    -1,    -1,   453,  2307,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1126,  1127,    -1,  1129,    -1,
     467,    -1,    -1,    -1,    -1,  2325,  2326,    -1,  2328,    -1,
    1357,  1358,  2586,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   491,  2624,  1373,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   489,    -1,    -1,  2357,   505,    -1,
      -1,   496,   497,   498,   499,   500,   501,   442,    -1,    -1,
    2649,    -1,    -1,    -1,    -1,    -1,    -1,  2377,   453,    -1,
      -1,    -1,    -1,    -1,    -1,  2385,  2386,  2387,    -1,    -1,
      -1,    -1,   467,    -1,  2394,   949,  2396,  2397,    -1,    -1,
      -1,    -1,    -1,  2403,    -1,  2659,  2660,  2661,  2662,    -1,
      -1,    -1,    -1,    -1,  1690,    -1,   491,    -1,  2418,    -1,
      -1,    -1,    -1,  1674,  1675,   217,    -1,  2706,    -1,  1705,
     505,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1715,
      -1,  1717,    -1,    -1,  1720,    -1,    -1,    -1,  2448,  2449,
    1726,    -1,  1728,   492,   493,   494,  1166,   496,   497,   498,
     499,   500,   501,    -1,  1740,    -1,    -1,    -1,    -1,  1745,
      -1,    -1,    -1,  1749,  1750,  1751,  1752,  2477,  1754,  1755,
      -1,    -1,  1733,  2483,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1743,   285,    -1,  1746,    -1,    -1,    -1,  2499,
      -1,    -1,    -1,  2503,    -1,    -1,    -1,  2507,  2508,  2509,
      -1,    -1,    -1,  2513,  2514,  2515,    -1,  2517,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    19,    20,    21,  2813,    -1,  2536,  2791,  2538,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1574,    36,    -1,
      -1,  2551,  2552,  2553,  2554,  2555,  2556,  2557,  2558,  2559,
    2560,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2847,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1827,  1828,    -1,  1133,
    2580,    -1,  1705,    -1,    -1,    -1,  2586,  2587,  1142,    -1,
      -1,    -1,  1715,    -1,  1717,    -1,    -1,  1720,     0,    -1,
    2600,    -1,  1853,  1726,    -1,  1728,    -1,    -1,    -1,    -1,
    1421,    -1,    -1,    -1,    -1,    -1,  2616,  1740,  1328,    -1,
      -1,    -1,  1745,    -1,    -1,    -1,  1749,  1750,  1751,  1752,
      -1,  1754,  1755,    -1,    -1,  2635,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1921,  2646,  1357,  1358,  2928,
      -1,    -1,  2652,    -1,    -1,    -1,    -1,    -1,    -1,  2659,
    2660,  2661,  2662,  1373,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2671,    -1,    -1,  2674,    -1,    -1,  1953,  2678,  2679,
      -1,    -1,  1958,  1710,    -1,    -1,    -1,  1498,    -1,    -1,
    1501,    -1,    -1,    -1,  2694,  1506,    98,    -1,  1509,    -1,
     492,   493,   494,  1514,   496,   497,   498,   499,   500,   501,
    1961,    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
    1531,    -1,    -1,    -1,  2724,    -1,  2726,  2003,    -1,   217,
      -1,    -1,    -1,    -1,    -1,    -1,  2012,    -1,    -1,    -1,
    2740,   143,    -1,    -1,  2744,    -1,    -1,    -1,    -1,    -1,
    2750,    -1,    -1,    -1,    -1,   157,    -1,    -1,    -1,    -1,
     162,    -1,    -1,    -1,  2764,   167,    -1,    -1,    -1,    -1,
    2770,    -1,    -1,    -1,   176,    -1,    -1,    -1,  1589,   181,
      -1,    -1,    -1,  2783,  2784,  2785,    -1,  3066,    -1,    -1,
      -1,  2791,    -1,   184,   185,    -1,  1823,   285,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2808,    -1,
      -1,   213,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2096,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3083,
      -1,   233,    -1,    -1,    -1,    -1,    -1,  2088,    -1,    -1,
      -1,    -1,    -1,  1870,    -1,    -1,    -1,    -1,    -1,  1660,
      -1,    -1,    -1,  3107,    -1,  1882,    -1,   248,   249,   250,
     251,   252,   253,    -1,  1574,   256,   257,    79,    -1,  2145,
    2121,  2122,    -1,    -1,    -1,  2151,    -1,    -1,   280,    -1,
      -1,   283,    -1,    95,    -1,  1912,  2886,   289,    -1,    -1,
      -1,    -1,  1919,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2904,    -1,    -1,    -1,    -1,    -1,
    1464,  1465,    -1,    -1,  3168,    -1,  1470,     8,  2918,    -1,
      11,    -1,    -1,    -1,    15,    16,   328,  2927,  1955,    -1,
     142,    -1,  1959,    -1,    -1,    -1,    -1,    -1,  1965,    -1,
     152,    -1,    -1,    -1,    -1,  3199,    -1,    -1,    -1,   351,
      -1,    -1,   164,  2953,    -1,    46,    -1,   169,    -1,  2959,
      -1,    -1,    53,    -1,    -1,    -1,    -1,  2967,    -1,    -1,
      -1,    -1,    -1,  2096,    -1,    -1,    -1,   368,   369,  1790,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    78,  1799,    -1,
      -1,  2267,    -1,    -1,  2994,    -1,    -1,    -1,    -1,    -1,
    1710,    -1,    -1,    -1,   492,   493,   494,   409,   496,   497,
     498,   499,   500,   501,    -1,    -1,  3016,    -1,    -1,    -1,
      -1,  3021,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   241,
      -1,    -1,  2283,   245,    -1,   437,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   447,    -1,  3047,    -1,    -1,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3339,    -1,   464,    -1,   466,   467,    -1,  3067,  3068,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   172,    -1,  3083,    -1,  3085,    -1,   657,   658,  3089,
      -1,    -1,    -1,  3093,   485,   486,    -1,    -1,   189,    -1,
     312,   503,    -1,   194,   506,   507,   508,  3107,    -1,  1663,
    3110,    -1,    -1,  1823,    -1,   327,    -1,    -1,  2394,    -1,
      -1,  2397,    -1,    -1,    -1,    -1,    -1,  2403,    -1,    -1,
    3130,  1942,    -1,    -1,  3134,  3135,    -1,  1948,  3138,    -1,
      -1,   232,     8,    -1,  2267,    11,    -1,    -1,   360,    15,
      16,   363,   722,    19,    20,    21,   726,    -1,    -1,    -1,
    1870,  3161,   374,    -1,    -1,   377,    -1,    -1,  3168,    -1,
      36,    -1,  1882,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   409,    -1,  3199,
      -1,    -1,  1912,    -1,   416,    -1,    -1,    -1,    -1,  1919,
      -1,    -1,    -1,    -1,   426,    -1,    -1,    -1,    -1,    -1,
     432,    -1,    -1,    -1,    -1,    -1,    -1,  2503,  2039,    -1,
    2257,  2507,  2508,  2509,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3244,  1955,  2057,   459,    -1,  1959,
      -1,    -1,    -1,    -1,    -1,  1965,    -1,    -1,    -1,    -1,
    2536,    -1,  2073,    -1,    -1,    -1,    -1,  3267,    -1,    -1,
      -1,   841,    -1,  2084,    -1,  2551,  2552,  2553,  2554,  2555,
    2556,  2557,  2558,  2559,  2560,    -1,    -1,    -1,    -1,    -1,
    2101,    -1,    -1,   384,  3294,    -1,  2547,    -1,    -1,  3299,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3311,  3312,    -1,  3314,  3315,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3323,    -1,    -1,    -1,    -1,    -1,  1883,
    1884,  1885,  1886,  1887,  1888,  3335,    -1,  1891,  1892,  1893,
    1894,  1895,  1896,  1897,  1898,  1899,  1900,    -1,    -1,    -1,
      -1,   217,     8,    -1,    -1,    11,    -1,  3357,    -1,    15,
      16,    -1,    -1,    -1,    -1,  3365,    -1,    -1,    -1,   939,
      -1,    -1,    -1,    -1,    -1,   945,  2652,    -1,   948,    -1,
      -1,   951,   952,   953,   954,  2508,  2509,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,   489,    -1,
      -1,    -1,  2678,  3403,    -1,   496,   497,   498,   499,   500,
     501,    -1,    -1,  2536,    -1,    -1,    -1,  2444,  3418,   285,
      -1,    -1,    78,   993,    -1,    -1,    -1,    -1,  2551,  2552,
    2553,  2554,  2555,  2556,  2557,  2558,  2559,  2560,    -1,    -1,
    2251,    -1,     8,  1013,    -1,    11,    -1,    -1,    -1,    15,
      16,    -1,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,  1031,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1042,  1043,  1044,     8,  1046,  1047,    11,    -1,
    2034,  2035,    15,    16,    -1,   141,    19,    20,    21,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      -1,    -1,    19,    20,    21,    -1,    -1,  1077,  2784,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    36,
    2547,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,   189,    -1,    -1,    53,    -1,   194,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2257,    -1,    -1,
      -1,  2802,    -1,    -1,    -1,    -1,  2807,    -1,  1128,    -1,
      -1,    78,  1132,  1133,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,  1143,  1144,    11,   232,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2148,    -1,    -1,  2624,    -1,    -1,
      36,    -1,    -1,  2854,  2855,    -1,    -1,    -1,    -1,    -1,
      46,  2422,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,  2649,    -1,    -1,    -1,   492,   493,   494,   285,
     496,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
      -1,    -1,    78,  2454,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   217,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
      -1,  2784,  2473,    -1,    -1,    -1,    -1,    -1,  2479,    -1,
      -1,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,  2706,
      -1,    -1,    -1,  2959,   217,    -1,    -1,    -1,    -1,    -1,
      -1,  2967,    -1,    -1,  2505,    -1,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,  1275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1284,   232,    -1,     8,    -1,   285,
      11,    -1,    -1,    -1,    15,    16,    -1,    -1,   384,    -1,
      -1,    -1,    -1,    -1,  2444,    -1,   172,    -1,  1308,    -1,
    3016,    -1,    -1,    -1,    -1,  3021,    -1,    -1,    -1,    -1,
      -1,   268,   285,   189,   271,    46,    -1,    -1,   194,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,   285,    -1,
    2581,  3047,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,  2813,    78,    -1,    -1,
      -1,  3067,  3068,    -1,    -1,    -1,   232,    -1,    -1,    -1,
    2611,    -1,    -1,  2614,  3055,  3056,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3066,    -1,  3093,    -1,    -1,
    2847,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   268,   489,    -1,   271,    -1,  2547,    -1,    -1,
     496,   497,   498,   499,   500,   501,    -1,    -1,    -1,   285,
     141,    -1,   288,    -1,    -1,    -1,    -1,    -1,  3134,    -1,
    2671,    -1,    -1,    -1,    -1,    -1,    -1,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1445,    -1,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2448,  2449,    -1,    -1,   189,    -1,
      -1,  2928,    -1,   194,    -1,    -1,    -1,  1477,    -1,  1479,
    1480,    -1,    -1,    -1,  2624,  2726,    -1,    -1,    -1,    -1,
      -1,    -1,  1492,  1493,  3047,    -1,   492,   493,   494,  2740,
     496,   497,   498,   499,   500,   501,    -1,    -1,  1508,  2649,
      -1,   232,    -1,    -1,  3067,  3068,    -1,    -1,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   492,
     493,   494,    -1,   496,   497,   498,   499,   500,   501,  1539,
    3093,  1541,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,  2706,    -1,    -1,  1569,
      -1,    -1,    -1,    -1,    -1,  1575,  1576,  1577,  1578,  1579,
    1580,  1581,  1582,    -1,    -1,    -1,    -1,  1587,  1588,    -1,
      -1,    -1,  1592,    -1,    -1,    -1,  1596,    -1,    -1,  1599,
    1600,  1601,  1602,  1603,  1604,  1605,  1606,  1607,    -1,  3066,
    1610,    -1,    -1,    -1,    -1,    -1,    -1,  1617,    -1,  1619,
      -1,    -1,    -1,   489,    -1,    -1,   492,   493,   494,  3335,
     496,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
    1640,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3339,    -1,
      -1,    -1,  2646,   384,  2905,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2813,  1674,  1675,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2671,     0,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2943,    -1,    -1,    -1,    -1,  2847,    -1,    -1,
      22,  2695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1759,
      -1,    73,    -1,  1763,    -1,    -1,  1766,  1767,   489,    -1,
      -1,    -1,    84,    -1,    -1,   496,   497,   498,   499,   500,
     501,    -1,  3335,    -1,    96,    -1,    98,    -1,  2928,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,
      -1,  2785,    -1,  1803,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,    -1,    -1,    -1,    -1,    -1,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   147,    -1,   149,   150,  3080,
    3081,    -1,    -1,    -1,  1844,  1845,    -1,    -1,    -1,    -1,
      -1,   163,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,  1874,  1875,    -1,  1877,    -1,    -1,
      -1,   193,  3339,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,  1906,  1907,    -1,    -1,
    1910,    -1,    -1,    -1,    -1,    -1,    -1,  3158,    -1,  3160,
      -1,    -1,    -1,   235,    -1,    -1,  3066,    -1,    -1,    -1,
      78,   949,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1939,
      -1,    -1,    -1,  2927,  1944,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1963,    -1,    -1,  3207,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1974,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3223,    -1,    -1,    -1,  3227,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   307,   308,   309,    -1,    -1,
      -1,    -1,    -1,   315,    -1,  2005,   318,    -1,    -1,     8,
    2010,  2011,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   172,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   347,    -1,    36,    -1,    -1,
      -1,   189,    -1,    -1,   356,    -1,   194,    46,  1066,    -1,
      -1,    -1,    -1,  2053,    53,    -1,  2056,    -1,  2058,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,   217,
     218,   383,    -1,    -1,  2074,    -1,    -1,    -1,    -1,    78,
      -1,   393,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,
      -1,  1109,    -1,   405,    -1,    -1,    -1,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2114,  3356,    -1,   429,    -1,    -1,
     268,    -1,    -1,   271,  1142,    -1,    -1,    -1,    -1,    -1,
     442,  2131,  2132,   445,    -1,    -1,   448,   285,    -1,    -1,
     288,   453,    -1,  3384,    -1,    -1,  3130,    -1,    -1,    -1,
    2150,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,  2159,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   172,  1192,    -1,    -1,    -1,    -1,   491,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     189,    -1,    -1,   505,    -1,   194,   508,    -1,    -1,  3339,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    19,    20,    21,    -1,  2215,    -1,    -1,   217,   218,
      -1,  2221,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,    -1,    -1,   384,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,   268,
      78,    -1,   271,    -1,    -1,  2275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,   285,    40,    -1,   288,
      -1,    -1,    -1,    46,    -1,  1313,    -1,    -1,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   509,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,    -1,    -1,   384,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1418,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2411,    -1,    -1,    -1,  2415,  2416,    -1,    -1,   172,
      -1,    -1,  2422,    -1,   232,  1443,    -1,    -1,    -1,    -1,
      -1,    -1,  2432,    -1,    -1,  2435,   189,  2437,    -1,    -1,
      -1,   194,  1460,    -1,  1462,  2445,  1464,  1465,    -1,  1467,
      -1,    -1,  1470,  2453,  2454,  1473,    -1,    -1,  1476,    -1,
    2460,    -1,    -1,  1481,   217,   218,  1484,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2475,    -1,   285,    -1,   232,
      -1,    -1,    -1,    -1,    -1,  2485,    -1,    -1,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,    -1,    -1,  2505,    -1,   506,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,   271,  1537,
      -1,    -1,    -1,    -1,  1542,    -1,    -1,  1545,  1546,  1547,
      -1,    -1,   285,  1551,    -1,   288,    -1,  1555,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2561,    -1,  2563,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,   384,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1616,    36,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,     8,    -1,    -1,    11,    53,    -1,    -1,    15,
      16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1657,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,  1673,    -1,    53,    -1,    -1,
    1678,    -1,    -1,    -1,    -1,    -1,  2666,  2667,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1695,    -1,    -1,
      -1,   489,    78,  2683,   492,   493,   494,    -1,   496,   497,
     498,   499,   500,   501,    -1,  2695,    -1,    -1,    -1,    -1,
    2700,  2701,    -1,    -1,    -1,  2705,    -1,    -1,    -1,    -1,
    2710,    -1,    -1,  2713,  2714,    -1,    -1,    -1,  2718,  2719,
      -1,    -1,  2722,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2733,    -1,   172,   489,    -1,    -1,   492,
     493,   494,    -1,   496,   497,   498,   499,   500,   501,    -1,
      -1,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   172,  2777,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   189,    -1,   232,    -1,    -1,   194,    -1,
      -1,    -1,    -1,    -1,  2804,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,   268,    -1,    -1,   271,    -1,   232,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    46,  1872,    -1,    -1,    -1,    -1,    -1,
      53,    -1,  1880,  1881,    -1,  1883,  1884,  1885,  1886,  1887,
    1888,    -1,    -1,  1891,  1892,  1893,  1894,  1895,  1896,  1897,
    1898,  1899,  1900,  1901,    -1,    78,    -1,    -1,    -1,   285,
    2890,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2943,    -1,    -1,    -1,   384,    -1,    60,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1977,
    1978,    -1,    -1,  2963,    -1,    -1,    -1,    -1,    -1,    -1,
    2970,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,
      -1,  2981,  2982,    -1,    -1,  2985,    -1,  2987,   384,    -1,
      -1,    -1,    -1,   104,    -1,    -1,   189,    -1,    -1,  2017,
      -1,   194,    -1,  2021,  2022,  2023,  2024,  2025,  2026,  2027,
    2028,    -1,  3012,    -1,    -1,    -1,  2034,  2035,    -1,  2037,
    2038,    -1,   133,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,  2049,    -1,    -1,  2052,    -1,  3036,    -1,    -1,   232,
      -1,    -1,  2060,  2061,  2062,  2063,  2064,  2065,  2066,  2067,
    2068,  2069,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,   506,
      -1,    -1,    -1,    -1,    -1,   268,    -1,  2095,   271,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,    -1,   285,   489,    -1,   288,    -1,    -1,    -1,    -1,
     496,   497,   498,   499,   500,   501,  3106,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3124,    -1,    -1,    -1,  3128,    -1,
    2148,    -1,  3132,    -1,    -1,   246,    -1,    -1,    -1,    -1,
      -1,    -1,  3142,   254,    -1,    -1,    -1,  3147,    -1,  3149,
      -1,    -1,    -1,    -1,    -1,   266,    -1,  3157,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3175,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,    -1,    -1,
      -1,   384,    -1,    -1,    -1,    -1,    -1,    -1,  2216,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2226,  2227,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3230,    -1,   343,    -1,    -1,    -1,   347,    -1,   349,    -1,
    3240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3253,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   374,    -1,    -1,    -1,    -1,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,    -1,    -1,  3285,    -1,    -1,    -1,    -1,
      -1,    -1,  2310,    -1,    -1,    -1,   489,    -1,    -1,   492,
     493,   494,    -1,   496,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,   506,  2332,  2333,  2334,    -1,    -1,  2337,
    2338,  2339,  2340,  2341,  2342,    -1,    -1,    -1,  2346,  2347,
    2348,  2349,  2350,  2351,  2352,  2353,  2354,  2355,    -1,   450,
      -1,     8,  2360,  2361,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
    2388,    -1,    -1,    -1,    -1,  2393,    -1,    -1,    -1,    46,
    3380,  3381,  3382,    -1,    -1,    -1,    53,    -1,    -1,    -1,
       8,    -1,  2410,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,  2423,    -1,  3407,  2426,  2427,
      -1,    78,    -1,    -1,    -1,  2433,  2434,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,  2447,
    2448,  2449,  2450,    -1,  2452,    53,    -1,    -1,  2456,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3448,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2510,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,   189,    -1,    11,    -1,    -1,   194,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
     217,   218,    -1,    -1,   172,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,   232,    53,    -1,    -1,    -1,
      -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,  2615,    -1,   217,
     218,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,  2646,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2684,   285,  2686,    -1,
     288,    -1,  2690,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2699,    -1,    -1,  2702,   172,  2704,    -1,    -1,    -1,
    2708,    -1,    -1,  2711,  2712,    -1,    -1,  2715,  2716,    -1,
      -1,    -1,   189,    -1,    -1,  2723,    -1,   194,    -1,    -1,
      -1,    -1,    -1,     8,  2732,    -1,    11,   384,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,  2747,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,  2785,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,    -1,    78,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,   506,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,   172,   496,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,   506,    -1,
      -1,    -1,    -1,    -1,   189,    -1,    -1,   384,    -1,   194,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2926,  2927,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2951,  2952,    -1,    -1,   232,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2969,    -1,    -1,    -1,  2973,    -1,  2975,  2976,  2977,
      -1,    -1,  2980,    -1,    -1,  2983,  2984,    -1,    -1,    -1,
      -1,    -1,    -1,   268,  2992,    -1,   271,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,  3033,    -1,    -1,    -1,   506,
      -1,  3039,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3052,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3082,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
      -1,    -1,    -1,    -1,  3112,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3144,  3145,  3146,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3164,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3176,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   489,    -1,    -1,   492,   493,   494,
      -1,   496,   497,   498,   499,   500,   501,    -1,    -1,    -1,
    3228,   506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3245,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3255,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3310,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,  3354,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,  3410,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,   498,
      -1,    -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,   515,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,
     496,   497,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,
      -1,    -1,    -1,    -1,   510,   511,   512,   513,    -1,   515,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,    -1,   491,    -1,
      -1,    -1,    -1,   496,   497,   498,    -1,    -1,    -1,    -1,
     503,    -1,   505,   506,    -1,    -1,    -1,   510,   511,   512,
     513,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,    -1,   491,
      -1,    -1,    -1,    -1,   496,   497,   498,    -1,    -1,    -1,
      -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,
     512,   513,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,   128,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,    -1,
      -1,    -1,    -1,    -1,    -1,   496,   497,   498,    -1,    -1,
      -1,    -1,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
     511,   512,   513,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,   167,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,   228,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
      -1,    -1,    -1,    -1,    -1,    -1,   496,   497,   498,    -1,
      -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,
     510,   511,   512,   513,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,   498,
      -1,    -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,
      -1,   510,   511,   512,   513,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,
     498,    -1,    -1,    -1,    -1,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,   511,   512,   513,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,
     497,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,    -1,
      -1,    -1,    -1,   510,   511,   512,   513,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,
     496,   497,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,
     506,    -1,    -1,    -1,   510,   511,   512,   513,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,
      -1,   496,   497,   498,    -1,    -1,    -1,    -1,   503,    -1,
     505,    -1,    -1,    -1,    -1,   510,   511,   512,   513,     3,
       4,     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,   167,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,   491,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,   503,
      -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,   513,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,    -1,    -1,
      -1,    -1,    -1,    -1,   496,   497,   498,    -1,    -1,    -1,
      -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,
     512,   513,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,    -1,
      -1,    -1,    -1,    -1,    -1,   496,   497,   498,    -1,    -1,
      -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,
     511,   512,   513,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,   167,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
      -1,    -1,    -1,    -1,    -1,    -1,   496,   497,   498,    -1,
      -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,
     510,   511,   512,   513,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,   498,
      -1,    -1,    -1,    -1,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,   511,   512,   513,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,
     498,    -1,    -1,    -1,    -1,   503,    -1,   505,    -1,    -1,
      -1,    -1,   510,   511,   512,   513,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,
     497,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,    -1,
      -1,    -1,    -1,   510,   511,   512,   513,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,
     496,   497,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,
      -1,    -1,    -1,    -1,   510,   511,   512,   513,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,
      -1,   496,   497,   498,    -1,    -1,    -1,    -1,   503,    -1,
     505,    -1,    -1,    -1,    -1,   510,   511,   512,   513,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,
      -1,    -1,   496,   497,   498,    -1,    -1,    -1,    -1,   503,
      -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,   513,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,    -1,    -1,    -1,
      -1,    -1,    -1,   496,   497,   498,    -1,    -1,    -1,    -1,
     503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,
     513,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,    -1,    -1,
      -1,    -1,    -1,    -1,   496,   497,   498,    -1,    -1,    -1,
      -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,
     512,   513,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,    -1,
      -1,    -1,    -1,    -1,    -1,   496,   497,   498,    -1,    -1,
      -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,
     511,   512,   513,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
      -1,    -1,    -1,    -1,    -1,    -1,   496,   497,   498,    -1,
      -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,
     510,   511,   512,   513,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,   498,
      -1,    -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,
      -1,   510,   511,   512,   513,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,
     498,    -1,    -1,    -1,    -1,   503,    -1,   505,    -1,    -1,
      -1,    -1,   510,   511,   512,   513,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,
     497,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,    -1,
      -1,    -1,    -1,   510,   511,   512,   513,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,
     496,   497,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,
      -1,    -1,    -1,    -1,   510,   511,   512,   513,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,
      -1,   496,   497,   498,    -1,    -1,    -1,    -1,   503,    -1,
     505,    -1,    -1,    -1,    -1,   510,   511,   512,   513,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   496,   497,    -1,    -1,    -1,    -1,    -1,   503,
      -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,   513,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,    -1,    -1,    -1,
      -1,    -1,    -1,   496,   497,   498,    -1,    -1,    -1,    -1,
     503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,   512,
     513,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   496,   497,    -1,    -1,    -1,    -1,
      -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,   511,
     512,   513,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   496,   497,    -1,    -1,    -1,
      -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,
     511,   512,   513,     3,     4,     5,     6,     7,    -1,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,    -1,
      -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,   503,    -1,   505,    -1,    -1,    -1,    -1,
     510,   511,   512,   513,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,    -1,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,
     498,    -1,     3,     4,     5,   503,    -1,   505,     9,    -1,
      -1,    -1,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   496,   497,   498,    -1,     3,
       4,     5,     6,     7,   505,     9,    -1,    -1,    -1,    -1,
      -1,    -1,   513,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,     7,    -1,     9,    -1,    -1,    -1,   503,
      -1,   505,    -1,    -1,    -1,    -1,   510,   511,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,
      -1,   505,    -1,    -1,    -1,    -1,   510,   511,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,   280,   281,   282,    -1,
      -1,   285,   286,   287,    -1,   289,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   506,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,   506,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,    -1,     3,   491,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,   284,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,    -1,     3,   491,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,   284,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,   167,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,   491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,   167,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,   409,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,     3,   491,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,    -1,   410,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   505,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,     3,     4,     5,    -1,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    15,    16,    -1,   505,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,    -1,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,    -1,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
      -1,   293,   294,   295,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,    -1,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,   426,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   485,   486,   487,   488,    -1,     3,    -1,
     492,   493,   494,     8,   496,   497,   498,   499,   500,   501,
      15,    16,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,    -1,    -1,    -1,   492,   493,   494,
      -1,   496,   497,   498,   499,   500,   501,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,   172,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,    -1,    -1,   194,    -1,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,   172,    53,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,   232,    -1,   194,    -1,    -1,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,
     271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,
     271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,
     271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,   384,    -1,    -1,    -1,   268,    -1,    -1,
     271,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,    -1,    -1,    -1,   268,    -1,    -1,
     271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,    -1,    -1,   384,    -1,   506,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,    36,    -1,   384,    -1,   506,    -1,    -1,    -1,    -1,
      -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,    36,    -1,    78,    -1,   506,    -1,    -1,    -1,    -1,
      -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,    36,    -1,    78,    -1,   506,    -1,    -1,    -1,    -1,
      -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,    36,    -1,    78,    -1,   506,    -1,    -1,    -1,    -1,
      -1,    46,    -1,     8,    -1,    -1,    11,   172,    53,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
      -1,    36,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,   172,    53,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   189,    -1,    -1,   232,    -1,   194,
      -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,   194,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,   194,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,   194,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,   384,
      -1,    -1,    -1,   268,    -1,    -1,   271,   232,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
      -1,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   489,    -1,    -1,   492,   493,   494,
      -1,   496,   497,   498,   499,   500,   501,    -1,    46,   384,
      -1,   506,    -1,    -1,    -1,    53,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   489,    -1,    -1,   492,   493,   494,
      78,   496,   497,   498,   499,   500,   501,    36,    -1,   384,
      -1,   506,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
       8,    -1,    -1,    11,    53,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,   489,    -1,    -1,   492,   493,   494,
      -1,   496,   497,   498,   499,   500,   501,    -1,    36,    78,
      -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   489,    -1,    -1,   492,   493,   494,
      -1,   496,   497,   498,   499,   500,   501,    -1,    -1,   504,
      78,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,    -1,   489,    -1,   194,   492,   493,   494,
      -1,   496,   497,   498,   499,   500,   501,    -1,    -1,   504,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,   217,   218,
     268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,   232,    -1,    -1,   194,   285,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,   232,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,    -1,    -1,   504,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,   497,
     498,   499,   500,   501,    -1,    -1,   504,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   498,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,    -1,   410,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,     4,     5,    -1,
      -1,    -1,     9,    -1,    -1,   498,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,     4,     5,    -1,    -1,    -1,     9,   496,
     497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,     4,
       5,    -1,    -1,    -1,     9,   496,   497,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,    -1,    -1,     8,    -1,    -1,    11,
      -1,   496,   497,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,
      -1,    53,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,
      -1,    53,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,
     122,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,
      -1,    53,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    40,    -1,
      -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,
     172,    53,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,
      -1,    -1,   194,    -1,    36,    -1,    78,    -1,    -1,    -1,
     162,    -1,    -1,    -1,    46,   167,    -1,    -1,    -1,    -1,
     172,    53,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,
     232,    -1,   194,    -1,    -1,    -1,    78,    -1,    -1,   161,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,   271,
     232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,
     172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,   271,
     232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,
     172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,   271,
     232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,
      -1,    -1,   384,    -1,    -1,    -1,   268,    -1,    -1,   271,
     232,    -1,    -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,    -1,    -1,    -1,   268,    -1,    -1,   271,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,   447,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,    -1,    -1,    -1,    -1,    -1,   310,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,    -1,   496,   497,   498,   499,   500,   501,
      -1,    -1,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,   489,    -1,    -1,
     492,   493,   494,    -1,   496,   497,   498,   499,   500,   501,
      36,    -1,   384,    -1,    40,    -1,    -1,    -1,    -1,    -1,
      46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,   489,    -1,    -1,
     492,   493,   494,    -1,   496,   497,   498,   499,   500,   501,
      36,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,   489,    -1,    -1,
     492,   493,   494,    -1,   496,   497,   498,   499,   500,   501,
      36,    -1,    78,    -1,    40,    -1,    -1,    -1,    -1,    -1,
      46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,   489,    -1,    -1,
     492,   493,   494,    -1,   496,   497,   498,   499,   500,   501,
      36,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,   172,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   189,    -1,    -1,     8,    -1,   194,    11,
      -1,    -1,    78,    15,    16,    17,    18,    19,    20,    21,
      -1,   167,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
      -1,   217,   218,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   189,    46,    -1,   232,    -1,   194,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,    78,    -1,    -1,    -1,
      -1,    -1,   268,   189,    -1,   271,   232,    -1,   194,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,   172,    -1,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   268,   189,    -1,   271,   232,    -1,   194,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   268,    -1,    -1,   271,   232,    -1,    -1,    -1,
     172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,   189,    -1,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,   384,    -1,
      -1,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,   271,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,
     496,   497,   498,   499,   500,   501,    -1,    -1,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,   489,    -1,    -1,   492,   493,   494,    -1,
     496,   497,   498,   499,   500,   501,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   489,    -1,    -1,   492,   493,   494,    -1,
     496,   497,   498,   499,   500,   501,    -1,    -1,    -1,    78,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,   417,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   489,    -1,    -1,   492,   493,   494,    36,
     496,   497,   498,   499,   500,   501,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    78,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,   489,    -1,    -1,
     492,   493,   494,   172,   496,   497,   498,   499,   500,   501,
      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     189,    46,    -1,    -1,    -1,   194,    -1,    -1,    53,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      -1,    -1,    19,    20,    21,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,   172,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,   268,
      -1,    78,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,   217,   218,    -1,   172,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,
      -1,    -1,   189,    -1,    -1,   384,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     217,   218,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,   384,    -1,    -1,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,   285,    -1,
      -1,   288,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,    -1,    -1,    -1,    -1,    -1,    78,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    -1,    -1,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,
      -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   489,    -1,    -1,   492,   493,   494,
      -1,   496,   497,   498,   499,   500,   501,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,
      -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,     5,    -1,    -1,    -1,   489,
      -1,    -1,   492,   493,   494,    -1,   496,   497,   498,   499,
     500,   501,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,   283,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    34,    35,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,    -1,   269,   270,   271,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,   164,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,   164,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
     284,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,   284,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,     4,    -1,
      -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,   409,
     410,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,    -1,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,    -1,   410,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,    -1,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,   407,   408,    -1,
     410,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,   424,   425,   426,   427,    -1,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,    -1,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,   407,   408,    -1,   410,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,   425,   426,   427,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    -1,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,   407,
     408,    -1,   410,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
      -1,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,    -1,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,    -1,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,   407,   408,    -1,   410,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    40,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    -1,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,    -1,    -1,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,    -1,    -1,   269,   270,   271,   272,    -1,    -1,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,    -1,   293,   294,   295,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,    -1,   314,   315,
     316,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
      -1,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,   424,    -1,
     426,    -1,    -1,   429,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,    -1,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,    -1,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,
     486,   487,   488,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,    -1,   410,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,   407,   408,    -1,   410,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,    -1,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,   407,   408,
      -1,   410,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,    -1,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,   407,   408,    -1,   410,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,   425,   426,   427,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,    -1,   410,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,    -1,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    -1,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,    -1,   172,   173,    -1,
     175,    -1,    -1,    -1,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,    -1,   269,   270,   271,   272,    -1,    -1,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,    -1,   293,   294,
     295,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,    -1,   314,
     315,   316,    -1,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,    -1,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
      -1,   426,    -1,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     485,   486,   487,   488,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    -1,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,    -1,   172,   173,
      -1,   175,    -1,    -1,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,    -1,    -1,   269,   270,   271,   272,    -1,
      -1,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,   293,
     294,   295,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,    -1,
     314,   315,   316,    -1,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,    -1,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
     424,    -1,   426,    -1,    -1,   429,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,    -1,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   485,   486,   487,   488,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    -1,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,    -1,   172,
     173,    -1,   175,    -1,    -1,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,    -1,   269,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,
     293,   294,   295,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
      -1,   314,   315,   316,    -1,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,    -1,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,   424,    -1,   426,    -1,    -1,   429,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,   439,   440,   441,    -1,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   485,   486,   487,   488,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    -1,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,    -1,    -1,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,    -1,    -1,   269,   270,   271,
     272,    -1,    -1,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
      -1,   293,   294,   295,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,    -1,   314,   315,   316,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      -1,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,    -1,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,   424,    -1,   426,    -1,    -1,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
      -1,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   485,   486,   487,   488,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,    -1,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,    -1,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,   407,   408,    -1,   410,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,    -1,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    -1,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,    -1,   172,   173,    -1,
     175,    -1,    -1,    -1,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,    -1,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,    -1,   269,   270,   271,   272,    -1,    -1,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,    -1,   293,   294,
     295,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,    -1,   314,
     315,   316,    -1,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,    -1,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,    -1,
     405,    -1,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,   424,
      -1,   426,    -1,    -1,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,    -1,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    22,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,    32,
      -1,    34,    35,    -1,    -1,    -1,    22,    -1,    -1,    -1,
     485,   486,   487,   488,    -1,    -1,    32,    -1,    -1,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,
      73,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    84,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
      -1,    -1,    -1,    96,    -1,    98,    -1,    -1,    84,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,
      96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     123,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,    -1,
     133,    -1,    -1,    -1,    -1,    -1,   139,   123,    -1,    -1,
      -1,    -1,    -1,    -1,   147,    -1,    -1,   133,    -1,    -1,
      -1,    -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,
     163,   147,    -1,    -1,   167,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   163,    -1,    -1,
      -1,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   307,   308,   309,    -1,    -1,    -1,
      -1,    -1,   315,    -1,    -1,   318,    -1,    -1,    -1,    -1,
      -1,   307,   308,   309,    -1,    -1,    -1,    -1,    -1,   315,
      -1,    -1,   318,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   347,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   372,
     356,    -1,    -1,    -1,    -1,    -1,   379,    -1,    -1,    -1,
     383,    -1,    -1,    -1,    -1,    -1,   372,    -1,    -1,    -1,
     393,    -1,    -1,   379,    -1,    -1,    -1,   383,    -1,    -1,
      -1,    -1,   405,    -1,    -1,    -1,   409,   393,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
      -1,    -1,    -1,   409,    -1,    -1,   429,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   442,
      -1,    -1,    -1,   429,    -1,   448,    -1,    -1,    -1,    -1,
     453,    -1,    -1,    -1,   457,    -1,   442,    -1,    -1,    -1,
      -1,    -1,   448,    -1,   467,    -1,    -1,   453,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,   491,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   505,    -1,    -1,   491,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    73,    84,
      96,    98,   109,   123,   124,   133,   139,   147,   149,   150,
     163,   167,   193,   209,   235,   307,   308,   309,   315,   318,
     347,   356,   372,   379,   383,   393,   405,   409,   429,   442,
     445,   448,   453,   467,   491,   505,   517,   518,   519,   520,
     521,   528,   539,   540,   541,   544,   545,   555,   572,   620,
     630,   633,   636,   646,   648,   651,   652,   656,   663,   667,
     674,   678,   679,   680,   687,   692,   708,   711,   712,   715,
     717,   718,   719,   720,   722,   724,   725,   729,   782,   783,
     944,   946,   947,   948,   953,   956,   962,   963,   967,   423,
     470,   945,   198,   363,   374,   409,   459,   106,   542,   945,
       3,    22,    23,    24,    25,    26,    27,    28,    29,    31,
      32,    33,    42,    43,    44,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    59,    60,    61,
      62,    63,    64,    67,    68,    69,    70,    71,    73,    74,
      75,    76,    77,    79,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    92,    93,    94,    95,    96,    97,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   114,   116,   117,   118,   119,   120,
     121,   123,   124,   125,   126,   127,   130,   131,   132,   133,
     134,   136,   137,   138,   140,   141,   142,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   156,   158,
     159,   160,   161,   163,   165,   166,   168,   169,   170,   171,
     172,   173,   175,   177,   178,   179,   180,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   195,
     196,   197,   198,   199,   200,   201,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   214,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   229,   230,
     231,   232,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   269,   270,   271,   272,
     274,   275,   276,   277,   278,   279,   281,   282,   285,   286,
     287,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   322,   323,
     324,   325,   326,   327,   329,   330,   331,   332,   333,   334,
     335,   336,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   407,   408,   410,   411,
     412,   413,   414,   415,   416,   418,   419,   420,   423,   424,
     425,   426,   427,   429,   430,   431,   432,   433,   434,   435,
     436,   439,   440,   441,   443,   444,   445,   446,   448,   449,
     450,   451,   452,   453,   454,   456,   457,   458,   459,   460,
     461,   462,   465,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   548,   623,   624,   625,   853,   933,
     937,     3,   171,   242,   402,   546,   548,   623,   945,    55,
     505,   567,   173,   236,   288,   363,   370,   413,   415,   432,
     438,   441,   618,   686,     5,    30,   318,   548,   549,   932,
     106,   542,    24,    79,    95,   142,   152,   164,   169,   198,
     241,   245,   312,   327,   360,   363,   374,   377,   395,   409,
     416,   426,   432,   459,   657,   658,   661,   945,   932,    98,
     457,   505,   520,   521,   528,   544,   545,   555,   572,   620,
     630,   633,   646,   648,   651,   652,   656,   663,   670,   674,
     680,   687,   708,   711,   712,   715,   717,   944,   946,   948,
     953,   956,   962,   967,   106,    73,   209,    66,    77,    79,
     154,   227,   274,   284,   296,   313,   359,   404,   425,   427,
     431,   453,   505,   547,   548,   549,   718,   783,   785,   787,
     797,   804,   805,   853,   855,   856,   106,     5,   548,   550,
     709,   709,   548,   932,    30,   173,   236,   378,   419,   423,
     548,   954,   955,   965,   945,    30,   128,   738,   739,   173,
     236,   363,   378,   419,   957,   958,   965,   945,   548,   717,
     729,   966,   548,   804,   409,   735,   547,   168,   505,   950,
     505,   335,   730,   731,   932,   730,   718,   719,     0,   508,
     457,   668,   118,   208,   444,   143,   213,   289,   437,   741,
     742,   787,   787,   718,   720,   722,   509,    30,   419,   423,
     717,   966,   187,   547,   932,   187,   547,   187,   804,   187,
     547,   550,   503,   507,   551,   552,   505,   717,   547,   413,
     415,   413,   415,   345,   187,   547,   187,   548,   547,   169,
     241,   335,   374,   409,   459,   631,   198,    30,   932,   187,
       3,   247,   426,   105,   409,   409,   459,   367,     3,    37,
      42,    49,    54,    55,    56,    57,    69,    70,    79,    81,
      87,    99,   110,   111,   132,   160,   166,   168,   172,   187,
     189,   204,   211,   212,   214,   217,   218,   220,   230,   232,
     242,   261,   262,   263,   271,   276,   293,   295,   314,   332,
     354,   358,   373,   380,   384,   387,   402,   411,   419,   420,
     431,   437,   454,   457,   623,   626,   662,   815,   817,   819,
     821,   823,   825,   827,   828,   829,   831,   832,   833,   835,
     836,   938,   187,   548,   659,   939,   187,   929,   932,   187,
     932,   505,   666,   288,   670,     3,    37,    42,    49,    53,
      54,    55,    56,    57,    69,    70,    77,    79,    81,    87,
      99,   110,   111,   148,   154,   160,   166,   168,   171,   172,
     177,   178,   189,   204,   205,   211,   212,   214,   217,   218,
     220,   230,   232,   242,   261,   262,   263,   267,   271,   274,
     276,   292,   293,   295,   296,   313,   314,   317,   332,   354,
     358,   373,   380,   384,   387,   402,   404,   411,   419,   420,
     425,   427,   431,   453,   454,   457,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   623,   627,   671,
     673,   674,   676,   677,   668,   548,   550,   546,   709,   505,
     505,   162,   505,   718,   805,   505,   505,   547,   505,   505,
     167,   505,   505,   505,   505,   718,   783,   787,   797,   498,
     551,    40,   548,   798,   799,   798,   372,   509,   721,    37,
      42,    99,   168,   204,   220,   230,   262,   307,   314,   354,
     373,   442,   801,   799,    40,   548,   798,   800,   491,   809,
     550,   167,   494,   505,   505,   713,   955,   955,   955,   488,
     219,   507,   283,     4,     6,     7,     8,     9,    10,    39,
      54,    56,    57,    65,    69,    70,    81,   110,   111,   113,
     148,   155,   160,   177,   178,   211,   212,   214,   242,   261,
     263,   268,   273,   276,   285,   332,   358,   387,   419,   420,
     428,   454,   489,   496,   497,   498,   503,   505,   510,   511,
     512,   513,   548,   550,   718,   772,   820,   823,   826,   827,
     828,   830,   831,   832,   835,   836,   847,   849,   850,   851,
     852,   853,   854,   856,   857,   872,   873,   884,   906,   911,
     919,   920,   921,   933,   934,   935,   918,   920,   957,   957,
     550,   957,   488,   167,   421,   494,   507,   551,   653,   804,
       3,   166,   168,   457,   674,   949,   951,   166,   952,   847,
     890,   891,   730,   509,   505,   941,   506,   506,   519,   547,
     167,   288,   695,   653,    30,   128,   736,   736,    59,   736,
     157,   162,   233,   280,   747,   749,   750,   775,   777,   778,
     779,   176,   283,   447,   283,   741,   742,   505,   410,   964,
     488,   219,   148,    26,    32,   133,   287,   343,   347,   379,
     450,   533,   536,   537,   343,   148,    40,    60,   104,   197,
     246,   254,   266,   298,   343,   349,   374,   379,   393,   522,
     525,   536,   148,   343,   379,   536,   148,   343,   379,   536,
      40,   543,   847,   912,     3,    30,    34,    35,    36,    38,
      39,    40,    41,    45,    58,    65,    66,    72,    78,    80,
      91,    98,   113,   115,   122,   128,   129,   135,   139,   143,
     155,   157,   162,   164,   167,   174,   176,   181,   194,   202,
     213,   215,   227,   228,   233,   268,   273,   280,   283,   284,
     288,   289,   307,   308,   309,   310,   321,   328,   337,   351,
     372,   389,   406,   409,   417,   421,   422,   428,   437,   438,
     442,   447,   453,   455,   463,   464,   466,   467,   553,   554,
     623,   627,   629,   552,     3,    30,    37,    42,    49,    55,
      79,    81,    87,    99,   128,   166,   168,   171,   172,   189,
     204,   217,   218,   220,   230,   232,   242,   262,   271,   293,
     295,   314,   354,   373,   384,   402,   411,   431,   455,   457,
     506,   623,   628,   847,   893,   894,   936,   942,   506,   505,
     607,   363,   370,   618,   268,   634,   268,   432,    40,   459,
     187,   547,   187,   547,   622,   187,   547,   187,   547,    87,
     683,   148,   471,    88,   125,   301,   414,   456,   834,   834,
     834,   505,   822,   822,   317,   505,   824,   148,   505,    69,
      70,   834,   822,   819,   469,   491,   505,   837,   505,   837,
     505,    63,   350,   509,   660,   505,    39,   818,   505,   107,
     108,   184,   185,   248,   249,   250,   251,   252,   253,   256,
     257,   368,   369,   485,   486,   505,   838,   839,   840,   841,
     842,   843,   844,   845,   846,   822,   148,   507,   940,   509,
     660,   148,   509,   660,   148,   283,   664,   665,   847,   942,
     345,   506,   509,     4,   155,   283,   428,   496,   497,   524,
     527,   550,   669,   671,   672,   675,   935,   670,   421,   505,
     562,   566,   167,   847,   891,   505,     3,   550,   838,   839,
     840,   841,   842,   843,   844,   845,   896,   897,   799,   800,
     847,   547,   847,   898,   496,   497,   548,   848,   849,   873,
     884,   900,   505,   847,   890,   901,   847,    58,   167,   228,
     422,   847,   891,   904,   847,   506,   549,   505,   411,   755,
     756,   756,   738,   739,   787,   215,   733,    37,   220,   373,
     801,   220,   293,   802,   787,   802,   220,   801,   505,   220,
     802,   144,   195,   789,   220,   756,   505,   549,   505,   756,
     290,   548,   550,   710,   524,   675,   959,   961,   893,   817,
     895,    40,   231,   548,   505,   503,   718,   847,   910,   505,
     718,   513,   847,   505,   505,   847,   847,   847,   144,   922,
     923,   847,   891,   892,   718,   847,   890,     9,   554,   549,
     874,   875,   876,   507,   551,   913,   551,   505,   550,   505,
     550,   935,     3,     8,    11,    15,    16,    17,    18,    19,
      20,    21,    36,    40,    46,    53,    78,   172,   189,   194,
     217,   218,   232,   268,   271,   285,   288,   384,   489,   492,
     493,   494,   496,   497,   498,   499,   500,   501,   882,   883,
     884,   886,   916,   468,   858,   295,   847,   509,   733,   505,
     550,   733,     3,   113,   236,   524,   550,   836,   960,   102,
     113,   961,   113,   961,   548,    40,   548,   506,   509,   668,
     509,   506,   731,   929,   930,    40,   941,   653,   188,   345,
     215,   379,   720,   720,    30,   743,   744,   847,    59,   720,
     737,   159,   265,   763,   222,   266,   331,   382,   444,     4,
       9,    30,   758,   847,   496,   497,   759,   760,   847,   849,
     775,   776,   750,   749,   747,   748,   162,   778,   278,   780,
      59,   726,   727,   728,   790,   848,   920,   920,   747,   775,
     891,   231,   547,    72,    80,    91,   164,   187,   321,   438,
     548,   589,   599,   614,    80,    91,   716,    91,   716,   505,
     421,   505,   587,   240,   441,   587,    91,   509,   421,   547,
     819,   524,    59,   526,   524,   524,   104,   246,   254,    59,
     421,   467,   491,   523,   259,   363,   523,   525,   804,    91,
     421,   716,   363,   547,   421,   363,   548,   562,   504,   515,
     893,   893,   894,   509,   741,   742,    13,    14,   421,   548,
     606,   611,   467,   565,   547,   548,   335,   374,   409,   459,
     631,   148,    98,   572,   635,   646,   680,   967,   148,   548,
     140,   817,   547,   268,   522,   647,   268,   505,   607,    40,
     268,   607,   268,   505,   632,   187,   548,   601,   684,     3,
     505,   892,   935,   662,   895,   834,   834,    39,   818,   419,
     419,   935,   935,   548,   814,   817,   814,   503,   503,   935,
     935,   421,   421,   421,   421,   659,   553,   507,   939,   929,
     932,   932,   939,   506,   509,    13,   670,   676,     4,   935,
       4,   935,   550,   554,   564,   571,    55,   100,   119,   137,
     141,   163,   166,   182,   273,   281,   303,   329,   568,   710,
      40,   506,   847,   506,   167,   509,   506,   310,   899,   506,
     848,   848,    11,    15,    16,    19,    20,    21,   194,   217,
     285,   492,   493,   494,   496,   497,   498,   499,   500,   501,
     884,   848,   506,   806,   807,   855,   162,   167,   902,   903,
     509,   506,    40,   904,   891,   904,   904,   167,   506,    40,
     798,   505,   930,     4,     9,   548,   751,   753,   754,   920,
     918,   173,   236,   409,   413,   415,   441,   547,   734,   464,
     810,   787,   220,   787,   283,   447,   803,   787,   220,   920,
     787,   275,   275,   505,   787,   549,   811,   812,   505,   549,
     811,   509,   506,   509,   506,   509,   555,   652,   687,   714,
     717,   946,   891,   892,   463,   907,   908,   847,   847,   877,
     878,   879,   880,     8,    15,    16,    19,    20,    21,   492,
     493,   494,   496,   497,   498,   499,   500,   501,   548,   882,
     887,   506,   891,   505,   548,   345,   927,   162,   504,   506,
     509,   515,   509,   514,   498,   552,   891,   847,   846,   846,
     817,   847,   847,   847,   847,   847,   847,   847,   847,     5,
     554,   943,   419,    45,   406,   917,   939,   847,   847,   505,
     718,   905,   128,   155,   268,   273,   278,   428,   439,   847,
     273,   505,   847,   421,    53,   172,   189,   194,   232,   384,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
      30,    38,   389,   881,   503,   507,   915,   176,   158,   859,
     358,   505,   873,   921,   167,   784,   893,   784,   505,   550,
     548,   547,   949,   539,   547,   847,   509,   506,   245,   268,
     732,   447,   655,   547,   689,   505,   548,   694,   704,   705,
     707,    41,   122,   745,   509,   447,   745,   259,   720,   358,
     359,   496,   497,   760,   762,   849,   382,   222,   284,   306,
     306,   509,   500,     4,   761,   935,   761,   358,   359,   762,
     547,   928,   272,   386,   781,   505,   930,   931,   509,   176,
     447,   194,   176,   215,   776,   748,   506,   343,   536,   505,
     187,   599,   932,   222,   268,   222,   447,   505,   592,   816,
     817,   932,   548,   187,   932,   187,   548,    26,   133,   379,
     532,   535,   554,   583,   597,   932,   554,   591,   610,   932,
     533,   932,   343,   379,   522,   536,   524,   939,   932,   524,
     939,   932,   524,   343,   379,   536,   932,   932,   932,   932,
     343,   379,   536,   932,   932,   497,   847,   912,   741,   741,
     741,   455,   894,   188,   348,   740,   847,   847,   326,   561,
     506,   509,   281,   167,   421,   556,   634,   432,   459,   547,
     547,   622,   547,   547,   547,   288,   618,   548,   447,   641,
     642,   505,   718,   505,   148,   148,   232,   548,   589,   599,
     602,   605,   615,   617,   467,   469,   594,   147,   717,   148,
     467,   685,   148,   506,   893,    40,   268,   283,   891,   506,
     506,   660,   506,   503,   488,   488,   506,   506,   817,   506,
     509,   506,   935,   504,   935,   506,   506,   839,   841,   842,
     843,   842,   843,   843,   660,   553,   660,   283,   660,   664,
     847,   562,   498,   505,   524,   563,   675,   852,   506,   509,
      40,   560,   550,   560,   268,   273,   329,   560,    59,   560,
     817,   506,   847,   847,   847,   902,   817,   848,   848,   848,
     848,   848,   848,   128,   268,   278,   848,   848,   848,   848,
     848,   848,   848,   848,   848,   848,   506,   509,    40,   808,
     847,   847,   903,   902,   817,   506,   506,   506,   891,   817,
     930,   506,   306,   500,   306,   359,   500,   505,   505,   733,
     413,   415,   413,   415,   547,   735,   735,   735,   847,   176,
     764,   803,   787,   847,   505,   787,   162,   505,   549,   794,
     803,   817,   506,   509,   811,   506,   959,   817,   506,   504,
     847,   135,   908,   909,   506,   515,   509,   514,   507,   506,
     506,   930,   505,   847,   924,   548,   847,   847,   874,   923,
     506,   506,   488,   848,   848,   141,   891,   167,   128,   155,
     273,   278,   428,   439,   505,   141,   887,   847,   406,   917,
     847,   905,   847,   421,   505,   718,   847,   912,   553,   505,
     505,   151,   860,   785,   786,   810,   741,   810,   935,   846,
     941,   941,   245,   505,   786,   464,   654,    40,    59,   690,
     700,   707,   913,   509,   784,   494,   490,   746,   744,   285,
     882,   885,   746,     4,   935,   762,   284,   444,   759,   509,
     239,   930,   726,    59,   920,   505,   549,    59,   259,   421,
     847,   268,   614,   505,   148,   505,   592,   198,   611,   612,
     573,    40,   171,   582,   608,   573,    26,   133,   347,   349,
     379,   529,   530,   531,   537,   538,   148,   660,   148,   660,
     583,   597,   583,   506,   509,   550,   576,   494,   507,   506,
     509,   421,   363,    91,   421,   716,   363,   421,   421,   421,
     363,   515,   504,   515,   740,   740,   740,   894,   275,   275,
     506,   396,   397,   550,   570,   606,   561,   548,   547,   647,
     505,    40,   607,   632,   634,   345,   409,   432,   548,   365,
     645,   550,   649,   650,   611,   547,   547,   622,   547,   506,
     509,   281,   587,   281,   283,   586,   932,   467,   621,   547,
     587,    40,   547,   506,   409,   847,   148,   547,   506,   818,
     935,   837,   837,   818,   548,   818,   504,   504,   939,   558,
     569,   675,   564,   550,   550,   273,   611,   498,   611,   550,
     498,   611,   550,   506,   506,   903,   167,   128,   278,   505,
     809,   806,   505,   506,   506,   506,   548,   751,   810,   735,
     735,   735,   735,   547,   547,   547,    59,   181,   773,   803,
     930,   505,   791,   792,   793,   850,   933,   930,   162,    78,
     813,   812,   506,   417,   847,   139,   847,   877,   887,   506,
     847,   924,   925,   926,    40,   194,   506,   927,   846,   847,
      36,    36,   847,   506,   847,   167,   505,   895,   847,   506,
     141,   848,   848,   141,   141,   847,   847,   504,   515,   505,
     914,   742,   464,   847,   294,   864,   509,   764,   740,   764,
     506,   714,   847,   351,   698,   548,   259,   313,   113,   297,
     505,   688,   717,   506,   509,   694,   654,   847,   159,   226,
     505,   746,   284,   547,   506,   931,   176,   718,   719,   920,
     931,   932,   932,   506,   148,   612,   599,   612,   573,   601,
     509,   506,   115,   202,   266,   268,   598,   505,    33,    59,
     619,   608,    72,    78,    91,   113,   115,   202,   268,   273,
     321,   337,   438,   447,   578,   579,   593,   171,   113,   186,
     268,   587,   523,   105,   113,   171,   268,   395,   398,   525,
     587,   379,   531,   432,   932,   548,   535,     3,    37,    42,
      49,    55,    79,    81,    87,    99,   166,   168,   171,   172,
     189,   204,   217,   218,   220,   230,   232,   242,   262,   267,
     271,   285,   293,   295,   314,   354,   373,   380,   384,   402,
     411,   431,   437,   457,   496,   497,   524,   550,   574,   613,
     623,   629,   817,   885,   936,   554,   610,   932,   932,   932,
     932,   932,   932,   932,   932,   932,   932,   912,   912,   506,
     506,   506,   741,   523,   570,   642,   505,   605,   717,   685,
      40,   618,   187,   547,   548,     5,   503,   643,   467,   640,
     506,   509,   506,   647,   505,    40,   596,   594,   602,    84,
     666,   105,   266,   607,   717,   632,   717,   601,   447,   682,
     504,   817,   660,   506,   509,   611,   848,   167,   505,   895,
     811,   506,   509,   506,   764,   547,   547,   547,   547,    30,
     101,   177,   357,   505,   765,   766,   767,   768,   769,   770,
     771,   847,   847,   466,   861,   506,   849,   888,   889,   194,
     176,   788,   792,   505,   506,   794,   795,   796,   939,   847,
     509,   506,   548,   847,   849,   847,   847,   847,   895,   506,
     847,    36,    36,   847,   847,   141,   506,   497,   912,   506,
     893,   506,   847,   506,   505,   548,   865,   773,   506,   773,
     550,   506,   919,   453,   408,   446,   699,   548,   693,   703,
     283,   696,   494,   707,   698,   887,    59,   506,   506,   452,
     453,   723,   573,   599,   506,   506,   467,   604,   116,   190,
     200,   115,   449,   847,   113,    40,   505,   939,   932,   848,
     116,   190,   115,   273,   222,   547,   604,    86,   619,   187,
     273,   524,   847,   619,   273,   496,   497,   527,   548,   817,
     660,   660,   242,   402,   936,   940,   494,   421,   421,   504,
     504,   740,   562,   447,   557,   559,   645,   611,   506,   621,
      40,   409,   847,   409,   268,   505,   642,   643,   644,   505,
     550,   685,   605,   147,   717,   145,   196,   586,   118,   133,
     320,   621,   105,   685,   467,   968,    40,   283,   548,   681,
     505,   569,   848,   895,   506,   506,     9,   344,   757,   773,
     505,   381,   505,   506,   509,   548,   862,   863,   328,   774,
     509,   506,   505,   549,    59,   506,   893,   194,   506,   795,
     924,   504,   187,   506,   847,   847,   847,   515,   504,   515,
     506,   506,   548,   866,   861,   550,   861,   509,   452,   913,
     506,   509,    89,   698,   847,   506,   931,   931,   337,   604,
     505,   595,   573,   506,   186,   505,   847,   268,   579,   604,
     607,   932,    40,   148,   813,   940,   500,   574,   932,   932,
     506,   523,   120,   640,   506,   594,   717,   717,   547,   148,
     645,   504,   509,   548,   637,   638,   639,    40,   506,   932,
     621,    30,    83,    92,   114,   186,   199,   395,   398,   590,
     590,   359,   359,    40,    64,    72,   236,   409,   847,   547,
     505,   548,   697,   706,   855,   506,   506,   505,   861,   891,
     505,   891,   767,    40,   509,   847,   447,   752,   849,   920,
     930,   799,   741,   505,   799,   847,   912,   912,   303,   867,
     774,   774,   717,   297,   717,   693,   283,   505,   691,   547,
     573,   554,   600,   603,   399,   461,   580,   581,   505,   575,
     847,   506,   244,   616,   186,   447,   534,   500,   432,   562,
     550,   685,   586,   968,   505,   547,   640,   643,     5,   509,
     506,   717,   594,   666,   717,    72,   286,    72,   717,   682,
     847,    78,   701,   506,   509,   701,     9,   774,   506,   766,
     506,   865,   863,   361,   506,   740,   920,   504,   504,   504,
      59,   741,   752,   752,   699,    91,   706,   129,   607,   494,
     506,   509,   522,   506,   266,   588,   168,   302,   385,   283,
     584,   585,   609,   575,   847,   432,    40,   505,   637,   968,
     586,   621,   968,   286,   286,   505,   506,   939,   702,   939,
     685,   697,   702,   506,   752,   506,   754,   506,   506,   890,
     179,   330,   359,   868,   452,   932,   506,   269,   444,   616,
     574,   603,   506,   581,   200,   118,   444,   283,   609,   283,
     584,   717,   706,   701,   745,   810,   745,    53,   102,   434,
     847,   869,   870,   869,   869,   506,   717,   810,   379,   585,
      63,   266,   350,   379,   577,   577,   968,   506,   702,   746,
     746,   870,   358,   161,   316,   161,   316,   144,   871,   871,
     871,   705,   573,    25,   113,   273,   685,   745,    36,   102,
     176,   266,   418,   810,   810,   746,   870,   358,   291
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   516,   517,   518,   518,   519,   519,   519,   519,   519,
     519,   519,   519,   519,   519,   519,   519,   519,   519,   519,
     519,   519,   519,   519,   519,   519,   519,   519,   519,   519,
     519,   519,   519,   519,   519,   519,   519,   519,   519,   519,
     519,   519,   519,   519,   528,   528,   528,   528,   528,   528,
     528,   528,   529,   529,   530,   530,   531,   531,   531,   531,
     532,   532,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   534,   534,   535,   535,   535,   535,   536,   536,   537,
     538,   538,   538,   651,   651,   651,   651,   547,   547,   548,
     548,   548,   549,   549,   550,   551,   551,   552,   553,   554,
     554,   554,   554,   715,   715,   715,   715,   715,   715,   715,
     715,   715,   715,   715,   715,   715,   716,   716,   687,   688,
     688,   688,   688,   688,   689,   689,   690,   690,   690,   691,
     691,   691,   692,   692,   693,   694,   694,   695,   695,   695,
     696,   696,   696,   697,   697,   697,   698,   698,   699,   699,
     700,   700,   701,   701,   702,   702,   703,   703,   704,   704,
     705,   705,   706,   706,   707,   648,   648,   648,   649,   649,
     650,   650,   711,   711,   711,   646,   646,   646,   647,   647,
     636,   636,   636,   637,   638,   638,   639,   639,   640,   640,
     641,   642,   642,   643,   644,   644,   645,   645,   645,   663,
     663,   663,   664,   664,   665,   665,   666,   666,   521,   521,
     522,   522,   523,   523,   523,   524,   524,   524,   524,   525,
     525,   525,   525,   525,   525,   525,   525,   525,   525,   525,
     525,   525,   525,   526,   526,   527,   527,   527,   944,   944,
     944,   944,   944,   944,   945,   945,   945,   947,   572,   572,
     572,   573,   573,   574,   574,   574,   574,   574,   574,   575,
     575,   576,   577,   577,   577,   577,   577,   578,   578,   578,
     578,   579,   579,   579,   579,   579,   579,   579,   579,   580,
     580,   581,   581,   582,   582,   582,   583,   584,   585,   585,
     585,   585,   585,   586,   586,   586,   586,   587,   588,   588,
     589,   589,   590,   590,   590,   590,   590,   590,   590,   590,
     591,   591,   592,   593,   593,   593,   593,   594,   594,   594,
     594,   595,   596,   596,   596,   597,   598,   598,   598,   598,
     598,   598,   599,   599,   600,   600,   601,   602,   602,   602,
     603,   603,   604,   604,   605,   605,   605,   606,   607,   607,
     608,   608,   609,   610,   610,   610,   610,   611,   611,   612,
     612,   613,   613,   613,   614,   614,   614,   614,   614,   614,
     615,   615,   616,   616,   616,   616,   617,   618,   618,   618,
     618,   618,   618,   618,   618,   619,   619,   656,   656,   656,
     656,   656,   656,   656,   656,   657,   657,   657,   657,   657,
     657,   657,   657,   657,   657,   657,   657,   657,   657,   657,
     657,   657,   658,   658,   658,   658,   658,   658,   659,   659,
     660,   660,   660,   661,   661,   661,   662,   662,   630,   630,
     630,   630,   630,   630,   631,   631,   632,   632,   946,   555,
     555,   556,   556,   557,   557,   558,   558,   559,   559,   560,
     560,   561,   561,   562,   562,   563,   563,   563,   563,   563,
     563,   564,   565,   565,   566,   566,   567,   567,   568,   568,
     568,   568,   568,   568,   568,   568,   568,   568,   568,   568,
     568,   568,   568,   568,   569,   570,   570,   570,   571,   571,
     717,   717,   718,   718,   719,   719,   719,   719,   719,   719,
     719,   719,   720,   720,   721,   721,   722,   722,   722,   722,
     722,   722,   722,   722,   722,   722,   722,   722,   722,   722,
     722,   722,   722,   722,   722,   723,   723,   724,   724,   725,
     725,   726,   726,   726,   727,   727,   728,   728,   729,   729,
     729,   730,   730,   731,   732,   732,   732,   733,   733,   734,
     734,   734,   734,   734,   734,   734,   734,   734,   735,   735,
     736,   736,   736,   737,   738,   738,   739,   739,   740,   740,
     740,   741,   741,   742,   742,   743,   743,   744,   744,   745,
     745,   745,   746,   746,   746,   747,   747,   747,   747,   748,
     748,   749,   749,   749,   749,   750,   750,   751,   751,   751,
     751,   751,   751,   752,   752,   753,   753,   754,   754,   754,
     754,   755,   756,   756,   757,   757,   758,   758,   758,   758,
     758,   759,   760,   760,   760,   761,   761,   762,   762,   763,
     763,   764,   764,   764,   765,   765,   766,   766,   767,   767,
     767,   767,   767,   768,   769,   770,   771,   772,   772,   773,
     773,   774,   774,   775,   775,   776,   776,   777,   777,   778,
     779,   779,   779,   779,   780,   780,   781,   781,   781,   782,
     782,   783,   783,   784,   784,   785,   785,   786,   786,   787,
     787,   787,   787,   787,   787,   787,   787,   787,   787,   788,
     788,   789,   789,   789,   790,   790,   791,   791,   792,   792,
     793,   793,   794,   794,   795,   796,   796,   797,   797,   797,
     797,   797,   797,   797,   797,   797,   797,   797,   798,   798,
     798,   798,   799,   799,   800,   800,   800,   800,   800,   801,
     801,   801,   801,   801,   801,   802,   802,   803,   803,   804,
     804,   804,   804,   805,   805,   806,   807,   807,   808,   808,
     809,   809,   810,   810,   811,   811,   812,   813,   813,   814,
     814,   815,   815,   816,   816,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   818,   818,   818,   819,   819,   819,
     819,   819,   819,   819,   820,   820,   820,   820,   821,   822,
     822,   823,   823,   823,   823,   823,   823,   823,   823,   823,
     823,   823,   824,   824,   825,   825,   826,   826,   827,   828,
     829,   829,   830,   830,   831,   832,   833,   833,   833,   833,
     833,   833,   834,   834,   835,   835,   835,   835,   836,   837,
     837,   837,   838,   838,   839,   839,   840,   840,   841,   841,
     842,   842,   843,   843,   844,   844,   845,   845,   846,   846,
     846,   846,   846,   846,   846,   846,   846,   846,   846,   846,
     846,   846,   846,   846,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   848,   848,   848,   848,   848,   848,
     848,   848,   848,   848,   848,   848,   848,   848,   848,   848,
     848,   848,   848,   848,   848,   848,   848,   848,   848,   849,
     849,   849,   850,   850,   850,   850,   850,   850,   850,   850,
     850,   850,   850,   850,   850,   851,   851,   851,   851,   851,
     851,   852,   853,   853,   853,   853,   853,   853,   854,   854,
     855,   855,   856,   856,   856,   856,   856,   856,   856,   856,
     856,   856,   856,   856,   856,   856,   857,   857,   858,   858,
     859,   859,   859,   860,   860,   861,   861,   862,   862,   863,
     864,   864,   864,   865,   866,   866,   867,   867,   868,   868,
     868,   868,   869,   869,   870,   870,   870,   870,   870,   871,
     871,   871,   871,   871,   872,   872,   873,   873,   874,   875,
     875,   876,   876,   877,   878,   878,   879,   879,   880,   880,
     881,   881,   881,   882,   882,   883,   883,   883,   883,   883,
     883,   883,   883,   883,   883,   883,   883,   883,   883,   884,
     884,   885,   885,   886,   886,   886,   886,   886,   886,   886,
     886,   887,   887,   888,   888,   889,   889,   890,   890,   891,
     891,   892,   892,   893,   893,   894,   894,   894,   895,   895,
     896,   896,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   898,   898,   899,   900,   900,   901,   901,   901,
     901,   901,   901,   902,   903,   904,   904,   904,   905,   905,
     906,   907,   907,   908,   909,   909,   910,   910,   911,   911,
     552,   552,   552,   552,   912,   912,   913,   913,   914,   914,
     914,   915,   915,   915,   915,   915,   916,   916,   917,   917,
     918,   918,   919,   919,   920,   920,   921,   921,   921,   922,
     922,   923,   923,   924,   925,   925,   926,   926,   927,   927,
     927,   928,   928,   929,   929,   930,   930,   931,   931,   932,
     933,   933,   934,   934,   934,   934,   934,   934,   934,   934,
     934,   934,   934,   934,   934,   934,   935,   936,   936,   936,
     937,   937,   937,   938,   938,   938,   939,   939,   940,   940,
     941,   941,   942,   943,   943,   712,   713,   713,   714,   714,
     714,   714,   714,   633,   633,   633,   634,   634,   635,   635,
     635,   635,   680,   680,   681,   682,   682,   683,   683,   684,
     684,   685,   685,   686,   686,   520,   520,   520,   520,   520,
     520,   545,   545,   546,   546,   678,   678,   679,   667,   667,
     667,   667,   668,   668,   669,   669,   669,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   671,   671,   671,
     672,   672,   673,   673,   674,   674,   675,   675,   675,   675,
     676,   677,   677,   956,   956,   956,   956,   957,   957,   957,
     957,   958,   958,   958,   958,   959,   959,   960,   960,   960,
     960,   960,   960,   960,   961,   961,   708,   708,   708,   708,
     708,   709,   709,   710,   710,   948,   948,   948,   948,   948,
     949,   949,   949,   949,   949,   950,   950,   951,   951,   952,
     952,   652,   652,   653,   653,   653,   654,   654,   655,   655,
     539,   539,   540,   541,   541,   542,   542,   543,   543,   953,
     953,   953,   953,   954,   954,   955,   955,   955,   962,   962,
     962,   962,   962,   962,   962,   962,   963,   963,   964,   964,
     965,   965,   966,   966,   544,   967,   967,   967,   967,   967,
     968,   968,   968,   968,   620,   620,   620,   621,   621,   621,
     622,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     4,     6,     4,     6,     4,     6,
       4,     6,     1,     2,     3,     2,     1,     3,     2,     3,
       1,     3,     2,     5,     3,     6,     4,     6,     6,     6,
       5,     5,     6,     9,     4,     5,     7,     6,     4,     8,
       4,     2,     4,     3,     6,     4,     2,     2,     2,     2,
       1,     2,     0,     1,     2,     2,     2,     1,     3,     4,
       2,     1,     0,     2,     3,     2,     3,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     6,     6,     8,     6,     8,     6,     8,
       6,     8,     8,    10,     8,    10,     1,     0,     9,     1,
       4,     4,     7,     2,     1,     3,     2,     2,     0,     4,
       3,     0,     1,     0,     2,     3,     5,     2,     2,     0,
       8,     5,     0,     5,     5,     7,     2,     0,     1,     1,
       1,     3,     2,     0,     1,     0,     1,     3,     1,     3,
       1,     2,     1,     3,     2,     6,     8,     5,     1,     0,
       1,     3,     2,     4,     5,     5,     8,     7,     1,     0,
       8,    11,    10,     2,     1,     3,     0,     1,     0,     4,
       2,     0,     1,     1,     1,     3,     0,     4,     2,     3,
       9,    12,     1,     3,     1,     3,     3,     0,     4,     6,
       1,     2,     1,     1,     0,     1,     2,     2,     1,     2,
       2,     1,     2,     3,     2,     2,     2,     2,     3,     3,
       3,     1,     3,     1,     0,     1,     2,     2,     2,     2,
       2,     2,     2,     2,     1,     1,     0,     2,     9,    12,
      11,     0,     2,     1,     1,     1,     1,     1,     1,     3,
       0,     1,     2,     1,     1,     2,     2,     3,     1,     1,
       2,     2,     1,     2,     3,     5,     3,     2,     5,     1,
       1,     1,     0,     5,     7,     5,     2,     3,     1,     1,
       2,     2,     0,     3,     4,     4,     0,     3,     2,     0,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     1,     2,     2,     2,     2,     2,     2,
       0,     3,     3,     3,     0,     1,     2,     1,     2,     2,
       2,     2,     3,     4,     1,     3,     1,     1,     1,     1,
       3,     1,     2,     0,     1,     2,     0,     1,     3,     0,
       2,     0,     3,     3,     1,     5,     3,     1,     3,     1,
       2,     1,     4,     5,     5,     6,     3,     7,     4,    11,
       1,     3,     2,     2,     2,     0,     3,     1,     1,     2,
       2,     2,     2,     1,     0,     1,     2,     6,     4,     6,
       4,     6,     8,     4,     6,     1,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     1,     1,     1,     3,     3,
       3,     3,     2,     2,     1,     3,     1,     1,     1,     3,
       1,     1,     0,     1,     1,     1,     1,     3,     8,    11,
      10,     7,    10,     9,     1,     1,     2,     3,     8,    11,
       9,     1,     1,     3,     0,     1,     3,     1,     0,     1,
       0,     1,     0,     1,     3,     1,     1,     1,     3,     1,
       0,     2,     2,     0,     2,     0,     1,     0,     1,     1,
       1,     3,     3,     1,     1,     3,     3,     3,     3,     3,
       3,     4,     3,     2,     1,     1,     1,     1,     1,     3,
       1,     1,     3,     3,     1,     2,     4,     4,     2,     3,
       5,     5,     1,     1,     3,     0,    11,    11,    10,    12,
       1,     2,     5,     4,     4,     4,     4,     7,     5,     4,
       7,     6,     9,     9,     4,     1,     1,     1,     1,     1,
       1,     1,     5,     1,     1,     3,     1,     2,     2,     2,
       3,     1,     3,     7,     1,     2,     0,     2,     0,     3,
       3,     4,     4,     4,     4,     3,     2,     1,     1,     0,
       1,     1,     0,     2,     1,     5,     1,     0,     2,     2,
       0,     1,     0,     3,     5,     1,     3,     4,     3,     1,
       1,     0,     2,     2,     0,     2,     2,     1,     1,     1,
       0,     2,     4,     5,     4,     2,     3,     2,     2,     2,
       2,     1,     2,     3,     0,     1,     0,     5,     1,     4,
       6,     2,     1,     0,     4,     0,     1,     1,     2,     2,
       2,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     3,     3,     0,     1,     3,     1,     2,     1,     1,
       1,     1,     1,     2,     4,     4,     5,     1,     1,     2,
       0,     2,     0,     1,     3,     1,     0,     1,     2,     3,
       2,     4,     2,     3,     2,     0,     1,     2,     0,     4,
       5,     1,     2,     2,     0,     1,     3,     1,     2,     3,
       3,     3,     3,     3,     3,     1,     4,     9,     9,     3,
       0,     2,     2,     0,     5,     3,     1,     3,     5,     3,
       1,     2,     1,     3,     5,     1,     2,     3,     4,     5,
       4,     5,     4,     6,     5,     4,     5,     5,     5,     2,
       4,     1,     1,     0,     1,     4,     5,     4,     0,     2,
       2,     2,     1,     1,     1,     1,     0,     4,     2,     1,
       2,     2,     4,     2,     6,     2,     1,     3,     4,     0,
       2,     0,     2,     0,     1,     3,     3,     2,     0,     2,
       4,     1,     1,     1,     0,     2,     3,     5,     6,     2,
       3,     5,     5,     5,     3,     4,     0,     1,     1,     1,
       1,     1,     2,     4,     1,     1,     1,     1,     2,     3,
       0,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       2,     1,     3,     0,     1,     1,     1,     1,     5,     2,
       1,     1,     1,     1,     4,     1,     2,     2,     1,     3,
       3,     2,     1,     0,     5,     2,     5,     2,     1,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     3,     3,
       3,     3,     3,     0,     1,     3,     3,     5,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     3,     3,     2,
       2,     3,     3,     5,     4,     6,     3,     5,     4,     6,
       4,     6,     5,     7,     3,     2,     4,     3,     2,     3,
       3,     3,     3,     4,     3,     4,     3,     4,     5,     6,
       6,     7,     6,     7,     6,     7,     3,     4,     4,     6,
       1,     4,     3,     5,     1,     3,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     2,     5,     6,     6,     7,     1,
       1,     2,     1,     1,     2,     2,     3,     1,     2,     4,
       1,     1,     2,     2,     4,     1,     1,     3,     1,     4,
       1,     3,     3,     6,     7,     9,     7,     7,     5,     1,
       1,     1,     5,     6,     6,     4,     4,     4,     4,     6,
       5,     5,     5,     4,     6,     4,     7,     9,     5,     0,
       5,     4,     0,     1,     0,     2,     0,     1,     3,     3,
       2,     2,     0,     6,     1,     0,     3,     0,     3,     3,
       3,     0,     1,     4,     2,     2,     2,     2,     2,     3,
       2,     2,     3,     0,     4,     3,     1,     5,     3,     1,
       3,     1,     2,     3,     1,     3,     1,     2,     1,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     1,     4,     1,     4,     1,     2,     1,     2,     1,
       2,     1,     3,     1,     3,     1,     2,     1,     3,     1,
       2,     1,     0,     1,     3,     1,     3,     3,     1,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     3,     2,     3,     0,     3,     3,     2,
       2,     1,     0,     2,     2,     3,     2,     1,     1,     3,
       5,     1,     2,     4,     2,     0,     1,     0,     1,     2,
       3,     5,     7,     7,     1,     0,     0,     2,     0,     2,
       3,     3,     3,     5,     7,     7,     0,     2,     1,     0,
       1,     0,     1,     3,     1,     2,     3,     2,     1,     4,
       2,     1,     0,     3,     1,     3,     1,     2,     4,     2,
       0,     1,     3,     1,     3,     1,     2,     1,     3,     1,
       1,     2,     1,     1,     2,     1,     1,     2,     7,     2,
       5,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       3,     0,     1,     1,     1,     5,     3,     0,     1,     1,
       1,     1,     1,     4,     7,     6,     2,     0,     1,     1,
       1,     1,    13,    16,     1,     2,     0,     1,     0,     1,
       0,     2,     0,     1,     0,     6,     8,     6,     8,     6,
       8,     3,     2,     1,     0,     4,     6,     3,     2,     4,
       3,     5,     1,     0,     1,     1,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     3,     3,     3,     1,     3,     3,
       2,     3,     3,     3,     3,     1,     1,     1,     1,     3,
       5,     1,     1,     1,     1,     3,     2,     2,     3,     4,
       5,     1,     1,     1,     1,     4,     6,     5,     4,     6,
       1,     1,     1,     1,     1,     1,     0,     1,     3,     1,
       0,     7,     3,     1,     2,     3,     2,     0,     2,     0,
       2,     4,     5,     3,     5,     1,     0,     2,     0,     2,
       3,     3,     3,     1,     1,     1,     2,     3,     2,     2,
       2,     2,     3,     4,     3,     1,     1,     1,     1,     0,
       1,     3,     1,     3,     2,     9,    12,    11,    12,    14,
       3,     4,     4,     0,     7,    10,     9,     2,     3,     0,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 497 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 18326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 513 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 18342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 525 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 18353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43: /* stmt: %empty  */
#line 572 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 18359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 18469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 18475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 18495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 18503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 18526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 18534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 18542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 18636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 18672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 18692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 18772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 18813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 18903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 18932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 18941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 18949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 18967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 18973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 18979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 18985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 18995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 19033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 19063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 19338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 19344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 19358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 19410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 19418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 19427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 19433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 19439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 19445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 19457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 19469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 19477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 19483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 19489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 19510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 19535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 19543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 19551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 19559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 19572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 19585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 19593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 19650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 19656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 19662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 19674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 19710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 19722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 19740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 19746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 19803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 19809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 19815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 19920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* CreateSecretStmt: CREATE_P SECRET ColId TYPE_P ColId opt_provider_val opt_scope_val opt_secret_list  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->secret_name = (yyvsp[-5].str);
					n->secret_type = (yyvsp[-3].str);
					n->secret_provider = (yyvsp[-2].str);
					n->scope = (yyvsp[-1].list);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* CreateSecretStmt: CREATE_P SECRET IF_P NOT EXISTS ColId TYPE_P ColId opt_provider_val opt_scope_val opt_secret_list  */
#line 19 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->secret_name = (yyvsp[-5].str);
					n->secret_type = (yyvsp[-3].str);
					n->secret_provider = (yyvsp[-2].str);
					n->scope = (yyvsp[-1].list);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* CreateSecretStmt: CREATE_P OR REPLACE SECRET ColId TYPE_P ColId opt_provider_val opt_scope_val opt_secret_list  */
#line 30 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->secret_name = (yyvsp[-5].str);
					n->secret_type = (yyvsp[-3].str);
					n->secret_provider = (yyvsp[-2].str);
					n->scope = (yyvsp[-1].list);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* secret_key: ColId SCONST  */
#line 44 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.list) = list_make2((yyvsp[-1].str), (yyvsp[0].str)); }
#line 19971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* secret_key_val: secret_key  */
#line 48 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                            { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 19977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* secret_key_val: secret_key_val ',' secret_key  */
#line 49 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].list)); }
#line 19983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* opt_secret_key_val: %empty  */
#line 53 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                            { (yyval.list) = NULL; }
#line 19989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* opt_secret_key_val: secret_key_val  */
#line 54 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                    { (yyval.list) = (yyvsp[0].list); }
#line 19995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* opt_secret_list: %empty  */
#line 58 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                            { (yyval.list) = NULL; }
#line 20001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* opt_secret_list: WITH '(' opt_secret_key_val ')'  */
#line 59 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.list) = (yyvsp[-1].list); }
#line 20007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* provider_val: USING ColId  */
#line 64 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                            { (yyval.str) = (yyvsp[0].str); }
#line 20013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* opt_provider_val: %empty  */
#line 68 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                            { (yyval.str) = NULL; }
#line 20019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* opt_provider_val: provider_val  */
#line 69 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* scope_list_val_item: SCONST  */
#line 74 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                            { (yyval.str) = (yyvsp[0].str); }
#line 20031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* scope_list_val: scope_list_val_item  */
#line 78 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                                    { (yyval.list) = list_make1((yyvsp[0].str)); }
#line 20037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* scope_list_val: scope_list_val ',' scope_list_val_item  */
#line 79 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].str)); }
#line 20043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* opt_scope_val: %empty  */
#line 83 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                            { (yyval.list) = NULL; }
#line 20049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* opt_scope_val: SCOPE '[' scope_list_val ']'  */
#line 84 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.list) = (yyvsp[-1].list); }
#line 20055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* opt_scope_val: SCOPE scope_list_val_item  */
#line 85 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].str)); }
#line 20061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 20161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 20203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 20236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 20242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 20250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 20274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 20306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 20314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 20347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 20361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 20367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 20379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 20385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 20406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 20416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 20455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 20461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 20467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 20477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 20534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 20562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 20568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 20574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 20580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 20586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 20592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 20598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 20610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 20616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 20622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 20628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 20634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 20640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 20646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 20657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 20802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 20808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 20814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 20820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 20833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 20860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 20874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 20882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 20894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 20900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 20906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 20912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 20918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 20924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 20930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 20936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 20942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 20954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 20960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 20971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 20983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 20989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 20995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 21001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 21007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 21013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 21019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 21025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 21099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 21105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 21111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 21123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 21129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 21135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 21147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 21153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 21159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 21165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 21171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 21177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 21200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 21230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 21312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 21320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 21375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 21383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 21413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 21423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 21434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 21451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 21543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 21567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 21579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 21587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 21595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 21606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 21641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 21652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 21658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 21664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 21670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 21676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 21794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* drop_type_any_name: SEQUENCE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 21800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* drop_type_any_name: FUNCTION  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* drop_type_any_name: MACRO  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* drop_type_any_name: MACRO TABLE  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 21818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* drop_type_any_name: VIEW  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 21824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 21830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* drop_type_any_name: INDEX  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 21836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* drop_type_any_name: FOREIGN TABLE  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 21842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* drop_type_any_name: COLLATION  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 21848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* drop_type_any_name: CONVERSION_P  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 21854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* drop_type_any_name: SCHEMA  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 21860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* drop_type_any_name: STATISTICS  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 21866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 21872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 21878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 21884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 21890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* drop_type_name: ACCESS METHOD  */
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 21896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* drop_type_name: EVENT TRIGGER  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 21902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* drop_type_name: EXTENSION  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 21908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 21914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* drop_type_name: PUBLICATION  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 21920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* drop_type_name: SERVER  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 21926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* any_name_list: any_name  */
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* any_name_list: any_name_list ',' any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* opt_drop_behavior: CASCADE  */
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 21944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* opt_drop_behavior: RESTRICT  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 21950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* opt_drop_behavior: %empty  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 21956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* drop_type_name_on_any_name: POLICY  */
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 21962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* drop_type_name_on_any_name: RULE  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 21968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* drop_type_name_on_any_name: TRIGGER  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 21974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* type_name_list: Typename  */
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 21980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* type_name_list: type_name_list ',' Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 21986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 22001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 22048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 22063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 22078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 22086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 22094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 22109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 22141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 22176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 22230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 22242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 22266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 22272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 22278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* copy_generic_opt_arg: struct_expr  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 22284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* copy_generic_opt_arg: %empty  */
#line 107 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 22290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 113 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* opt_oids: WITH OIDS  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 22306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* opt_oids: %empty  */
#line 124 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* copy_opt_list: %empty  */
#line 130 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 22324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* opt_binary: BINARY  */
#line 136 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* opt_binary: %empty  */
#line 139 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* copy_opt_item: BINARY  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* copy_opt_item: OIDS  */
#line 149 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* copy_opt_item: FREEZE  */
#line 153 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 157 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 161 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* copy_opt_item: CSV  */
#line 165 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 22386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* copy_opt_item: HEADER_P  */
#line 169 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 173 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 177 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* copy_opt_item: FORCE QUOTE columnList  */
#line 181 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* copy_opt_item: FORCE QUOTE '*'  */
#line 185 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* copy_opt_item: PARTITION BY columnList  */
#line 189 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* copy_opt_item: PARTITION BY '*'  */
#line 193 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 197 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 22450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* copy_opt_item: FORCE NULL_P columnList  */
#line 201 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* copy_opt_item: ENCODING Sconst  */
#line 205 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 212 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* copy_file_name: Sconst  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* copy_file_name: STDIN  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* copy_file_name: STDOUT  */
#line 220 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 226 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 230 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 22512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 22518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 22535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 22571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 22583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 22627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 22636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 22739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 22747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* pivot_column_entry: b_expr  */
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 22913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 389 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 22924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* pivot_column_entry: single_pivot_value  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* pivot_column_list_internal: pivot_column_entry  */
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* pivot_column_list: pivot_column_list_internal  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* pivot_column_list: pivot_column_list_internal ','  */
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* with_clause: WITH cte_list  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 22965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* with_clause: WITH_LA cte_list  */
#line 427 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 22976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* with_clause: WITH RECURSIVE cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 22987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* cte_list: common_table_expr  */
#line 443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* cte_list: cte_list ',' common_table_expr  */
#line 444 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 23013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* opt_materialized: MATERIALIZED  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 23019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* opt_materialized: NOT MATERIALIZED  */
#line 461 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 23025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* opt_materialized: %empty  */
#line 462 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 23031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* into_clause: INTO OptTempTableName  */
#line 467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 23045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* into_clause: %empty  */
#line 477 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 23051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 506 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 522 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 23120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* OptTempTableName: TABLE qualified_name  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* OptTempTableName: qualified_name  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* opt_table: TABLE  */
#line 538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 23144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* opt_table: %empty  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 23150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* all_or_distinct: ALL  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 23156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* all_or_distinct: DISTINCT  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* all_or_distinct: %empty  */
#line 545 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* by_name: BY NAME_P  */
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 23174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* distinct_clause: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 23180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* opt_all_clause: ALL  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 23192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* opt_all_clause: %empty  */
#line 562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 23204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 567 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 23210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* opt_ignore_nulls: %empty  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* opt_sort_clause: sort_clause  */
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 23222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* opt_sort_clause: %empty  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* sort_clause: ORDER BY sortby_list  */
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 23251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* sortby_list: sortby  */
#line 594 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 23257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* sortby_list: sortby_list ',' sortby  */
#line 595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 23263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 23276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 23289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* opt_asc_desc: ASC_P  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 23295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* opt_asc_desc: DESC_P  */
#line 619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 23301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* opt_asc_desc: %empty  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 23307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 23313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 23319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* opt_nulls_order: %empty  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 23325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* select_limit: limit_clause offset_clause  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 23331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* select_limit: offset_clause limit_clause  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 23337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* select_limit: limit_clause  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 23343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* select_limit: offset_clause  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 23349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* opt_select_limit: select_limit  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* opt_select_limit: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 23361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* limit_clause: LIMIT select_limit_value  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 23380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 23386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 23392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* offset_clause: OFFSET select_offset_value  */
#line 667 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 23404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* sample_count: FCONST '%'  */
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 23412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* sample_count: ICONST '%'  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 23420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* sample_count: FCONST PERCENT  */
#line 686 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 23428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* sample_count: ICONST PERCENT  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 23436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* sample_count: ICONST  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 23444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* sample_count: ICONST ROWS  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 23452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* sample_clause: %empty  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 23466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* opt_sample_func: ColId  */
#line 716 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* opt_sample_func: %empty  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 23478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 23487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* tablesample_entry: sample_count  */
#line 727 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 23495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 23503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 735 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 23512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* opt_tablesample_clause: tablesample_clause  */
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* opt_tablesample_clause: %empty  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 23532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 23538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* opt_repeatable_clause: %empty  */
#line 756 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 23544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* select_limit_value: a_expr  */
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* select_limit_value: ALL  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 23559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* select_limit_value: a_expr '%'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 23565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* select_limit_value: FCONST PERCENT  */
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 23571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* select_limit_value: ICONST PERCENT  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 23577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* select_offset_value: a_expr  */
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* select_fetch_first_value: c_expr  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* select_fetch_first_value: '+' I_or_F_const  */
#line 797 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 23595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* select_fetch_first_value: '-' I_or_F_const  */
#line 799 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 23601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* I_or_F_const: Iconst  */
#line 803 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 23607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* I_or_F_const: FCONST  */
#line 804 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 23613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* row_or_rows: ROW  */
#line 808 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 23619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* row_or_rows: ROWS  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 23625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* first_or_next: FIRST_P  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 23631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* first_or_next: NEXT  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 23637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* group_clause: GROUP_P BY ALL  */
#line 840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 23652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* group_clause: %empty  */
#line 844 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* group_by_list: group_by_item  */
#line 848 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* group_by_list: group_by_list ',' group_by_item  */
#line 849 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 23670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* group_by_list_opt_comma: group_by_list  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* group_by_list_opt_comma: group_by_list ','  */
#line 854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* group_by_item: a_expr  */
#line 858 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* group_by_item: empty_grouping_set  */
#line 859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* group_by_item: cube_clause  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* group_by_item: rollup_clause  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* group_by_item: grouping_sets_clause  */
#line 862 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* empty_grouping_set: '(' ')'  */
#line 867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 23720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 23728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 23736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 23744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* grouping_or_grouping_id: GROUPING  */
#line 900 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 23750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* grouping_or_grouping_id: GROUPING_ID  */
#line 901 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 23756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* having_clause: HAVING a_expr  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* having_clause: %empty  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* qualify_clause: QUALIFY a_expr  */
#line 910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* qualify_clause: %empty  */
#line 911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* for_locking_clause: for_locking_items  */
#line 915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* for_locking_clause: FOR READ_P ONLY  */
#line 916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* opt_for_locking_clause: for_locking_clause  */
#line 920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* opt_for_locking_clause: %empty  */
#line 921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 23804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* for_locking_items: for_locking_item  */
#line 925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* for_locking_items: for_locking_items for_locking_item  */
#line 926 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 23828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* for_locking_strength: FOR UPDATE  */
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 23834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 942 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 23840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* for_locking_strength: FOR SHARE  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 23846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* for_locking_strength: FOR KEY SHARE  */
#line 944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 23852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* locked_rels_list: OF qualified_name_list  */
#line 948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* locked_rels_list: %empty  */
#line 949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 23864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* opt_nowait_or_skip: NOWAIT  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 23870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 23876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* opt_nowait_or_skip: %empty  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 23882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 23892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 972 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 23902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* values_clause_opt_comma: values_clause  */
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* values_clause_opt_comma: values_clause ','  */
#line 981 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* from_clause: FROM from_list_opt_comma  */
#line 994 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* from_clause: %empty  */
#line 995 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* from_list: table_ref  */
#line 999 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* from_list: from_list ',' table_ref  */
#line 1000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* from_list_opt_comma: from_list  */
#line 1004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* from_list_opt_comma: from_list ','  */
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 23960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1018 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 23972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1026 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 23985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 23997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1043 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1052 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 24023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* table_ref: joined_table  */
#line 1061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 24031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 24040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 24054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1080 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 24068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1092 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 24074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* opt_pivot_group_by: %empty  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 24080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 24086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1097 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* opt_include_nulls: %empty  */
#line 1098 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1102 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* pivot_header: d_expr  */
#line 1119 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1120 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1132 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* pivot_value_list: pivot_value  */
#line 1141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* unpivot_header: ColIdOrString  */
#line 1151 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 24182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1157 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* unpivot_value_list: unpivot_value  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* joined_table: '(' joined_table ')'  */
#line 1195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 24217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1212 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 24322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1280 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1307 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 24376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 24396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* alias_clause: AS ColIdOrString  */
#line 1347 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* alias_clause: ColId  */
#line 1358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* opt_alias_clause: alias_clause  */
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 24440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* opt_alias_clause: %empty  */
#line 1365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 24446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* func_alias_clause: alias_clause  */
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 24454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 24462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* func_alias_clause: %empty  */
#line 1394 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 24490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* join_type: FULL join_outer  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 24496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* join_type: LEFT join_outer  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 24502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* join_type: RIGHT join_outer  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 24508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* join_type: SEMI  */
#line 1402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 24514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* join_type: ANTI  */
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 24520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* join_type: INNER_P  */
#line 1404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 24526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* join_outer: OUTER_P  */
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 24532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* join_outer: %empty  */
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 24544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* join_qual: ON a_expr  */
#line 1422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* relation_expr: qualified_name  */
#line 1428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 24561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* relation_expr: qualified_name '*'  */
#line 1435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 24572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* relation_expr: ONLY qualified_name  */
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 24583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 24594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* func_table: func_expr_windowless opt_ordinality  */
#line 1481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 24609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1492 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 24624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1505 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 24630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* rowsfrom_list: rowsfrom_item  */
#line 1509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 24636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1510 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 24642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1513 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* opt_col_def_list: %empty  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 24660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* opt_ordinality: %empty  */
#line 1518 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 24666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* where_clause: WHERE a_expr  */
#line 1523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* where_clause: %empty  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* TableFuncElementList: TableFuncElement  */
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1540 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 24716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* opt_collate_clause: COLLATE any_name  */
#line 1561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 24728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* opt_collate_clause: %empty  */
#line 1568 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 24734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* colid_type_list: ColId Typename  */
#line 1581 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 24742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1584 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 24750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* opt_Typename: Typename  */
#line 1591 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* opt_Typename: %empty  */
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 24762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* Typename: SimpleTypename opt_array_bounds  */
#line 1595 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 24771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 24781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 24790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 24800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* Typename: SimpleTypename ARRAY  */
#line 1618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 24809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 24819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1628 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 24830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1634 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 24841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1640 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 24852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 24858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1652 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 24864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* opt_array_bounds: %empty  */
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 24870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* SimpleTypename: GenericType  */
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* SimpleTypename: Numeric  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* SimpleTypename: Bit  */
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* SimpleTypename: Character  */
#line 1661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* SimpleTypename: ConstDatetime  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* SimpleTypename: ConstInterval opt_interval  */
#line 1664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 24909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 24919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* ConstTypename: Numeric  */
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* ConstTypename: ConstBit  */
#line 1689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* ConstTypename: ConstCharacter  */
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* ConstTypename: ConstDatetime  */
#line 1691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* GenericType: type_name_token opt_type_modifiers  */
#line 1703 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* opt_type_modifiers: %empty  */
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* Numeric: INT_P  */
#line 1724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* Numeric: INTEGER  */
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* Numeric: SMALLINT  */
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* Numeric: BIGINT  */
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* Numeric: REAL  */
#line 1744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* Numeric: FLOAT_P opt_float  */
#line 1749 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* Numeric: DOUBLE_P PRECISION  */
#line 1754 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* Numeric: DEC opt_type_modifiers  */
#line 1765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* Numeric: BOOLEAN_P  */
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* opt_float: '(' Iconst ')'  */
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 25092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* opt_float: %empty  */
#line 1805 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 25100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* Bit: BitWithLength  */
#line 1815 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* Bit: BitWithoutLength  */
#line 1819 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* ConstBit: BitWithLength  */
#line 1827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* ConstBit: BitWithoutLength  */
#line 1831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* BitWithoutLength: BIT opt_varying  */
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* Character: CharacterWithLength  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* Character: CharacterWithoutLength  */
#line 1876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* ConstCharacter: CharacterWithLength  */
#line 1882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* ConstCharacter: CharacterWithoutLength  */
#line 1886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* CharacterWithoutLength: character  */
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* character: CHARACTER opt_varying  */
#line 1917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* character: CHAR_P opt_varying  */
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* character: VARCHAR  */
#line 1921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 25243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* character: NATIONAL CHARACTER opt_varying  */
#line 1923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* character: NATIONAL CHAR_P opt_varying  */
#line 1925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* character: NCHAR opt_varying  */
#line 1927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* opt_varying: VARYING  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 25267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* opt_varying: %empty  */
#line 1932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1949 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1957 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* ConstDatetime: TIME opt_timezone  */
#line 1966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* ConstInterval: INTERVAL  */
#line 1977 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 25338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1985 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 25344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* opt_timezone: %empty  */
#line 1986 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* opt_interval: year_keyword  */
#line 2015 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 25356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_interval: month_keyword  */
#line 2017 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 25362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* opt_interval: day_keyword  */
#line 2019 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 25368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* opt_interval: hour_keyword  */
#line 2021 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 25374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* opt_interval: minute_keyword  */
#line 2023 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 25380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* opt_interval: second_keyword  */
#line 2025 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 25386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* opt_interval: millisecond_keyword  */
#line 2027 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 25392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* opt_interval: microsecond_keyword  */
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 25398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* opt_interval: year_keyword TO month_keyword  */
#line 2031 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 25407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* opt_interval: day_keyword TO hour_keyword  */
#line 2036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 25416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* opt_interval: day_keyword TO minute_keyword  */
#line 2041 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* opt_interval: day_keyword TO second_keyword  */
#line 2047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* opt_interval: hour_keyword TO second_keyword  */
#line 2059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* opt_interval: minute_keyword TO second_keyword  */
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* opt_interval: %empty  */
#line 2070 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 25471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* a_expr: c_expr  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* a_expr: a_expr TYPECAST Typename  */
#line 2104 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 25483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* a_expr: a_expr COLLATE any_name  */
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2114 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 25505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* a_expr: '+' a_expr  */
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* a_expr: '-' a_expr  */
#line 2131 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 25517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* a_expr: a_expr '+' a_expr  */
#line 2133 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* a_expr: a_expr '-' a_expr  */
#line 2135 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* a_expr: a_expr '*' a_expr  */
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* a_expr: a_expr '/' a_expr  */
#line 2139 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2141 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* a_expr: a_expr '%' a_expr  */
#line 2143 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* a_expr: a_expr '^' a_expr  */
#line 2145 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* a_expr: a_expr POWER_OF a_expr  */
#line 2147 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* a_expr: a_expr '<' a_expr  */
#line 2149 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* a_expr: a_expr '>' a_expr  */
#line 2151 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* a_expr: a_expr '=' a_expr  */
#line 2153 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2155 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2157 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2159 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* a_expr: a_expr qual_Op a_expr  */
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* a_expr: qual_Op a_expr  */
#line 2164 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* a_expr: a_expr qual_Op  */
#line 2166 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 25619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* a_expr: a_expr AND a_expr  */
#line 2169 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* a_expr: a_expr OR a_expr  */
#line 2171 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* a_expr: NOT a_expr  */
#line 2173 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 25637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* a_expr: NOT_LA a_expr  */
#line 2175 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 25643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* a_expr: a_expr GLOB a_expr  */
#line 2177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* a_expr: a_expr LIKE a_expr  */
#line 2182 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 25672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 25681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 25692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* a_expr: a_expr ILIKE a_expr  */
#line 2206 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 25712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 25721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 25732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 25744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 25756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 25768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 25780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* a_expr: a_expr IS NULL_P  */
#line 2273 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* a_expr: a_expr ISNULL  */
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* a_expr: a_expr IS NOT NULL_P  */
#line 2289 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* a_expr: a_expr NOT NULL_P  */
#line 2297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* a_expr: a_expr NOTNULL  */
#line 2305 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2313 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 25852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2321 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 25860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* a_expr: row OVERLAPS row  */
#line 2325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 25880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* a_expr: a_expr IS TRUE_P  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* a_expr: a_expr IS FALSE_P  */
#line 2357 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* a_expr: a_expr IS UNKNOWN  */
#line 2373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2381 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2389 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 25960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 25968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 25976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 25984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2405 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 25996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2421 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2429 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* a_expr: a_expr IN_P in_expr  */
#line 2437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 26056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 26082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2490 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 26108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* a_expr: DEFAULT  */
#line 2497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 26138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2519 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 26150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 26163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* b_expr: c_expr  */
#line 2547 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* b_expr: b_expr TYPECAST Typename  */
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* b_expr: '+' b_expr  */
#line 2551 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* b_expr: '-' b_expr  */
#line 2553 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* b_expr: b_expr '+' b_expr  */
#line 2555 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* b_expr: b_expr '-' b_expr  */
#line 2557 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* b_expr: b_expr '*' b_expr  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* b_expr: b_expr '/' b_expr  */
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2563 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* b_expr: b_expr '%' b_expr  */
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* b_expr: b_expr '^' b_expr  */
#line 2567 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* b_expr: b_expr POWER_OF b_expr  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* b_expr: b_expr '<' b_expr  */
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* b_expr: b_expr '>' b_expr  */
#line 2573 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* b_expr: b_expr '=' b_expr  */
#line 2575 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2581 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* b_expr: b_expr qual_Op b_expr  */
#line 2583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* b_expr: qual_Op b_expr  */
#line 2585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* b_expr: b_expr qual_Op  */
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2589 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2593 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2597 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* c_expr: row  */
#line 2615 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 26330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* c_expr: indirection_expr opt_extended_indirection  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 26346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* d_expr: columnref  */
#line 2633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* d_expr: AexprConst  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* d_expr: '#' ICONST  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* d_expr: '$' ColLabel  */
#line 2643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 26377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* d_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 26386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* d_expr: list_comprehension  */
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 26394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* d_expr: ARRAY select_with_parens  */
#line 2654 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* d_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2664 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 26419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* d_expr: case_expr  */
#line 2670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* d_expr: select_with_parens  */
#line 2672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* d_expr: select_with_parens indirection  */
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 26468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* d_expr: EXISTS select_with_parens  */
#line 2707 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2718 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 26494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* indirection_expr: '?'  */
#line 2729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 26502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* indirection_expr: PARAM  */
#line 2733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 26513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* indirection_expr: '(' a_expr ')'  */
#line 2740 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 26521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* indirection_expr: struct_expr  */
#line 2744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 26529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2748 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 26550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* indirection_expr: func_expr  */
#line 2765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 26558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 26567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* func_application: func_name '(' ')'  */
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 26575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2793 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2809 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 26625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2820 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 26677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* func_expr: func_expr_common_subexpr  */
#line 2876 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* func_expr_windowless: func_application  */
#line 2886 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2887 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 26705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2901 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 26711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2903 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 26717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 26777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2945 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2960 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 26820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 26831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 26844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 26863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3008 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* within_group_clause: %empty  */
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3014 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* filter_clause: %empty  */
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* export_clause: EXPORT_STATE  */
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 26899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* export_clause: %empty  */
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* window_clause: WINDOW window_definition_list  */
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* window_clause: %empty  */
#line 3028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* window_definition_list: window_definition  */
#line 3032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 26923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3034 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 26929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* window_definition: ColId AS window_specification  */
#line 3039 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 26939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* over_clause: OVER window_specification  */
#line 3047 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 26945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* over_clause: OVER ColId  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 26962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* over_clause: %empty  */
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 26968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3067 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 26986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* opt_existing_window_name: ColId  */
#line 3092 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 26992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* opt_existing_window_name: %empty  */
#line 3093 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 26998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3096 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* opt_partition_clause: %empty  */
#line 3097 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3114 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3122 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* opt_frame_clause: %empty  */
#line 3130 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* frame_extent: frame_bound  */
#line 3141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 27081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 27123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3214 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* frame_bound: CURRENT_P ROW  */
#line 3223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* frame_bound: a_expr PRECEDING  */
#line 3232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* frame_bound: a_expr FOLLOWING  */
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 27194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 27200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3254 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 27206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3255 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 27212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* opt_window_exclusion_clause: %empty  */
#line 3256 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 27218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* qualified_row: ROW '(' ')'  */
#line 3271 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* row: qualified_row  */
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 27236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* row: '(' expr_list ',' a_expr ')'  */
#line 3275 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 27242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3279 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 27255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* dict_arguments: dict_arg  */
#line 3289 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* dict_arguments_opt_comma: dict_arguments  */
#line 3294 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3295 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* map_arg: a_expr ':' a_expr  */
#line 3300 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 27287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* map_arguments: map_arg  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 27293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* map_arguments: map_arguments ',' map_arg  */
#line 3307 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 27299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* map_arguments_opt_comma: map_arguments  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* map_arguments_opt_comma: map_arguments ','  */
#line 3313 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3318 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* opt_map_arguments_opt_comma: %empty  */
#line 3319 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 27323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* sub_type: ANY  */
#line 3322 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* sub_type: SOME  */
#line 3323 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* sub_type: ALL  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 27341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* all_Op: Op  */
#line 3327 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* all_Op: MathOp  */
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 27353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* MathOp: '+'  */
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 27359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* MathOp: '-'  */
#line 3332 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 27365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* MathOp: '*'  */
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 27371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* MathOp: '/'  */
#line 3334 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 27377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* MathOp: INTEGER_DIVISION  */
#line 3335 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 27383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* MathOp: '%'  */
#line 3336 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 27389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* MathOp: '^'  */
#line 3337 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 27395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* MathOp: POWER_OF  */
#line 3338 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 27401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* MathOp: '<'  */
#line 3339 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 27407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* MathOp: '>'  */
#line 3340 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 27413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* MathOp: '='  */
#line 3341 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 27419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* MathOp: LESS_EQUALS  */
#line 3342 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 27425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* MathOp: GREATER_EQUALS  */
#line 3343 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 27431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* MathOp: NOT_EQUALS  */
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 27437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* qual_Op: Op  */
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3350 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* qual_all_Op: all_Op  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3357 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* subquery_Op: all_Op  */
#line 3362 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* subquery_Op: LIKE  */
#line 3366 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 27479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* subquery_Op: NOT_LA LIKE  */
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 27485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* subquery_Op: GLOB  */
#line 3370 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 27491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* subquery_Op: NOT_LA GLOB  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 27497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* subquery_Op: ILIKE  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 27503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* subquery_Op: NOT_LA ILIKE  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 27509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* any_operator: all_Op  */
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* any_operator: ColId '.' any_operator  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 27521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* c_expr_list: c_expr  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* c_expr_list_opt_comma: c_expr_list  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 27553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* expr_list: a_expr  */
#line 3419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* expr_list: expr_list ',' a_expr  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* expr_list_opt_comma: expr_list  */
#line 3430 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* expr_list_opt_comma: expr_list ','  */
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 27585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* opt_expr_list_opt_comma: %empty  */
#line 3446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 27601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* func_arg_list: func_arg_expr  */
#line 3455 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* func_arg_expr: a_expr  */
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 27638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 27651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* type_list: Typename  */
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 27657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* type_list: type_list ',' Typename  */
#line 3489 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 27663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* extract_list: extract_arg FROM a_expr  */
#line 3494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 27671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* extract_list: %empty  */
#line 3497 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* extract_arg: IDENT  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* extract_arg: year_keyword  */
#line 3505 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 27689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* extract_arg: month_keyword  */
#line 3506 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 27695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* extract_arg: day_keyword  */
#line 3507 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 27701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* extract_arg: hour_keyword  */
#line 3508 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 27707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* extract_arg: minute_keyword  */
#line 3509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 27713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* extract_arg: second_keyword  */
#line 3510 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 27719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* extract_arg: millisecond_keyword  */
#line 3511 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 27725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* extract_arg: microsecond_keyword  */
#line 3512 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 27731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* extract_arg: Sconst  */
#line 3513 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3524 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3528 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* overlay_placing: PLACING a_expr  */
#line 3535 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* position_list: b_expr IN_P b_expr  */
#line 3541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 27765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* position_list: %empty  */
#line 3542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* substr_list: a_expr substr_from substr_for  */
#line 3559 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* substr_list: a_expr substr_for substr_from  */
#line 3563 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 27788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* substr_list: a_expr substr_from  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* substr_list: a_expr substr_for  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 27815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* substr_list: expr_list  */
#line 3587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* substr_list: %empty  */
#line 3591 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 27829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* substr_from: FROM a_expr  */
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* substr_for: FOR a_expr  */
#line 3598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 27847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* trim_list: FROM expr_list_opt_comma  */
#line 3602 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* trim_list: expr_list_opt_comma  */
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* in_expr: select_with_parens  */
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 27870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 27876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 27890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* when_clause_list: when_clause  */
#line 3637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* when_clause_list: when_clause_list when_clause  */
#line 3638 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 27902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 27914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* case_default: ELSE a_expr  */
#line 3653 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* case_default: %empty  */
#line 3654 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* case_arg: a_expr  */
#line 3657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* case_arg: %empty  */
#line 3658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* columnref: ColId  */
#line 3662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 27946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* columnref: ColId indirection  */
#line 3666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 27954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* indirection_el: '[' a_expr ']'  */
#line 3673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3681 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 27991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3696 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* opt_slice_bound: a_expr  */
#line 3706 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* opt_slice_bound: %empty  */
#line 3707 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* opt_indirection: %empty  */
#line 3712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* opt_indirection: opt_indirection indirection_el  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* opt_func_arguments: %empty  */
#line 3717 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 28033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* opt_func_arguments: '(' ')'  */
#line 3718 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 28039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3719 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 28058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* extended_indirection_el: '[' a_expr ']'  */
#line 3733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3748 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 28095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3757 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* opt_extended_indirection: %empty  */
#line 3772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 28113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3773 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3789 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* opt_target_list_opt_comma: %empty  */
#line 3790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* target_list: target_el  */
#line 3794 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 28137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* target_list: target_list ',' target_el  */
#line 3795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 28143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* target_list_opt_comma: target_list  */
#line 3799 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* target_list_opt_comma: target_list ','  */
#line 3800 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* target_el: a_expr AS ColLabelOrString  */
#line 3804 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 28167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* target_el: a_expr IDENT  */
#line 3820 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 28179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* target_el: a_expr  */
#line 3828 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 28191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3837 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* except_list: EXCLUDE ColId  */
#line 3838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* opt_except_list: except_list  */
#line 3841 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* opt_except_list: %empty  */
#line 3842 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* replace_list_el: a_expr AS ColId  */
#line 3845 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 28221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* replace_list: replace_list_el  */
#line 3849 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* replace_list: replace_list ',' replace_list_el  */
#line 3850 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* replace_list_opt_comma: replace_list  */
#line 3854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* replace_list_opt_comma: replace_list ','  */
#line 3855 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3858 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* opt_replace_list: REPLACE replace_list_el  */
#line 3859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* opt_replace_list: %empty  */
#line 3860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* qualified_name_list: qualified_name  */
#line 3870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 28269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3871 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 28275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* name_list: name  */
#line 3876 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* name_list: name_list ',' name  */
#line 3878 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* name_list_opt_comma: name_list  */
#line 3883 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* name_list_opt_comma: name_list ','  */
#line 3884 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3888 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3889 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* name: ColIdOrString  */
#line 3892 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* func_name: function_name_token  */
#line 3904 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* func_name: ColId indirection  */
#line 3907 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 28332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* AexprConst: Iconst  */
#line 3918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 28340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* AexprConst: FCONST  */
#line 3922 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* AexprConst: Sconst opt_indirection  */
#line 3926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 28364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* AexprConst: BCONST  */
#line 3938 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* AexprConst: XCONST  */
#line 3942 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* AexprConst: func_name Sconst  */
#line 3951 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3958 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* AexprConst: ConstTypename Sconst  */
#line 3996 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 28446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4000 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 28454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4008 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* AexprConst: TRUE_P  */
#line 4012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 28478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* AexprConst: FALSE_P  */
#line 4016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 28486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* AexprConst: NULL_P  */
#line 4020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 28494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* Iconst: ICONST  */
#line 4025 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 28500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* type_function_name: IDENT  */
#line 4042 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* type_function_name: unreserved_keyword  */
#line 4043 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* type_function_name: type_func_name_keyword  */
#line 4044 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* function_name_token: IDENT  */
#line 4047 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* function_name_token: unreserved_keyword  */
#line 4048 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* function_name_token: func_name_keyword  */
#line 4049 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* type_name_token: IDENT  */
#line 4052 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* type_name_token: unreserved_keyword  */
#line 4053 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* type_name_token: type_name_keyword  */
#line 4054 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* any_name: ColId  */
#line 4057 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* any_name: ColId attrs  */
#line 4058 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 28566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* attrs: '.' attr_name  */
#line 4062 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* attrs: attrs '.' attr_name  */
#line 4064 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4068 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* opt_name_list: %empty  */
#line 4069 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* ColLabelOrString: ColLabel  */
#line 4076 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* ColLabelOrString: SCONST  */
#line 4077 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 28614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 28626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 28710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 28716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 28788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 28794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 28800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 28812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 28824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 28830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 28836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 28948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 28963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 28978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 28999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 29035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 29041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 29047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 29053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 29059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 29065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 29103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 29111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 29117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 29123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 29129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 29135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 29141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 29167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 29177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 29197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 29213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 29239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 29251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 29303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 29344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = "";
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 29397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* LoadStmt: INSTALL file_name  */
#line 15 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->repository = "";
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 29409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* LoadStmt: FORCE INSTALL file_name  */
#line 22 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->repository = "";
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* LoadStmt: INSTALL file_name FROM repo_path  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[-2].str);
                      n->repository = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* LoadStmt: FORCE INSTALL file_name FROM repo_path  */
#line 36 "third_party/libpg_query/grammar/statements/load.y"
                                                       {
                        PGLoadStmt *n = makeNode(PGLoadStmt);
                        n->filename = (yyvsp[-2].str);
                        n->repository = (yyvsp[0].str);
                        n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                        (yyval.node) = (PGNode *)n;
                  }
#line 29445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* file_name: Sconst  */
#line 45 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* file_name: ColId  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 29457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* repo_path: Sconst  */
#line 48 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* repo_path: ColId  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 29469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 29521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 29547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 29553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 29559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 29565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 29571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 29585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 29603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 29609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 29635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 29649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 29657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 29668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 29679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 29691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 29703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* DetachStmt: DETACH opt_database IDENT  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* opt_database: DATABASE  */
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 29771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* opt_database: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 29777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* opt_database_alias: AS ColId  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* opt_database_alias: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 29789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 29798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 29836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 29846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 29852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 29863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 29874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 29898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 29909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* var_name: ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* var_name: var_name '.' ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 29976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* table_id: ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 29982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* table_id: table_id '.' ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 29988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 29998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 30106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 30112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 30175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 30195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 30199 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
