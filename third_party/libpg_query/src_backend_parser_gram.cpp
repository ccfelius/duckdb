/* A Bison parser, made by GNU Bison 3.6.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.6.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeParamRefCast(int number, int location, PGTypeName *tpname);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);


#line 237 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Use api.header.include to #include this header
   instead of duplicating it here.  */
#ifndef YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
# define YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int base_yydebug;
#endif

/* Token kinds.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    YYEMPTY = -2,
    YYEOF = 0,                     /* "end of file"  */
    YYerror = 256,                 /* error  */
    YYUNDEF = 257,                 /* "invalid token"  */
    IDENT = 258,                   /* IDENT  */
    FCONST = 259,                  /* FCONST  */
    SCONST = 260,                  /* SCONST  */
    BCONST = 261,                  /* BCONST  */
    XCONST = 262,                  /* XCONST  */
    Op = 263,                      /* Op  */
    ICONST = 264,                  /* ICONST  */
    PARAM = 265,                   /* PARAM  */
    TYPECAST = 266,                /* TYPECAST  */
    DOT_DOT = 267,                 /* DOT_DOT  */
    COLON_EQUALS = 268,            /* COLON_EQUALS  */
    EQUALS_GREATER = 269,          /* EQUALS_GREATER  */
    LESS_EQUALS = 270,             /* LESS_EQUALS  */
    GREATER_EQUALS = 271,          /* GREATER_EQUALS  */
    NOT_EQUALS = 272,              /* NOT_EQUALS  */
    ABORT_P = 273,                 /* ABORT_P  */
    ABSOLUTE_P = 274,              /* ABSOLUTE_P  */
    ACCESS = 275,                  /* ACCESS  */
    ACTION = 276,                  /* ACTION  */
    ADD_P = 277,                   /* ADD_P  */
    ADMIN = 278,                   /* ADMIN  */
    AFTER = 279,                   /* AFTER  */
    AGGREGATE = 280,               /* AGGREGATE  */
    ALL = 281,                     /* ALL  */
    ALSO = 282,                    /* ALSO  */
    ALTER = 283,                   /* ALTER  */
    ALWAYS = 284,                  /* ALWAYS  */
    ANALYSE = 285,                 /* ANALYSE  */
    ANALYZE = 286,                 /* ANALYZE  */
    AND = 287,                     /* AND  */
    ANY = 288,                     /* ANY  */
    ARRAY = 289,                   /* ARRAY  */
    AS = 290,                      /* AS  */
    ASC_P = 291,                   /* ASC_P  */
    ASSERTION = 292,               /* ASSERTION  */
    ASSIGNMENT = 293,              /* ASSIGNMENT  */
    ASYMMETRIC = 294,              /* ASYMMETRIC  */
    AT = 295,                      /* AT  */
    ATTACH = 296,                  /* ATTACH  */
    ATTRIBUTE = 297,               /* ATTRIBUTE  */
    AUTHORIZATION = 298,           /* AUTHORIZATION  */
    BACKWARD = 299,                /* BACKWARD  */
    BEFORE = 300,                  /* BEFORE  */
    BEGIN_P = 301,                 /* BEGIN_P  */
    BETWEEN = 302,                 /* BETWEEN  */
    BIGINT = 303,                  /* BIGINT  */
    BINARY = 304,                  /* BINARY  */
    BIT = 305,                     /* BIT  */
    BOOLEAN_P = 306,               /* BOOLEAN_P  */
    BOTH = 307,                    /* BOTH  */
    BY = 308,                      /* BY  */
    CACHE = 309,                   /* CACHE  */
    CALL_P = 310,                  /* CALL_P  */
    CALLED = 311,                  /* CALLED  */
    CASCADE = 312,                 /* CASCADE  */
    CASCADED = 313,                /* CASCADED  */
    CASE = 314,                    /* CASE  */
    CAST = 315,                    /* CAST  */
    CATALOG_P = 316,               /* CATALOG_P  */
    CHAIN = 317,                   /* CHAIN  */
    CHAR_P = 318,                  /* CHAR_P  */
    CHARACTER = 319,               /* CHARACTER  */
    CHARACTERISTICS = 320,         /* CHARACTERISTICS  */
    CHECK_P = 321,                 /* CHECK_P  */
    CHECKPOINT = 322,              /* CHECKPOINT  */
    CLASS = 323,                   /* CLASS  */
    CLOSE = 324,                   /* CLOSE  */
    CLUSTER = 325,                 /* CLUSTER  */
    COALESCE = 326,                /* COALESCE  */
    COLLATE = 327,                 /* COLLATE  */
    COLLATION = 328,               /* COLLATION  */
    COLUMN = 329,                  /* COLUMN  */
    COLUMNS = 330,                 /* COLUMNS  */
    COMMENT = 331,                 /* COMMENT  */
    COMMENTS = 332,                /* COMMENTS  */
    COMMIT = 333,                  /* COMMIT  */
    COMMITTED = 334,               /* COMMITTED  */
    CONCURRENTLY = 335,            /* CONCURRENTLY  */
    CONFIGURATION = 336,           /* CONFIGURATION  */
    CONFLICT = 337,                /* CONFLICT  */
    CONNECTION = 338,              /* CONNECTION  */
    CONSTRAINT = 339,              /* CONSTRAINT  */
    CONSTRAINTS = 340,             /* CONSTRAINTS  */
    CONTENT_P = 341,               /* CONTENT_P  */
    CONTINUE_P = 342,              /* CONTINUE_P  */
    CONVERSION_P = 343,            /* CONVERSION_P  */
    COPY = 344,                    /* COPY  */
    COST = 345,                    /* COST  */
    CREATE_P = 346,                /* CREATE_P  */
    CROSS = 347,                   /* CROSS  */
    CSV = 348,                     /* CSV  */
    CUBE = 349,                    /* CUBE  */
    CURRENT_P = 350,               /* CURRENT_P  */
    CURRENT_CATALOG = 351,         /* CURRENT_CATALOG  */
    CURRENT_DATE = 352,            /* CURRENT_DATE  */
    CURRENT_ROLE = 353,            /* CURRENT_ROLE  */
    CURRENT_SCHEMA = 354,          /* CURRENT_SCHEMA  */
    CURRENT_TIME = 355,            /* CURRENT_TIME  */
    CURRENT_TIMESTAMP = 356,       /* CURRENT_TIMESTAMP  */
    CURRENT_USER = 357,            /* CURRENT_USER  */
    CURSOR = 358,                  /* CURSOR  */
    CYCLE = 359,                   /* CYCLE  */
    DATA_P = 360,                  /* DATA_P  */
    DATABASE = 361,                /* DATABASE  */
    DAY_P = 362,                   /* DAY_P  */
    DEALLOCATE = 363,              /* DEALLOCATE  */
    DEC = 364,                     /* DEC  */
    DECIMAL_P = 365,               /* DECIMAL_P  */
    DECLARE = 366,                 /* DECLARE  */
    DEFAULT = 367,                 /* DEFAULT  */
    DEFAULTS = 368,                /* DEFAULTS  */
    DEFERRABLE = 369,              /* DEFERRABLE  */
    DEFERRED = 370,                /* DEFERRED  */
    DEFINER = 371,                 /* DEFINER  */
    DELETE_P = 372,                /* DELETE_P  */
    DELIMITER = 373,               /* DELIMITER  */
    DELIMITERS = 374,              /* DELIMITERS  */
    DEPENDS = 375,                 /* DEPENDS  */
    DESC_P = 376,                  /* DESC_P  */
    DESCRIBE = 377,                /* DESCRIBE  */
    DETACH = 378,                  /* DETACH  */
    DICTIONARY = 379,              /* DICTIONARY  */
    DISABLE_P = 380,               /* DISABLE_P  */
    DISCARD = 381,                 /* DISCARD  */
    DISTINCT = 382,                /* DISTINCT  */
    DO = 383,                      /* DO  */
    DOCUMENT_P = 384,              /* DOCUMENT_P  */
    DOMAIN_P = 385,                /* DOMAIN_P  */
    DOUBLE_P = 386,                /* DOUBLE_P  */
    DROP = 387,                    /* DROP  */
    EACH = 388,                    /* EACH  */
    ELSE = 389,                    /* ELSE  */
    ENABLE_P = 390,                /* ENABLE_P  */
    ENCODING = 391,                /* ENCODING  */
    ENCRYPTED = 392,               /* ENCRYPTED  */
    END_P = 393,                   /* END_P  */
    ENUM_P = 394,                  /* ENUM_P  */
    ESCAPE = 395,                  /* ESCAPE  */
    EVENT = 396,                   /* EVENT  */
    EXCEPT = 397,                  /* EXCEPT  */
    EXCLUDE = 398,                 /* EXCLUDE  */
    EXCLUDING = 399,               /* EXCLUDING  */
    EXCLUSIVE = 400,               /* EXCLUSIVE  */
    EXECUTE = 401,                 /* EXECUTE  */
    EXISTS = 402,                  /* EXISTS  */
    EXPLAIN = 403,                 /* EXPLAIN  */
    EXPORT_P = 404,                /* EXPORT_P  */
    EXTENSION = 405,               /* EXTENSION  */
    EXTERNAL = 406,                /* EXTERNAL  */
    EXTRACT = 407,                 /* EXTRACT  */
    FALSE_P = 408,                 /* FALSE_P  */
    FAMILY = 409,                  /* FAMILY  */
    FETCH = 410,                   /* FETCH  */
    FILTER = 411,                  /* FILTER  */
    FIRST_P = 412,                 /* FIRST_P  */
    FLOAT_P = 413,                 /* FLOAT_P  */
    FOLLOWING = 414,               /* FOLLOWING  */
    FOR = 415,                     /* FOR  */
    FORCE = 416,                   /* FORCE  */
    FOREIGN = 417,                 /* FOREIGN  */
    FORWARD = 418,                 /* FORWARD  */
    FREEZE = 419,                  /* FREEZE  */
    FROM = 420,                    /* FROM  */
    FULL = 421,                    /* FULL  */
    FUNCTION = 422,                /* FUNCTION  */
    FUNCTIONS = 423,               /* FUNCTIONS  */
    GENERATED = 424,               /* GENERATED  */
    GLOB = 425,                    /* GLOB  */
    GLOBAL = 426,                  /* GLOBAL  */
    GRANT = 427,                   /* GRANT  */
    GRANTED = 428,                 /* GRANTED  */
    GROUP_P = 429,                 /* GROUP_P  */
    GROUPING = 430,                /* GROUPING  */
    HANDLER = 431,                 /* HANDLER  */
    HAVING = 432,                  /* HAVING  */
    HEADER_P = 433,                /* HEADER_P  */
    HOLD = 434,                    /* HOLD  */
    HOUR_P = 435,                  /* HOUR_P  */
    IDENTITY_P = 436,              /* IDENTITY_P  */
    IF_P = 437,                    /* IF_P  */
    ILIKE = 438,                   /* ILIKE  */
    IMMEDIATE = 439,               /* IMMEDIATE  */
    IMMUTABLE = 440,               /* IMMUTABLE  */
    IMPLICIT_P = 441,              /* IMPLICIT_P  */
    IMPORT_P = 442,                /* IMPORT_P  */
    IN_P = 443,                    /* IN_P  */
    INCLUDING = 444,               /* INCLUDING  */
    INCREMENT = 445,               /* INCREMENT  */
    INDEX = 446,                   /* INDEX  */
    INDEXES = 447,                 /* INDEXES  */
    INHERIT = 448,                 /* INHERIT  */
    INHERITS = 449,                /* INHERITS  */
    INITIALLY = 450,               /* INITIALLY  */
    INLINE_P = 451,                /* INLINE_P  */
    INNER_P = 452,                 /* INNER_P  */
    INOUT = 453,                   /* INOUT  */
    INPUT_P = 454,                 /* INPUT_P  */
    INSENSITIVE = 455,             /* INSENSITIVE  */
    INSERT = 456,                  /* INSERT  */
    INSTEAD = 457,                 /* INSTEAD  */
    INT_P = 458,                   /* INT_P  */
    INTEGER = 459,                 /* INTEGER  */
    INTERSECT = 460,               /* INTERSECT  */
    INTERVAL = 461,                /* INTERVAL  */
    INTO = 462,                    /* INTO  */
    INVOKER = 463,                 /* INVOKER  */
    IS = 464,                      /* IS  */
    ISNULL = 465,                  /* ISNULL  */
    ISOLATION = 466,               /* ISOLATION  */
    JOIN = 467,                    /* JOIN  */
    KEY = 468,                     /* KEY  */
    LABEL = 469,                   /* LABEL  */
    LANGUAGE = 470,                /* LANGUAGE  */
    LARGE_P = 471,                 /* LARGE_P  */
    LAST_P = 472,                  /* LAST_P  */
    LATERAL_P = 473,               /* LATERAL_P  */
    LEADING = 474,                 /* LEADING  */
    LEAKPROOF = 475,               /* LEAKPROOF  */
    LEFT = 476,                    /* LEFT  */
    LEVEL = 477,                   /* LEVEL  */
    LIKE = 478,                    /* LIKE  */
    LIMIT = 479,                   /* LIMIT  */
    LISTEN = 480,                  /* LISTEN  */
    LOAD = 481,                    /* LOAD  */
    LOCAL = 482,                   /* LOCAL  */
    LOCALTIME = 483,               /* LOCALTIME  */
    LOCALTIMESTAMP = 484,          /* LOCALTIMESTAMP  */
    LOCATION = 485,                /* LOCATION  */
    LOCK_P = 486,                  /* LOCK_P  */
    LOCKED = 487,                  /* LOCKED  */
    LOGGED = 488,                  /* LOGGED  */
    MAPPING = 489,                 /* MAPPING  */
    MATCH = 490,                   /* MATCH  */
    MATERIALIZED = 491,            /* MATERIALIZED  */
    MAXVALUE = 492,                /* MAXVALUE  */
    METHOD = 493,                  /* METHOD  */
    MINUTE_P = 494,                /* MINUTE_P  */
    MINVALUE = 495,                /* MINVALUE  */
    MODE = 496,                    /* MODE  */
    MONTH_P = 497,                 /* MONTH_P  */
    MOVE = 498,                    /* MOVE  */
    NAME_P = 499,                  /* NAME_P  */
    NAMES = 500,                   /* NAMES  */
    NATIONAL = 501,                /* NATIONAL  */
    NATURAL = 502,                 /* NATURAL  */
    NCHAR = 503,                   /* NCHAR  */
    NEW = 504,                     /* NEW  */
    NEXT = 505,                    /* NEXT  */
    NO = 506,                      /* NO  */
    NONE = 507,                    /* NONE  */
    NOT = 508,                     /* NOT  */
    NOTHING = 509,                 /* NOTHING  */
    NOTIFY = 510,                  /* NOTIFY  */
    NOTNULL = 511,                 /* NOTNULL  */
    NOWAIT = 512,                  /* NOWAIT  */
    NULL_P = 513,                  /* NULL_P  */
    NULLIF = 514,                  /* NULLIF  */
    NULLS_P = 515,                 /* NULLS_P  */
    NUMERIC = 516,                 /* NUMERIC  */
    OBJECT_P = 517,                /* OBJECT_P  */
    OF = 518,                      /* OF  */
    OFF = 519,                     /* OFF  */
    OFFSET = 520,                  /* OFFSET  */
    OIDS = 521,                    /* OIDS  */
    OLD = 522,                     /* OLD  */
    ON = 523,                      /* ON  */
    ONLY = 524,                    /* ONLY  */
    OPERATOR = 525,                /* OPERATOR  */
    OPTION = 526,                  /* OPTION  */
    OPTIONS = 527,                 /* OPTIONS  */
    OR = 528,                      /* OR  */
    ORDER = 529,                   /* ORDER  */
    ORDINALITY = 530,              /* ORDINALITY  */
    OUT_P = 531,                   /* OUT_P  */
    OUTER_P = 532,                 /* OUTER_P  */
    OVER = 533,                    /* OVER  */
    OVERLAPS = 534,                /* OVERLAPS  */
    OVERLAY = 535,                 /* OVERLAY  */
    OVERRIDING = 536,              /* OVERRIDING  */
    OWNED = 537,                   /* OWNED  */
    OWNER = 538,                   /* OWNER  */
    PARALLEL = 539,                /* PARALLEL  */
    PARSER = 540,                  /* PARSER  */
    PARTIAL = 541,                 /* PARTIAL  */
    PARTITION = 542,               /* PARTITION  */
    PASSING = 543,                 /* PASSING  */
    PASSWORD = 544,                /* PASSWORD  */
    PLACING = 545,                 /* PLACING  */
    PLANS = 546,                   /* PLANS  */
    POLICY = 547,                  /* POLICY  */
    POSITION = 548,                /* POSITION  */
    PRAGMA_P = 549,                /* PRAGMA_P  */
    PRECEDING = 550,               /* PRECEDING  */
    PRECISION = 551,               /* PRECISION  */
    PREPARE = 552,                 /* PREPARE  */
    PREPARED = 553,                /* PREPARED  */
    PRESERVE = 554,                /* PRESERVE  */
    PRIMARY = 555,                 /* PRIMARY  */
    PRIOR = 556,                   /* PRIOR  */
    PRIVILEGES = 557,              /* PRIVILEGES  */
    PROCEDURAL = 558,              /* PROCEDURAL  */
    PROCEDURE = 559,               /* PROCEDURE  */
    PROGRAM = 560,                 /* PROGRAM  */
    PUBLICATION = 561,             /* PUBLICATION  */
    QUOTE = 562,                   /* QUOTE  */
    RANGE = 563,                   /* RANGE  */
    READ_P = 564,                  /* READ_P  */
    REAL = 565,                    /* REAL  */
    REASSIGN = 566,                /* REASSIGN  */
    RECHECK = 567,                 /* RECHECK  */
    RECURSIVE = 568,               /* RECURSIVE  */
    REF = 569,                     /* REF  */
    REFERENCES = 570,              /* REFERENCES  */
    REFERENCING = 571,             /* REFERENCING  */
    REFRESH = 572,                 /* REFRESH  */
    REINDEX = 573,                 /* REINDEX  */
    RELATIVE_P = 574,              /* RELATIVE_P  */
    RELEASE = 575,                 /* RELEASE  */
    RENAME = 576,                  /* RENAME  */
    REPEATABLE = 577,              /* REPEATABLE  */
    REPLACE = 578,                 /* REPLACE  */
    REPLICA = 579,                 /* REPLICA  */
    RESET = 580,                   /* RESET  */
    RESTART = 581,                 /* RESTART  */
    RESTRICT = 582,                /* RESTRICT  */
    RETURNING = 583,               /* RETURNING  */
    RETURNS = 584,                 /* RETURNS  */
    REVOKE = 585,                  /* REVOKE  */
    RIGHT = 586,                   /* RIGHT  */
    ROLE = 587,                    /* ROLE  */
    ROLLBACK = 588,                /* ROLLBACK  */
    ROLLUP = 589,                  /* ROLLUP  */
    ROW = 590,                     /* ROW  */
    ROWS = 591,                    /* ROWS  */
    RULE = 592,                    /* RULE  */
    SAVEPOINT = 593,               /* SAVEPOINT  */
    SCHEMA = 594,                  /* SCHEMA  */
    SCHEMAS = 595,                 /* SCHEMAS  */
    SCROLL = 596,                  /* SCROLL  */
    SEARCH = 597,                  /* SEARCH  */
    SECOND_P = 598,                /* SECOND_P  */
    SECURITY = 599,                /* SECURITY  */
    SELECT = 600,                  /* SELECT  */
    SEQUENCE = 601,                /* SEQUENCE  */
    SEQUENCES = 602,               /* SEQUENCES  */
    SERIALIZABLE = 603,            /* SERIALIZABLE  */
    SERVER = 604,                  /* SERVER  */
    SESSION = 605,                 /* SESSION  */
    SESSION_USER = 606,            /* SESSION_USER  */
    SET = 607,                     /* SET  */
    SETOF = 608,                   /* SETOF  */
    SETS = 609,                    /* SETS  */
    SHARE = 610,                   /* SHARE  */
    SHOW = 611,                    /* SHOW  */
    SIMILAR = 612,                 /* SIMILAR  */
    SIMPLE = 613,                  /* SIMPLE  */
    SKIP = 614,                    /* SKIP  */
    SMALLINT = 615,                /* SMALLINT  */
    SNAPSHOT = 616,                /* SNAPSHOT  */
    SOME = 617,                    /* SOME  */
    SQL_P = 618,                   /* SQL_P  */
    STABLE = 619,                  /* STABLE  */
    STANDALONE_P = 620,            /* STANDALONE_P  */
    START = 621,                   /* START  */
    STATEMENT = 622,               /* STATEMENT  */
    STATISTICS = 623,              /* STATISTICS  */
    STDIN = 624,                   /* STDIN  */
    STDOUT = 625,                  /* STDOUT  */
    STORAGE = 626,                 /* STORAGE  */
    STRICT_P = 627,                /* STRICT_P  */
    STRIP_P = 628,                 /* STRIP_P  */
    SUBSCRIPTION = 629,            /* SUBSCRIPTION  */
    SUBSTRING = 630,               /* SUBSTRING  */
    SYMMETRIC = 631,               /* SYMMETRIC  */
    SYSID = 632,                   /* SYSID  */
    SYSTEM_P = 633,                /* SYSTEM_P  */
    TABLE = 634,                   /* TABLE  */
    TABLES = 635,                  /* TABLES  */
    TABLESAMPLE = 636,             /* TABLESAMPLE  */
    TABLESPACE = 637,              /* TABLESPACE  */
    TEMP = 638,                    /* TEMP  */
    TEMPLATE = 639,                /* TEMPLATE  */
    TEMPORARY = 640,               /* TEMPORARY  */
    TEXT_P = 641,                  /* TEXT_P  */
    THEN = 642,                    /* THEN  */
    TIME = 643,                    /* TIME  */
    TIMESTAMP = 644,               /* TIMESTAMP  */
    TO = 645,                      /* TO  */
    TRAILING = 646,                /* TRAILING  */
    TRANSACTION = 647,             /* TRANSACTION  */
    TRANSFORM = 648,               /* TRANSFORM  */
    TREAT = 649,                   /* TREAT  */
    TRIGGER = 650,                 /* TRIGGER  */
    TRIM = 651,                    /* TRIM  */
    TRUE_P = 652,                  /* TRUE_P  */
    TRUNCATE = 653,                /* TRUNCATE  */
    TRUSTED = 654,                 /* TRUSTED  */
    TYPE_P = 655,                  /* TYPE_P  */
    TYPES_P = 656,                 /* TYPES_P  */
    UNBOUNDED = 657,               /* UNBOUNDED  */
    UNCOMMITTED = 658,             /* UNCOMMITTED  */
    UNENCRYPTED = 659,             /* UNENCRYPTED  */
    UNION = 660,                   /* UNION  */
    UNIQUE = 661,                  /* UNIQUE  */
    UNKNOWN = 662,                 /* UNKNOWN  */
    UNLISTEN = 663,                /* UNLISTEN  */
    UNLOGGED = 664,                /* UNLOGGED  */
    UNTIL = 665,                   /* UNTIL  */
    UPDATE = 666,                  /* UPDATE  */
    USER = 667,                    /* USER  */
    USING = 668,                   /* USING  */
    VACUUM = 669,                  /* VACUUM  */
    VALID = 670,                   /* VALID  */
    VALIDATE = 671,                /* VALIDATE  */
    VALIDATOR = 672,               /* VALIDATOR  */
    VALUE_P = 673,                 /* VALUE_P  */
    VALUES = 674,                  /* VALUES  */
    VARCHAR = 675,                 /* VARCHAR  */
    VARIADIC = 676,                /* VARIADIC  */
    VARYING = 677,                 /* VARYING  */
    VERBOSE = 678,                 /* VERBOSE  */
    VERSION_P = 679,               /* VERSION_P  */
    VIEW = 680,                    /* VIEW  */
    VIEWS = 681,                   /* VIEWS  */
    VOLATILE = 682,                /* VOLATILE  */
    WHEN = 683,                    /* WHEN  */
    WHERE = 684,                   /* WHERE  */
    WHITESPACE_P = 685,            /* WHITESPACE_P  */
    WINDOW = 686,                  /* WINDOW  */
    WITH = 687,                    /* WITH  */
    WITHIN = 688,                  /* WITHIN  */
    WITHOUT = 689,                 /* WITHOUT  */
    WORK = 690,                    /* WORK  */
    WRAPPER = 691,                 /* WRAPPER  */
    WRITE_P = 692,                 /* WRITE_P  */
    XML_P = 693,                   /* XML_P  */
    XMLATTRIBUTES = 694,           /* XMLATTRIBUTES  */
    XMLCONCAT = 695,               /* XMLCONCAT  */
    XMLELEMENT = 696,              /* XMLELEMENT  */
    XMLEXISTS = 697,               /* XMLEXISTS  */
    XMLFOREST = 698,               /* XMLFOREST  */
    XMLNAMESPACES = 699,           /* XMLNAMESPACES  */
    XMLPARSE = 700,                /* XMLPARSE  */
    XMLPI = 701,                   /* XMLPI  */
    XMLROOT = 702,                 /* XMLROOT  */
    XMLSERIALIZE = 703,            /* XMLSERIALIZE  */
    XMLTABLE = 704,                /* XMLTABLE  */
    YEAR_P = 705,                  /* YEAR_P  */
    YES_P = 706,                   /* YES_P  */
    ZONE = 707,                    /* ZONE  */
    NOT_LA = 708,                  /* NOT_LA  */
    NULLS_LA = 709,                /* NULLS_LA  */
    WITH_LA = 710,                 /* WITH_LA  */
    POSTFIXOP = 711,               /* POSTFIXOP  */
    UMINUS = 712                   /* UMINUS  */
  };
  typedef enum yytokentype yytoken_kind_t;
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 14 "third_party/libpg_query/grammar/grammar.y"

	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;

#line 787 "third_party/libpg_query/grammar/grammar_out.cpp"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int base_yyparse (core_yyscan_t yyscanner);

#endif /* !YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED  */
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_LESS_EQUALS = 15,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 16,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 17,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 18,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 19,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 20,                    /* ACCESS  */
  YYSYMBOL_ACTION = 21,                    /* ACTION  */
  YYSYMBOL_ADD_P = 22,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 23,                     /* ADMIN  */
  YYSYMBOL_AFTER = 24,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 25,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 26,                       /* ALL  */
  YYSYMBOL_ALSO = 27,                      /* ALSO  */
  YYSYMBOL_ALTER = 28,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 29,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 30,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 31,                   /* ANALYZE  */
  YYSYMBOL_AND = 32,                       /* AND  */
  YYSYMBOL_ANY = 33,                       /* ANY  */
  YYSYMBOL_ARRAY = 34,                     /* ARRAY  */
  YYSYMBOL_AS = 35,                        /* AS  */
  YYSYMBOL_ASC_P = 36,                     /* ASC_P  */
  YYSYMBOL_ASSERTION = 37,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 38,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 39,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 40,                        /* AT  */
  YYSYMBOL_ATTACH = 41,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 42,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 43,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 44,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 45,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 46,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 47,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 48,                    /* BIGINT  */
  YYSYMBOL_BINARY = 49,                    /* BINARY  */
  YYSYMBOL_BIT = 50,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 51,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 52,                      /* BOTH  */
  YYSYMBOL_BY = 53,                        /* BY  */
  YYSYMBOL_CACHE = 54,                     /* CACHE  */
  YYSYMBOL_CALL_P = 55,                    /* CALL_P  */
  YYSYMBOL_CALLED = 56,                    /* CALLED  */
  YYSYMBOL_CASCADE = 57,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 58,                  /* CASCADED  */
  YYSYMBOL_CASE = 59,                      /* CASE  */
  YYSYMBOL_CAST = 60,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 61,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 62,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 63,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 64,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 65,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 66,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 67,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 68,                     /* CLASS  */
  YYSYMBOL_CLOSE = 69,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 70,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 71,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 72,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 73,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 74,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 75,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 76,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 77,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 78,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 79,                 /* COMMITTED  */
  YYSYMBOL_CONCURRENTLY = 80,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 81,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 82,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 83,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 84,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 85,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 86,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 87,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 88,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 89,                      /* COPY  */
  YYSYMBOL_COST = 90,                      /* COST  */
  YYSYMBOL_CREATE_P = 91,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 92,                     /* CROSS  */
  YYSYMBOL_CSV = 93,                       /* CSV  */
  YYSYMBOL_CUBE = 94,                      /* CUBE  */
  YYSYMBOL_CURRENT_P = 95,                 /* CURRENT_P  */
  YYSYMBOL_CURRENT_CATALOG = 96,           /* CURRENT_CATALOG  */
  YYSYMBOL_CURRENT_DATE = 97,              /* CURRENT_DATE  */
  YYSYMBOL_CURRENT_ROLE = 98,              /* CURRENT_ROLE  */
  YYSYMBOL_CURRENT_SCHEMA = 99,            /* CURRENT_SCHEMA  */
  YYSYMBOL_CURRENT_TIME = 100,             /* CURRENT_TIME  */
  YYSYMBOL_CURRENT_TIMESTAMP = 101,        /* CURRENT_TIMESTAMP  */
  YYSYMBOL_CURRENT_USER = 102,             /* CURRENT_USER  */
  YYSYMBOL_CURSOR = 103,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 104,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 105,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 106,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 107,                    /* DAY_P  */
  YYSYMBOL_DEALLOCATE = 108,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 109,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 110,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 111,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 112,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 113,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 114,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 115,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 116,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 117,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 118,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 119,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 120,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 121,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 122,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 123,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 124,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 125,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 126,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 127,                 /* DISTINCT  */
  YYSYMBOL_DO = 128,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 129,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 130,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 131,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 132,                     /* DROP  */
  YYSYMBOL_EACH = 133,                     /* EACH  */
  YYSYMBOL_ELSE = 134,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 135,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 136,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 137,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 138,                    /* END_P  */
  YYSYMBOL_ENUM_P = 139,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 140,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 141,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 142,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 143,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 144,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 145,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 146,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 147,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 148,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 149,                 /* EXPORT_P  */
  YYSYMBOL_EXTENSION = 150,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 151,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 152,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 153,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 154,                   /* FAMILY  */
  YYSYMBOL_FETCH = 155,                    /* FETCH  */
  YYSYMBOL_FILTER = 156,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 157,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 158,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 159,                /* FOLLOWING  */
  YYSYMBOL_FOR = 160,                      /* FOR  */
  YYSYMBOL_FORCE = 161,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 162,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 163,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 164,                   /* FREEZE  */
  YYSYMBOL_FROM = 165,                     /* FROM  */
  YYSYMBOL_FULL = 166,                     /* FULL  */
  YYSYMBOL_FUNCTION = 167,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 168,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 169,                /* GENERATED  */
  YYSYMBOL_GLOB = 170,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 171,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 172,                    /* GRANT  */
  YYSYMBOL_GRANTED = 173,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 174,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 175,                 /* GROUPING  */
  YYSYMBOL_HANDLER = 176,                  /* HANDLER  */
  YYSYMBOL_HAVING = 177,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 178,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 179,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 180,                   /* HOUR_P  */
  YYSYMBOL_IDENTITY_P = 181,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 182,                     /* IF_P  */
  YYSYMBOL_ILIKE = 183,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 184,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 185,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 186,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 187,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 188,                     /* IN_P  */
  YYSYMBOL_INCLUDING = 189,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 190,                /* INCREMENT  */
  YYSYMBOL_INDEX = 191,                    /* INDEX  */
  YYSYMBOL_INDEXES = 192,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 193,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 194,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 195,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 196,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 197,                  /* INNER_P  */
  YYSYMBOL_INOUT = 198,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 199,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 200,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 201,                   /* INSERT  */
  YYSYMBOL_INSTEAD = 202,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 203,                    /* INT_P  */
  YYSYMBOL_INTEGER = 204,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 205,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 206,                 /* INTERVAL  */
  YYSYMBOL_INTO = 207,                     /* INTO  */
  YYSYMBOL_INVOKER = 208,                  /* INVOKER  */
  YYSYMBOL_IS = 209,                       /* IS  */
  YYSYMBOL_ISNULL = 210,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 211,                /* ISOLATION  */
  YYSYMBOL_JOIN = 212,                     /* JOIN  */
  YYSYMBOL_KEY = 213,                      /* KEY  */
  YYSYMBOL_LABEL = 214,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 215,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 216,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 217,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 218,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 219,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 220,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 221,                     /* LEFT  */
  YYSYMBOL_LEVEL = 222,                    /* LEVEL  */
  YYSYMBOL_LIKE = 223,                     /* LIKE  */
  YYSYMBOL_LIMIT = 224,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 225,                   /* LISTEN  */
  YYSYMBOL_LOAD = 226,                     /* LOAD  */
  YYSYMBOL_LOCAL = 227,                    /* LOCAL  */
  YYSYMBOL_LOCALTIME = 228,                /* LOCALTIME  */
  YYSYMBOL_LOCALTIMESTAMP = 229,           /* LOCALTIMESTAMP  */
  YYSYMBOL_LOCATION = 230,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 231,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 232,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 233,                   /* LOGGED  */
  YYSYMBOL_MAPPING = 234,                  /* MAPPING  */
  YYSYMBOL_MATCH = 235,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 236,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 237,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 238,                   /* METHOD  */
  YYSYMBOL_MINUTE_P = 239,                 /* MINUTE_P  */
  YYSYMBOL_MINVALUE = 240,                 /* MINVALUE  */
  YYSYMBOL_MODE = 241,                     /* MODE  */
  YYSYMBOL_MONTH_P = 242,                  /* MONTH_P  */
  YYSYMBOL_MOVE = 243,                     /* MOVE  */
  YYSYMBOL_NAME_P = 244,                   /* NAME_P  */
  YYSYMBOL_NAMES = 245,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 246,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 247,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 248,                    /* NCHAR  */
  YYSYMBOL_NEW = 249,                      /* NEW  */
  YYSYMBOL_NEXT = 250,                     /* NEXT  */
  YYSYMBOL_NO = 251,                       /* NO  */
  YYSYMBOL_NONE = 252,                     /* NONE  */
  YYSYMBOL_NOT = 253,                      /* NOT  */
  YYSYMBOL_NOTHING = 254,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 255,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 256,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 257,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 258,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 259,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 260,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 261,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 262,                 /* OBJECT_P  */
  YYSYMBOL_OF = 263,                       /* OF  */
  YYSYMBOL_OFF = 264,                      /* OFF  */
  YYSYMBOL_OFFSET = 265,                   /* OFFSET  */
  YYSYMBOL_OIDS = 266,                     /* OIDS  */
  YYSYMBOL_OLD = 267,                      /* OLD  */
  YYSYMBOL_ON = 268,                       /* ON  */
  YYSYMBOL_ONLY = 269,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 270,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 271,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 272,                  /* OPTIONS  */
  YYSYMBOL_OR = 273,                       /* OR  */
  YYSYMBOL_ORDER = 274,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 275,               /* ORDINALITY  */
  YYSYMBOL_OUT_P = 276,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 277,                  /* OUTER_P  */
  YYSYMBOL_OVER = 278,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 279,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 280,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 281,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 282,                    /* OWNED  */
  YYSYMBOL_OWNER = 283,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 284,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 285,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 286,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 287,                /* PARTITION  */
  YYSYMBOL_PASSING = 288,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 289,                 /* PASSWORD  */
  YYSYMBOL_PLACING = 290,                  /* PLACING  */
  YYSYMBOL_PLANS = 291,                    /* PLANS  */
  YYSYMBOL_POLICY = 292,                   /* POLICY  */
  YYSYMBOL_POSITION = 293,                 /* POSITION  */
  YYSYMBOL_PRAGMA_P = 294,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 295,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 296,                /* PRECISION  */
  YYSYMBOL_PREPARE = 297,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 298,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 299,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 300,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 301,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 302,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 303,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 304,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 305,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 306,              /* PUBLICATION  */
  YYSYMBOL_QUOTE = 307,                    /* QUOTE  */
  YYSYMBOL_RANGE = 308,                    /* RANGE  */
  YYSYMBOL_READ_P = 309,                   /* READ_P  */
  YYSYMBOL_REAL = 310,                     /* REAL  */
  YYSYMBOL_REASSIGN = 311,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 312,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 313,                /* RECURSIVE  */
  YYSYMBOL_REF = 314,                      /* REF  */
  YYSYMBOL_REFERENCES = 315,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 316,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 317,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 318,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 319,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 320,                  /* RELEASE  */
  YYSYMBOL_RENAME = 321,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 322,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 323,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 324,                  /* REPLICA  */
  YYSYMBOL_RESET = 325,                    /* RESET  */
  YYSYMBOL_RESTART = 326,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 327,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 328,                /* RETURNING  */
  YYSYMBOL_RETURNS = 329,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 330,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 331,                    /* RIGHT  */
  YYSYMBOL_ROLE = 332,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 333,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 334,                   /* ROLLUP  */
  YYSYMBOL_ROW = 335,                      /* ROW  */
  YYSYMBOL_ROWS = 336,                     /* ROWS  */
  YYSYMBOL_RULE = 337,                     /* RULE  */
  YYSYMBOL_SAVEPOINT = 338,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 339,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 340,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 341,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 342,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 343,                 /* SECOND_P  */
  YYSYMBOL_SECURITY = 344,                 /* SECURITY  */
  YYSYMBOL_SELECT = 345,                   /* SELECT  */
  YYSYMBOL_SEQUENCE = 346,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 347,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 348,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 349,                   /* SERVER  */
  YYSYMBOL_SESSION = 350,                  /* SESSION  */
  YYSYMBOL_SESSION_USER = 351,             /* SESSION_USER  */
  YYSYMBOL_SET = 352,                      /* SET  */
  YYSYMBOL_SETOF = 353,                    /* SETOF  */
  YYSYMBOL_SETS = 354,                     /* SETS  */
  YYSYMBOL_SHARE = 355,                    /* SHARE  */
  YYSYMBOL_SHOW = 356,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 357,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 358,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 359,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 360,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 361,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 362,                     /* SOME  */
  YYSYMBOL_SQL_P = 363,                    /* SQL_P  */
  YYSYMBOL_STABLE = 364,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 365,             /* STANDALONE_P  */
  YYSYMBOL_START = 366,                    /* START  */
  YYSYMBOL_STATEMENT = 367,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 368,               /* STATISTICS  */
  YYSYMBOL_STDIN = 369,                    /* STDIN  */
  YYSYMBOL_STDOUT = 370,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 371,                  /* STORAGE  */
  YYSYMBOL_STRICT_P = 372,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 373,                  /* STRIP_P  */
  YYSYMBOL_SUBSCRIPTION = 374,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 375,                /* SUBSTRING  */
  YYSYMBOL_SYMMETRIC = 376,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 377,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 378,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 379,                    /* TABLE  */
  YYSYMBOL_TABLES = 380,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 381,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 382,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 383,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 384,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 385,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 386,                   /* TEXT_P  */
  YYSYMBOL_THEN = 387,                     /* THEN  */
  YYSYMBOL_TIME = 388,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 389,                /* TIMESTAMP  */
  YYSYMBOL_TO = 390,                       /* TO  */
  YYSYMBOL_TRAILING = 391,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 392,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 393,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 394,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 395,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 396,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 397,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 398,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 399,                  /* TRUSTED  */
  YYSYMBOL_TYPE_P = 400,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 401,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 402,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 403,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 404,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 405,                    /* UNION  */
  YYSYMBOL_UNIQUE = 406,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 407,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 408,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 409,                 /* UNLOGGED  */
  YYSYMBOL_UNTIL = 410,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 411,                   /* UPDATE  */
  YYSYMBOL_USER = 412,                     /* USER  */
  YYSYMBOL_USING = 413,                    /* USING  */
  YYSYMBOL_VACUUM = 414,                   /* VACUUM  */
  YYSYMBOL_VALID = 415,                    /* VALID  */
  YYSYMBOL_VALIDATE = 416,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 417,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 418,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 419,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 420,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 421,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 422,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 423,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 424,                /* VERSION_P  */
  YYSYMBOL_VIEW = 425,                     /* VIEW  */
  YYSYMBOL_VIEWS = 426,                    /* VIEWS  */
  YYSYMBOL_VOLATILE = 427,                 /* VOLATILE  */
  YYSYMBOL_WHEN = 428,                     /* WHEN  */
  YYSYMBOL_WHERE = 429,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 430,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 431,                   /* WINDOW  */
  YYSYMBOL_WITH = 432,                     /* WITH  */
  YYSYMBOL_WITHIN = 433,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 434,                  /* WITHOUT  */
  YYSYMBOL_WORK = 435,                     /* WORK  */
  YYSYMBOL_WRAPPER = 436,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 437,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 438,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 439,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 440,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 441,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 442,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 443,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 444,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 445,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 446,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 447,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 448,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 449,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 450,                   /* YEAR_P  */
  YYSYMBOL_YES_P = 451,                    /* YES_P  */
  YYSYMBOL_ZONE = 452,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 453,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 454,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 455,                  /* WITH_LA  */
  YYSYMBOL_456_ = 456,                     /* '<'  */
  YYSYMBOL_457_ = 457,                     /* '>'  */
  YYSYMBOL_458_ = 458,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 459,                /* POSTFIXOP  */
  YYSYMBOL_460_ = 460,                     /* '+'  */
  YYSYMBOL_461_ = 461,                     /* '-'  */
  YYSYMBOL_462_ = 462,                     /* '*'  */
  YYSYMBOL_463_ = 463,                     /* '/'  */
  YYSYMBOL_464_ = 464,                     /* '%'  */
  YYSYMBOL_465_ = 465,                     /* '^'  */
  YYSYMBOL_UMINUS = 466,                   /* UMINUS  */
  YYSYMBOL_467_ = 467,                     /* '['  */
  YYSYMBOL_468_ = 468,                     /* ']'  */
  YYSYMBOL_469_ = 469,                     /* '('  */
  YYSYMBOL_470_ = 470,                     /* ')'  */
  YYSYMBOL_471_ = 471,                     /* '.'  */
  YYSYMBOL_472_ = 472,                     /* ';'  */
  YYSYMBOL_473_ = 473,                     /* ','  */
  YYSYMBOL_474_ = 474,                     /* '?'  */
  YYSYMBOL_475_ = 475,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 476,                 /* $accept  */
  YYSYMBOL_stmtblock = 477,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 478,                /* stmtmulti  */
  YYSYMBOL_stmt = 479,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 480,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 481,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 482,               /* SeqOptList  */
  YYSYMBOL_opt_with = 483,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 484,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 485,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 486,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 487,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 488,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 489, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 490,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 491, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 492, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 493,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 494,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 495, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 496,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 497,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 498,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 499,              /* AnalyzeStmt  */
  YYSYMBOL_CallStmt = 500,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 501,           /* CheckPointStmt  */
  YYSYMBOL_CopyStmt = 502,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 503,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 504,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 505, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 506,                /* opt_using  */
  YYSYMBOL_opt_as = 507,                   /* opt_as  */
  YYSYMBOL_opt_program = 508,              /* opt_program  */
  YYSYMBOL_copy_options = 509,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 510,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 511,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 512,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 513,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 514,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 515,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 516, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 517,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 518,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 519,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 520,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 521,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 522, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 523,       /* generic_option_arg  */
  YYSYMBOL_key_action = 524,               /* key_action  */
  YYSYMBOL_ColConstraint = 525,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 526,        /* ColConstraintElem  */
  YYSYMBOL_generic_option_elem = 527,      /* generic_option_elem  */
  YYSYMBOL_key_update = 528,               /* key_update  */
  YYSYMBOL_key_actions = 529,              /* key_actions  */
  YYSYMBOL_create_generic_options = 530,   /* create_generic_options  */
  YYSYMBOL_OnCommitOption = 531,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 532,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 533,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 534,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 535,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 536,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 537,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 538,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 539,                  /* OptWith  */
  YYSYMBOL_definition = 540,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 541,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 542,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 543,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 544,                /* columnDef  */
  YYSYMBOL_generic_option_list = 545,      /* generic_option_list  */
  YYSYMBOL_def_list = 546,                 /* def_list  */
  YYSYMBOL_index_name = 547,               /* index_name  */
  YYSYMBOL_TableElement = 548,             /* TableElement  */
  YYSYMBOL_def_elem = 549,                 /* def_elem  */
  YYSYMBOL_opt_definition = 550,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 551,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 552,               /* columnElem  */
  YYSYMBOL_opt_column_list = 553,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 554,              /* ColQualList  */
  YYSYMBOL_key_delete = 555,               /* key_delete  */
  YYSYMBOL_reloption_elem = 556,           /* reloption_elem  */
  YYSYMBOL_columnList = 557,               /* columnList  */
  YYSYMBOL_func_type = 558,                /* func_type  */
  YYSYMBOL_ConstraintElem = 559,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 560,         /* TableElementList  */
  YYSYMBOL_key_match = 561,                /* key_match  */
  YYSYMBOL_TableLikeClause = 562,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 563,                  /* OptTemp  */
  YYSYMBOL_generated_when = 564,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 565,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 566,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 567,         /* create_as_target  */
  YYSYMBOL_CreateSchemaStmt = 568,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 569,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 570,              /* schema_stmt  */
  YYSYMBOL_CreateSeqStmt = 571,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 572,            /* OptSeqOptList  */
  YYSYMBOL_DeallocateStmt = 573,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 574,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 575,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 576,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 577,             /* using_clause  */
  YYSYMBOL_DropStmt = 578,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 579,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 580,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 581,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 582,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 583, /* drop_type_name_on_any_name  */
  YYSYMBOL_ExecuteStmt = 584,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_clause = 585,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 586,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 587,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 588,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 589,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 590,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 591, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 592,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 593,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 594,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 595,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 596,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 597,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 598,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 599,                /* IndexStmt  */
  YYSYMBOL_access_method = 600,            /* access_method  */
  YYSYMBOL_access_method_clause = 601,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 602,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 603,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 604,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 605,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 606,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 607,              /* insert_rest  */
  YYSYMBOL_insert_target = 608,            /* insert_target  */
  YYSYMBOL_opt_conf_expr = 609,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 610,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 611,       /* insert_column_item  */
  YYSYMBOL_set_clause = 612,               /* set_clause  */
  YYSYMBOL_opt_on_conflict = 613,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 614,               /* index_elem  */
  YYSYMBOL_returning_clause = 615,         /* returning_clause  */
  YYSYMBOL_override_kind = 616,            /* override_kind  */
  YYSYMBOL_set_target_list = 617,          /* set_target_list  */
  YYSYMBOL_opt_collate = 618,              /* opt_collate  */
  YYSYMBOL_opt_class = 619,                /* opt_class  */
  YYSYMBOL_insert_column_list = 620,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 621,          /* set_clause_list  */
  YYSYMBOL_index_params = 622,             /* index_params  */
  YYSYMBOL_set_target = 623,               /* set_target  */
  YYSYMBOL_LoadStmt = 624,                 /* LoadStmt  */
  YYSYMBOL_file_name = 625,                /* file_name  */
  YYSYMBOL_PragmaStmt = 626,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 627,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 628,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 629,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 630,               /* RenameStmt  */
  YYSYMBOL_opt_column = 631,               /* opt_column  */
  YYSYMBOL_SelectStmt = 632,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 633,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 634,         /* select_no_parens  */
  YYSYMBOL_select_clause = 635,            /* select_clause  */
  YYSYMBOL_simple_select = 636,            /* simple_select  */
  YYSYMBOL_with_clause = 637,              /* with_clause  */
  YYSYMBOL_cte_list = 638,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 639,        /* common_table_expr  */
  YYSYMBOL_into_clause = 640,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 641,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 642,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 643,          /* all_or_distinct  */
  YYSYMBOL_distinct_clause = 644,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 645,           /* opt_all_clause  */
  YYSYMBOL_opt_sort_clause = 646,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 647,              /* sort_clause  */
  YYSYMBOL_sortby_list = 648,              /* sortby_list  */
  YYSYMBOL_sortby = 649,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 650,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 651,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 652,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 653,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 654,             /* limit_clause  */
  YYSYMBOL_offset_clause = 655,            /* offset_clause  */
  YYSYMBOL_select_limit_value = 656,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 657,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 658, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 659,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 660,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 661,            /* first_or_next  */
  YYSYMBOL_group_clause = 662,             /* group_clause  */
  YYSYMBOL_group_by_list = 663,            /* group_by_list  */
  YYSYMBOL_group_by_item = 664,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 665,       /* empty_grouping_set  */
  YYSYMBOL_having_clause = 666,            /* having_clause  */
  YYSYMBOL_for_locking_clause = 667,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 668,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 669,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 670,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 671,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 672,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 673,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 674,            /* values_clause  */
  YYSYMBOL_from_clause = 675,              /* from_clause  */
  YYSYMBOL_from_list = 676,                /* from_list  */
  YYSYMBOL_table_ref = 677,                /* table_ref  */
  YYSYMBOL_joined_table = 678,             /* joined_table  */
  YYSYMBOL_alias_clause = 679,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 680,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 681,        /* func_alias_clause  */
  YYSYMBOL_join_type = 682,                /* join_type  */
  YYSYMBOL_join_outer = 683,               /* join_outer  */
  YYSYMBOL_join_qual = 684,                /* join_qual  */
  YYSYMBOL_relation_expr = 685,            /* relation_expr  */
  YYSYMBOL_tablesample_clause = 686,       /* tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 687,    /* opt_repeatable_clause  */
  YYSYMBOL_func_table = 688,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 689,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 690,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 691,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 692,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 693,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 694,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 695,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 696,       /* opt_collate_clause  */
  YYSYMBOL_Typename = 697,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 698,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 699,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 700,            /* ConstTypename  */
  YYSYMBOL_GenericType = 701,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 702,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 703,                  /* Numeric  */
  YYSYMBOL_opt_float = 704,                /* opt_float  */
  YYSYMBOL_Bit = 705,                      /* Bit  */
  YYSYMBOL_ConstBit = 706,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 707,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 708,         /* BitWithoutLength  */
  YYSYMBOL_Character = 709,                /* Character  */
  YYSYMBOL_ConstCharacter = 710,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 711,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 712,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 713,                /* character  */
  YYSYMBOL_opt_varying = 714,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 715,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 716,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 717,             /* opt_timezone  */
  YYSYMBOL_opt_interval = 718,             /* opt_interval  */
  YYSYMBOL_interval_second = 719,          /* interval_second  */
  YYSYMBOL_a_expr = 720,                   /* a_expr  */
  YYSYMBOL_b_expr = 721,                   /* b_expr  */
  YYSYMBOL_c_expr = 722,                   /* c_expr  */
  YYSYMBOL_func_application = 723,         /* func_application  */
  YYSYMBOL_func_expr = 724,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 725,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 726, /* func_expr_common_subexpr  */
  YYSYMBOL_within_group_clause = 727,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 728,            /* filter_clause  */
  YYSYMBOL_window_clause = 729,            /* window_clause  */
  YYSYMBOL_window_definition_list = 730,   /* window_definition_list  */
  YYSYMBOL_window_definition = 731,        /* window_definition  */
  YYSYMBOL_over_clause = 732,              /* over_clause  */
  YYSYMBOL_window_specification = 733,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 734, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 735,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 736,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 737,             /* frame_extent  */
  YYSYMBOL_frame_bound = 738,              /* frame_bound  */
  YYSYMBOL_row = 739,                      /* row  */
  YYSYMBOL_sub_type = 740,                 /* sub_type  */
  YYSYMBOL_all_Op = 741,                   /* all_Op  */
  YYSYMBOL_MathOp = 742,                   /* MathOp  */
  YYSYMBOL_qual_Op = 743,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 744,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 745,              /* subquery_Op  */
  YYSYMBOL_any_operator = 746,             /* any_operator  */
  YYSYMBOL_expr_list = 747,                /* expr_list  */
  YYSYMBOL_func_arg_list = 748,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 749,            /* func_arg_expr  */
  YYSYMBOL_type_list = 750,                /* type_list  */
  YYSYMBOL_extract_list = 751,             /* extract_list  */
  YYSYMBOL_extract_arg = 752,              /* extract_arg  */
  YYSYMBOL_overlay_list = 753,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 754,          /* overlay_placing  */
  YYSYMBOL_position_list = 755,            /* position_list  */
  YYSYMBOL_substr_list = 756,              /* substr_list  */
  YYSYMBOL_substr_from = 757,              /* substr_from  */
  YYSYMBOL_substr_for = 758,               /* substr_for  */
  YYSYMBOL_trim_list = 759,                /* trim_list  */
  YYSYMBOL_in_expr = 760,                  /* in_expr  */
  YYSYMBOL_case_expr = 761,                /* case_expr  */
  YYSYMBOL_when_clause_list = 762,         /* when_clause_list  */
  YYSYMBOL_when_clause = 763,              /* when_clause  */
  YYSYMBOL_case_default = 764,             /* case_default  */
  YYSYMBOL_case_arg = 765,                 /* case_arg  */
  YYSYMBOL_columnref = 766,                /* columnref  */
  YYSYMBOL_indirection_el = 767,           /* indirection_el  */
  YYSYMBOL_opt_slice_bound = 768,          /* opt_slice_bound  */
  YYSYMBOL_indirection = 769,              /* indirection  */
  YYSYMBOL_opt_indirection = 770,          /* opt_indirection  */
  YYSYMBOL_opt_asymmetric = 771,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list = 772,          /* opt_target_list  */
  YYSYMBOL_target_list = 773,              /* target_list  */
  YYSYMBOL_target_el = 774,                /* target_el  */
  YYSYMBOL_qualified_name_list = 775,      /* qualified_name_list  */
  YYSYMBOL_qualified_name = 776,           /* qualified_name  */
  YYSYMBOL_name_list = 777,                /* name_list  */
  YYSYMBOL_name = 778,                     /* name  */
  YYSYMBOL_attr_name = 779,                /* attr_name  */
  YYSYMBOL_func_name = 780,                /* func_name  */
  YYSYMBOL_AexprConst = 781,               /* AexprConst  */
  YYSYMBOL_Iconst = 782,                   /* Iconst  */
  YYSYMBOL_Sconst = 783,                   /* Sconst  */
  YYSYMBOL_ColId = 784,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 785,            /* ColIdOrString  */
  YYSYMBOL_type_function_name = 786,       /* type_function_name  */
  YYSYMBOL_any_name = 787,                 /* any_name  */
  YYSYMBOL_attrs = 788,                    /* attrs  */
  YYSYMBOL_opt_name_list = 789,            /* opt_name_list  */
  YYSYMBOL_param_name = 790,               /* param_name  */
  YYSYMBOL_ColLabel = 791,                 /* ColLabel  */
  YYSYMBOL_ColLabelOrString = 792,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 793,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 794,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 795,               /* UpdateStmt  */
  YYSYMBOL_VacuumStmt = 796,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 797,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 798,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 799,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 800,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 801,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 802,            /* generic_reset  */
  YYSYMBOL_reset_rest = 803,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 804,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 805,                 /* set_rest  */
  YYSYMBOL_generic_set = 806,              /* generic_set  */
  YYSYMBOL_var_value = 807,                /* var_value  */
  YYSYMBOL_zone_value = 808,               /* zone_value  */
  YYSYMBOL_var_list = 809,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 810,         /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 811,         /* show_or_describe  */
  YYSYMBOL_var_name = 812,                 /* var_name  */
  YYSYMBOL_ViewStmt = 813,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 814,         /* opt_check_option  */
  YYSYMBOL_CreateFunctionStmt = 815,       /* CreateFunctionStmt  */
  YYSYMBOL_unreserved_keyword = 816,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 817,         /* col_name_keyword  */
  YYSYMBOL_type_func_name_keyword = 818,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 819          /* reserved_keyword  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  552
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   45527

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  476
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  344
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1565
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  2616

#define YYMAXUTOK   712


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,   464,     2,     2,
     469,   470,   462,   460,   473,   461,   471,   463,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   475,   472,
     456,   458,   457,   474,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   467,     2,   468,   465,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   459,   466
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   453,   453,   469,   481,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   524,     7,
      16,    25,    34,    43,    52,     9,    17,    29,    30,    34,
      35,    36,    41,    42,    43,    48,    52,    56,    60,    64,
      68,    72,    76,    80,    84,    88,    92,    97,   101,   105,
     112,   113,   117,   118,   119,     9,    18,    27,    36,    45,
      54,    63,    72,    85,    87,    93,    94,    99,   103,   107,
     118,   126,   130,   139,   148,   157,   166,   175,   184,   192,
     200,   209,   218,   227,   236,   253,   262,   271,   280,   290,
     303,   318,   327,   335,   350,   358,   368,   378,   385,   392,
     400,   407,   418,   419,   424,   428,   433,   438,   446,   447,
     452,   456,   457,     9,    19,     6,     5,     1,    30,    53,
      54,    59,    63,    68,    72,    80,    81,    85,    86,    91,
      92,    96,    97,   102,   103,   104,   105,   106,   111,   119,
     123,   128,   129,   134,   138,   143,   147,   151,   155,   159,
     163,   167,   171,   175,   179,   183,   187,   191,   195,   203,
     209,   210,   211,   216,   220,     7,    21,    41,    42,    69,
      70,    71,    72,    73,    74,    78,    79,    84,    89,    90,
      91,    92,    93,    98,   105,   106,   107,   124,   131,   138,
     148,   158,   170,   179,   188,   207,   214,   219,   221,   223,
     225,   228,   233,   234,   238,   239,   240,   241,   246,   250,
     251,   256,   263,   268,   269,   270,   271,   272,   273,   274,
     275,   281,   282,   286,   291,   298,   305,   312,   324,   325,
     326,   327,   331,   336,   337,   338,   343,   348,   349,   350,
     351,   352,   353,   358,   381,   385,   392,   393,   397,   401,
     402,   403,   407,   411,   419,   420,   425,   426,   430,   438,
     439,   444,   445,   449,   454,   458,   462,   467,   475,   476,
     480,   481,   487,   498,   511,   525,   539,   553,   567,   590,
     594,   601,   605,   613,   618,   625,   635,   636,   637,   638,
     639,   646,   653,   654,   659,   660,    11,    24,    41,    42,
      43,    48,     7,    16,    34,    41,    46,    47,    48,    49,
       9,    19,    32,    33,     7,    13,    19,    25,     7,    21,
      25,    32,    43,    44,    50,    51,     9,    19,    29,    39,
      49,    59,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    90,    91,    92,    93,    94,
      95,    96,   101,   102,   107,   108,   109,   114,   115,   116,
       7,    14,    31,    51,    52,     9,    16,    26,    33,    44,
      45,    50,    51,    52,    57,    58,    59,    60,    61,    65,
      66,    67,    68,    73,    74,    79,    83,    91,    92,    97,
      98,    99,   105,   110,   118,   119,     7,    20,     8,    33,
      62,    66,    67,    72,    73,    78,    79,    83,    84,    89,
      90,     8,    21,    27,    34,    40,    47,    57,    61,    70,
      79,    88,    95,    96,   101,   113,   118,   143,   153,   163,
     169,   180,   191,   206,   207,   213,   214,   219,   220,   226,
     227,   231,   232,   237,   239,   245,   246,   250,   251,   256,
       7,    16,     7,    14,    22,     7,    18,    19,    23,    24,
      25,    26,     6,    15,    25,    35,    45,    55,    65,    75,
      85,    95,   106,   117,   127,   140,   141,    47,    48,    52,
      53,    68,    69,    76,    84,    92,   100,   108,   116,   127,
     128,   155,   169,   184,   185,   204,   208,   212,   229,   236,
     243,   253,   254,   257,   269,   280,   288,   293,   298,   303,
     308,   316,   324,   329,   334,   341,   342,   346,   347,   348,
     355,   356,   360,   361,   365,   366,   370,   374,   375,   378,
     387,   398,   399,   400,   403,   404,   405,   409,   410,   411,
     412,   416,   417,   421,   423,   439,   441,   446,   449,   454,
     455,   463,   483,   484,   486,   491,   492,   496,   497,   500,
     501,   526,   527,   531,   532,   536,   537,   541,   554,   555,
     559,   560,   564,   565,   569,   570,   574,   585,   586,   587,
     588,   592,   593,   598,   599,   600,   609,   615,   633,   634,
     638,   639,   645,   650,   658,   665,   673,   708,   733,   737,
     763,   767,   779,   792,   806,   817,   832,   838,   843,   849,
     856,   857,   865,   869,   873,   879,   886,   891,   892,   893,
     894,   898,   899,   911,   912,   917,   924,   931,   938,   961,
     974,   975,   990,  1000,  1012,  1017,  1018,  1021,  1022,  1025,
    1026,  1031,  1032,  1037,  1041,  1047,  1068,  1076,  1088,  1093,
    1100,  1105,  1111,  1116,  1125,  1127,  1130,  1134,  1135,  1136,
    1137,  1138,  1139,  1144,  1164,  1165,  1166,  1167,  1178,  1184,
    1192,  1193,  1199,  1204,  1209,  1214,  1219,  1224,  1229,  1234,
    1240,  1246,  1252,  1259,  1281,  1290,  1294,  1302,  1306,  1314,
    1326,  1347,  1351,  1357,  1361,  1374,  1382,  1392,  1394,  1396,
    1398,  1400,  1402,  1407,  1408,  1415,  1424,  1432,  1441,  1452,
    1460,  1461,  1462,  1466,  1468,  1470,  1472,  1474,  1476,  1478,
    1483,  1488,  1494,  1502,  1507,  1514,  1521,  1525,  1529,  1565,
    1566,  1568,  1576,  1591,  1593,  1595,  1597,  1599,  1601,  1603,
    1605,  1607,  1609,  1611,  1613,  1615,  1617,  1620,  1622,  1624,
    1627,  1629,  1631,  1633,  1636,  1641,  1646,  1653,  1658,  1665,
    1670,  1678,  1683,  1692,  1700,  1708,  1716,  1734,  1742,  1750,
    1758,  1766,  1774,  1790,  1798,  1806,  1814,  1822,  1830,  1838,
    1842,  1846,  1850,  1854,  1862,  1870,  1878,  1886,  1906,  1928,
    1939,  1946,  1971,  1973,  1975,  1977,  1979,  1981,  1983,  1985,
    1987,  1989,  1991,  1993,  1995,  1997,  1999,  2001,  2003,  2005,
    2007,  2009,  2013,  2017,  2021,  2035,  2036,  2037,  2049,  2064,
    2076,  2078,  2080,  2091,  2115,  2128,  2132,  2138,  2145,  2152,
    2162,  2169,  2197,  2232,  2243,  2244,  2251,  2257,  2261,  2265,
    2269,  2273,  2277,  2281,  2285,  2289,  2293,  2297,  2301,  2305,
    2309,  2313,  2317,  2319,  2323,  2332,  2337,  2344,  2359,  2366,
    2370,  2374,  2378,  2382,  2396,  2397,  2401,  2402,  2410,  2411,
    2415,  2416,  2421,  2429,  2431,  2445,  2448,  2475,  2476,  2479,
    2480,  2491,  2509,  2516,  2525,  2542,  2587,  2595,  2603,  2611,
    2619,  2640,  2641,  2642,  2645,  2646,  2647,  2650,  2651,  2654,
    2655,  2656,  2657,  2658,  2659,  2660,  2661,  2662,  2663,  2664,
    2665,  2668,  2670,  2675,  2677,  2682,  2684,  2686,  2688,  2690,
    2692,  2694,  2696,  2710,  2712,  2716,  2720,  2727,  2731,  2737,
    2741,  2750,  2761,  2762,  2766,  2770,  2777,  2778,  2779,  2780,
    2781,  2782,  2783,  2784,  2794,  2798,  2805,  2812,  2813,  2829,
    2833,  2838,  2842,  2857,  2862,  2866,  2869,  2872,  2873,  2874,
    2877,  2884,  2894,  2908,  2909,  2913,  2924,  2925,  2928,  2929,
    2932,  2936,  2943,  2947,  2951,  2959,  2970,  2971,  2975,  2976,
    2980,  2981,  2984,  2985,  2995,  2996,  3000,  3001,  3004,  3020,
    3028,  3036,  3058,  3059,  3070,  3074,  3101,  3103,  3108,  3110,
    3120,  3122,  3133,  3137,  3141,  3145,  3149,  3158,  3165,  3197,
    3201,  3207,  3215,  3227,  3231,  3235,  3241,  3242,  3258,  3259,
    3260,  3263,  3264,  3269,  3270,  3271,  3274,  3275,  3278,  3280,
    3285,  3286,  3289,  3297,  3298,  3299,  3300,  3301,  3304,  3305,
       2,     9,    15,    21,    28,    35,    45,    46,    47,     7,
       8,    22,    36,    48,    56,    70,    71,    72,    73,    74,
      87,    88,    93,    94,    98,    99,     2,     7,    14,    24,
      25,    32,    10,    16,    22,    32,    33,    41,    52,    64,
      72,    80,    87,    97,    99,   105,   109,   113,   128,   135,
     136,   137,   141,   142,     3,     9,    15,    21,    29,    29,
      31,    32,     8,    21,    34,    52,    74,    75,    76,    77,
       7,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
      17,    17,    17,    17,    17,    17,    17,    18,    18,    18,
      18,    18,    18,    18,    18,    18,    18,    18,    18,    18,
      18,    18,    18,    18,    18,    18,    18,    18,    18,    18,
      18,    18,    18,    18,    18,    18,    18,    18,    18,    18,
      18,    18,    18,    18,    18,    18,    18,    18,    18,    18,
      18,    18,    18,    18,    18,    19,    19,    19,    19,    19,
      19,    19,    19,    19,    19,    19,    19,    19,    19,    19,
      19,    19,    19,    19,    19,    19,    19,    19,    19,    20,
      20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
      20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
      20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
      20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
      20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
      20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
      20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
      20,    20,    20,    20,    20,    20
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P",
  "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE",
  "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT",
  "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED",
  "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P",
  "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS",
  "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION", "COLUMN",
  "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY",
  "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
  "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
  "CROSS", "CSV", "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE",
  "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP",
  "CURRENT_USER", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P",
  "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS",
  "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER",
  "DELIMITERS", "DEPENDS", "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY",
  "DISABLE_P", "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P",
  "DOUBLE_P", "DROP", "EACH", "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED",
  "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING",
  "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P", "EXTENSION",
  "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P",
  "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE",
  "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL",
  "GRANT", "GRANTED", "GROUP_P", "GROUPING", "HANDLER", "HAVING",
  "HEADER_P", "HOLD", "HOUR_P", "IDENTITY_P", "IF_P", "ILIKE", "IMMEDIATE",
  "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT",
  "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
  "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTEAD",
  "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS",
  "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
  "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
  "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP",
  "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MINUTE_P", "MINVALUE", "MODE",
  "MONTH_P", "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR",
  "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL",
  "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF",
  "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION",
  "OPTIONS", "OR", "ORDER", "ORDINALITY", "OUT_P", "OUTER_P", "OVER",
  "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER", "PARALLEL",
  "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PLACING",
  "PLANS", "POLICY", "POSITION", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES",
  "PROCEDURAL", "PROCEDURE", "PROGRAM", "PUBLICATION", "QUOTE", "RANGE",
  "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE",
  "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAVEPOINT", "SCHEMA",
  "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P", "SECURITY", "SELECT",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION",
  "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR",
  "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STRICT_P", "STRIP_P", "SUBSCRIPTION", "SUBSTRING",
  "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE",
  "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME",
  "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT",
  "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P",
  "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN",
  "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER", "USING", "VACUUM",
  "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR",
  "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW", "VIEWS",
  "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN",
  "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES",
  "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES",
  "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'?'", "':'", "$accept",
  "stmtblock", "stmtmulti", "stmt", "AlterObjectSchemaStmt",
  "AlterSeqStmt", "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem",
  "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "CallStmt", "CheckPointStmt", "CopyStmt", "copy_from",
  "copy_delimiter", "copy_generic_opt_arg_list", "opt_using", "opt_as",
  "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "generic_option_elem", "key_update", "key_actions",
  "create_generic_options", "OnCommitOption", "reloptions",
  "opt_no_inherit", "TableConstraint", "TableLikeOption", "reloption_list",
  "ExistingIndex", "ConstraintAttr", "OptWith", "definition",
  "TableLikeOptionList", "generic_option_name", "ConstraintAttributeElem",
  "columnDef", "generic_option_list", "def_list", "index_name",
  "TableElement", "def_elem", "opt_definition", "OptTableElementList",
  "columnElem", "opt_column_list", "ColQualList", "key_delete",
  "reloption_elem", "columnList", "func_type", "ConstraintElem",
  "TableElementList", "key_match", "TableLikeClause", "OptTemp",
  "generated_when", "CreateAsStmt", "opt_with_data", "create_as_target",
  "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt", "CreateSeqStmt",
  "OptSeqOptList", "DeallocateStmt", "DeleteStmt",
  "relation_expr_opt_alias", "where_or_current_clause", "using_clause",
  "DropStmt", "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "ExecuteStmt",
  "execute_param_clause", "ExplainStmt", "opt_verbose",
  "explain_option_arg", "ExplainableStmt", "NonReservedWord",
  "NonReservedWord_or_Sconst", "explain_option_list", "analyze_keyword",
  "opt_boolean_or_string", "explain_option_elem", "explain_option_name",
  "ExportStmt", "ImportStmt", "IndexStmt", "access_method",
  "access_method_clause", "opt_concurrently", "opt_index_name",
  "opt_reloptions", "opt_unique", "InsertStmt", "insert_rest",
  "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
  "returning_clause", "override_kind", "set_target_list", "opt_collate",
  "opt_class", "insert_column_list", "set_clause_list", "index_params",
  "set_target", "LoadStmt", "file_name", "PragmaStmt", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "RenameStmt", "opt_column",
  "SelectStmt", "select_with_parens", "select_no_parens", "select_clause",
  "simple_select", "with_clause", "cte_list", "common_table_expr",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "distinct_clause", "opt_all_clause", "opt_sort_clause", "sort_clause",
  "sortby_list", "sortby", "opt_asc_desc", "opt_nulls_order",
  "select_limit", "opt_select_limit", "limit_clause", "offset_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_item", "empty_grouping_set", "having_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "from_clause", "from_list",
  "table_ref", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "tablesample_clause", "opt_repeatable_clause",
  "func_table", "rowsfrom_item", "rowsfrom_list", "opt_col_def_list",
  "opt_ordinality", "where_clause", "TableFuncElementList",
  "TableFuncElement", "opt_collate_clause", "Typename", "opt_array_bounds",
  "SimpleTypename", "ConstTypename", "GenericType", "opt_type_modifiers",
  "Numeric", "opt_float", "Bit", "ConstBit", "BitWithLength",
  "BitWithoutLength", "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "opt_interval", "interval_second",
  "a_expr", "b_expr", "c_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "within_group_clause", "filter_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "row", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "expr_list",
  "func_arg_list", "func_arg_expr", "type_list", "extract_list",
  "extract_arg", "overlay_list", "overlay_placing", "position_list",
  "substr_list", "substr_from", "substr_for", "trim_list", "in_expr",
  "case_expr", "when_clause_list", "when_clause", "case_default",
  "case_arg", "columnref", "indirection_el", "opt_slice_bound",
  "indirection", "opt_indirection", "opt_asymmetric", "opt_target_list",
  "target_list", "target_el", "qualified_name_list", "qualified_name",
  "name_list", "name", "attr_name", "func_name", "AexprConst", "Iconst",
  "Sconst", "ColId", "ColIdOrString", "type_function_name", "any_name",
  "attrs", "opt_name_list", "param_name", "ColLabel", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "VariableResetStmt", "generic_reset", "reset_rest", "VariableSetStmt",
  "set_rest", "generic_set", "var_value", "zone_value", "var_list",
  "VariableShowStmt", "show_or_describe", "var_name", "ViewStmt",
  "opt_check_option", "CreateFunctionStmt", "unreserved_keyword",
  "col_name_keyword", "type_func_name_keyword", "reserved_keyword", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,    60,    62,    61,   711,
      43,    45,    42,    47,    37,    94,   712,    91,    93,    40,
      41,    46,    59,    44,    63,    58
};
#endif

#define YYPACT_NINF (-2274)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1471)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    4320,  -159,    30, -2274, -2274,  -159, 28507, -2274,  -159,    46,
     962, 30307, -2274,  2612,  -159, 34807,   399,   222,   236,   366,
   34807, 34807, 30757,  -159,   200, 35257, -2274,  -159, 31207,   -48,
     -41, 35707, 34807,  1017,   461,    16, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274,    85, -2274, -2274, -2274, -2274,    38, -2274,
   -2274, -2274, -2274, -2274,    79, -2274,    87,   124,  -101,    97,
   -2274, -2274, -2274, -2274, -2274, -2274, 31657, -2274, -2274, -2274,
   -2274, -2274, 36157, 34807, 36607, 32107, 37057, -2274,    76, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,    59,   179,
   -2274,    91, -2274, -2274, -2274, -2274,  1017, 34807, 34807,   521,
     572,   238, 37507, -2274, -2274, -2274, -2274,   -59,   422, -2274,
   -2274, 32557, -2274, -2274, -2274,   381, -2274, -2274,   326, -2274,
      34, -2274,   360, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274,   389, -2274, -2274, 37957, 38407, 38857, -2274,   330,   487,
     548, 17519, -2274, -2274, -2274,    85, -2274, -2274, -2274,   366,
     366, -2274, -2274, -2274,   310,   343, -2274,   368,   615, -2274,
   -2274, -2274,   367, -2274, -2274,   574,  7277,  7277, 39307,   366,
   39307,   396, -2274, -2274,   -36, -2274, 18877, -2274,   417,   179,
   -2274,    89,   721,  9637, 34807,   419, -2274,   428,   419,   469,
     493,  -101, -2274,  4320, -2274, 34807,   736,   710, 31207,   205,
     205,   878,   205,   706,   714, -2274,  1785, -2274,   516, -2274,
     571,   817,   367,   901,   992,   742,   933,  3813,   946,  1166,
     980,  1244,  5389,  9637, 22212, -2274,   179, -2274, -2274,   641,
   -2274, -2274,   647,   671, -2274, -2274, -2274, -2274,   487,   891,
   -2274,   727, 39757, 40207, 34807,  1104, -2274, -2274, -2274, -2274,
     755, -2274, -2274,    55,  1010,    36,   728, -2274,  1067,    43,
   -2274,  1072,   954,  9637, -2274,   860, -2274, -2274,   -41, -2274,
    -202, -2274, -2274, 24012, -2274, -2274, -2274,   548,   764, -2274,
   24012,  9637, 44257,  1215, -2274,  1047, 34807,   805, -2274, -2274,
   -2274, -2274, -2274, -2274,  1285,   117,  1299,  9637,   841,   117,
     117,   855,  1163, -2274, -2274, -2274,    93,   859,   873, -2274,
      98,    98, -2274,  1031,   880,   900, -2274,   104,  1358,  1365,
     121,   914,   919,   792,   117,  9637, -2274,   923,    98,   928,
     936,   938,  1401,   957, -2274,  1422,   966,   157,   159,   968,
     976, -2274, -2274,   123,  9637,  9637,  9637, -2274,  6333, -2274,
     179,   366, -2274, -2274, -2274, -2274, -2274, -2274, -2274,   988,
   -2274,   126,  4589, -2274,   984, -2274, -2274,  1152,  9637, -2274,
   -2274,   -50, -2274,   128, -2274, -2274, -2274,   179,  1262,   960,
   -2274, -2274, -2274,   147,  1375, 23112, 23562, 34807, -2274, -2274,
     179, -2274, -2274, -2274, -2274, -2274, -2274,   376, -2274,    85,
   25155,   474,   419, 34807, 34807,  1441, -2274, -2274, -2274,   428,
   31207, 34807,  1128, 40657, -2274, -2274,  -101,  -101,  9637,  -101,
     443,   502,  7749, 10109,  1324,  1223,   107,   408,  1334, -2274,
    1232,   706,   714,  9637, -2274,  1277, 34807, 28957,   201,   209,
    1032,  1119,  1042,   -44,  1431, -2274,  1048, -2274,  1136, 34807,
   44693,   149, -2274,  1490,   149,   149,   613,  1492,  1149,   183,
    1307,   485,   341,  2313, -2274,  1048, 31207,   120,   560,  1048,
   34807,  1164,   564,  1048,  9637,  9637,  9637,  1086, -2274, 25155,
     -98, -2274,   932,   937, 21761,  1085, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274,  1171, 34807,  1131,  9637,   -19,  1417,  1479, 34807,
    1320,  2313,  1321,  1540,  1108,   647, -2274, 41107, -2274, -2274,
   -2274, -2274, -2274, 34807, -2274, -2274, 34807, -2274, 26257,  1107,
   34807, 34807, -2274, 34807, 34807,   486, 41557,   548, 28057, -2274,
   -2274, -2274, -2274,   797,   854, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, 26257, -2274,  1858, -2274, -2274, -2274,
    1106,   491, -2274, -2274,  1159, -2274,  1159,  1159,  1114,  1114,
    1115, -2274, -2274, -2274,   792,  1159,  1114, -2274, 44693, -2274,
    -169,   350, -2274, -2274,  1551, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274,    -5,   536,   499, -2274,  1017, -2274,
   -2274,  9637,   179, -2274,  1117, 25155,  1161,  9637, -2274, -2274,
    9637,  1118,  1581,  1581,  9637, -2274, -2274, -2274, -2274,   175,
    1581, -2274,  1581,  1581,  1159,  1159, -2274, 25192,  9637, -2274,
   20687,  9637, 12469,  8221,  9637,  1206,  1207,  1581, -2274,  1581,
   -2274,  9637,  6805, 25192,  1586,  1586,  2508,  4617,  1126,   179,
     179, -2274,  1581,    69,     6, -2274,    88, 44257,  9637,  9637,
    9637,  9637, 25807,  1213,    77, 34807,  9637,  9637,  1133,   788,
   -2274,  9637,  1345, -2274,  1135,  9637,  1220,   114,  9637,  9637,
    9637,  9637,  9637,  9637,  9637,  9637,  9637, -2274, -2274, 14346,
     112,  1437,  1456,  -133,   372, 33007,  7277,  1448,  5389, -2274,
     118,  1448, -2274, -2274, -2274, -2274,   129, -2274, -2274, -2274,
   -2274,  1106, -2274,  1106,  1144, 34807,    89, 29857, -2274,  9637,
   -2274,   557,  1148, -2274,  1205,  1686,  1584, 19329, 34807, -2274,
    1415, -2274,  1150, -2274, 24459,  1415, -2274, -2274, 12930,  1266,
    1409,  1356, -2274, -2274, -2274,  1153, 25155, 10581, 10581, -2274,
     683, 25155,   733, -2274, -2274, -2274, -2274, -2274, -2274,   403,
   -2274, 34807,   -49,  1324,   408,   567, -2274,  1255,  1158, 42007,
   34807,  1416,  1379,  1421,  -173, -2274, -2274, -2274, 44257, -2274,
   34807, 34807, 42457, 42907, 26707, 34807, 26257, -2274, -2274, -2274,
   -2274, 34807,  1189, 34807, 45111, -2274, -2274, -2274,   149, -2274,
   -2274, -2274, -2274, -2274, 34807, 34807, -2274, -2274,   149, 34807,
   34807,   149, -2274,  1412, 34807, 34807, 34807, 34807,  1501, 34807,
   34807,   -55,   -55,  1354, -2274,  8693,  1165, -2274,  9637,  9637,
   -2274,  9637,  1332, -2274,   642, -2274,  1373,     9,   681,  1216,
   34807, 34807,   845, -2274, -2274, -2274, -2274, -2274,  1176,  1493,
    2313, -2274,  1502,   -29, 29407,   573,  1218,  1398, -2274,  1387,
   -2274,    36, -2274, -2274, 26257,    43, -2274,  1389,    83, -2274,
    1406,  1623,   647, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
     697, 17067, -2274, -2274,  1630,   366,  1630,   431, -2274, -2274,
    1630, -2274,  1630, -2274, 24012, -2274,  9637,  1633,  1201,  1208,
    1286,  1291,  1292, -2274,  1219,  1303,  1581, -2274, -2274, -2274,
   44257, -2274,   542, -2274,   703, -2274,  9637,  9637,    29, -2274,
   24568,   705,  9637,  1225,  1227,   707, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274,  1229,  1531, -2274,  1235,  1236,  1248, -2274,
   -2274,  4471, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274,  1249,  1251, 24605,  1260,
   12469, 12469,  6333,  2000, -2274, 12469,  1272, -2274,   709, 24493,
    1259,  1275,  1284,  1298,  1282,  1289, 24866,  9165,  9637,  9165,
    9165, 24894,  1259,  1290, -2274,  9637,  1295,  1302,  1305, -2274,
   -2274,  1383,  1383,  1383, 25192, -2274, -2274, -2274,  1304, -2274,
   12469, 12469, -2274,   459,  4825,  6333, -2274, -2274,  1590, -2274,
     690, -2274,  1310, -2274, -2274, 21583, -2274, 20687,  3151,  9637,
      86, -2274,  9637,  1133,  9637,  1371,  1383,  1383,  1383,   198,
     198,    71,    71,    71,   232,   372, -2274, -2274, -2274,  1312,
    1313,  1314,  1498,   957,  9637, -2274,   738,   773, 34807,  2871,
    3292,  3650, -2274, -2274, -2274, 15711,  1339,   -98,  1339,  1581,
       6, -2274,   428, -2274, -2274, -2274, 25155, -2274,  1017, 15711,
    1355,  1366,   228, 17972,  1518, -2274, 34807, 34807, -2274,   -35,
    1329, -2274, -2274,  9637, -2274, -2274,   894,  1335,  1521,  1523,
     858,   858,   683,  1524, -2274, -2274,  1385, -2274,  9637,   870,
   -2274,   964, -2274, -2274, -2274, -2274,  1326, -2274, -2274,  1562,
   -2274, -2274, -2274, -2274,  1414,  1048,  9637,  1552, -2274,    80,
    1337,  1660,  -161,  1617, 34807, -2274,  1537, -2274,   749,  1663,
      83,  1664,    83, 26257, 26257, 26257,   713, -2274, -2274,   366,
   -2274, -2274,   720, -2274,   344, -2274, -2274, -2274,  1423,   789,
    2313,  1048, -2274, -2274, -2274, -2274, -2274, -2274, -2274,   127,
     806,  1048,  1425, -2274,  1427, -2274,  1428,   884,  1048, -2274,
   -2274,  1342,  1350,  1351,  9637, -2274, -2274, 25155, 25155, 25155,
    1359, -2274,   283, -2274, 34807, -2274, -2274, -2274,  1332,  1789,
   34807,   647, -2274,   355, 34807, 34807, 34807, 34807,  1400, 34807,
   -2274, -2274, -2274,  1360,  1364, -2274, 44257,   -97,  1567,  1570,
    1042,  1807,  1703, 34807, -2274, -2274, -2274, 34807, -2274,  1705,
    1017, -2274, 26257, -2274, 27607, -2274, -2274, -2274, -2274,   366,
   -2274,   366,  1596, 34807, 22662,   366,   366, -2274,  1390,  1208,
    1581,    82,    42,   -26,  1513,  1581,  1619,  1392, -2274, -2274,
   -2274,   731, 24928,  9637, -2274,  1725, 44257, -2274,  4698, -2274,
   -2274, -2274, -2274,  9637, -2274, -2274, -2274,  9637, -2274, 20687,
    9637,  1701, -2274,  1856,  1856,  4617, 44257, 12469, 12469, 12469,
   12469,   550,   928, 12469, 12469, 12469, 12469, 12469, 12469, 12469,
   12469, 12469, 13402,   301, -2274, -2274,  9637,  9637,  1712,  1701,
   -2274, -2274, -2274,   286,   286, 44257,  1418,  1259,  1419,  1420,
    9637, -2274,   179, 21145, -2274,  1410,   366,  9637,   917,  2744,
    9637,   743,  9637,  1720, -2274, -2274,  1429, -2274, -2274, 44257,
    9637,  1424, 25006, 12469, 12469, 25264, -2274, 25270,  9637,  6333,
   -2274,  1354,  1457, 19781, -2274,  1508,  1508,  1508,  1508, -2274,
   -2274, 34807, 34807, 34807, 16163,  1731, 15258, 33457,  1433,   934,
   -2274, 33457, 33907, -2274,  1442, -2274,   179,  9637,  1726,  1434,
    1726,  1439, -2274, -2274,  1440,  1433,  9637,  1573, -2274, -2274,
   -2274,  1494, -2274,   754, -2274,  1829,  1573, -2274,   756, -2274,
   19329,  1355,  9637,   179, -2274,  1445, -2274,  1335,    94, -2274,
   -2274, -2274,  1646, -2274, -2274, -2274, 34807, -2274, 34807, 21164,
    1769, -2274, 34807, 34807, 34807, -2274, 34807,   761,   594,  1450,
   -2274,   594,  1751,   490,  1042,   183,  1923,   354, -2274, -2274,
   -2274,  1522, 34807, -2274, 34807, -2274, -2274, -2274, -2274, -2274,
   26707, -2274, -2274, -2274, 26257, 20236, 26257, 34807, 34807, 34807,
   34807, 34807, 34807, 34807, 34807, 34807, 34807, -2274, -2274, -2274,
    1354, -2274, -2274, -2274,   341, -2274, -2274,   283,  9637,  1455,
    1218,  1479, 43357,   775,  2313,  1890,  1459,   330,   113, -2274,
   -2274,   573, 29407, -2274, -2274, -2274,  1848, -2274, -2274,  1017,
   34807,  1516,    83, 34807, -2274,   790, -2274, -2274, -2274, -2274,
   34807,  1461, -2274,  1461, -2274, -2274,  1581,  1462, -2274,  1464,
   -2274, -2274, -2274, -2274, -2274, -2274,  1465, -2274, -2274, -2274,
    9637, 25155, -2274,  1466, -2274, 25155, 21183, -2274, 25155,  1712,
   -2274,   426,   426,   426,  4115,  1772,    70,  1469,   426,   426,
     426,   284,   284,    73,    73,    73,  1856,   301, 25155, 25155,
   -2274, -2274, -2274, -2274,  1472, -2274, -2274, -2274,  1259, -2274,
       6, -2274,   247,  9637,  9637,   459, -2274, 25226,  9637, 44257,
     808,   459,   134,  9637,  3117,  3958,  9637,  9637, 25358, 21242,
    1473,  9637, 43807, -2274, -2274, 34807, 34807, 34807, 34807, -2274,
   -2274, -2274, 33457, 33907,  1477, 14805,   934,  1478, 34357, -2274,
   -2274,  1483, 15711,  1735,  1676, -2274, 15711,  1676,   101,  1676,
    1742,  1576, 18425, -2274, -2274,  1496,  1684, -2274,   447, 25155,
    1908,  1791,   366,  1791,   366, -2274, 25155,  7277, -2274,  1017,
    1486, 34807,   179,   -58, -2274,  1511, 34807, -2274,  1573, 25155,
   20687, -2274, -2274, -2274, -2274, -2274, -2274, -2274, 34807,   809,
   -2274,   819,   594, -2274,  1534, -2274,   488,  1777,    18, -2274,
   26257,  2361,   722, -2274,  1796,  1715, -2274,   149, -2274,  9637,
     722,  1721,   163, 34807, -2274, -2274,  1226, -2274, 44257,    83,
      83, -2274, -2274, -2274,  1445, 44693,   797,   854, -2274, -2274,
   -2274, -2274, -2274, -2274,   499, -2274,  1525, -2274, -2274,  1591,
   -2274,  1594, -2274, -2274, -2274, -2274, -2274,  1515,   764,    66,
   25155, 34807,  1951,  1736,  1526,  1218, -2274,  1319, 29407,  1400,
   -2274,  1886,   116,  1570, -2274,   241,  1564,  1734, 34807,  1530,
   -2274,  1968, -2274, 27607,  1461,  1536, -2274, -2274, -2274, 25155,
   -2274, -2274, -2274, 12469,  1841,  1538, 44257, -2274, -2274,   459,
     459, 25226,   824, -2274,   459,  9637,  9637,   459,   459,  9637,
   -2274, -2274, 21276,  1723, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274, 27157, 33457, -2274,  1544, -2274, 34807,   934, 15711, -2274,
   -2274,   953, -2274, 15711,  1802, -2274, 15711, 28507, -2274, 34807,
    1549, 34807, -2274, 11053,  9637,  1589, -2274,  1589, -2274,   960,
   -2274,   228, -2274, -2274,  1937, 16615,  1896,  9637, -2274, -2274,
    1555,   594, -2274,  1714,  1534,  1565, -2274, -2274, -2274, -2274,
   -2274, -2274, -2274,   839,  1568, 34807, 34807, 12469, -2274,   722,
     590,   109, -2274,  1820, 34807,  1534, -2274, -2274, -2274, -2274,
    1926,  2004,  1893, -2274, -2274, 25155, -2274, -2274,  1581,  1581,
   -2274, -2274,  1970, -2274, -2274,   499,   436, 20236, 34807, 34807,
   -2274, -2274, -2274,   341,  1925,   852,  1017,  1898, 29407,  2013,
   34807,  1400,  1579, -2274, -2274,   164,   164, -2274,  1710, -2274,
    1716,   162, -2274, 34807, -2274, -2274, 16615,  1017, -2274, -2274,
    4652, 12469, 44257,   920, -2274,   459,   459,   459, -2274,  2002,
    1354, -2274,   941,  2018, -2274, 34807,   948, -2274,  9637,  1587,
   -2274, -2274, 15711,   953,  1592,   969, -2274, 44257, 34807,   971,
   44257,  5861,  1585, -2274, -2274, 25155, 25155, 34807, -2274, -2274,
    1642, 34807,  9637, -2274,   977,  1990,   174,   -27, 25155, -2274,
   34807, -2274, 26257, -2274,   594, -2274, 26257,  9637, -2274,    81,
    4115,  2031, -2274, -2274, -2274, -2274,  1534,   647, -2274, -2274,
    1887, -2274, 34807,  1654,   471,  1669, -2274, -2274, -2274,   764,
     366,  1218,  1564, 34807,  1017,   330, -2274,   573, -2274, -2274,
   -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274,
    2006,  1799,  2008,  1516,   983,  4652,   994, -2274,  9637,   387,
    1442, 27157,  1608, -2274,  1001, -2274, 25155, 34807, -2274, -2274,
    9637, -2274, 34807,  1970,  1008, -2274, -2274, 11053,  1606, -2274,
    2045,  1017, -2274, 21539,  1339, 16615, 34807, 34807, 34807, -2274,
    1729,   647,   594,  1012, -2274,  1624, -2274, 21641,  1825, -2274,
    1904, -2274,  1853,  1620, -2274,  9637, -2274,  1690, -2274, -2274,
   -2274,  2059, -2274,  1627,  1564,  1400,  1570,  1826, -2274,  1830,
    1631,  1218, -2274,  1259, 11525, 11525,  1636, -2274, -2274, 34807,
   -2274,  1033,  1055, -2274, -2274, -2274, -2274, 34807,  1639, -2274,
    1990, -2274, -2274, -2274,   180, -2274,   180, 19329,  1853, -2274,
   26257, 20236,  1859,  1620,   108,  1843,  2313, -2274, 25155, -2274,
    1017, 29407, -2274, -2274, -2274, -2274, -2274, 16615,  1339, 13874,
    1779,   227, 24530, -2274, -2274, -2274, -2274,  1062, -2274,  1793,
   -2274, -2274, 34807,  1335,  1335,  -166,  1843, -2274, -2274,  1924,
   -2274, -2274, -2274, -2274, -2274,    78,  1851, -2274,  1852,  1222,
    1564,  1077, -2274,  2089, -2274, -2274, -2274, -2274, -2274, -2274,
    1653, -2274,   180, -2274, -2274, -2274, -2274, -2274,   131,   131,
    2009, -2274,  1717, -2274, -2274, -2274,  1218, 11997,  9637,  1335,
     594, -2274,  2102, -2274,   135, -2274, -2274,  1339, -2274, 21703,
   -2274, -2274, -2274, -2274, -2274, -2274
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     443,  1068,     0,   408,   407,  1068,     0,   136,  1068,   164,
     313,     0,  1119,     0,  1068,     0,   443,     0,     0,     0,
       0,     0,     0,  1068,   543,     0,  1118,  1068,     0,  1081,
       0,     0,     0,     0,     0,     2,     4,     5,     6,     7,
       8,     9,    10,    11,    16,    12,    14,    15,    17,    18,
      19,    20,    21,   390,    22,    23,    24,    25,     0,    26,
      27,    28,    29,    30,   510,   497,   545,   509,   442,   513,
      31,    32,    33,    34,    35,    36,     0,    37,    13,  1067,
    1066,  1060,     0,     0,     0,     0,     0,  1061,  1038,  1131,
    1132,  1133,  1134,  1135,  1136,  1137,  1138,  1139,  1140,  1141,
    1142,  1143,  1144,  1145,  1146,  1465,  1147,  1148,  1149,  1417,
    1418,  1466,  1419,  1420,  1150,  1151,  1152,  1153,  1154,  1155,
    1156,  1157,  1421,  1422,  1158,  1159,  1160,  1161,  1162,  1423,
    1467,  1163,  1164,  1165,  1166,  1167,  1468,  1168,  1169,  1170,
    1171,  1172,  1173,  1174,  1175,  1176,  1469,  1177,  1178,  1179,
    1470,  1180,  1181,  1182,  1183,  1184,  1185,  1424,  1425,  1186,
    1187,  1188,  1189,  1190,  1191,  1192,  1193,  1194,  1195,  1196,
    1197,  1198,  1199,  1200,  1201,  1202,  1203,  1204,  1205,  1206,
    1207,  1208,  1209,  1210,  1211,  1212,  1213,  1426,  1214,  1215,
    1216,  1217,  1427,  1218,  1219,  1220,  1428,  1221,  1222,  1223,
    1471,  1472,  1224,  1225,  1226,  1473,  1227,  1228,  1429,  1229,
    1230,  1231,  1232,  1233,  1234,  1474,  1235,  1236,  1237,  1238,
    1239,  1240,  1241,  1242,  1243,  1244,  1245,  1475,  1430,  1246,
    1247,  1248,  1249,  1431,  1432,  1433,  1250,  1476,  1477,  1251,
    1478,  1252,  1253,  1254,  1255,  1256,  1257,  1479,  1258,  1480,
    1259,  1260,  1261,  1262,  1263,  1264,  1265,  1266,  1267,  1268,
    1269,  1270,  1271,  1272,  1273,  1274,  1275,  1276,  1277,  1434,
    1481,  1435,  1278,  1279,  1280,  1436,  1281,  1282,  1482,  1283,
    1437,  1284,  1438,  1285,  1286,  1287,  1288,  1289,  1290,  1291,
    1292,  1293,  1439,  1483,  1294,  1484,  1440,  1295,  1296,  1297,
    1298,  1299,  1300,  1301,  1302,  1303,  1304,  1305,  1441,  1306,
    1307,  1442,  1308,  1309,  1310,  1311,  1312,  1313,  1314,  1315,
    1316,  1317,  1318,  1319,  1443,  1320,  1321,  1322,  1323,  1324,
    1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  1333,  1334,
    1335,  1336,  1337,  1485,  1338,  1339,  1340,  1444,  1341,  1342,
    1343,  1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,  1352,
    1353,  1354,  1355,  1445,  1356,  1357,  1358,  1486,  1359,  1360,
    1446,  1361,  1362,  1363,  1364,  1365,  1366,  1367,  1368,  1369,
    1370,  1371,  1372,  1373,  1447,  1374,  1375,  1376,  1487,  1377,
    1378,  1379,  1380,  1381,  1448,  1449,  1382,  1383,  1450,  1384,
    1451,  1385,  1386,  1387,  1388,  1389,  1390,  1391,  1392,  1393,
    1394,  1395,  1396,  1397,  1398,  1399,  1400,  1401,  1452,  1453,
    1402,  1488,  1403,  1404,  1405,  1406,  1407,  1408,  1409,  1410,
    1411,  1412,  1413,  1454,  1455,  1456,  1457,  1458,  1459,  1460,
    1461,  1462,  1463,  1464,  1414,  1415,  1416,   135,     0,     0,
    1020,  1039,  1040,  1045,  1063,   163,   443,     0,     0,     0,
       0,     0,     0,   307,   306,   429,   312,     0,     0,  1038,
     336,  1308,   334,  1018,  1039,     0,   358,   359,     0,   367,
       0,   356,     0,   377,   369,   378,   370,   353,   371,   360,
     352,     0,   379,   354,     0,     0,     0,  1064,   384,   313,
     443,     0,   398,   397,   385,   390,   395,   394,   396,     0,
       0,  1037,   470,   471,   472,   477,  1088,  1448,  1382,  1120,
    1089,  1086,  1087,  1065,   542,   540,     0,  1005,  1261,  1344,
    1354,  1448,  1092,  1095,     0,  1062,     0,   514,   645,  1014,
    1080,     0,  1085,     0,  1322,   518,   521,  1051,   519,   510,
       0,     0,     1,   443,   389,   133,     0,     0,     0,   539,
     539,     0,   539,     0,   502,   510,   505,   509,     0,  1117,
    1448,  1382,  1114,  1234,     0,     0,  1234,     0,  1234,     0,
    1234,     0,     0,   997,     0,   998,  1021,   481,   479,     0,
     478,   480,   280,     0,   311,   310,   309,   308,   313,  1234,
     325,     0,     0,     0,     0,   424,   337,   335,   365,   366,
       0,   357,   355,     0,  1234,   376,  1046,   372,  1234,   376,
    1016,  1234,     0,     0,   380,     0,   387,   399,  1452,   414,
       0,   415,   405,   393,   400,   401,   402,   443,   162,   417,
       0,     0,     0,     0,  1090,     0,     0,     0,  1023,  1025,
    1026,   931,  1036,  1000,  1418,  1419,  1420,   989,     0,  1421,
    1422,  1423,  1467,   870,   857,   866,   871,   858,   860,   867,
    1424,  1425,   811,  1201,  1426,  1427,  1034,  1428,  1431,  1432,
    1433,   862,   864,  1434,  1435,     0,  1035,  1437,  1438,  1290,
    1440,  1441,  1443,  1444,   868,  1446,  1447,  1448,  1449,  1450,
    1451,  1033,   869,  1453,     0,     0,     0,  1011,     0,  1000,
     842,     0,   684,   685,   707,   708,   686,   713,   714,   716,
     687,     0,  1010,   749,   885,   841,   853,     0,     0,   840,
     835,   525,  1006,     0,   836,  1022,  1024,   990,   525,  1004,
    1093,  1098,  1094,     0,     0,     0,     0,     0,   647,   646,
    1015,  1079,  1077,  1078,  1076,  1075,  1082,     0,  1084,   390,
     945,     0,   520,     0,     0,     0,   500,   499,     3,  1051,
       0,     0,     0,   339,   537,   538,     0,     0,     0,     0,
       0,     0,     0,     0,   593,   559,   560,   562,   590,   594,
     602,     0,   506,     0,  1115,     0,     0,     0,   496,   496,
       0,     0,     0,     0,     0,   128,    77,   121,     0,     0,
       0,     0,    58,    71,     0,     0,     0,     0,     0,    68,
       0,     0,    51,    45,    47,    79,     0,   496,     0,    75,
       0,     0,     0,    81,     0,     0,     0,     0,   845,   949,
     545,   947,  1020,     0,   996,     0,  1053,  1489,  1490,  1491,
    1492,  1493,  1494,  1495,  1496,  1497,  1498,  1499,  1500,  1501,
    1502,  1503,  1504,  1505,  1506,  1507,  1508,  1509,  1510,  1511,
    1512,  1513,  1514,  1515,  1516,  1517,  1518,  1519,  1520,  1521,
    1522,  1523,  1524,  1525,  1526,  1527,  1528,  1529,  1530,  1531,
    1532,  1533,  1534,  1535,  1536,  1537,  1538,  1539,  1540,  1541,
    1542,  1543,  1544,  1545,  1546,  1547,  1548,  1549,  1550,  1551,
    1552,  1553,  1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,
    1562,  1563,  1564,  1565,   993,   992,  1019,  1054,  1055,  1056,
    1057,   999,     0,     0,   160,     0,     0,     0,   322,     0,
    1234,   333,  1234,     0,   280,   280,   423,   426,   368,   364,
     362,   361,   363,     0,   374,   375,     0,   347,     0,  1047,
       0,     0,   349,     0,     0,     0,     0,   443,     0,    52,
     410,   411,   409,     0,     0,   392,    55,   413,   403,   412,
     391,    72,   404,   386,     0,   416,   151,  1104,  1103,  1112,
     473,     0,  1043,   695,   724,   702,   724,   724,   691,   691,
     704,   692,   693,   729,     0,   724,   691,   696,     0,   694,
     732,   732,   719,   952,   676,   677,   678,   679,   705,   706,
     680,   711,   712,   681,   746,     0,   691,  1044,   443,  1091,
    1121,     0,   838,   723,   710,   988,     0,     0,   718,   717,
       0,     0,     0,     0,     0,   700,   699,   698,   844,   955,
       0,   697,     0,     0,   724,   724,   722,   772,     0,   701,
       0,     0,   968,     0,   974,     0,     0,     0,   728,     0,
     726,     0,     0,   773,   753,   754,   842,   945,     0,   837,
     843,  1029,     0,     0,   746,  1009,   931,     0,   928,   929,
     930,     0,     0,     0,  1003,     0,   939,   941,     0,     0,
     788,   937,     0,   791,     0,     0,     0,     0,   925,   926,
     927,   919,   920,   921,   922,   923,   924,   935,   918,   769,
       0,     0,   887,     0,   768,     0,     0,   609,     0,  1027,
     991,   609,  1106,  1110,  1111,  1109,     0,  1105,  1097,  1096,
    1101,  1099,  1102,  1100,     0,  1073,     0,  1070,   606,     0,
     522,     0,     0,   134,   345,     0,   437,     0,     0,   340,
     517,   516,   546,   547,   553,   515,   579,   580,     0,     0,
       0,     0,   599,   597,   570,   563,   569,     0,     0,   567,
       0,   571,   749,   592,   504,   557,   558,   561,   503,     0,
     595,     0,   605,   593,   562,     0,  1116,     0,     0,     0,
       0,     0,  1234,     0,     0,   112,    93,   232,     0,   495,
       0,     0,     0,     0,     0,     0,     0,   120,   117,   118,
     119,     0,     0,     0,     0,    56,    57,    70,     0,    61,
      62,    59,    63,    64,     0,     0,    49,    50,     0,     0,
       0,     0,    48,     0,     0,     0,     0,     0,     0,     0,
       0,   545,   545,   545,   851,     0,     0,   544,     0,     0,
     994,   997,   150,   288,     0,   278,     0,     0,     0,     0,
       0,     0,   313,   326,   324,   328,   327,   329,     0,     0,
     332,   330,     0,     0,   277,   251,   428,  1234,   425,     0,
     268,   376,   373,  1048,     0,   376,  1017,     0,   376,   383,
    1234,     0,   280,   388,   406,    53,    73,    54,    74,   183,
       0,   157,   165,   170,   148,     0,   148,     0,   167,   171,
     148,   166,   148,   161,     0,   474,     0,   676,   672,   668,
     735,   736,   737,   734,   747,   733,     0,   682,   738,   476,
       0,   688,   691,   475,     0,  1001,     0,     0,   987,   983,
       0,     0,     0,     0,     0,     0,   956,   959,   960,   961,
     958,   962,   957,     0,     0,   963,     0,     0,     0,   721,
     720,     0,   917,   928,   929,   930,   925,   926,   927,   919,
     920,   921,   922,   923,   924,   943,     0,     0,     0,     0,
       0,     0,     0,     0,   812,     0,     0,   912,     0,   945,
     973,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   945,   979,     0,  1000,     0,     0,     0,     0,  1030,
     750,   764,   765,   766,   770,  1059,  1058,  1008,     0,  1002,
       0,     0,   751,   774,   779,     0,   980,   807,     0,   795,
       0,   787,     0,   793,   797,   775,   790,     0,   771,     0,
    1003,   940,   942,     0,   938,     0,   761,   762,   763,   755,
     756,   757,   758,   759,   760,   767,   916,   914,   915,     0,
       0,     0,   895,     0,     0,   792,  1227,  1261,     0,   536,
     536,   536,   524,   534,  1007,     0,   662,   545,   662,     0,
     746,   648,  1051,  1083,  1072,  1071,   946,  1050,   443,     0,
     343,     0,     0,     0,   449,   432,     0,     0,   465,   609,
       0,  1000,   341,     0,   551,   552,     0,   556,  1444,  1341,
       0,     0,     0,     0,   572,   600,     0,   591,     0,  1023,
     573,  1022,   574,   577,   578,   568,   601,  1012,   603,     0,
     596,   508,   507,   607,     0,    78,     0,  1234,    95,     0,
       0,     0,     0,     0,     0,   187,   223,   187,   132,  1234,
     376,  1234,   376,  1135,  1202,  1355,     0,    91,   124,     0,
     256,   489,     0,   241,   285,   114,   129,   482,     0,     0,
      46,    80,    60,    65,   485,    69,    66,    41,    67,   496,
       0,    76,     0,   483,     0,    39,     0,     0,    82,   487,
      43,     0,     0,     0,     0,   948,   846,   950,   951,   996,
       0,   149,     0,   279,     0,   159,   139,   140,   150,     0,
       0,   280,   325,     0,     0,     0,     0,     0,   320,     0,
     271,   269,   299,     0,   276,   270,   278,     0,     0,   227,
       0,     0,     0,     0,   346,  1049,   348,     0,   350,     0,
       0,   152,     0,   155,     0,   154,   158,   153,   147,     0,
     178,     0,     0,     0,     0,     0,     0,  1113,   673,   669,
       0,     0,     0,     0,     0,     0,     0,     0,   953,   689,
     541,     0,     0,     0,   984,     0,     0,   883,     0,   859,
     861,   690,   873,     0,   703,   863,   865,     0,   932,     0,
       0,     0,   874,   814,   815,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   830,   829,   875,   911,     0,     0,   971,   972,
     876,   731,   730,   732,   732,     0,     0,   978,     0,     0,
       0,   881,   839,   946,   715,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   796,   789,     0,   794,   798,     0,
       0,     0,   783,     0,     0,   781,   808,   777,     0,     0,
     809,     0,     0,     0,   852,   536,   536,   536,   536,   533,
     535,     0,     0,     0,     0,  1341,     0,   631,   608,   610,
     618,   631,   636,   854,   660,   855,  1014,     0,   582,     0,
     582,     0,  1107,  1074,     0,   344,     0,   454,   436,   456,
     455,     0,   463,     0,  1000,     0,   454,   438,     0,   457,
       0,   343,     0,   469,   548,     0,   933,   556,     0,   550,
     576,   575,     0,   566,   598,   564,     0,   604,     0,     0,
       0,   231,     0,     0,     0,   187,     0,     0,   295,     0,
     282,   113,     0,     0,     0,    87,     0,   105,    97,    83,
     111,     0,     0,   116,     0,   109,   126,   127,   125,   130,
       0,   215,   197,   228,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   849,   850,   847,
     545,   995,   181,   182,    51,   180,   289,     0,     0,     0,
     428,   323,     0,     0,   333,     0,   280,   384,     0,   316,
     255,   251,     0,   249,   248,   250,     0,   321,   427,     0,
       0,   422,   376,     0,   184,     0,   143,   179,   168,   173,
       0,   177,   175,   174,   169,   172,     0,     0,   674,     0,
     740,   741,   742,   743,   744,   745,     0,   739,   683,   709,
       0,   986,   982,     0,   856,   954,     0,   944,   966,   965,
     813,   825,   826,   827,   967,     0,     0,     0,   822,   823,
     824,   816,   817,   818,   819,   820,   821,   828,   976,   975,
     969,   970,   727,   725,     0,   878,   879,   880,   977,   913,
     746,  1031,   752,     0,     0,   780,   981,   799,     0,     0,
       0,   776,   932,     0,     0,     0,     0,     0,   785,     0,
       0,     0,   898,   893,   894,     0,     0,     0,     0,   527,
     526,   532,   631,   636,     0,   510,     0,   618,     0,   630,
     616,   629,     0,     0,   642,   640,     0,   642,     0,   642,
       0,   612,     0,   632,   614,   629,     0,   652,  1015,   661,
       0,   589,   846,   589,     0,   523,   342,     0,   338,     0,
       0,     0,   444,   441,   431,     0,     0,   466,   454,   445,
       0,   549,   554,   555,   565,  1013,   490,   187,     0,     0,
      94,     0,   297,   243,   275,   258,     0,     0,     0,   188,
       0,   263,     0,    86,   106,     0,   102,     0,   131,     0,
       0,     0,     0,     0,    89,   101,     0,    84,     0,   376,
     376,    92,   242,   194,  1290,     0,   919,   920,   192,   284,
     189,   290,   191,   193,   691,   190,   287,   486,    42,     0,
     484,     0,    40,   493,   491,   488,    44,     0,   162,   142,
    1130,     0,     0,  1234,     0,   428,   331,     0,   277,   320,
     318,     0,   305,   227,   300,     0,  1129,     0,     0,     0,
     351,     0,   156,     0,   176,     0,   670,   675,   748,   985,
     872,   882,   964,     0,     0,     0,     0,   877,  1032,   805,
     803,   800,     0,   801,   784,     0,     0,   782,   778,     0,
     810,   884,     0,   900,   897,   531,   530,   529,   528,   617,
     615,     0,   620,  1042,  1041,   627,     0,   611,     0,   641,
     637,     0,   638,     0,     0,   639,     0,     0,   613,     0,
    1041,     0,   659,     0,     0,   889,  1028,   889,  1108,   453,
     433,     0,   434,   464,     0,     0,     0,     0,   458,  1069,
       0,   293,    96,     0,   275,     0,   187,   260,   259,   262,
     257,   261,   264,     0,     0,     0,     0,     0,   244,     0,
       0,     0,   208,     0,     0,   275,   281,   204,   205,   314,
       0,     0,     0,    98,    88,    85,    90,    99,     0,     0,
     100,   103,   667,   115,   108,   691,   691,     0,     0,     0,
     848,   138,   145,    51,     0,     0,     0,     0,   277,     0,
       0,   320,     0,   381,   319,     0,     0,   185,     0,   224,
       0,     0,  1122,     0,   421,   420,     0,     0,   144,   671,
     831,     0,     0,     0,   802,   806,   804,   786,   886,     0,
     545,   655,     0,   658,   619,     0,     0,   621,     0,     0,
     623,   625,     0,     0,     0,     0,   663,     0,     0,     0,
    1018,     0,   581,   583,   586,   585,   588,     0,   512,   511,
       0,     0,     0,   467,     0,   460,   460,     0,   446,   934,
       0,   187,     0,   274,   294,   222,     0,     0,   206,     0,
     212,     0,   246,   247,   245,   207,   275,   280,   209,   315,
       0,   107,     0,   123,   691,     0,   286,   494,   492,   162,
       0,   428,  1129,     0,     0,   384,   317,   251,   240,   233,
     234,   235,   236,   237,   238,   239,   254,   253,   225,   226,
       0,     0,     0,   422,     0,   832,     0,   833,     0,   903,
     660,     0,     0,   654,     0,   628,   644,     0,   624,   622,
       0,   633,     0,   667,     0,   635,   587,     0,   888,   890,
       0,     0,   440,     0,   662,     0,     0,   462,   462,   448,
       0,   280,   296,     0,   266,   273,   265,     0,     0,   203,
       0,   210,   304,   196,   666,     0,   110,     0,   291,   137,
     141,     0,  1123,     0,  1129,   320,   227,     0,  1126,     0,
       0,   428,   834,   899,     0,     0,     0,   653,   656,     0,
     626,     0,     0,   664,   665,   634,   584,     0,     0,   435,
     460,   439,   468,   459,   553,   461,   553,     0,   304,   252,
       0,     0,   230,   196,     0,   221,     0,   104,   122,   292,
       0,   277,  1124,   382,   186,  1127,  1128,     0,   662,  1417,
    1179,  1389,     0,   901,   904,   902,   896,     0,   643,   651,
     891,   892,   462,   556,   556,   662,   221,   267,   272,     0,
     211,   213,   301,   302,   303,     0,   217,   214,   218,     0,
    1129,     0,   418,     0,   908,   907,   906,   910,   909,   657,
       0,   649,   553,   451,   450,   447,   187,   229,     0,     0,
       0,   219,     0,   220,   195,  1125,   428,     0,     0,   556,
     298,   200,     0,   199,     0,   283,   216,   662,   905,     0,
     452,   198,   202,   201,   419,   650
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2274, -2274, -2274,  1572, -2274, -2274,  -576,  -796,  -608,  -821,
   -2274,    27, -2274, -2274, -2274,   270, -2274,   908, -2274,   261,
    -511,   576, -2274,   985, -2274, -2274, -2274, -2274, -2274, -2274,
   -2274,  -592,   520, -1997, -2274,   494, -2274, -2274, -2274, -2274,
     -24,   245, -2274,  -929, -1519, -2133,  -378, -2274,  -442, -2274,
    -231, -1511,  -419,  -406, -2274, -2059,  -760, -2274,  1357,  -154,
   -2274,   601, -2274, -1838, -2274, -2274,   592, -2274,  -783, -2274,
   -2274, -1621,   246,  -359, -2008, -2047,   545,  -568, -2274,  -402,
     288, -1482, -2274,   617, -2274,  -350, -2274,  -449, -1902,    65,
   -1966,  -915, -2274,   551, -2274,  -897,   268, -2274,    19,  1411,
     363, -2274, -2274, -2274, -2274,  1233,  -579, -2274, -2274, -1840,
   -2274,  -361, -2274,  -423,  -413, -2274, -2274,    23,  -630,  1221,
   -2274, -2274, -2274,  -891, -2274,  -226, -2274, -2274, -1842, -2274,
      21, -2274, -2274, -2274, -2274,   130,   380, -2274,  -263, -1668,
     -30, -2274, -2131, -2246, -2274,  -313, -2132, -1444, -2274, -2274,
   -2274, -2274, -2274,  -952, -2274,  -768,     4,   588,   -20,    15,
      31,    48,    37,  1451,  1470, -2274,  -640,   606, -2274, -2274,
    -561,   -43, -2274,   700, -1849, -1772,  -404,  1021,  1430,  1435,
   -2274,   693,  1057, -1070, -1068, -2274,   423, -2274,  -221, -2274,
     177,  -367,  1039, -2274,  1447, -2274, -2274, -2274, -2274, -1044,
     737, -1711,   451, -1677, -1625,   216,   203,  -905,   -89,    25,
   -2274, -2274,   458,  -175, -2274, -2274,  -172, -1477, -2084,  -185,
    -184, -1031,   935,  -778, -2274, -2274,  -655,   925, -2274, -2274,
   -2274,  1297,  2036, -2274, -2274,  2150,  2177, -2274,   306,  2328,
    -144,  -663, -1054,  -698,  2001,   803,  -721,    39, -2274, -2036,
     464, -2274, -2274,    33, -2274,  -246, -2274,  -245, -2274, -2274,
   -2274,  -229, -2273,  1141, -2274, -1016, -2274,  2846,   751, -2274,
   -1376,  -537,  -544,  -779, -1685, -2274, -2274, -2274, -2274, -2274,
   -2274, -1004, -1555,  -534,   815, -2274, -2274,   924, -2274, -2274,
   -2274,  -550,  1014,  -505,  -672,   821, -2274,  -520,  1147, -2274,
     704,  -475,    -3,  -831,    11, -2274,  2011,    24,  1641, -2274,
     967,  -484,  -999,  -709, -2274,  -538, -2274, -2274,  1405,    22,
   -2274,  1130, -2274, -2274, -2274, -2274, -2274, -2274, -2274,   740,
   -2274,   955, -2274,   569, -2274, -2274,   239,  -889, -2211, -2274,
      -6,  -416,  -232, -1814
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    34,    35,    36,    37,    38,  1280,  1238,   987,   824,
    1228,   976,    39,  1857,  1858,  1859,  1566,   805,  2476,  1567,
     806,   807,  1861,    40,    41,    42,    43,  1618,  2293,  1925,
    2294,  1659,  1612,   985,  1656,  1309,  1267,   986,   457,  1323,
    1926,  1894,  1310,    44,  1848,  2119,  2527,  1871,  2605,  2266,
    2267,  1568,  2566,  2567,  1850,  1917,  1220,  2560,  1630,  2416,
    1572,  1555,  2268,  1639,  2373,  2152,  1569,  2089,  1631,  2253,
    2463,  1288,  1632,  2464,  2246,  1633,  1263,  1285,  2091,  2568,
    1573,  1264,  2120,  1207,  1634,  2525,  1635,   467,  2271,   502,
    1909,   943,    46,   938,  1274,    47,  1281,    48,   503,   772,
    1807,  1500,    50,   494,   495,   615,   957,   496,    51,   624,
      52,   555,   977,   504,   978,   979,   630,    53,   988,   632,
     633,    54,    55,    56,  2314,  2159,   947,  1289,  1641,   468,
     506,  1504,  1155,  2236,    58,  1812,  1508,  1816,  2363,  2058,
    1811,  1818,  2457,  2514,  1813,  1509,  2364,  1510,    59,   512,
      60,    61,   643,   589,    62,  1211,   507,   710,    65,    66,
      67,   551,   545,   546,  1127,  1482,  1781,   776,   526,   527,
     563,  1257,  1162,  1163,  1517,  1829,  1187,  1188,   785,   786,
    1175,  1179,  1180,  1530,  1523,  1168,  2051,  2352,  2353,  2354,
    2225,  1183,  1184,   788,   789,   790,  1192,  1540,    69,  1486,
    1788,  1789,  1790,  2029,  2030,  2044,  2040,  2210,  2340,  1791,
    2218,  2581,  1792,  2331,  2332,  2433,  2047,  1798,  2345,  2346,
    2393,  1013,  1329,  1014,   711,  1015,  1341,   712,  1051,  1017,
     713,   714,   715,  1020,   716,   717,   718,   719,  1034,   720,
     721,  1068,  1337,  1338,   760,  1393,   723,   724,   725,  1794,
     726,  1122,  1472,  2358,  2448,  2449,  1774,  2013,  2193,  2330,
    2496,  2543,  2544,   727,  1469,  1117,  1118,   728,  2122,  1120,
    1386,  1412,   840,   841,  1025,  1363,  1364,  1389,  1701,  1396,
    1401,  1728,  1729,  1413,  1437,   729,  1348,  1349,  1685,  1036,
     730,   585,   845,   586,  1032,  1431,   738,   731,   732,  1536,
     538,  2336,   620,   925,   733,   734,   735,   736,   737,  2205,
     450,  2515,   959,   765,   843,  1570,  1427,    70,    81,   508,
      72,   756,   542,   757,   759,    73,   520,   521,    74,   532,
     533,   989,  1138,   990,    75,    76,   534,    77,  2312,    78,
     474,   452,   453,   930
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     451,   823,  1242,   980,    63,   791,   761,   739,   472,  1273,
     617,  1800,   498,   550,  1206,  1045,  1046,   448,   515,    49,
     619,    57,    71,   564,   934,   975,  1241,  1342,   547,   547,
    1419,  1213,  1225,  1059,   750,  1070,   931,  1079,  1851,   505,
     962,  1275,  1217,   513,  1385,   447,   926,  1276,    68,  1277,
     625,  1301,  1866,   537,  1868,  2071,  1420,  1253,  2142,  1246,
    1153,  2125,  1182,  1819,    68,    45,   825,  2149,   829,   548,
     833,  1761,  1847,  2153,  2000,  2026,  1343,   626,   652,  -498,
     575, -1043,  1087,   566,  1706,   635,   965,  1488,   629, -1043,
   -1043,   652,   751,   954,  2307,   455, -1044,   991, -1470,   567,
     954,  2302,  1330,  -691, -1044, -1044, -1470, -1470,  1532,  -704,
     579,  1093,  1535,  1330,  -917,  2043,  1429,  1627,   540,     3,
       4,  -917,  -724, -1021,  -501,  1429,  -729,  1293,  -719,   744,
    1485,   511,  2250,   511,   511,  1135,   949,  2349,  1466,   610,
     954,  2291,  1903,  1095,   637,  1467,  1198,  2254,  2064,   936,
    1132,   969,   511,   969,  2396,   556,   652,  1125,   652,   784,
    -936,  1450,  -732,  1683,  -732,  2333,  2041,  -936,   928,  1913,
    -498,  1078,   652,  1980,  1616,  1331,   561,  1556,  1356,   950,
     511,  1931,  1933,  2303,  2424,  -146,  1331,   -51,  2601,  1218,
    2408,  2482,   -51,  2257,  1209,  2588,   787,  2174,  2276,  2365,
     931,  1209,  1473,  1226,  1244,  1080,  1229,  1230,  1538,  1087,
    2234,  1879,  2516,  1943,   983,  -501,  1514,   635,  2150,   561,
    2420,    82,  1940,  2384,   635,  2083,   524,  2459,  2421,   559,
    1327,   774,  1130,    79,  1332,  2458,  2371,  1333,  1093,   557,
    1553,  2409,  1201,  1087,    24,  1332,  2456,  2612,  1333,  2410,
    2259,  2072,  1553,   752,   601,   753,  1195,  2388,  1087,  1133,
    2305,   522,   780,  1797,  2444,  1065,  2573,  2034,   967,   636,
    1095,   968,  1093,  2532,  2562,  1209,    80,  2411,    28,  1256,
    2365,  1941,  1357,  1209,  1451,  1210,  1066,   602,   511,  1151,
    1251,  1252,   560,  1212,  1269,  1706,  1554,  1452,  2035,  2157,
    1067,  1515,  1453,  2299,  1095,  2306,  2582,  1820,  1844,  1678,
    1539,  2073,  1706,  2213,  2182,   572,    24,  1334,    30,  1095,
     603,  2207,  2037,  1957,  2608,  2211,  2082,   525,   509,   635,
     635,   782,   775,  2175,  2468,  2406,  1474,  1454,  1334,  2262,
     951,  1394,   510,  1045,  1046,  2412,  2043,  -498,  1070,  1334,
      28,  1059,   929,  1003,   745,  1358,  2413,  2381,  2308,  2595,
    2079,   561,  2081,   955,  2151,  1219,   604,  2385,    33,    83,
     955,   511,  1216,  2309,  1134,  1255,    84,  1286,  2471,  2552,
    1203,  2263,  2602,  1087,  2460,  1334,  2575,  1193,  2558,  2422,
      30,  1268,  -501,  2613,  2563,  2333,  2264,  2199,  1147,  1617,
    2239,   636,  2479,    31,  2172,  2571,  1270,  -498,   636,    85,
     955,  2235,  1093,   611,  1359,  2547,  1548,  1360,  1326,  2365,
     926,   541,   746,  1126,  1194,  1216,    32,  2534,   543,     3,
       4,  1385,  2039,  2251,   651,   646,  1802,  1706,  1820,   952,
      33, -1471, -1471, -1471,  1095,  1335,  1311,  1524,  2164,   558,
    -917,  1532,  -501,  1430,  1832,    86,  1335,  1347,  2603,  1242,
     590,   552,  1763,  1645,  1336,  1821,  2564,  1086,   607,   617,
    1087,  1455,  1292,  2125,  1468,   587,  1605,   588,   591,  2292,
    1298,   550,  1345,  2604,  2302,  1295,  1204,  2265,   553,  2589,
     499,  2323,   562,   622,  1344,   634,  -936,  2337,  1024,  1093,
    1826,  2365,  2341,  1351,    68,  2343, -1471,  1355,   554,   956,
    1245,  -498,   754,   636,   636,   456,   961,  1880,  1361,  2533,
     451,   451,  2576,   792,   631,  2334,  1398,  1400,   582,  1345,
     931,  1095,  2414,   638,   639,  2415,  1116,   451,  1721,  1033,
    2310,   547,   928,  1417,  1303, -1043,  1804,  1605,    68,  -498,
    1938,  -498,   635,   741,  1426,   629,  -501,    63,  2241,  2481,
   -1044,   598, -1470,   780,   755,  2485,   566,  1044,   928,  2486,
     568,  1080,    49,  1050,    57,    71,   451,   451,   927,  2252,
     931,   762,   567,   773,  1487,   583,  -724, -1021,    64,   584,
    -729,  1065,  -719,  1065,  -501,  1083,  -501,  1128,  1489,  1136,
    1166,    68,  2093,  2247,    64,  1556,  1809,   973,   974,   973,
     974,  1432,  1066,   605,  1066,  1236,  1169,   451,    45,   608,
    1582,   549,  2238,  2278,  2279,  1362,  1067,   634,  1069, -1471,
    1585,  2438,   782,  1588,   634,   451,  1027,  2426,  1237,   499,
    1810,   583, -1471,   -51,   -51,   584,   583, -1471,  1580,  2538,
     584,   451,  1892,  1893,  1170,  1953,   565,   982,   459,  2295,
    1113,  1114,  1115,  1116,   982,  2553,  1024,  2554,   601,  1394,
    1394,  2094,  2248,   783,  1394,  1960,   928,  1965,  1574,   451,
    1855,  1657, -1471,  1385,  1662,    68,  1545,  1679,   550,  1663,
    1601,  1602,  1603,  1167,  2240,  2494,  1712,  1959,   451,   451,
     451,   602,   451,  1655,  1984,  2382,  2106,  2125,  2085,  1394,
    1394,  1905,  1644,  1581,   460,  1169,  1646,  1231,  1218,  1648,
    1065,   609,   451,  2495,  1661,  1981,   929,  2374,  1665,  1104,
    1666,   613,  1591,  2599,  1902,  1081,   636,  1598,  1664,   634,
     634,  1066,  1742,  2095,    24,  1084,  1718,  1719,  1720,  1721,
    1583,  2269,   929,  1170,  2607,  1586,   926,  1129,  1172,  1242,
     547,  1716,  1717,  1718,  1719,  1720,  1721,  1137,   640,   982,
     982,  1852,   451,  1236,  2383,  2270,   451,   451,    28,   641,
     604,  2583,  2584,  1803,  1065,   612,   574,   451,   577,  2086,
     581,  1160,  1161,  1218,  1165,   773,  1237,  1218,   928,   623,
     928,  1305,  1875,  1966,  1027,  1066,   652,   567,   567,  1681,
     567,  1171,   642,  1967,  1173,  1876, -1471,  1753,    30,  1069,
     644,  1881,   500,  1623,  1240,  1890,   645,  2610,   451,   451,
     451,    31,  1111,  1112,  1113,  1114,  1115,  1116,   646,  1823,
    1782,  1783,   647,  1754,  2121,  2087,  1145,  2088,   743,  1146,
    1232,  1243,  2462,  1233,    32,  1054,  1055,  1172,  1307,  1826,
     929,   780,  1830,   652,  1024,  2466,   781,   652,   501,  -544,
     463,  1737,   464,  1736,  -544,  1738,  1739,  1914,   928,   749,
    1918,  1853, -1471, -1471, -1471,   758,  1716,  1717,  1718,  1719,
    1720,  1721,   763,    24,  1219,   635,   466,   764,  1751,  1247,
    2395,   770,  1372,  1250,   594,  1044,   595,  1294,   635,  1373,
    1374,  1375, -1471,  1173,   583,  1438, -1021,   771,   584,  1111,
    1112,  1113,  1114,  1115,  1116,   651,  1799,    28,  1706,   451,
     782,   778,  1707,  1708,  1709,  2477,  2178,  1078,  -544,   766,
    1044,  1439,  1294,  1024,  1148, -1052, -1052,  1149,  1755,  1993,
    1258,  1259,   927,  1756,  1216,   596,  1299,   597,  1296,  1149,
    1297,  1325,   634,   767,  1326,  1038,  1039,    30,  1044,  1219,
     958,   783,  1273,  1219,  1942,  1944,  1945,  2511,   927,  -544,
      31,  1863,   929,  1865,   929,   793,  1394,  1394,  1394,  1394,
    1056,   631,  1394,  1394,  1394,  1394,  1394,  1394,  1394,  1394,
    1394,  1394,  1027,    32,  1275,  1637,  1339,  1638,  2161,  1340,
    1276,  1044,  1277,  1294,   797,    68,   459,    33,  1533,  1534,
     798,   800,  1218,   794,  1927,   451,  2033,  1497,   795,  1216,
     961,   451,   590,  1216,   451,  2104,  -430,  1543,   451,  1218,
    1149,  1440,  1394,  1394,    64,  2033,  1441,   587,   796,   588,
     591,  1442,   451,  1900,  1385,   451,   451,   451,   451,  2097,
    2080,  2572,   929,   808,  1024,   451,   451,  2600,  -572,  -572,
    1982,  1983,   460,  1365,  1854,  1855,    68,  2282,  2585,   636,
     809,  1027,   451,   451,   451,   451,   927,  1757,    64,   549,
     451,   451,   636,   826,  2096,   451,  2105,  1758,  2138,   451,
    2034,  1856,   451,   451,   451,   451,   451,   451,   451,   451,
     451,   932,  1613,   451,  1311,  1614,   933,  1218,   461,  2034,
     451,  1775,   451,  1776,   799,  2286,  1711,   830,  1878,   458,
    2614,  2035,  2212,   459,  2215,  2015,  2016,  2017,  2018,   565,
     935,    64,  2062,   451,   937,  1882,  2036,   928,   928,   928,
    2035,  1619,   939,  -430,  1326,  2037,  1777,   953,  1778,  1505,
    1490,   592,   451,  1922,  1825,  2036,   777,  1651,   779,   755,
    1652,   451,   451,  1680,  2037,  1687,  1149,  1691,  1149,  1725,
    1149,  2038,  1149,  1869,   946,  1443,  1870,  1712,   797,   460,
    1873,   948,  1345,  1874,   798,  1444,  1024,  1549,  1219,   958,
    2038,  1949,  1027,  1988,  1149,  -576,  -576,  1557,   927,  1560,
     927,   797,  1571,  1996,   960,  1219,  1149,   798,  1575,   963,
    1577,  2338,   964,  1886,  2060,    64,  2065,  2061,   463,  2066,
     464,  2084,  1584,   984,  1614,   461,   928,  1587,   635,   966,
     748,  1592,  1593,  1594,  1595,  2145,  1599,  1600,  1614,   451,
    1028,   465,   451,   451,   466,   451,  2121,   810,  1216,   769,
    2162,   810,  1048,  2163,   800,  2039,   797,  2118,   740,  1029,
     742,  1826,   798,  1345,  1031,  1216,   811,   797,  2183,  2243,
     811,  1340,  1614,   798,  2039,  2104,  2394,  1628,   927,  2244,
    -695,  2048,  1614,  1219,  2324,  2242,  1076,  1340,   799,  -575,
    -575,   462,  1038,  1039,  -702,   634,   941,   944,   945,  2375,
    1037,  1056,  2376,   801,  1141,  1143,  2443,   802,   634,  2443,
     451,   799,  2401,  1041,  1040,  1614,   812,  1047,  1042,  2137,
     812,   929,   929,   929,  1027,   982,  1574,  1327,  2126,  1660,
     451,   451,  1043,  2160,   803,   463,   451,   464,   982,    33,
    1376,  1377,  1378,  1216,  1379,  1380,  1381,  1382,  1383,  1384,
    1369,  1370,    24,  -692,   565,   565,  2339,   565,   465,  1049,
    -693,   466,   550,  1713,  1714,  1715,   799,  1716,  1717,  1718,
    1719,  1720,  1721,  1052,   451,   451,   451,   799,  1053,   451,
    2427,  1086,  1058,  1340,  1087,  2100,    28,  1060, -1471, -1471,
   -1471,   451,   451,   451,   451,  1061,  -696,  1062,   804,   451,
      87,  2430,   813,   454,  2431,   550,   813,  1121,  2435,   497,
     929,   961,   636,  1093,   451,   451,  1063,  -694,   523,   451,
    1094,  1123,   535,  1126,   797,  1064,    30,  1071,   800,  2441,
     798,  2445,  2442,   451,  2442,  1072,   451,  2454,   451,    31,
    2455,  1144,  1394,  2491,   928,  1095,  2455,  1082,   928,   814,
     928,   800,   815,   814,  2492,  2300,   815,  1340,   451,  1125,
    1139,  2500,    32,   816,   961,  1156,  1152,   816,  2505,   451,
    1157,  2442,  2519,   550,   781,  2520,    33,   827,   783,  2274,
    2121,   802,  1024,   451,  1189,  1191,   448,  2399,   931,  1196,
    1197,  1214,   590,  2548,   817,  1826,   961,   451,   817,  1215,
     448,  1216,  1345,  1224,   802,  1221,   800,   587,   828,   588,
     591,  1222,   451,   797,  1793,  2549,  1223,   800,  1149,   798,
    2283,  2284,  2579,  1927,  1248,  2442,  1394,  2229,  1793,  1235,
     451,   803,  1024,  1227,   799,  1234,    68,  2596,   819,   842,
    2455,  1239,   819,  1096,  1249,    64,  1254,   927,   927,   927,
    1261,  1262,  1024,  1266,  1271,   831,  1097,  1016,   820,   802,
    1272,  1098,   820,  1279,  1282,  1283,  1544,  1284,  1294,  1324,
     802,  1033,   804,  1044,  1050,  1328,  1346,  1352,   822,  1347,
     652,  1024,   822,  1872,  1402,  1403,   832,  1087,   451,  1415,
    1394,  1428,  1435,  1446,  1447,   804,  1101,   803,   842,  1026,
    1449,  1470,  1471,  1485,  1491,  1024,    64,  1498,  1499,  1506,
     560,  1525,  1526,  1513,  1907,  1527,  1528,  1546,   561,  1550,
    1027,  1679,  1551,   799,  1552,  1606,  1895,  1611,   929,  1615,
    1625,  1620,   929,  1278,   929,  1624,   927,   449,   634,  1626,
    1640,  1642,   473,  1104,  1628,  1643,   473,  1647,  1650,  1649,
     804,   514,   473,   519,    24,  1658,   519,  1668,  1670,   539,
    1302,   804,   473,   473,   928,  1671,  1672,   451,   982,  2118,
    1027,  1673,  1674,  1928,   800,  1929,  1436,   451,  1675,  1934,
    1935,   451,  2594,  1676,   451,  1689,  1693,  1690,    28,  1692,
    1027,   451,   451,   451,   451,  1694,  1695,   451,   451,   451,
     451,   451,   451,   451,   451,   451,   451,   519,  1696,  1698,
     451,   451,  1699,   539,   473,   539,   539,   539,  2010,  1027,
    1702,  1024,  1149,  1589,   451,  1016,  1731,   802,    30,  1679,
    1106,   451,  1724,    64,   451,  1730,   451,   635,  1242,   550,
    1732,    31,  1733,  1027,   451,  1752,  1747,   451,   451,  1734,
    1741,  1768,   451,   451,  1590,  1744,   550,  2231,  1797,  2429,
    1991,  2378,  1745,   800,    32,  1746,  1773,  1026,   451,  1759,
     451,  1769,  1771,  1772,  1806,  1808,  1815,  1822,    33,  1828,
    -577,   451,  -578,  1833,  1837,   448,  1834,   448,  1501,  1836,
     451,   842,   842,   842,  1838,  1840,  1842,  1843,  1846,  1849,
    1862,  1864,  1887,  1877,  1078,  1883,   451,  1884,  1885,  2472,
    1888,  1889,  1596,  1793,  1898,  1793,   802,  1891,   804,  1483,
    1911,    24,  1908,  1915,  2465,  2076,  1107,  1912,  1916, -1471,
   -1471, -1471,  1919,  1111,  1112,  1113,  1114,  1115,  1116,  1492,
    1920,  1495,  1923,  1597,  1930,  1024,  1334,  1936,   929,  2109,
    2434,  1947,  1948,  1952,   927,    28,  1727,  1706,   927,  1027,
     927,    64,  1726,  2434,  2127,  2128,  2129,  2130,  2131,  2132,
    2133,  2134,  2135,  2136,  1990,  1998,  2011,  1780,  1985,  1986,
    1987,  2493,   451,  2518,  2002,  1537,  2024,  2046,  1999,  2123,
    2050,  2057,   842,  2502,  2052,    30,  2032,  1312,  2474,  2054,
    2055,  2063,  2059,  2118,  2070,  2074,  2078,   804,    31,  2090,
    2092,  1895,  2108,  2156,  2141,  2147,  2155,   559,  2148,  2158,
    2166,   636,  2167,  1016,  1614,  2168,  2170,  2173,  2176,  1018,
    -545,    32,  2177,  2191,   451,  -545,  2201,  2208,  2202,  1795,
    2569,  1313,  2206,  2209,  2216,    33,   928,  2217,   810,  2222,
     928,  2223,  2501,  1795,  1024,  2221,  2245,  1502,  2224,  2237,
    2249,  1024,  2513,  2273,  1621,  1026,  1314,   811,  2272,  2277,
    1076,  2288,  2465,  2287,  2289,  2290,  2296,   451,   451,  2297,
     560,  2304,   451,  1027,  1315,  2298,  2311,   451,  1316,  2316,
     451,   451,  2313,  2317,  2319,   451,  2321,  2322,   651,  -545,
    2329,  1706,  1016,  2335,  2342,  1707,  1708,  1709,  2348,  1317,
    2357,  2361,  1318,  1076,  2367,  2369,   451,   812,  2098,  2370,
     451,    24,  1024,  2386,  2372,  2099,  1319,  2377,  2389,  2390,
    2391,  1436,  2392,   448,  2400,  2403,  2418,   448,  2404,  2407,
    -545,   451,  2419,  2432,  1026,  2428,  2437,  1770,  2447,   561,
    2451,  2440,  2456,  2230,  2232,    28,  2470,  2475,  2473,  2478,
    2488,  1793,  2487,  1787,  2489,  1793,  2226,  2499,  2228,  2507,
    2508,  2517,  2521,  2385,   927,  2523,    64,  1787,  2524,  2526,
    2529,   549,  2100,   451,  2530,   842,  2531,  2535,   539,   593,
    2537,  2536,  1027,   600,   928,    30,  2546,  1018,  2012,  1027,
    2559,  2565,   473,   813,  2574,  2580,  1320,  2587,    31,  2590,
    2592,  2597,  2598,  2611,  1321,   768,  2588,  2107,  2589,  2280,
    1576,  2111,  1494,  1016,  1860,   616,   473,   473,  1897,  2318,
     929,    32,  2139,  1024,   929,  2561,  1924,  2606,  2469,  2593,
    2586,  2301,  2417,  1845,  1205,  1503,  1867,   634,  2154,  1896,
     814,  2557,  2112,   815,  2591,  1322,  1841,   451,  2556,   519,
    1027,   519,  2146,  1901,   816,  1026,  2101,   539,  1024,   451,
     451,  1154,  1779,   451,  2068,   473,  1291,   982,  1710,  1304,
     562,  2233,  2512,  1703,  1704,   451,   539,  2490,  1723,   539,
    2067,  2360,   451,  1024,  2555,   817,  1024,   451,  1131,  1711,
     451,   451,   448,  1824,  1150,  1542,  1186,   451,   451,   448,
    1185,  1835,   842,  2053,   448,  1522,  2506,   448,  2344,   451,
    2227,   451,  1541,  1748,  1749,  1190,  1805,  2027,    64,  2200,
    1793,  2214,  2023,   539,   539,   539,   448,  1793,  1795,   819,
    1795,   451,  1793,  2379,  2439,  1793,  2498,  2503,  2497,  2504,
    2359,  2550,  1669,  2551,  1475,  1016,  2545,  1827,  1766,   820,
    1712,  1764,  1684,  1484,  1793,  1610,  1493,     0,     0,  1667,
       0,  1027,     0,     0,     0,  2397,  2398,  1030,   929,   822,
       0,  2102,     0,   842,  2103,     0,     0,  2405,     0,     0,
    2402,     0,     0,     0,     0,  1018,     0,  1026,     0,     0,
     451,  2123,     0,     0,     0,   451,  1027,     0,     0,     0,
       0,  2301,     0,     0,  1899,     0,     0,   448,     0,  1904,
    1906,   550,   451,  1910,     0,     0,   451,     0,     0,     0,
       0,  1027,     0,     0,  1027,   451,     0,  1921,   810,     0,
       0,     0,     0,   448,     0,  1793,   451,  1076,  2452,     0,
       0,     0,     0,     0,     0,     0,   927,   811,     0,     0,
     927,   451,  2022,     0,  2025,     0,     0,  1024,     0,     0,
       0,  1793,     0,     0,  1018,     0,     0,     0,   539,     0,
       0,     0,  1216,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   473,   473,     0,     0,  2484,     0,
       0,   539,   539,     0,  1159,     0,     0,   812,     0,     0,
       0,     0,   451,     0,  2480,   451,     0,  2254,     0,     0,
       0,     0,     0,  2255,   451,     0,     0,   539,  1208,     0,
       0,   451,   448,     0,     0,  2256,     0,     0,     0,   451,
     539,     0,     0,     0,     0,  2509,  1713,  1714,  1715,     0,
    1716,  1717,  1718,  1719,  1720,  1721,   448,   539,     0,   451,
    1793,   539,     0,  2257,     0,  2258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2019,  2020,  2021,   451,   451,
       0,     0,     0,     0,  1793,     0,  1795,     0,     0,     0,
    1795,     0,     0,   813,     0,  1018,     0,    64,     0,     0,
    1961,  1962,  1963,  1964,   927,  1027,  1968,  1969,  1970,  1971,
    1972,  1973,  1974,  1975,  1976,  1977,     0,   722,   722,     0,
    2259,   451,     0,   451,  2570,     0,     0,     0,     0,     0,
    2075,     0,     0,     0,     0,  2123,     0,     0,   448,     0,
     814,     0,     0,   815,     0,     0,  2260,     0,     0,     0,
       0,  1016,     0,     0,   816,     0,  2004,  2005,     0,     0,
       0,   842,     0,     0,  1265,     0,  1793,     0,     0,     0,
     539,     0,     0,   839,   844,     0,     0,     0,  1290,     0,
       0,   451,   451,     0,   616,   817,     0,   616,     0,     0,
       0,   473,   473,  1026,   473,   616,  2144,   539,     0,     0,
       0,  1016,     0,     0,  2261,     0,     0,     0,     0,  2262,
    1787,     0,     0,     0,  1787,     0,     0,  1302,     0,     0,
       0,  1016,   475,     0,     0,     0,     0,  1018,     0,   819,
       0,     0,   839,     0,   981,     0,     0,    64,    64,     0,
    -510,   981,     0,  1026,     0,     0,     0,     0,  1035,   820,
    1016,  2263,     0,  -510,     0,  1795,     0,     0,  -510,     0,
       0,     0,  1795,  1026,     0,     0,  2264,  1795,  1019,   822,
    1795,     0,     0,     0,  1016,   476,  1057,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1795,
     477,  1387,  1026,     0,     0,  1073,  1074,  1075,     0,  1077,
       0,     0,     0,  -510,     0,     0,     0,     0,     0,  2195,
    2196,  2197,  2198,     0,     0,     0,  1026,     0,     0,  1124,
       0,     0,  -510,     0,     0,    64,   616,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   651,   478,   981,  1706,   981,   981,     0,  1707,
    1708,  1709,   479,     0,     0,     0,   539,  2265,     0,     0,
       0,     0,     0,  -510,   480,     0,  1994,     0,     0,  1164,
    1795,     0,  -510,  1176,  1181,     0,   539,     0,   539,     0,
       0,     0,  1021,     0,     0,     0,  1787,     0,  1511,  1512,
    1016,  1787,     0,   481,  1787,     0,  1795,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1022,
       0,     0,   981,     0,     0,   981,   981,     0,     0,     0,
       0,     0,   539,     0,     0,   839,   839,   839,     0,     0,
    1208,   473,  2124,     0,     0,     0,  1019,     0,   482,     0,
       0,   473,  1558,   473,  1562,     0,   473,     0,     0,     0,
       0,     0,   473,     0,   473,     0,     0,     0,     0,     0,
       0, -1378,     0,     0,     0,   616,   473,     0,     0,     0,
     616,   473,     0,     0,    64,   473,   473,   473,   473,     0,
     473,   473,     0,     0,     0,  1795,     0,     0,     0,     0,
       0,     0,     0,     0,   483,    64,     0,     0,     0,     0,
       0,   539,  1622,  -510,     0,     0,     0,     0,   484,  1795,
       0,     0,     0,     0,  1016,  1636,     0,     0,     0,     0,
    1787,     0,     0,  1018,     0,     0,   839,     0,     0,  1076,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   485,
       0,   486,     0,  1711,     0,     0,     0,     0,   487,     0,
    1021,   488, -1378,     0,     0,     0,  1026,     0,  2387,     0,
    1023,     0,     0,     0,     0,   583,  2320,     0,   766,   584,
     489,     0,     0,  1018,  1306,  1308,     0,  1022,     0,     0,
       0,   490,    64,     0,     0,     0,     0,     0,   491,     0,
       0,  1795,     0,  1018,     0,     0,     0,   492,     0,     0,
       0,     0,     0, -1378,  1712,     0,     0,  2423,     0,     0,
       0,     0,     0,     0,     0,     0, -1378,     0,     0,     0,
       0, -1378,  1018,  1016,     0,     0, -1378,   493,  1350,    64,
    1016,     0,     0,     0,  1019, -1378,     0,     0, -1378,     0,
       0,     0,     0,  1353,  1354,     0,  1018,     0,     0,  1371,
    2380,  1366,  1388,  1367,  1368,  1399,     0,     0,     0,     0,
       0,     0,  1406,  1411,  2461,  1026, -1378,     0,  1404,     0,
    1405,     0,  2285,     0,     0,     0,     0,     0,  1387,  1421,
    1422,  1423,  1424,  1416,  1418, -1378,     0,  1433,  1434,     0,
       0,  1016,  1445,     0,     0,     0,  1448,  2483,     0,  1456,
    1457,  1458,  1459,  1460,  1461,  1462,  1463,  1464,    64,   539,
    1465,     0,     0,  1019,  2425,   651,  1796,   722,  1706,   839,
       0,     0,  1707,  1708,  1709,     0, -1378,     0,  1023, -1378,
    1796,     0,     0,  1026,  1814, -1378,     0,  1817,  1511,  2185,
    1496,     0,     0,     0,     0,     0,     0,     0,  1021,  1086,
       0,     0,  1087,     0,     0,     0,  1088,  1089,  1090,     0,
       0,     0,  1018,     0,     0,     0,     0,     0,  1074,  1075,
       0,     0,     0,  1091,     0,  1022,     0,     0,  1531,  1531,
       0,  1093,     0,     0,     0,  1265,     0,     0,  1094, -1378,
    1713,  1714,  1715,     0,  1716,  1717,  1718,  1719,  1720,  1721,
       0,     0,  1016,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1095,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1021,     0,   981,
       0,     0,     0,     0,  1019,     0,     0,  1016,     0,   981,
    1780,     0,   981,     0,  2124,  1265,   839,     0,     0,  1607,
    1608,   539,  1609,     0,  1022,  1265,   539,   539,   473,     0,
     539,     0,  1016,     0,     0,  1016, -1378,     0,     0,     0,
       0,     0,     0,     0,   539,     0,     0,     0,   616,  1026,
       0,     0, -1380,     0,     0,     0,  1018,     0,     0,     0,
   -1378,     0, -1378, -1378,  1265,  1265,     0,     0,     0,     0,
       0,     0,     0,     0,  1026,     0,     0,  1026,     0,     0,
       0,  1096,   981,     0,     0,     0,  1711,   839,     0,     0,
       0,     0,     0,     0,  1097,   981,  1023,     0, -1378,  1098,
    1387, -1378, -1378, -1378,     0,     0,     0,  1677,  1682,     0,
       0,     0,     0,  1688,     0,     0,     0,     0,  1021,     0,
    1099,  1100,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1101,     0,  1019,     0,     0,     0,
       0,     0,     0, -1380,     0,  1022,     0,  1712,     0,     0,
       0,     0,     0,  1705,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1102,  1018,     0,  1103,  1411,     0,
    1411,  1411,  1018,     0,  2014,  1023,  1743,     0,     0,     0,
       0,  1104,   539,   539,   539,   449,     0,  1796,  2031,     0,
       0,     0,  2031,  2045, -1380,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1016, -1380,     0,     0,
    1762,     0, -1380,  1765,     0,  1767,     0, -1380,     0,     0,
       0,  1511,     0,     0,     0,     0, -1380,     0,     0, -1380,
       0,     0,     0,  1018,     0,     0,     0,   539,     0,   473,
       0,     0,     0,  1265,  1208,  1265,     0,  1290,  2124,     0,
    1021,     0,     0,     0,     0,     0,     0, -1380,     0,     0,
    1801,     0,     0,   473,     0,  2110,     0,     0,  1106,     0,
       0,     0,     0,     0,  1164,     0, -1380,  1022,   473,   473,
     473,   473,   473,   473,   473,   473,   473,   473,     0,  1181,
       0,  1831,  1831,     0,     0,     0,  1023,     0,     0,     0,
       0,     0,     0,   539,     0,     0,     0,  1839,     0,     0,
       0,     0,     0,  1208,     0,     0,     0, -1380,     0,     0,
   -1380,  1290,     0,     0,   539,     0, -1380,     0,  1119,     0,
       0,  1265,     0,  1713,  1714,  1715,     0,  1716,  1717,  1718,
    1719,  1720,  1721,     0,  1018,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1107,   839,  1119,  1108,  1109,  1110,
       0,  1111,  1112,  1113,  1114,  1115,  1116,     0,     0,  1018,
   -1380,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1018,     0,     0,  1018,     0,     0,
   -1394,     0,     0,  2194,     0,     0,   539,   539,   539,   539,
       0,     0,     0,  2031,  2045,     0,  2031,     0,  1023,  2204,
       0,  1780,  1019,  1796,     0,     0,     0,  1796,     0,     0,
       0,  1937,  1939,  2220,  1951,  1119,  1946,     0,     0,     0,
    1119,     0,     0,     0,  1955,     0,     0, -1380,  1956,     0,
       0,  1958,  1814,     0,     0,     0,     0,  1511,     0,     0,
       0,  1387,     0,     0,     0,     0,     0,     0,     0,  1208,
       0, -1380,  1019, -1380, -1380,     0,     0,  1978,  1979,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1394,  1019,     0,  2281,     0,     0,     0,  1992,     0,
       0,  1995,     0,  1997,     0,     0,     0,     0,     0, -1380,
       0,  2001, -1380, -1380, -1380,     0,     0,     0,     0,  2008,
    2009,  1019,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1265,     0,     0,     0,  1021,     0,     0,  1636,
       0,     0, -1394,     0,     0,  1019,     0,     0,  2049,  2315,
       0,     0,     0,     0,     0, -1394,     0,  2056,     0,     0,
   -1394,     0,     0,  1022,     0, -1394,     0,     0,  1018,     0,
       0,     0,     0,  2069, -1394,     0,     0, -1394,     0,     0,
       0,     0,     0,     0,     0,   797,  1021,     0,     0,     0,
       0,   798,   449,  2031,     0,     0,     0,   473,   810,  1796,
       0,     0,     0,     0,  1796, -1394,  1021,  1796,   449,     0,
    2347,     0,  2350,  1022,     0,     0,     0,   811,     0,     0,
       0,     0,     0,     0, -1394,     0,  2366,     0,     0,     0,
       0,  1119,     0,  1022,     0,  1021,   981,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   616,   473,     0,  2140,
       0,     0,     0,  1119,     0,   539,     0,     0,  1395,  1021,
       0,  1019,  1022,     0,     0, -1394,     0,   812, -1394,  1119,
    1119,  1119,     0,  1119, -1394,     0,     0,     0,     0,   473,
     473,     0,     0,     0,     0,     0,  1022,     0,     0,  1208,
       0,   473,     0,     0,     0,   799,     0,  2165,     0,     0,
       0,  2169,     0,     0,   539,     0,     0,  2366,     0,     0,
       0,     0,     0,     0,  1023,     0,   651,     0,     0,  1706,
    1119,     0,     0,  1707,  1708,  1709,   473,     0, -1394,     0,
       0,     0,     0,  1796,     0,     0,     0,     0,     0,  2350,
    2186,     0,     0,     0,  2179,  2180,     0,     0,  2450,  2181,
       0,     0,   473,   813,  2184,     0,     0,  2187,  2188,     0,
    1119,   539,  2192,     0,  1023,     0,     0,     0,     0,     0,
       0,     0,  1119,     0,     0,  1021,     0,  1119,     0,  1780,
       0,     0,     0,   616,  1023,  1019,     0,     0,     0,     0,
       0,     0,     0,     0,   539,     0,     0,     0,     0,     0,
     814,     0,  1022,   815,     0, -1394,     0,     0,   722,     0,
       0,     0,     0,  1023,   816,     0,     0,     0,     0,     0,
       0,     0,   449,     0,     0,     0,     0,     0,   473, -1394,
       0, -1394, -1394,  2347,     0,   800,     0,  1023,     0,     0,
       0,     0,     0,     0,     0,   817,  2366,   616,   616,   616,
    2275,     0,     0,     0,     0,     0,     0,     0,   981,     0,
       0,     0,     0,   981,     0,     0,     0, -1394,     0,     0,
   -1394, -1394, -1394,   651,     0,     0,  1706,  1306,  1308,     0,
    1707,  1708,  1709,     0,   818,     0,     0,     0,   802,   819,
    2347,     0,     0,     0,  1019,     0,     0,     0,  2450,  1021,
       0,  1019,     0,     0,     0,     0,     0,     0,  1511,   820,
       0,     0,     0,     0,     0,   821,     0,  1711,     0,     0,
       0,     0,  1208,     0,     0,     0,  1022,     0,  2366,   822,
       0,     0,     0,     0,     0,     0,  2325,  2326,     0,     0,
    2327,     0,     0,   616,     0,     0,  1119,     0,     0,     0,
       0,     0,     0,  1023,     0,     0,     0,     0,     0,     0,
       0,     0,  1019,     0,     0,     0,     0,  1119,     0,     0,
       0,     0,     0,     0,  2355,  2356,     0,     0,  1712,   804,
       0,     0,     0,     0,  1119,     0,  1395,  1395,  2368,  1722,
       0,  1395,     0,     0,     0,  1119,     0,     0,     0,     0,
       0,     0,  1119,     0,     0,     0,     0,  1119,  1021,     0,
       0,     0,     0,     0,     0,  1021,     0,  1119,  1119,  1119,
    1119,     0,     0,     0,     0,     0,  1395,  1395,     0,  1119,
    1119,     0,     0,     0,     0,  1022,     0,     0,     0,  1306,
    1308,  1119,  1022,     0,  1119,     0,     0,     0,   981,     0,
       0,     0,  1119,  1119,  1119,  1119,  1119,  1119,  1119,  1119,
    1119,  1119,     0,     0,     0,     0,     0,     0,     0,     0,
     -38,     0,     0,  1019,  1711,     0,  1021,  1023,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,  2436,
       0,     0,  1119,     0,     0,     0,     0,     0,     2,     0,
       3,     4,  1077,  1022,     0,     0,     0,     0,  1019,     0,
       0,     0,     0,  2453,     0,     0,     5,     0,     0,     0,
       0,     0,     0,     0,     0,     6,     0,     0,  2467,     0,
       0,     0,     0,  1019,     0,  1712,  1019,     7,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     8,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     9,
       0,    10,     0,     0,  1713,  1714,  1715,     0,  1716,  1717,
    1718,  1719,  1720,  1721,     0,     0,     0,     0,    11,     0,
       0,     0,     0,     0,     0,     0,  1023,  1021,     0,     0,
       0,     0,    12,  1023,     0,     0,     0,     0,  2355,     0,
       0,     0,    13,  1119,  1119,  1119,     0,     0,    14,     0,
       0,     0,     0,     0,  1022,     0,    15,     0,    16,    17,
       0,     0,  1021,     0,     0,     0,  2528,     0,     0,  1086,
       0,     0,  1087,     0,     0,     0,  1088,  1089,  1090,     0,
       0,     0,     0,     0,     0,  2542,  2542,  1021,     0,  1022,
    1021,     0,     0,  1091,  1023,     0,     0,    18,     0,     0,
       0,  1093,     0,     0,     0,     0,     0,     0,  1094,     0,
       0,     0,     0,     0,  1022,     0,     0,  1022,  1119,     0,
       0,     0,   981,     0,  1119,     0,     0,     0,     0,     0,
    2542,     0,     0,  1095,     0,     0,    19,     0,     0,  1722,
    1722,  1119,     0,  1395,  1395,  1395,  1395,  1019,     0,  1395,
    1395,  1395,  1395,  1395,  1395,  1395,  1395,  1395,  1395,  1722,
       0,  1713,  1714,  1715,     0,  1716,  1717,  1718,  1719,  1720,
    1721,     0,     0,     0,     0,     0,     0,     0,     0,  1119,
       0,     0,  1085,     0,  1722,  1722,     0,  1086,  2542,  2609,
    1087,     0,     0,     0,  1088,  1089,  1090,     0,  1119,  1395,
    1395,  1119,     0,  1119,    20,  1023,     0,    21,     0,     0,
       0,  1091,     0,     0,  1092,  1086,     0,     0,  1087,  1093,
       0,     0,  1088,  1089,  1090,     0,  1094,     0,     0,     0,
       0,  1096,     0,     0,     0,    22,     0,     0,     0,  1091,
    1023,     0,     0,    23,  1097,     0,     0,  1093,     0,  1098,
     651,  1095,     0,  1706,  1094,    24,     0,  1707,  1708,  1709,
       0,  1021,    25,     0,     0,  1023,    26,     0,  1023,     0,
    1099,  1100,     0,     0,     0,  1119,    27,     0,     0,  1095,
       0,     0,     0,     0,  1101,     0,     0,     0,  1022,    28,
       0,     0,     0,     0,     0,     0,  1086,     0,     0,  1087,
       0,     0,     0,  1088,  1089,  1090,     0,     0,     0,     0,
       0,     0,     0,     0,  1102,     0,     0,  1103,     0,     0,
    1091,     0,     0,     0,    29,     0,     0,     0,  1093,    30,
       0,  1104,     0,     0,  1105,  1094,     0,     0,     0,     0,
       0,     0,    31,     0,     0,     0,     0,     0,     0,  1096,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1095,     0,  1097,     0,     0,    32,     0,  1098,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1096,     0,    33,
       0,     0,   -38,     0,     0,     0,     0,  1119,  1099,  1100,
    1097,  1119,  1119,     0,  1119,  1098,     0,  1722,  1722,  1722,
    1722,     0,  1101,     0,  1722,  1722,  1722,  1722,  1722,  1722,
    1722,  1722,  1722,  1722,  1119,  1119,  1099,  1100,  1106,     0,
       0,     0,     0,  1086,     0,     0,  1087,     0,  1119,     0,
    1101,  1119,  1102,  1119,     0,  1103,     0,  1119,     0,  1023,
    1722,  1722,     0,     0,  1119,  1119,     0,     0,     0,  1104,
       0, -1471,  1105,     0,     0,  1093,     0,     0,  1096,     0,
    1102,     0, -1471,  1103,     0,     0,     0,     0,     0,     0,
       0,  1097,     0,     0,     0,     0,  1098,  1104,     0,     0,
    1105,     0,     0,     0,     0,  1119,     0,  1095,     0,     0,
       0,     0,  1119,     0,     0,     0,     0,  1099,  1100,     0,
       0,     0,     0,     0,     0,  1119,     0,     0,     0,     0,
       0,  1101,  1712,     0,  1107,     0,     0,  1108,  1109,  1110,
       0,  1111,  1112,  1113,  1114,  1115,  1116,     0,     0,     0,
       0,     0,     0,     0,  1697,     0,  1106,     0,     0,     0,
       0,  1102,     0,     0,  1103,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1750,     0,     0,  1104,     0,
       0,  1105,     0,     0,  1106,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1119,     0,     0,     0,
       0,     0,     0,     0,     0, -1471,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1471,     0,
       0,     0,     0, -1471,     0,  1119,     0,     0,     0,  1395,
       0,     0,     0,     0,     0,  1119,  1119,  1119,     0,     0,
    1119,     0,     0,  1119,  1119,     0,     0,     0,  1119,     0,
       0,     0,  1107,     0,     0,  1108,  1109,  1110, -1471,  1111,
    1112,  1113,  1114,  1115,  1116,  1106,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1107,     0,     0,  1108,  1109,  1110,     0,  1111,  1112,  1113,
    1114,  1115,  1116,     0,     0,     0,     0,  1414,     0,     0,
       0,     0,     0,     0,     0,  1104,     0,     0,     0,     0,
       0,     0,     0,  1395,     0,     0,     0,     0,  1713,  1714,
    1715,     0,  1716,  1717,  1718,  1719,  1720,  1721,     0,     0,
       0,  1119,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1107,     0,     0,  1108,  1109,  1110,     0,  1111,  1112,
    1113,  1114,  1115,  1116,     0,     0,  1722,  1395,  1954,     0,
       0,  1119,  1119,  1119,     0,     0,     0,     0,     0,     0,
       0,     0, -1471,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1119,  1119,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1119,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1722,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1722,     0,     0,     0,     0,     0,     0, -1471,     0,
       0,     0,  1119,     0,     0,  1111,  1112,  1113,  1114,  1115,
    1116,     0,     0,     0,     0,     0,     0,     0,     0,  1119,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1119,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1119,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1119,     0,
       0,     0,    88,   648,   511,   649,   650,   651,   652,   653,
       0,     0,     0,     0,     0,     0,     0,    89,    90,    91,
      92,    93,    94,    95,    96,   834,    97,    98,    99,     0,
       0,     0,     0,     0,     0,     0,   100,   101,     0,   102,
     103,   104,   105,   106,   107,   108,   109,   654,   111,   655,
     656,     0,   114,   115,   116,   117,   118,   119,   657,   658,
     120,   121,   659,   660,   124,  1119,   125,   126,   127,   128,
     661,     0,   662,     0,   131,   132,   133,   134,   135,   136,
     137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   663,   664,   665,   666,   667,
     668,   669,   151,   152,   153,   154,   155,   156,   670,   671,
     159,   672,   160,     0,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,   835,     0,   172,   173,
     673,   175,   176,     0,   177,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,   186,   674,   188,   189,   190,
     191,   675,   676,   193,     0,   194,   195,   677,   197,     0,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
     206,     0,   207,     0,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,     0,   226,   227,   228,   229,   230,
     231,   232,   678,   679,     0,   680,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,     0,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   681,   682,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   683,   270,   684,   272,   273,
     274,   275,   685,   276,   277,   278,   279,   686,   687,   281,
     688,   283,   284,   285,     0,   286,   287,     0,     0,   689,
     289,   290,     0,     0,   291,   292,   293,   294,   295,   690,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   691,   309,   310,   311,   312,   313,   314,     0,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   692,
     325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,   693,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     694,   362,   363,   364,   365,   366,   367,   368,   369,   695,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   696,     0,   385,   386,     0,   387,
     388,   389,   390,   391,   392,   393,     0,   697,   698,     0,
       0,   396,   397,   699,   399,   700,   701,   401,   402,   403,
     404,   405,   406,   407,     0,     0,   408,   409,   410,   411,
     412,   702,     0,   413,   414,   415,   416,   417,   418,   703,
     836,   420,   421,   422,   423,   424,   425,     0,     0,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   704,     0,     0,     0,     0,     0,     0,   705,
     706,   837,     0,     0,     0,     0,     0,     0,   708,   838,
       0,     0,     0,   709,    88,   648,   511,   649,   650,   651,
     652,   653,     0,     0,     0,     0,     0,     0,     0,    89,
      90,    91,    92,    93,    94,    95,    96,     0,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,   105,   106,   107,   108,   109,   654,
     111,   655,   656,     0,   114,   115,   116,   117,   118,   119,
     657,   658,   120,   121,   659,   660,   124,     0,   125,   126,
     127,   128,   661,     0,   662,     0,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   663,   664,   665,
     666,   667,   668,   669,   151,   152,   153,   154,   155,   156,
     670,   671,   159,   672,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   673,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   674,   188,
     189,   190,   191,   675,   676,   193,     0,   194,   195,   677,
     197,     0,   198,     0,   199,   200,     0,   201,   202,   203,
     204,   205,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   232,   678,   679,     0,   680,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,     0,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   681,
     682,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   683,   270,   684,
     272,   273,   274,   275,   685,   276,   277,   278,   279,   686,
     687,   281,   688,   283,   284,   285,     0,   286,   287,     0,
       0,   689,   289,   290,     0,     0,   291,   292,   293,   294,
     295,   690,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   691,   309,   310,   311,   312,   313,
     314,     0,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   692,   325,   326,   327,   328,     0,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,   693,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    24,   357,   358,   359,
     360,   361,   694,   362,   363,   364,   365,   366,   367,   368,
     369,   695,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   696,     0,   385,   386,
      28,   387,   388,   389,   390,   391,   392,   393,     0,   697,
     698,     0,     0,   396,   397,   699,   399,   700,   701,   401,
     402,   403,   404,   405,   406,   407,     0,     0,   408,   409,
     410,   411,   412,   702,     0,   413,   414,   415,   416,   417,
     628,   703,     0,   420,   421,   422,   423,   424,   425,     0,
       0,   426,     0,    31,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   704,     0,    32,     0,     0,     0,
       0,   705,   706,     0,     0,     0,     0,     0,     0,     0,
     708,  2446,     0,     0,     0,   709,    88,   648,   511,   649,
     650,   651,   652,   653,     0,     0,     0,     0,     0,     0,
       0,    89,    90,    91,    92,    93,    94,    95,    96,     0,
      97,    98,    99,     0,     0,     0,     0,     0,     0,     0,
     100,   101,     0,   102,   103,   104,   105,   106,   107,   108,
     109,   654,   111,   655,   656,     0,   114,   115,   116,   117,
     118,   119,   657,   658,   120,   121,   659,   660,   124,     0,
     125,   126,   127,   128,   661,     0,   662,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   663,
     664,   665,   666,   667,   668,   669,   151,   152,   153,   154,
     155,   156,   670,   671,   159,   672,   160,     0,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,   673,   175,   176,     0,   177,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,   186,
     674,   188,   189,   190,   191,   675,   676,   193,     0,   194,
     195,   677,   197,     0,   198,     0,   199,   200,     0,   201,
     202,   203,   204,   205,   206,     0,   207,     0,   208,   209,
       0,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,     0,   226,
     227,   228,   229,   230,   231,   232,   678,   679,     0,   680,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,     0,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   681,   682,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   683,
     270,   684,   272,   273,   274,   275,   685,   276,   277,   278,
     279,   686,   687,   281,   688,   283,   284,   285,     0,   286,
     287,     0,     0,   689,   289,   290,     0,     0,   291,   292,
     293,   294,   295,   690,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   691,   309,   310,   311,
     312,   313,   314,     0,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   692,   325,   326,   327,   328,     0,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,   693,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    24,   357,
     358,   359,   360,   361,   694,   362,   363,   364,   365,   366,
     367,   368,   369,   695,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   696,     0,
     385,   386,    28,   387,   388,   389,   390,   391,   392,   393,
       0,   697,   698,     0,     0,   396,   397,   699,   399,   700,
     701,   401,   402,   403,   404,   405,   406,   407,     0,     0,
     408,   409,   410,   411,   412,   702,     0,   413,   414,   415,
     416,   417,   628,   703,     0,   420,   421,   422,   423,   424,
     425,     0,     0,   426,     0,    31,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   704,     0,    32,     0,
       0,     0,     0,   705,   706,     0,     0,     0,     0,     0,
       0,     0,   708,     0,     0,     0,     0,   709,    88,   648,
     511,   649,   650,   651,   652,   653,     0,     0,     0,     0,
       0,     0,     0,    89,    90,    91,    92,    93,    94,    95,
      96,     0,    97,    98,    99,     0,     0,     0,     0,     0,
       0,     0,   100,   101,     0,   102,   103,   104,   105,   106,
     107,   108,   109,   654,   111,   655,   656,  1407,   114,   115,
     116,   117,   118,   119,   657,   658,   120,   121,   659,   660,
     124,     0,   125,   126,   127,   128,   661,     0,   662,     0,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   663,   664,   665,   666,   667,   668,   669,   151,   152,
     153,   154,   155,   156,   670,   671,   159,   672,   160,     0,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   673,   175,   176,     0,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,   186,   674,   188,   189,   190,   191,   675,   676,   193,
       0,   194,   195,   677,   197,     0,   198,     0,   199,   200,
    1408,   201,   202,   203,   204,   205,   206,     0,   207,     0,
     208,   209,     0,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
       0,   226,   227,   228,   229,   230,   231,   232,   678,   679,
       0,   680,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,     0,  1409,   246,   247,   248,   249,     0,
     250,   251,   252,   681,   682,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   683,   270,   684,   272,   273,   274,   275,   685,   276,
     277,   278,   279,   686,   687,   281,   688,   283,   284,   285,
       0,   286,   287,     0,     0,   689,   289,   290,     0,     0,
     291,   292,   293,   294,   295,   690,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   691,   309,
     310,   311,   312,   313,   314,     0,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   692,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
     693,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   694,   362,   363,   364,
     365,   366,   367,   368,   369,   695,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     696,     0,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,     0,   697,   698,     0,  1410,   396,   397,   699,
     399,   700,   701,   401,   402,   403,   404,   405,   406,   407,
       0,     0,   408,   409,   410,   411,   412,   702,     0,   413,
     414,   415,   416,   417,   418,   703,     0,   420,   421,   422,
     423,   424,   425,     0,     0,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   704,     0,
       0,     0,     0,     0,     0,   705,   706,     0,     0,     0,
       0,     0,     0,     0,   708,     0,     0,     0,     0,   709,
      88,   648,   511,   649,   650,   651,   652,   653,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
     105,   106,   107,   108,   109,   654,   111,   655,   656,     0,
     114,   115,   116,   117,   118,   119,   657,   658,   120,   121,
     659,   660,   124,     0,   125,   126,   127,   128,   661,     0,
     662,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   663,   664,   665,   666,   667,   668,   669,
     151,   152,   153,   154,   155,   156,   670,   671,   159,   672,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   673,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   674,   188,   189,   190,   191,   675,
     676,   193,     0,   194,   195,   677,   197,     0,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   232,
     678,   679,     0,   680,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   681,   682,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   683,   270,   684,   272,   273,   274,   275,
     685,   276,   277,   278,   279,   686,   687,   281,   688,   283,
     284,   285,     0,   286,   287,     0,     0,   689,   289,   290,
       0,     0,   291,   292,   293,   294,   295,   690,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     691,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   692,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,   693,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   694,   362,
     363,   364,   365,   366,   367,   368,   369,   695,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   696,     0,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,     0,   697,   698,     0,     0,   396,
     397,   699,   399,   700,   701,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,   702,
       0,   413,   414,   415,   416,   417,   418,   703,     0,   420,
     421,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     704,     0,     0,     0,     0,     0,     0,   705,   706,   707,
       0,     0,     0,     0,     0,     0,   708,     0,     0,     0,
       0,   709,    88,   648,   511,   649,   650,   651,   652,   653,
       0,     0,     0,     0,     0,     0,     0,    89,    90,    91,
      92,    93,    94,    95,    96,  1174,    97,    98,    99,     0,
       0,     0,     0,     0,     0,     0,   100,   101,     0,   102,
     103,   104,   105,   106,   107,   108,   109,   654,   111,   655,
     656,     0,   114,   115,   116,   117,   118,   119,   657,   658,
     120,   121,   659,   660,   124,     0,   125,   126,   127,   128,
     661,     0,   662,     0,   131,   132,   133,   134,   135,   136,
     137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   663,   664,   665,   666,   667,
     668,   669,   151,   152,   153,   154,   155,   156,   670,   671,
     159,   672,   160,     0,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   172,   173,
     673,   175,   176,     0,   177,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,   186,   674,   188,   189,   190,
     191,   675,   676,   193,     0,   194,   195,   677,   197,     0,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
     206,     0,   207,     0,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,     0,   226,   227,   228,   229,   230,
     231,   232,   678,   679,     0,   680,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,     0,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   681,   682,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   683,   270,   684,   272,   273,
     274,   275,   685,   276,   277,   278,   279,   686,   687,   281,
     688,   283,   284,   285,     0,   286,   287,     0,     0,   689,
     289,   290,     0,     0,   291,   292,   293,   294,   295,   690,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   691,   309,   310,   311,   312,   313,   314,     0,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   692,
     325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,   693,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     694,   362,   363,   364,   365,   366,   367,   368,   369,   695,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   696,     0,   385,   386,     0,   387,
     388,   389,   390,   391,   392,   393,     0,   697,   698,     0,
       0,   396,   397,   699,   399,   700,   701,   401,   402,   403,
     404,   405,   406,   407,     0,     0,   408,   409,   410,   411,
     412,   702,     0,   413,   414,   415,   416,   417,   418,   703,
       0,   420,   421,   422,   423,   424,   425,     0,     0,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   704,     0,     0,     0,     0,     0,     0,   705,
     706,     0,     0,     0,     0,     0,     0,     0,   708,     0,
       0,     0,     0,   709,    88,   648,   511,   649,   650,   651,
     652,   653,     0,     0,     0,     0,     0,     0,     0,    89,
      90,    91,    92,    93,    94,    95,    96,     0,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,   105,   106,   107,   108,   109,   654,
     111,   655,   656,     0,   114,   115,   116,   117,   118,   119,
     657,   658,   120,   121,   659,   660,   124,     0,   125,   126,
     127,   128,   661,     0,   662,     0,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   663,   664,   665,
     666,   667,   668,   669,   151,   152,   153,   154,   155,   156,
     670,   671,   159,   672,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   673,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   674,   188,
     189,   190,   191,   675,   676,   193,     0,   194,   195,   677,
     197,     0,   198,     0,   199,   200,     0,   201,   202,   203,
     204,   205,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   232,   678,   679,     0,   680,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,     0,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   681,
     682,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   683,   270,   684,
     272,   273,   274,   275,   685,   276,   277,   278,   279,   686,
     687,   281,   688,   283,   284,   285,     0,   286,   287,     0,
       0,   689,   289,   290,     0,     0,   291,   292,   293,   294,
     295,   690,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   691,   309,   310,   311,   312,   313,
     314,     0,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   692,   325,   326,   327,   328,     0,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,   693,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   694,   362,   363,   364,   365,   366,   367,   368,
     369,   695,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   696,     0,   385,   386,
       0,   387,   388,   389,   390,   391,   392,   393,     0,   697,
     698,     0,     0,   396,   397,   699,   399,   700,   701,   401,
     402,   403,   404,   405,   406,   407,     0,     0,   408,   409,
     410,   411,   412,   702,     0,   413,   414,   415,   416,   417,
     418,   703,     0,   420,   421,   422,   423,   424,   425,     0,
       0,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   704,     0,     0,     0,     0,     0,
       0,   705,   706,     0,     0,     0,     0,     0,     0,     0,
     708,  1397,     0,     0,     0,   709,    88,   648,   511,   649,
     650,   651,   652,   653,     0,     0,     0,     0,     0,     0,
       0,    89,    90,    91,    92,    93,    94,    95,    96,     0,
      97,    98,    99,     0,     0,     0,     0,     0,     0,     0,
     100,   101,     0,   102,   103,   104,   105,   106,   107,   108,
     109,   654,   111,   655,   656,     0,   114,   115,   116,   117,
     118,   119,   657,   658,   120,   121,   659,   660,   124,     0,
     125,   126,   127,   128,   661,     0,   662,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   663,
     664,   665,   666,   667,   668,   669,   151,   152,   153,   154,
     155,   156,   670,   671,   159,   672,   160,     0,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,   673,   175,   176,     0,   177,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,   186,
     674,   188,   189,   190,   191,   675,   676,   193,     0,   194,
     195,   677,   197,     0,   198,     0,   199,   200,     0,   201,
     202,   203,   204,   205,   206,     0,   207,     0,   208,   209,
       0,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,     0,   226,
     227,   228,   229,   230,   231,   232,   678,   679,     0,   680,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,     0,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   681,   682,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   683,
     270,   684,   272,   273,   274,   275,   685,   276,   277,   278,
     279,   686,   687,   281,   688,   283,   284,   285,     0,   286,
     287,     0,     0,   689,   289,   290,     0,     0,   291,   292,
     293,   294,   295,   690,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   691,   309,   310,   311,
     312,   313,   314,     0,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   692,   325,   326,   327,   328,     0,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,   693,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   694,   362,   363,   364,   365,   366,
     367,   368,   369,   695,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   696,     0,
     385,   386,     0,   387,   388,   389,   390,   391,   392,   393,
       0,   697,   698,     0,     0,   396,   397,   699,   399,   700,
     701,   401,   402,   403,   404,   405,   406,   407,     0,     0,
     408,   409,   410,   411,   412,   702,     0,   413,   414,   415,
     416,   417,   418,   703,  1604,   420,   421,   422,   423,   424,
     425,     0,     0,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   704,     0,     0,     0,
       0,     0,     0,   705,   706,     0,     0,     0,     0,     0,
       0,     0,   708,     0,     0,     0,     0,   709,    88,   648,
     511,   649,   650,   651,   652,   653,     0,     0,     0,     0,
       0,     0,     0,    89,    90,    91,    92,    93,    94,    95,
      96,     0,    97,    98,    99,     0,     0,     0,     0,     0,
       0,     0,   100,   101,     0,   102,   103,   104,   105,   106,
     107,   108,   109,   654,   111,   655,   656,     0,   114,   115,
     116,   117,   118,   119,   657,   658,   120,   121,   659,   660,
     124,     0,   125,   126,   127,   128,   661,     0,   662,     0,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   663,   664,   665,   666,   667,   668,   669,   151,   152,
     153,   154,   155,   156,   670,   671,   159,   672,   160,     0,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   673,   175,   176,     0,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,   186,   674,   188,   189,   190,   191,   675,   676,   193,
       0,   194,   195,   677,   197,     0,   198,     0,   199,   200,
    1408,   201,   202,   203,   204,   205,   206,     0,   207,     0,
     208,   209,     0,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
       0,   226,   227,   228,   229,   230,   231,   232,   678,   679,
       0,   680,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,     0,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   681,   682,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   683,   270,   684,   272,   273,   274,   275,   685,   276,
     277,   278,   279,   686,   687,   281,   688,   283,   284,   285,
       0,   286,   287,     0,     0,   689,   289,   290,     0,     0,
     291,   292,   293,   294,   295,   690,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   691,   309,
     310,   311,   312,   313,   314,     0,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   692,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
     693,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   694,   362,   363,   364,
     365,   366,   367,   368,   369,   695,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     696,     0,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,     0,   697,   698,     0,     0,   396,   397,   699,
     399,   700,   701,   401,   402,   403,   404,   405,   406,   407,
       0,     0,   408,   409,   410,   411,   412,   702,     0,   413,
     414,   415,   416,   417,   418,   703,     0,   420,   421,   422,
     423,   424,   425,     0,     0,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   704,     0,
       0,     0,     0,     0,     0,   705,   706,     0,     0,     0,
       0,     0,     0,     0,   708,     0,     0,     0,     0,   709,
      88,   648,   511,   649,   650,   651,   652,   653,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
     105,   106,   107,   108,   109,   654,   111,   655,   656,     0,
     114,   115,   116,   117,   118,   119,   657,   658,   120,   121,
     659,   660,   124,     0,   125,   126,   127,   128,   661,     0,
     662,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   663,   664,   665,   666,   667,   668,   669,
     151,   152,   153,   154,   155,   156,   670,   671,   159,   672,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   673,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   674,   188,   189,   190,   191,   675,
     676,   193,     0,   194,   195,   677,   197,     0,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   232,
     678,   679,     0,   680,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   681,   682,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   683,   270,   684,   272,   273,   274,   275,
     685,   276,   277,   278,   279,   686,   687,   281,   688,   283,
     284,   285,     0,   286,   287,     0,     0,   689,   289,   290,
       0,     0,   291,   292,   293,   294,   295,   690,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     691,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   692,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,   693,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   694,   362,
     363,   364,   365,   366,   367,   368,   369,   695,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   696,     0,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,     0,   697,   698,     0,     0,   396,
     397,   699,   399,   700,   701,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,   702,
       0,   413,   414,   415,   416,   417,   418,   703,     0,   420,
     421,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     704,     0,     0,     0,     0,     0,     0,   705,   706,     0,
       0,     0,     0,     0,     0,     0,   708,     0,     0,     0,
       0,   709,    88,   648,   511,   649,   650,   651,   652,   653,
       0,     0,     0,     0,     0,     0,     0,    89,    90,    91,
      92,    93,    94,    95,    96,     0,    97,    98,    99,     0,
       0,     0,     0,     0,     0,     0,   100,   101,     0,   102,
     103,   104,   105,   106,   107,   108,   109,   654,   111,   655,
     656,     0,   114,   115,   116,   117,   118,   119,   657,   658,
     120,   121,   659,   660,   124,     0,   125,   126,   127,   128,
     661,     0,   662,     0,   131,   132,   133,   134,   135,   136,
     137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   663,   664,   665,   666,   667,
     668,   669,   151,   152,   153,   154,   155,   156,   670,   671,
     159,   672,   160,     0,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   172,   173,
     673,   175,   176,     0,   177,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,   186,   674,   188,   189,   190,
     191,   675,   676,   193,     0,   194,   195,   677,   197,     0,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
     206,     0,   207,     0,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,     0,   226,   227,   228,   229,   230,
     231,   232,   678,   679,     0,   680,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,     0,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   681,   682,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   683,   270,   684,   272,   273,
     274,   275,   685,   276,   277,   278,   279,   686,   687,   281,
     688,   283,   284,   285,     0,   286,   287,     0,     0,   689,
     289,   290,     0,     0,   291,   292,   293,   294,   295,   690,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   691,   309,   310,   311,   312,   313,   314,     0,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   692,
     325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,   693,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     694,   362,   363,   364,   365,   366,   367,   368,   369,   695,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   696,     0,   385,   386,     0,   387,
     388,   389,   390,   391,   392,   393,     0,   697,   698,     0,
       0,   396,   397,   699,   399,   700,   701,   401,   402,   403,
     404,   405,   406,   407,     0,     0,   408,   409,   410,   411,
     412,   702,     0,   413,   414,   415,   416,   417,   418,   703,
       0,   420,   421,   422,   423,   424,   425,     0,     0,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   704,     0,     0,     0,     0,     0,     0,  1177,
    1178,     0,     0,     0,     0,     0,     0,     0,   708,     0,
       0,     0,     0,   709,    88,  1529,   511,   649,   650,   651,
     652,   653,     0,     0,     0,     0,     0,     0,     0,    89,
      90,    91,    92,    93,    94,    95,    96,     0,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,   105,   106,   107,   108,   109,   654,
     111,   655,   656,     0,   114,   115,   116,   117,   118,   119,
     657,   658,   120,   121,   659,   660,   124,     0,   125,   126,
     127,   128,   661,     0,   662,     0,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   663,   664,   665,
     666,   667,   668,   669,   151,   152,   153,   154,   155,   156,
     670,   671,   159,   672,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   673,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   674,   188,
     189,   190,   191,   675,   676,   193,     0,   194,   195,   677,
     197,     0,   198,     0,   199,   200,     0,   201,   202,   203,
     204,   205,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   232,   678,   679,     0,   680,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,     0,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   681,
     682,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   683,   270,   684,
     272,   273,   274,   275,   685,   276,   277,   278,   279,   686,
     687,   281,   688,   283,   284,   285,     0,   286,   287,     0,
       0,   689,   289,   290,     0,     0,   291,   292,   293,   294,
     295,   690,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   691,   309,   310,   311,   312,   313,
     314,     0,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   692,   325,   326,   327,   328,     0,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,   693,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   694,   362,   363,   364,   365,   366,   367,   368,
     369,   695,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   696,     0,   385,   386,
       0,   387,   388,   389,   390,   391,   392,   393,     0,   697,
     698,     0,     0,   396,   397,   699,   399,   700,   701,   401,
     402,   403,   404,   405,   406,   407,     0,     0,   408,   409,
     410,   411,   412,   702,     0,   413,   414,   415,   416,   417,
     418,   703,     0,   420,   421,   422,   423,   424,   425,     0,
       0,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   704,     0,     0,     0,     0,     0,
       0,   705,   706,     0,     0,     0,     0,     0,     0,     0,
     708,     0,     0,     0,     0,   709,    88,   648,   511,   649,
     650,   651,   652,   653,     0,     0,     0,     0,     0,     0,
       0,    89,    90,    91,    92,    93,    94,    95,    96,     0,
      97,    98,    99,     0,     0,     0,     0,     0,     0,     0,
     100,   101,     0,   102,   103,   104,   105,   106,   107,   108,
     109,   654,   111,   655,   656,     0,   114,   115,   116,   117,
     118,   119,   657,   658,   120,   121,   659,   660,   124,     0,
     125,   126,   127,   128,   661,     0,   662,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   663,
     664,   665,   666,   667,   668,   669,   151,   152,   153,   154,
     155,   156,   670,   671,   159,   672,   160,     0,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,   673,   175,   176,     0,   177,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,   186,
     674,   188,   189,   190,   191,   675,   676,   193,     0,   194,
     195,   677,   197,     0,   198,     0,   199,   200,     0,   201,
     202,   203,   204,   205,   206,     0,   207,     0,   208,   209,
       0,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,     0,   226,
     227,   228,   229,   230,   231,   232,   678,   679,     0,   680,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,     0,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   681,   682,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   683,
     270,   684,   272,   273,   274,   275,   685,   276,   277,   278,
     279,   686,   687,   281,   688,   283,   284,   285,     0,   286,
     287,     0,     0,   689,   289,   290,     0,     0,   291,   292,
     293,   294,   295,   690,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   691,   309,   310,   311,
     312,   313,   314,     0,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   692,   325,   326,   327,   328,     0,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,   693,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   694,   362,   363,   364,   365,   366,
     367,   368,   369,   695,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   696,     0,
     385,   386,     0,   387,   388,   389,   390,   391,   392,   393,
       0,   697,   698,     0,     0,   396,   397,   699,   399,   700,
     701,   401,   402,   403,   404,   405,   406,   407,     0,     0,
     408,   409,   410,   411,   412,   702,     0,   413,   414,   415,
     416,   417,   418,   703,     0,   420,   421,   422,   423,   424,
     425,     0,     0,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   704,     0,     0,     0,
       0,     0,     0,   705,   706,     0,     0,     0,     0,     0,
       0,     0,  2351,     0,     0,     0,     0,   709,    88,   648,
     511,   649,   650,   651,   652,   653,     0,     0,     0,     0,
       0,     0,     0,    89,    90,    91,    92,    93,    94,    95,
      96,     0,    97,    98,    99,     0,     0,     0,     0,     0,
       0,     0,   100,   101,     0,   102,   103,   104,   105,   106,
     107,   108,  2539,   654,   111,   655,   656,     0,   114,   115,
     116,   117,   118,   119,   657,   658,   120,   121,   659,   660,
     124,     0,   125,   126,   127,   128,   661,     0,   662,     0,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
    2540,   663,   664,   665,   666,   667,   668,   669,   151,   152,
     153,   154,   155,   156,   670,   671,   159,   672,   160,     0,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   673,   175,   176,     0,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,   186,   674,   188,   189,   190,   191,   675,   676,   193,
       0,   194,   195,   677,   197,     0,   198,     0,   199,   200,
       0,   201,   202,   203,   204,   205,   206,     0,   207,     0,
     208,   209,     0,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
       0,   226,   227,   228,   229,   230,   231,   232,   678,   679,
       0,   680,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,     0,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   681,   682,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   683,   270,   684,   272,   273,   274,   275,   685,   276,
     277,   278,   279,   686,   687,   281,   688,   283,   284,   285,
       0,   286,   287,     0,     0,   689,   289,   290,     0,     0,
     291,   292,   293,   294,   295,   690,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   691,   309,
     310,   311,   312,   313,   314,     0,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   692,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
     693,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   694,   362,   363,   364,
     365,   366,   367,   368,   369,   695,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     696,     0,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,     0,   697,   698,     0,     0,   396,   397,   699,
     399,   700,   701,   401,   402,   403,   404,  2541,   406,   407,
       0,     0,   408,   409,   410,   411,   412,   702,     0,   413,
     414,   415,   416,   417,   418,   703,     0,   420,   421,   422,
     423,   424,   425,     0,     0,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   704,     0,
       0,     0,     0,     0,     0,   705,   706,     0,     0,     0,
       0,     0,     0,     0,   708,     0,     0,     0,     0,   709,
      88,   648,   511,   649,   650,   651,   652,   653,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
     105,   106,   107,   108,   109,   654,   111,   655,   656,     0,
     114,   115,   116,   117,   118,   119,   657,   658,   120,   121,
     659,   660,   124,     0,   125,   126,   127,   128,   661,     0,
     662,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,  2540,   663,   664,   665,   666,   667,   668,   669,
     151,   152,   153,   154,   155,   156,   670,   671,   159,   672,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   673,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   674,   188,   189,   190,   191,   675,
     676,   193,     0,   194,   195,   677,   197,     0,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   232,
     678,   679,     0,   680,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   681,   682,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   683,   270,   684,   272,   273,   274,   275,
     685,   276,   277,   278,   279,   686,   687,   281,   688,   283,
     284,   285,     0,   286,   287,     0,     0,   689,   289,   290,
       0,     0,   291,   292,   293,   294,   295,   690,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     691,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   692,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,   693,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   694,   362,
     363,   364,   365,   366,   367,   368,   369,   695,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   696,     0,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,     0,   697,   698,     0,     0,   396,
     397,   699,   399,   700,   701,   401,   402,   403,   404,  2541,
     406,   407,     0,     0,   408,   409,   410,   411,   412,   702,
       0,   413,   414,   415,   416,   417,   418,   703,     0,   420,
     421,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     704,     0,     0,     0,     0,     0,     0,   705,   706,     0,
       0,     0,     0,     0,     0,     0,   708,     0,     0,     0,
       0,   709,    88,   648,   511,   649,   650,   651,   652,   653,
       0,     0,     0,     0,     0,     0,     0,    89,    90,    91,
      92,    93,    94,    95,    96,     0,    97,    98,    99,     0,
       0,     0,     0,     0,     0,     0,   100,   101,     0,   102,
     103,   104,   105,   106,   107,   108,   109,   654,   111,   655,
     656,     0,   114,   115,   116,   117,   118,   119,   657,   658,
     120,   121,   659,   660,   124,     0,   125,   126,   127,   128,
     661,     0,   662,     0,   131,   132,   133,   134,   135,   136,
     137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   663,   664,   665,   666,   667,
     668,   669,   151,   152,   153,   154,   155,   156,   670,   671,
     159,     0,   160,     0,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   172,   173,
     673,   175,   176,     0,   177,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,   186,   674,   188,   189,   190,
     191,   675,   676,   193,     0,   194,   195,   677,   197,     0,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
     206,     0,   207,     0,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,     0,   226,   227,   228,   229,   230,
     231,   232,   678,   679,     0,   680,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,     0,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   681,   682,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   683,   270,   684,   272,   273,
     274,   275,     0,   276,   277,   278,   279,   686,   687,   281,
     688,   283,   284,   285,     0,   286,   287,     0,     0,   689,
     289,   290,     0,     0,   291,   292,   293,   294,   295,   690,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   691,   309,   310,   311,   312,   313,   314,     0,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   692,
     325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     694,   362,   363,   364,   365,   366,   367,   368,   369,   695,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   696,     0,   385,   386,     0,   387,
     388,   389,   390,   391,   392,   393,     0,   697,   698,     0,
       0,   396,   397,   699,   399,   700,   701,   401,   402,   403,
     404,   405,   406,   407,     0,     0,   408,   409,   410,   411,
     412,   702,     0,   413,   414,   415,   416,   417,   418,   703,
       0,   420,   421,   422,   423,   424,   425,     0,     0,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,     0,  1390,
    1391,     0,     0,    88,   648,   511,   649,   650,  1392,   652,
     653,     0,     0,   709,     0,     0,     0,     0,    89,    90,
      91,    92,    93,    94,    95,    96,     0,    97,    98,    99,
       0,     0,     0,     0,     0,     0,     0,   100,   101,     0,
     102,   103,   104,   105,   106,   107,   108,   109,   654,   111,
     655,   656,     0,   114,   115,   116,   117,   118,   119,   657,
     658,   120,   121,   659,   660,   124,     0,   125,   126,   127,
     128,   661,     0,   662,     0,   131,   132,   133,   134,   135,
     136,   137,   138,   139,     0,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   663,   664,   665,   666,
     667,   668,   669,   151,   152,   153,   154,   155,   156,   670,
     671,   159,     0,   160,     0,   161,   162,   163,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   172,
     173,   673,   175,   176,     0,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,   186,   674,   188,   189,
     190,   191,   675,   676,   193,     0,   194,   195,   677,   197,
       0,   198,     0,   199,   200,     0,   201,   202,   203,   204,
     205,   206,     0,   207,     0,   208,   209,     0,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,     0,   226,   227,   228,   229,
     230,   231,   232,   678,   679,     0,   680,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,     0,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   681,   682,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   683,   270,   684,   272,
     273,   274,   275,     0,   276,   277,   278,   279,   686,   687,
     281,   688,   283,   284,   285,     0,   286,   287,     0,     0,
     288,   289,   290,     0,     0,   291,   292,   293,   294,   295,
     690,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   691,   309,   310,   311,   312,   313,   314,
       0,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     692,   325,   326,   327,   328,     0,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,  1518,  1519,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   694,   362,   363,   364,   365,   366,   367,   368,   369,
     695,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   696,     0,   385,   386,     0,
     387,   388,   389,   390,   391,   392,   393,     0,   697,   698,
       0,     0,   396,   397,   699,   399,   700,   701,   401,   402,
     403,   404,   405,   406,   407,     0,     0,   408,   409,   410,
     411,   412,   702,     0,   413,   414,   415,   416,   417,   418,
     703,     0,   420,   421,   422,   423,   424,   425,     0,     0,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,     0,     0,     0,     0,     0,     0,     0,
    1520,  1521,     0,     0,     0,     0,     0,     0,     0,  1392,
       0,     0,     0,     0,   709,    88,   648,   511,   649,   650,
     651,   652,   653,     0,     0,     0,     0,     0,     0,     0,
      89,    90,    91,    92,    93,    94,    95,    96,     0,    97,
      98,    99,     0,     0,     0,     0,     0,     0,     0,   100,
     101,     0,   102,   103,   104,   105,   106,   107,   108,   109,
     654,   111,   655,   656,     0,   114,   115,   116,   117,   118,
     119,   657,   658,   120,   121,   659,   660,   124,     0,   125,
     126,   127,   128,   661,     0,   662,     0,   131,   132,   133,
     134,   135,   136,   137,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   663,   664,
     665,   666,   667,   668,   669,   151,   152,   153,   154,   155,
     156,   670,   671,   159,     0,   160,     0,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   673,   175,   176,     0,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,   186,   674,
     188,   189,   190,   191,   675,   676,   193,     0,   194,   195,
     677,   197,     0,   198,     0,   199,   200,     0,   201,   202,
     203,   204,   205,   206,     0,   207,     0,   208,   209,     0,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,     0,   226,   227,
     228,   229,   230,   231,   232,   678,   679,     0,   680,     0,
     236,     0,   238,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     681,   682,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   683,   270,
     684,   272,   273,   274,   275,     0,   276,   277,   278,   279,
     686,   687,   281,   688,   283,   284,   285,     0,   286,   287,
       0,     0,   689,   289,   290,     0,     0,   291,   292,   293,
     294,   295,   690,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   691,   309,   310,   311,   312,
     313,   314,     0,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   692,   325,   326,   327,   328,     0,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   694,   362,   363,   364,   365,   366,   367,
     368,   369,   695,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   696,     0,   385,
     386,     0,   387,   388,   389,   390,   391,   392,   393,     0,
     697,   698,     0,     0,   396,   397,   699,   399,   700,   701,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,   702,     0,   413,   414,   415,   416,
     417,   418,   703,     0,   420,   421,   422,   423,   424,   425,
       0,     0,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,     0,     0,     0,     0,     0,
       0,     0,  1390,  1391,     0,     0,     0,     0,     0,     0,
       0,  1392,     0,     0,     0,     0,   709,    88,   648,   511,
     649,   650,   651,   652,   653,     0,     0,     0,     0,     0,
       0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
       0,    97,    98,    99,     0,     0,     0,     0,     0,     0,
       0,   100,   101,     0,   102,   103,   104,   105,   106,   107,
     108, -1471,   654,   111,   655,   656,     0,   114,   115,   116,
     117,   118,   119,   657,   658,   120,   121,   659,   660,   124,
       0,   125,   126,   127,   128,   661,     0,   662,     0,   131,
     132,   133,   134,   135,   136,   137,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,   146,   147,   148,  2540,
     663,   664,   665,   666,   667,   668,   669,   151,   152,   153,
     154,   155,   156,   670,   671,   159,   672,   160,     0,   161,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   172,   173,   673,   175,   176,     0,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
     186,   674,   188,   189,   190,   191,   675,   676,   193,     0,
     194,   195,   677,   197,     0,   198,     0,   199,   200,     0,
     201,   202,   203,   204, -1471,   206,     0,   207,     0,   208,
     209,     0,   210,   211,   212,   213,   214, -1471,   216,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,     0,
     226,   227,   228,   229,   230,   231,   232,   678,   679,     0,
     680,     0,   236,     0,     0,   239,   240,   241,   242,   243,
     244,   245,     0,     0,   246,   247,   248, -1471,     0,   250,
     251,   252,   681,   682,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     683,   270,   684,   272,   273,   274,   275,     0,   276,   277,
       0,   279,   686,   687,   281,   688,   283,   284,   285,     0,
     286,   287,     0,     0,   689,   289,   290,     0,     0,   291,
     292,   293,   294,   295,   690,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   691,   309,   310,
     311,   312,   313,   314,     0,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   692,   325,   326,   327,   328,     0,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,   693,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   694,   362,   363,   364,   365,
     366, -1471,   368,   369,   695,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   696,
       0,   385,   386,     0,   387,   388,   389,   390,   391,   392,
     393,     0,   697,   698,     0,     0,   396,   397,   699,   399,
     700,   701,   401,   402,   403,   404,  2541,   406,   407,     0,
       0,   408,   409,   410,   411,   412,   702,     0,   413,   414,
     415,   416,   417,   418,   703,     0,   420,   421,   422,   423,
     424,   425,     0,     0,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446, -1471,     0,     0,
       0,     0,     0,     0,   705,   706,     0,     0,     0,     0,
       0,     0,     0,   708,     0,     0,     0,     0,   709,    88,
     648,   511,   649,   650,   651,   652,   653,     0,     0,     0,
       0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
      95,    96,     0,    97,    98,    99,     0,     0,     0,     0,
       0,     0,     0,   100,   101,     0,   102,   103,   104,   105,
     106,   107,   108,     0,   654,   111,   655,   656,     0,   114,
     115,   116,   117,   118,   119,   657,   658,   120,   121,   659,
     660,   124,     0,   125,   126,   127,   128,   661,     0,   662,
       0,   131,   132,   133,   134,   135,   136,   137,   138,   139,
       0,   140,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   663,   664,   665,   666,   667,   668,   669,   151,
     152,   153,   154,   155,   156,   670,   671,   159,   672,   160,
       0,   161,   162,   163,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,   172,   173,   673,   175,   176,
       0,   177,   178,   179,     0,   180,     0,   182,     0,   183,
     184,   185,   186,   674,   188,   189,   190,   191,   675,   676,
     193,     0,   194,   195,   677,   197,     0,   198,     0,   199,
     200,     0,   201,   202,   203,   204,     0,   206,     0,   207,
       0,   208,   209,     0,   210,   211,   212,   213,   214,     0,
     216,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,     0,   226,   227,   228,   229,   230,   231,   232,   678,
     679,     0,   680,     0,   236,     0,     0,   239,   240,   241,
     242,   243,   244,   245,     0,     0,   246,   247,   248,     0,
       0,   250,   251,   252,   681,   682,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   683,   270,   684,   272,   273,   274,   275,     0,
     276,   277,     0,   279,   686,   687,   281,   688,   283,   284,
     285,     0,   286,   287,     0,     0,   689,   289,   290,     0,
       0,   291,   292,   293,   294,   295,   690,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   306,   307,   691,
     309,   310,   311,   312,   313,   314,     0,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   692,   325,   326,   327,
     328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,   693,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   694,   362,   363,
     364,   365,   366,     0,   368,   369,   695,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   696,     0,   385,   386,     0,   387,   388,   389,   390,
     391,   392,   393,     0,   697,   698,     0,     0,   396,   397,
     699,   399,   700,   701,   401,   402,   403,   404,   405,   406,
     407,     0,     0,   408,   409,   410,   411,   412,   702,     0,
     413,   414,   415,   416,   417,   418,   703,     0,   420,   421,
     422,   423,   424,   425,     0,     0,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,     0,   705,   706,   469,     0,
       0,     0,     0,     0,     0,   708,     0,     0,     0,     0,
     709,     0,     0,    89,    90,    91,    92,    93,    94,    95,
      96,     0,    97,    98,    99,     0,     0,     0,     0,     0,
    2028,     0,   100,   101,     0,   102,   103,   104,     0,   106,
     107,   108,   109,   110,     0,   112,   113,     0,   114,   115,
     116,   117,   118,   119,     0,     0,   120,   121,   122,   123,
     124,     0,   125,   126,   127,   128,   129,     0,     0,     0,
     131,   132,   133,   134,   135,     0,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,  -631,   147,   148,
     149,     0,     0,     0,     0,     0,     0,     0,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   174,   175,   176,     0,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,   198,     0,   199,     0,
       0,  -631,   202,   203,   204,     0,   206,     0,   207,     0,
     208,   209,     0,   210,   211,   212,   213,   214,     0,   216,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
       0,   226,  -631,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,     0,     0,   239,  -631,   241,   242,
     243,   244,   245,     0,     0,   246,  -631,   248,     0,     0,
     250,   251,   252,     0,     0,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,  -631,   271,   272,   273,   274,   275,     0,   276,
     277,     0,   279,     0,   280,   281,   282,   283,   284,   285,
       0,   286,   287,     0,     0,   288,   289,   290,     0,     0,
     291,   292,     0,   294,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,     0,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,   341,   342,  -631,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,     0,   362,   363,   364,
     365,   366,     0,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,     0,   389,   390,   391,
     392,   393,     0,   394,   395,     0,     0,   396,   397,   398,
     399,   400,     0,   401,   402,   403,   404,   405,   406,   407,
       0,     0,   408,   409,   410,   411,   412,     0,     0,   413,
     414,   415,   416,   417,   418,   419,     0,   420,     0,   422,
     423,   424,   425,     0,     0,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,     0,
       0,    88,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   766,    89,    90,    91,    92,
      93,    94,    95,    96,     0,    97,    98,    99,     0,     0,
       0,     0,     0,     0,     0,   100,   101,     0,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
       0,   114,   115,   116,   117,   118,   119,     0,   658,   120,
     121,   122,   123,   124,     0,   125,   126,   127,   128,   661,
       0,   662,     0,   131,   132,   133,   134,   135,   136,   137,
     138,   139,     0,   140,   141,   142,   143,   144,   145,     0,
     146,   147,   148,   149,   663,   664,   665,   666,   667,   668,
     669,   151,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,   161,   162,   163,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,   172,   173,   174,
     175,   176,     0,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     675,     0,   193,     0,   194,   195,   196,   197,     0,   198,
       0,   199,   200,     0,   201,   202,   203,   204,   205,   206,
       0,   207,     0,   208,   209,     0,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,     0,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,  1784,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   681,   682,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,     0,   276,   277,   278,   279,     0,   687,   281,   282,
     283,   284,   285,     0,   286,   287,     0,   536,   288,   289,
     290,     0,     0,   291,   292,   293,   294,   295,   690,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   691,   309,   310,   311,   312,   313,   314,     0,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,   347,  1785,   349,   350,   351,   352,   353,
     354,   355,   356,    24,   357,   358,   359,   360,   361,   694,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   696,     0,   385,   386,    28,   387,   388,
     389,   390,   391,   392,   393,     0,   394,   395,     0,     0,
     396,   397,   699,   399,   700,     0,   401,   402,   403,   404,
     405,   406,   407,     0,     0,   408,   409,   410,   411,   412,
     702,     0,   413,   414,   415,   416,   417,   628,   419,     0,
     420,   421,   422,   423,   424,   425,     0,     0,   426,     0,
      31,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,     0,     0,    32,    88,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1786,     0,    89,
      90,    91,    92,    93,    94,    95,    96,     0,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,     0,   114,   115,   116,   117,   118,   119,
       0,   658,   120,   121,   122,   123,   124,     0,   125,   126,
     127,   128,   661,     0,   662,     0,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   663,   664,   665,
     666,   667,   668,   669,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   675,     0,   193,     0,   194,   195,   196,
     197,     0,   198,     0,   199,   200,     0,   201,   202,   203,
     204,   205,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,  1784,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   681,
     682,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,     0,   276,   277,   278,   279,     0,
     687,   281,   282,   283,   284,   285,     0,   286,   287,     0,
     536,   288,   289,   290,     0,     0,   291,   292,   293,   294,
     295,   690,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   691,   309,   310,   311,   312,   313,
     314,     0,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,   347,  1785,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   694,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   696,     0,   385,   386,
       0,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,     0,     0,   396,   397,   699,   399,   700,     0,   401,
     402,   403,   404,   405,   406,   407,     0,     0,   408,   409,
     410,   411,   412,   702,     0,   413,   414,   415,   416,   417,
     418,   419,     0,   420,   421,   422,   423,   424,   425,     0,
       0,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,     0,    88,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1786,    89,    90,    91,    92,    93,    94,    95,    96,     0,
      97,    98,    99,     0,     0,     0,     0,     0,     0,     0,
     100,   101,     0,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,     0,   114,   115,   116,   117,
     118,   119,     0,   658,   120,   121,   122,   123,   124,     0,
     125,   126,   127,   128,   661,     0,   662,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   663,
     664,   665,   666,   667,   668,   669,   151,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,   174,   175,   176,     0,   177,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   675,     0,   193,     0,   194,
     195,   196,   197,     0,   198,     0,   199,   200,     0,   201,
     202,   203,   204,   205,   206,     0,   207,     0,   208,   209,
       0,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,     0,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,     0,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   681,   682,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,     0,   276,   277,   278,
     279,     0,   687,   281,   282,   283,   284,   285,     0,   286,
     287,     0,     0,   288,   289,   290,     0,     0,   291,   292,
     293,   294,   295,   690,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   691,   309,   310,   311,
     312,   313,   314,     0,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,   347,  1785,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   694,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   696,     0,
     385,   386,     0,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,     0,     0,   396,   397,   699,   399,   700,
       0,   401,   402,   403,   404,   405,   406,   407,     0,     0,
     408,   409,   410,   411,   412,   702,     0,   413,   414,   415,
     416,   417,   418,   419,     0,   420,   421,   422,   423,   424,
     425,     0,     0,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,     0,     0,    88,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    33,    89,    90,    91,    92,    93,    94,    95,
      96,     0,    97,    98,    99,     0,     0,     0,     0,     0,
       0,     0,   100,   101,     0,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,     0,   114,   115,
     116,   117,   118,   119,     0,   658,   120,   121,   122,   123,
     124,     0,   125,   126,   127,   128,   661,     0,   662,     0,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   663,   664,   665,   666,   667,   668,   669,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   174,   175,   176,     0,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   675,     0,   193,
       0,   194,   195,   196,   197,     0,   198,     0,   199,   200,
       0,   201,   202,   203,   204,   205,   206,     0,   207,     0,
     208,   209,     0,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
       0,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,     0,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   681,   682,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,     0,   276,
     277,   278,   279,     0,   687,   281,   282,   283,   284,   285,
       0,   286,   287,     0,     0,   288,   289,   290,     0,     0,
     291,   292,   293,   294,   295,   690,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   691,   309,
     310,   311,   312,   313,   314,     0,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   694,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     696,     0,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,     0,   394,   395,     0,     0,   396,   397,   699,
     399,   700,     0,   401,   402,   403,   404,   405,   406,   407,
       0,     0,   408,   409,   410,   411,   412,   702,     0,   413,
     414,   415,   416,   417,   418,   419,     0,   420,   421,   422,
     423,   424,   425,     0,     0,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,     0,
     627,   969,   511,     0,     0,     0,   652,     0,     0,     0,
       0,     0,     0,     0,  2362,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
     130,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,     0,     0,     0,   150,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     970,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
       0,   276,   277,   278,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,   971,     0,   288,   289,   290,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,   972,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,     0,   627,     0,     0,     0,     0,   973,   974,  1653,
       0,     0,     0,     0,     0,     0,  1654,    89,    90,    91,
      92,    93,    94,    95,    96,     0,    97,    98,    99,     3,
       4,     0,     0,     0,     0,     0,   100,   101,     0,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,     0,   114,   115,   116,   117,   118,   119,     0,     0,
     120,   121,   122,   123,   124,     0,   125,   126,   127,   128,
     129,     0,   130,     0,   131,   132,   133,   134,   135,   136,
     137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,     0,     0,     0,   150,     0,
       0,     0,   151,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   172,   173,
     174,   175,   176,     0,   177,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
     206,     0,   207,     0,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,     0,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,     0,     0,   246,
     247,   248,   249,     0,   250,   251,   252,     0,     0,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,     0,   276,   277,   278,   279,     0,   280,   281,
     282,   283,   284,   285,     0,   286,   287,     0,     0,   288,
     289,   290,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,    24,   357,   358,   359,   360,   361,
       0,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,    28,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,     0,
       0,   396,   397,   398,   399,   400,     0,   401,   402,   403,
     404,   405,   406,   407,     0,     0,   408,   409,   410,   411,
     412,     0,     0,   413,   414,   415,   416,   417,   628,   419,
       0,   420,   421,   422,   423,   424,   425,     0,     0,   426,
       0,    31,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,     0,    32,   469,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    33,     0,
      89,    90,    91,    92,    93,    94,    95,    96,     0,    97,
      98,    99,     0,     0,     0,     0,     0,     0,     0,   100,
     101,     0,   102,   103,   104,     0,   106,   107,   108,   109,
     110,     0,   112,   113,     0,   114,   115,   116,   117,   118,
     119,     0,     0,   120,   121,   122,   123,   124,     0,   125,
     126,   127,   128,   129,     0,     0,     0,   131,   132,   133,
     134,   135,     0,   137,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   147,   148,   149,     0,     0,
       0,     0,     0,     0,     0,   151,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   174,   175,   176,     0,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,   198,     0,   199,     0,     0,     0,   202,
     203,   204,     0,   206,     0,   207,     0,   208,   209,     0,
     210,   211,   212,   213,   214,     0,   216,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,     0,   226,     0,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,   239,     0,   241,   242,   243,   244,   245,
       0,     0,   246,     0,   248,     0,     0,   250,   251,   252,
       0,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,     0,
     271,   272,   273,   274,   275,     0,   276,   277,     0,   279,
       0,   280,   281,   282,   283,   284,   285,     0,   286,   287,
       0,     0,   288,   289,   290,     0,     0,   291,   292,     0,
     294,     0,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,     0,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,    24,   357,   358,
     359,   360,   361,     0,   362,   363,   364,   365,   366,     0,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,    28,   387,     0,   389,   390,   391,   392,   393,     0,
     394,   395,     0,     0,   396,   397,   398,   399,   400,     0,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
     417,   628,   419,     0,   420,     0,   422,   423,   424,   425,
       0,     0,   426,     0,    31,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,     0,     0,    32,   469,     0,
    2203,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    33,     0,    89,    90,    91,    92,    93,    94,    95,
      96,     0,    97,    98,    99,     0,     0,     0,     0,     0,
       0,     0,   100,   101,     0,   102,   103,   104,     0,   106,
     107,   108,   109,   110,     0,   112,   113,     0,   114,   115,
     116,   117,   118,   119,     0,     0,   120,   121,   122,   123,
     124,     0,   125,   126,   127,   128,   129,     0,     0,     0,
     131,   132,   133,   134,   135,     0,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,     0,   147,   148,
     149,     0,     0,     0,     0,     0,     0,     0,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   174,   175,   176,     0,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,   198,     0,   199,     0,
       0,     0,   202,   203,   204,     0,   206,     0,   207,     0,
     208,   209,     0,   210,   211,   212,   213,   214,     0,   216,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
       0,   226,     0,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,     0,     0,   239,     0,   241,   242,
     243,   244,   245,     0,     0,   246,     0,   248,     0,     0,
     250,   251,   252,     0,     0,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,     0,   271,   272,   273,   274,   275,     0,   276,
     277,     0,   279,     0,   280,   281,   282,   283,   284,   285,
       0,   286,   287,     0,     0,   288,   289,   290,     0,     0,
     291,   292,     0,   294,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,     0,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,   341,   342,     0,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,     0,   362,   363,   364,
     365,   366,     0,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,     0,   389,   390,   391,
     392,   393,     0,   394,   395,     0,     0,   396,   397,   398,
     399,   400,     0,   401,   402,   403,   404,   405,   406,   407,
       0,     0,   408,   409,   410,   411,   412,     0,     0,   413,
     414,   415,   416,   417,   418,   419,     0,   420,     0,   422,
     423,   424,   425,     0,     0,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,     0,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2219,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   747,    89,    90,    91,
      92,    93,    94,    95,    96,     0,    97,    98,    99,     0,
       0,     0,     0,     0,     0,     0,   100,   101,     0,   102,
     103,   104,     0,   106,   107,   108,   109,   110,     0,   112,
     113,     0,   114,   115,   116,   117,   118,   119,     0,     0,
     120,   121,   122,   123,   124,     0,   125,   126,   127,   128,
     129,     0,     0,     0,   131,   132,   133,   134,   135,     0,
     137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   147,   148,   149,     0,     0,     0,     0,     0,
       0,     0,   151,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   172,   173,
     174,   175,   176,     0,   177,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
     198,     0,   199,     0,     0,     0,   202,   203,   204,     0,
     206,     0,   207,     0,   208,   209,     0,   210,   211,   212,
     213,   214,     0,   216,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,     0,   226,     0,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,     0,     0,
     239,     0,   241,   242,   243,   244,   245,     0,     0,   246,
       0,   248,     0,     0,   250,   251,   252,     0,     0,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,     0,   271,   272,   273,
     274,   275,     0,   276,   277,     0,   279,     0,   280,   281,
     282,   283,   284,   285,     0,   286,   287,     0,     0,   288,
     289,   290,     0,     0,   291,   292,     0,   294,     0,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
       0,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
       0,   362,   363,   364,   365,   366,     0,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
       0,   389,   390,   391,   392,   393,     0,   394,   395,     0,
       0,   396,   397,   398,   399,   400,     0,   401,   402,   403,
     404,   405,   406,   407,     0,     0,   408,   409,   410,   411,
     412,     0,     0,   413,   414,   415,   416,   417,   418,   419,
       0,   420,     0,   422,   423,   424,   425,     0,     0,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,     0,     0,   469,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1507,    89,
      90,    91,    92,    93,    94,    95,    96,     0,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,     0,   106,   107,   108,   109,   110,
       0,   112,   113,     0,   114,   115,   116,   117,   118,   119,
       0,     0,   120,   121,   122,   123,   124,     0,   125,   126,
     127,   128,   129,     0,     0,     0,   131,   132,   133,   134,
     135,     0,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,     0,   147,   148,   149,     0,     0,     0,
       0,     0,     0,     0,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,   198,     0,   199,     0,     0,     0,   202,   203,
     204,     0,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   214,     0,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,     0,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
       0,     0,   239,     0,   241,   242,   243,   244,   245,     0,
       0,   246,     0,   248,     0,     0,   250,   251,   252,     0,
       0,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,     0,   271,
     272,   273,   274,   275,     0,   276,   277,     0,   279,     0,
     280,   281,   282,   283,   284,   285,     0,   286,   287,     0,
       0,   288,   289,   290,     0,     0,   291,   292,     0,   294,
       0,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,     0,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,     0,   362,   363,   364,   365,   366,     0,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,     0,   389,   390,   391,   392,   393,     0,   394,
     395,     0,     0,   396,   397,   398,   399,   400,     0,   401,
     402,   403,   404,   405,   406,   407,     0,     0,   408,   409,
     410,   411,   412,     0,     0,   413,   414,   415,   416,   417,
     418,   419,     0,   420,     0,   422,   423,   424,   425,     0,
       0,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,   992,
     969,   511,     0,     0,  1372,   652,     0,     0,     0,     0,
    2012,  1373,  1374,  1375,    89,    90,    91,    92,    93,    94,
      95,    96,   847,    97,    98,    99,   848,   849,   850,   851,
     852,   853,   854,   100,   101,   855,   102,   103,   104,   105,
     106,   107,   108,     0,   993,   111,   994,   995,   856,   114,
     115,   116,   117,   118,   119,   857,   858,   120,   121,   996,
     997,   124,   859,   125,   126,   127,   128,     0,   860,   130,
     861,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     862,   140,   141,   142,   143,   144,   145,   863,   146,   147,
     148,   149,   864,   865,   866,   150,   867,   868,   869,   151,
     152,   153,   154,   155,   156,   998,   999,   159,   870,   160,
     871,   161,   162,   163,   164,   165,   166,   872,   167,   168,
     169,   170,   171,   873,   874,   172,   173,   673,   175,   176,
     875,   177,   178,   179,   876,   180,   181,   182,   877,   183,
     184,   185,   186,     0,   188,   189,   190,   191,     0,   878,
     193,   879,   194,   195,  1000,   197,   880,   198,   881,   199,
     200,   882,   201,   202,   203,   204,   205,   206,   883,   207,
     884,     0,   209,   885,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   886,   220,   221,   222,   223,   224,
     225,   887,   226,   227,     0,   229,   230,   231,   232,  1001,
    1002,   888,  1003,   889,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   890,   891,   246,   247,   248,   249,
     892,   250,   251,   252,   893,   894,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,  1004,   270,  1005,   272,   273,   274,  2113,   895,
     276,   277,   278,   279,   896,     0,   281,  1006,   283,   284,
     285,   897,   286,   287,   898,   899,  2114,   289,   290,   900,
     901,   291,     0,   293,   294,   295,     0,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   902,   306,   307,     0,
     309,   310,     0,   312,   313,   314,   903,   315,   316,   317,
     318,   319,   320,   321,   322,   323,  1007,   325,   326,   327,
     328,   904,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   905,   341,   342,   343,   344,   345,
     346,     0,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   906,   357,   358,   359,   360,   361,   907,   362,  2115,
     364,   365,   366,   367,   368,   369,  1009,   371,   908,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   909,   385,   386,   910,   387,   388,   389,   390,
     391,   392,   393,   911,  1010,  1011,   912,   913,   396,   397,
       0,   399,     0,   914,   401,   402,   403,   404,   405,   406,
     407,   915,   916,   408,   409,   410,   411,   412,   917,   918,
     413,   414,   415,   416,   417,     0,  1012,   919,   420,   421,
     422,   423,   424,   425,   920,   921,   426,   922,   923,   427,
     428,   429,   430,   431,   432,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   444,   445,   446,     0,
     469,     0,  1376,  1377,  1378,  1372,  2116,  2117,  1381,  1382,
    1383,  1384,  1373,  1374,  1375,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,     0,     0,  1376,  1377,  1378,     0,  1379,  1380,  1381,
    1382,  1383,  1384,  1086,     0,     0,  1087,     0,     0,     0,
    1088,  1089,  1090,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1086,     0,     0,  1087,     0,  1091,     0,  1088,
    1089,  1090,     0,     0,     0,  1093,     0,     0,     0,     0,
       0,  1086,  1094,     0,  1087,     0,  1091,     0,  1088,  1089,
    1090,     0,     0,     0,  1093,     0,     0,     0,     0,     0,
       0,  1094,     0,     0,     0,  1091,     0,  1095,     0,     0,
       0,     0,     0,  1093,     0,     0,     0,     0,     0,     0,
    1094,     0,     0,     0,     0,     0,  1095,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1086,     0,     0,  1087,     0,  1095,     0,  1088,  1089,  1090,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1091,     0,     0,     0,     0,     0,
       0,     0,  1093,     0,  1086,     0,     0,  1087,     0,  1094,
       0,  1088,  1089,  1090,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1091,     0,
       0,     0,     0,     0,  1095,  1096,  1093,     0,     0,     0,
       0,     0,     0,  1094,     0,     0,     0,     0,  1097,     0,
       0,     0,     0,  1098,  1096,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1097,  1095,     0,
       0,     0,  1098,  1096,  1099,  1100,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1097,     0,  1101,     0,
       0,  1098,     0,  1099,  1100,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1101,     0,     0,
       0,     0,  1099,  1100,     0,     0,     0,     0,  1102,     0,
       0,  1103,     0,     0,     0,     0,  1101,     0,     0,     0,
       0,     0,  1096,     0,     0,  1104,     0,  1102,  1105,     0,
    1103,     0,     0,     0,     0,  1097,     0,     0,     0,     0,
    1098,     0,     0,     0,  1104,     0,  1102,  1105,     0,  1103,
       0,     0,     0,     0,     0,     0,  1096,     0,     0,     0,
       0,  1099,  1100,  1104,     0,     0,  1105,     0,     0,  1097,
       0,     0,     0,     0,  1098,  1101,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1099,  1100,     0,     0,     0,
       0,     0,     0,     0,     0,  1102,     0,     0,  1103,  1101,
       0,     0,  1106,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1104,     0,     0,  1105,     0,     0,     0,     0,
       0,  1106,     0,     0,     0,     0,     0,     0,     0,  1102,
       0,     0,  1103,     0,     0,     0,     0,     0,     0,     0,
    1106,     0,     0,     0,     0,     0,  1104,  1086,     0,  1105,
    1087,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1091,     0,     0,     0,     0,     0,     0,     0,  1093,
       0,     0,     0,     0,     0,     0,  1094,     0,     0,     0,
       0,  1086,     0,     0,  1087,     0,     0,     0,  1107,  1106,
       0,  1108,  1109,  1110,     0,  1111,  1112,  1113,  1114,  1115,
    1116,  1095,     0,     0,     0,  1989,     0,  1107,     0,     0,
    1108,  1109,  1110,  1093,  1111,  1112,  1113,  1114,  1115,  1116,
   -1471,     0,     0,  1106,  2077,     0,  1107,     0,     0,  1108,
    1109,  1110,     0,  1111,  1112,  1113,  1114,  1115,  1116,  1086,
       0,     0,  1087,  2171,     0,  1095,  1088,  1089,  1090,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1091,     0,     0,     0,     0,     0,     0,
       0,  1093,     0,     0,     0,     0,     0,     0,  1094,     0,
       0,     0,     0,     0,     0,  1107,     0,     0,  1108,  1109,
    1110,     0,  1111,  1112,  1113,  1114,  1115,  1116,     0,  1096,
       0,  1086,  2190,  1095,  1087,     0,     0,     0,  1088,  1089,
    1090,     0,  1097,  1760,     0,     0,     0,  1098,     0,  1107,
       0,     0,  1108,  1109,  1110,  1091,  1111,  1112,  1113,  1114,
    1115,  1116,     0,  1093,     0,     0,  2328,     0,  1099,  1100,
    1094,     0,     0, -1471,     0,     0,     0,     0,     0,     0,
       0,     0,  1101,     0,     0,     0, -1471,     0,     0,  1086,
       0, -1471,  1087,     0,     0,  1095,  1088,  1089,  1090,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1102,  1091,     0,  1103,     0,     0,     0,     0,
       0,  1093,     0,     0,     0,     0, -1471,     0,  1094,  1104,
       0,  1096,  1105,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1097,     0,     0,     0,     0,  1098,
       0,     0,     0,  1095,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1099,  1100,     0,  1104,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1101,     0,     0,     0,     0,     0,
       0,     0,     0,  1096,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1097,     0,     0,     0,
       0,  1098,     0,     0,  1102,     0,  1106,  1103,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1104,  1099,  1100,  1105,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1101,     0,     0,     0,
       0,  1096,     0,     0,     0,     0,     0,     0,     0,     0,
   -1471,     0,     0,     0,  1097,     0,     0,     0,     0,  1098,
       0,     0,     0,     0,     0,     0,  1102,     0,     0,  1103,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1099,  1100,     0,  1104,     0,     0,  1105,     0,     0,     0,
       0,     0,     0,     0,  1101,     0,     0,     0,     0,     0,
       0,     0,  1107,     0,     0,  1108,  1109,  1110,  1106,  1111,
    1112,  1113,  1114,  1115,  1116,     0,     0,     0,     0,  2510,
       0,     0,     0,     0,  1102,     0,     0,  1103,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1104,     0,     0,  1105,     0, -1471,     0,     0,     0,
       0,     0,     0,  1111,  1112,  1113,  1114,  1115,  1116,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1106,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1107,     0,     0,  1108,  1109,  1110,
       0,  1111,  1112,  1113,  1114,  1115,  1116,     0,     0,     0,
       0,  2522,     0,     0,     0,     0,     0,     0,  1106,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1107,     0,     0,  1108,
    1109,  1110,     0,  1111,  1112,  1113,  1114,  1115,  1116,     0,
       0,     0,     0,  2615,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1107,   846,     0,  1108,  1109,  1110,
       0,  1111,  1112,  1113,  1114,  1115,  1116,     0,     0,  1260,
      89,    90,    91,    92,    93,    94,    95,    96,   847,    97,
      98,    99,   848,   849,   850,   851,   852,   853,   854,   100,
     101,   855,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   856,   114,   115,   116,   117,   118,
     119,   857,   858,   120,   121,   122,   123,   124,   859,   125,
     126,   127,   128,   129,   860,   130,   861,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   862,   140,   141,   142,
     143,   144,   145,   863,   146,   147,   148,   149,   864,   865,
     866,   150,   867,   868,   869,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   870,   160,   871,   161,   162,   163,
     164,   165,   166,   872,   167,   168,   169,   170,   171,   873,
     874,   172,   173,   174,   175,   176,   875,   177,   178,   179,
     876,   180,   181,   182,   877,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   878,   193,   879,   194,   195,
     196,   197,   880,   198,   881,   199,   200,   882,   201,   202,
     203,   204,   205,   206,   883,   207,   884,   208,   209,   885,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     886,   220,   221,   222,   223,   224,   225,   887,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   888,   235,   889,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     890,   891,   246,   247,   248,   249,   892,   250,   251,   252,
     893,   894,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   895,   276,   277,   278,   279,
     896,   280,   281,   282,   283,   284,   285,   897,   286,   287,
     898,   899,   288,   289,   290,   900,   901,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   902,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   903,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   904,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     905,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   906,   357,   358,
     359,   360,   361,   907,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   908,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   909,   385,
     386,   910,   387,   388,   389,   390,   391,   392,   393,   911,
     394,   395,   912,   913,   396,   397,   398,   399,   400,   914,
     401,   402,   403,   404,   405,   406,   407,   915,   916,   408,
     409,   410,   411,   412,   917,   918,   413,   414,   415,   416,
     417,   418,   419,   919,   420,   421,   422,   423,   424,   425,
     920,   921,   426,   922,   923,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   469,     0,     0,     0,     0,
       0,     0,     0,     0,   924,     0,     0,     0,     0,     0,
      89,    90,    91,    92,    93,    94,    95,    96,     0,    97,
      98,    99,     0,     0,     0,     0,     0,     0,     0,   100,
     101,     0,   102,   103,   104,     0,   106,   107,   108,   109,
     110,     0,   112,   113,     0,   114,   115,   116,   117,   118,
     119,     0,     0,   120,   121,   122,   123,   124,     0,   125,
     126,   127,   128,   129,     0,     0,     0,   131,   132,   133,
     134,   135,     0,   137,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   147,   148,   149,     0,     0,
       0,     0,     0,     0,     0,   151,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   174,   175,   176,     0,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,   198,     0,   199,     0,     0,     0,   202,
     203,   204,     0,   206,     0,   207,     0,   208,   209,     0,
     210,   211,   212,   213,   214,     0,   216,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,     0,   226,     0,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,   239,     0,   241,   242,   243,   244,   245,
       0,     0,   246,     0,   248,     0,     0,   250,   251,   252,
       0,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,     0,
     271,   272,   273,   274,   275,     0,   276,   277,     0,   279,
       0,   280,   281,   282,   283,   284,   285,     0,   286,   287,
       0,     0,   288,   289,   290,     0,     0,   291,   292,     0,
     294,     0,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,     0,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,     0,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,     0,   362,   363,   364,   365,   366,     0,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,     0,   389,   390,   391,   392,   393,     0,
     394,   395,     0,     0,   396,   397,   398,   399,   400,     0,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
     417,   418,   419,     0,   420,     0,   422,   423,   424,   425,
       0,     0,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   627,   969,   511,     0,     0,
       0,   652,     0,     0,  1932,     0,     0,     0,     0,     0,
      89,    90,    91,    92,    93,    94,    95,    96,     0,    97,
      98,    99,     0,     0,     0,     0,     0,     0,     0,   100,
     101,     0,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,     0,   114,   115,   116,   117,   118,
     119,     0,     0,   120,   121,   122,   123,   124,     0,   125,
     126,   127,   128,   129,     0,   130,     0,   131,   132,   133,
     134,   135,   136,   137,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,     0,     0,
       0,   150,     0,     0,     0,   151,   152,   153,   154,   155,
     156,   157,   158,   159,  1140,   160,     0,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   174,   175,   176,     0,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   970,   193,     0,   194,   195,
     196,   197,     0,   198,     0,   199,   200,     0,   201,   202,
     203,   204,   205,   206,     0,   207,     0,   208,   209,     0,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,     0,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,   250,   251,   252,
       0,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
       0,   280,   281,   282,   283,   284,   285,     0,   286,   287,
     971,     0,   288,   289,   290,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,     0,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,     0,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,     0,     0,   396,   397,   398,   399,   400,   972,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
     417,   418,   419,     0,   420,   421,   422,   423,   424,   425,
       0,     0,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   627,   969,   511,     0,     0,
       0,   652,   973,   974,     0,     0,     0,     0,     0,     0,
      89,    90,    91,    92,    93,    94,    95,    96,     0,    97,
      98,    99,     0,     0,     0,     0,     0,     0,     0,   100,
     101,     0,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,     0,   114,   115,   116,   117,   118,
     119,     0,     0,   120,   121,   122,   123,   124,     0,   125,
     126,   127,   128,   129,     0,   130,     0,   131,   132,   133,
     134,   135,   136,   137,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,     0,     0,
       0,   150,     0,     0,     0,   151,   152,   153,   154,   155,
     156,   157,   158,   159,  1142,   160,     0,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   174,   175,   176,     0,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   970,   193,     0,   194,   195,
     196,   197,     0,   198,     0,   199,   200,     0,   201,   202,
     203,   204,   205,   206,     0,   207,     0,   208,   209,     0,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,     0,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,   250,   251,   252,
       0,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
       0,   280,   281,   282,   283,   284,   285,     0,   286,   287,
     971,     0,   288,   289,   290,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,     0,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,     0,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,     0,     0,   396,   397,   398,   399,   400,   972,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
     417,   418,   419,     0,   420,   421,   422,   423,   424,   425,
       0,     0,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   627,   969,   511,     0,     0,
       0,   652,   973,   974,     0,     0,     0,     0,     0,     0,
      89,    90,    91,    92,    93,    94,    95,    96,     0,    97,
      98,    99,     0,     0,     0,     0,     0,     0,     0,   100,
     101,     0,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,     0,   114,   115,   116,   117,   118,
     119,     0,     0,   120,   121,   122,   123,   124,     0,   125,
     126,   127,   128,   129,     0,   130,     0,   131,   132,   133,
     134,   135,   136,   137,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,     0,     0,
       0,   150,     0,     0,     0,   151,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   174,   175,   176,     0,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   970,   193,     0,   194,   195,
     196,   197,     0,   198,     0,   199,   200,     0,   201,   202,
     203,   204,   205,   206,     0,   207,     0,   208,   209,     0,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,     0,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,   250,   251,   252,
       0,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
       0,   280,   281,   282,   283,   284,   285,     0,   286,   287,
     971,     0,   288,   289,   290,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,     0,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,     0,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,     0,     0,   396,   397,   398,   399,   400,   972,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
     417,   418,   419,     0,   420,   421,   422,   423,   424,   425,
       0,     0,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,     0,     0,  1086,     0,     0,
    1087,     0,   973,   974,  1088,  1089,  1090,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1091,     0,     0,     0,  1514,     0,     0,     0,  1093,
       0,  1086,     0,     0,  1087,     0,  1094,     0,  1088,  1089,
    1090,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1091,     0,     0,     0,     0,
       0,  1095,     0,  1093,     0,     0,     0,     0,  1086,     0,
    1094,  1087,     0,     0,     0,  1088,  1089,  1090,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1091,     0,     0,  1095,     0,     0,     0,     0,
    1093,     0,     0,     0,     0,     0,  1086,  1094,     0,  1087,
    1515,     0,     0,  1088,  1089,  1090,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1091,     0,  1095,  1686,     0,     0,     0,     0,  1093,     0,
       0,     0,     0,  1086,     0,  1094,  1087,     0,     0,     0,
    1088,  1089,  1090,     0,     0,     0,     0,     0,     0,  1096,
       0,     0,     0,     0,     0,     0,     0,  1091,     0,     0,
    1095,     0,  1097,     0,     0,  1093,     0,  1098,     0,     0,
       0,     0,  1094,  1726,     0,     0,     0,     0,  1727,     0,
       0,     0,     0,  1096,     0,     0,     0,     0,  1099,  1100,
       0,     0,     0,     0,     0,     0,  1097,  1095,     0,     0,
       0,  1098,  1101,     0,     0,     0,     0,     0,     0,  2577,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1096,     0,  1099,  1100,     0,     0,     0,     0,     0,     0,
       0,     0,  1102,  1097,     0,  1103,  1101,     0,  1098,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1104,
       0,     0,  1105,     0,     0,     0,     0,     0,  1096,  1099,
    1100,     0,     0,     0,     0,     0,  1102,     0,     0,  1103,
       0,  1097,     0,  1101,     0,     0,  1098,     0,     0,     0,
       0,     0,     0,  1104,     0,     0,  1105,     0,     0,     0,
       0,     0,     0,     0,     0,  1096,     0,  1099,  1100,     0,
       0,     0,     0,  1102,     0,     0,  1103,     0,  1097,     0,
       0,  1101,     0,  1098,     0,     0,     0,     0,     0,     0,
    1104,     0,     0,  1105,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1099,  1100,  1106,     0,     0,     0,
       0,  1102,     0,     0,  1103,  2578,     0,     0,  1101,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1104,     0,
       0,  1105,     0,     0,     0,     0,     0,     0,     0,     0,
    1106,     0,     0,     0,     0,     0,     0,     0,  1102,     0,
       0,  1103,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1516,     0,  1086,  1104,     0,  1087,  1105,     0,
       0,  1088,  1089,  1090,     0,     0,     0,  1106,     0,     0,
       0,     0,     0,     0,     0,  1700,     0,     0,  1091,     0,
       0,  1735,  1086,     0,     0,  1087,  1093,     0,     0,  1088,
    1089,  1090,  1107,  1094,     0,  1108,  1109,  1110,     0,  1111,
    1112,  1113,  1114,  1115,  1116,  1106,  1091,     0,     0,     0,
       0,     0,     0,     0,  1093,     0,  1086,     0,  1095,  1087,
       0,  1094,     0,  1088,  1089,  1090,  1107,     0,     0,  1108,
    1109,  1110,     0,  1111,  1112,  1113,  1114,  1115,  1116,     0,
    1091,     0,  1106,     0,     0,     0,  1095,     0,  1093,     0,
       0,     0,     0,     0,     0,  1094,     0,     0,     0,     0,
       0,     0,     0,  1107,     0,     0,  1108,  1109,  1110,     0,
    1111,  1112,  1113,  1114,  1115,  1116,     0,     0,     0,     0,
    1095,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1086,     0,     0,  1087,     0,     0,
       0,  1107,     0,     0,  1108,  1109,  1110,     0,  1111,  1112,
    1113,  1114,  1115,  1116,     0,     0,  1096,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1093,     0,     0,  1097,
       0,     0,     0, -1471,  1098,     0,     0,     0,  1107,  1740,
       0,  1108,  1109,  1110,  1096,  1111,  1112,  1113,  1114,  1115,
    1116,     0,     0,     0,     0,  1099,  1100,  1097,  1095,     0,
       0,     0,  1098,     0,     0,     0,     0,     0,     0,  1101,
       0,     0,     0,     0,     0,     0,     0,     0,  1096,     0,
       0,     0,     0,  1099,  1100,     0,     0,     0,     0,     0,
       0,  1097,     0,     0,     0,     0,  1098,  1101,     0,  1102,
       0,     0,  1103,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1104,  1099,  1100,  1105,
       0,     0,     0,     0,     0,     0,  2003,  1102,     0,     0,
    1103,  1101,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1086,  1104,     0,  1087,  1105,     0,     0,
    1088,  1089,  1090,     0,     0,     0, -1471,     0,     0,     0,
       0,  1102,     0,     0,  1103,     0,     0,  1091,     0, -1471,
       0,     0,     0,     0, -1471,  1093,     0,     0,  1104,     0,
    1086,  1105,  1094,  1087,     0,     0,     0,  1088,  1089,  1090,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1106,     0,     0,     0,  1095,     0, -1471,
       0,     0,  1093,     0,  1086,     0,     0,  1087,     0,  1094,
       0,  1088,  1089,  1090,     0,     0,     0,     0,     0,     0,
       0,  1106,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1095,     0,  1093,     0,     0,     0,
       0,     0,  1086,  1094,     0,  1087,  1104,     0,  1086,     0,
       0,  1087,     0,     0,     0,  1106,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1095,     0,
       0,     0,     0,     0,  1093,     0,     0,     0,     0,     0,
    1093, -1471,     0,     0,     0,  1950,     0, -1471,     0,  1107,
       0,     0,  1108,  1109,  1110,  1096,  1111,  1112,  1113,  1114,
    1115,  1116,     0,     0,     0,     0,  1095,     0,  1097,     0,
       0,     0,  1095,  1098,     0,     0,     0,  1107,     0,     0,
    1108,  1109,  1110,     0,  1111,  1112,  1113,  1114,  1115,  1116,
       0,     0,  1096, -1471,  1099,  1100,  1086,     0,     0,  1087,
       0,     0,     0,     0,     0,  1097,     0,     0,  1101,     0,
    1098,  1107,     0,     0,  1108,  1109,  1110,     0,  1111,  1112,
    1113,  1114,  1115,  1116,     0,     0,  1096,     0,  1093,     0,
       0,  1099,  1100,     0,  2006, -1471,     0,     0,  1102,  1097,
    2007,  1103,     0,     0,  1098,  1101,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1104,     0,     0,  1105,     0,
    1095,     0,     0,     0, -1471, -1471, -1471,     0,     0,     0,
   -1471,     0,     0,     0,     0,  1102,     0, -1471,  1103,  1101,
       0,     0, -1471, -1471,     0,     0,     0,     0, -1471, -1471,
       0,     0,  1104,     0,     0,     0,  1111,  1112,  1113,  1114,
    1115,  1116,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1471,     0,     0,     0,     0, -1471,     0,     0,
       0,     0,     0, -1471,     0,     0,  1104,     0,  2189,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1106,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1471,     0,
       0,     0,     0,     0,  1104,     0,     0,     0,     0,     0,
    1104, -1471,     0,     0,     0,     0, -1471,     0,     0,  1106,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1471,     0,  1106,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1107,     0,
       0,  1108,  1109,  1110,     0,  1111,  1112,  1113,  1114,  1115,
    1116, -1471,     0,     0,     0,     0,     0, -1471,  1104,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1107,     0,     0,  1108,  1109,
    1110,     0,  1111,  1112,  1113,  1114,  1115,  1116,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1107,
       0,     0,  1108,  1109,  1110,     0,  1111,  1112,  1113,  1114,
    1115,  1116,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1471,     0, -1471,     0,     0,
       0,     0,     0, -1471,  1111,  1112,  1113,  1114,  1115,  1116,
    1111,  1112,  1113,  1114,  1115,  1116,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     846, -1471,  1425,     0,     0,     0,     0,     0,  1111,  1112,
    1113,  1114,  1115,  1116,     0,    89,    90,    91,    92,    93,
      94,    95,    96,   847,    97,    98,    99,   848,   849,   850,
     851,   852,   853,   854,   100,   101,   855,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   856,
     114,   115,   116,   117,   118,   119,   857,   858,   120,   121,
     122,   123,   124,   859,   125,   126,   127,   128,   129,   860,
     130,   861,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   862,   140,   141,   142,   143,   144,   145,   863,   146,
     147,   148,   149,   864,   865,   866,   150,   867,   868,   869,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   870,
     160,   871,   161,   162,   163,   164,   165,   166,   872,   167,
     168,   169,   170,   171,   873,   874,   172,   173,   174,   175,
     176,   875,   177,   178,   179,   876,   180,   181,   182,   877,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     878,   193,   879,   194,   195,   196,   197,   880,   198,   881,
     199,   200,   882,   201,   202,   203,   204,   205,   206,   883,
     207,   884,   208,   209,   885,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   886,   220,   221,   222,   223,
     224,   225,   887,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   888,   235,   889,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   890,   891,   246,   247,   248,
     249,   892,   250,   251,   252,   893,   894,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     895,   276,   277,   278,   279,   896,   280,   281,   282,   283,
     284,   285,   897,   286,   287,   898,   899,   288,   289,   290,
     900,   901,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   902,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   903,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   904,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   905,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   906,   357,   358,   359,   360,   361,   907,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   908,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   909,   385,   386,   910,   387,   388,   389,
     390,   391,   392,   393,   911,   394,   395,   912,   913,   396,
     397,   398,   399,   400,   914,   401,   402,   403,   404,   405,
     406,   407,   915,   916,   408,   409,   410,   411,   412,   917,
     918,   413,   414,   415,   416,   417,   418,   419,   919,   420,
     421,   422,   423,   424,   425,   920,   921,   426,   922,   923,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     846,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,   847,    97,    98,    99,   848,   849,   850,
     851,   852,   853,   854,   100,   101,   855,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   856,
     114,   115,   116,   117,   118,   119,   857,   858,   120,   121,
     122,   123,   124,   859,   125,   126,   127,   128,   129,   860,
     130,   861,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   862,   140,   141,   142,   143,   144,   145,   863,   146,
     147,   148,   149,   864,   865,   866,   150,   867,   868,   869,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   870,
     160,   871,   161,   162,   163,   164,   165,   166,   872,   167,
     168,   169,   170,   171,   873,   874,   172,   173,   174,   175,
     176,   875,   177,   178,   179,   876,   180,   181,   182,   877,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     878,   193,   879,   194,   195,   196,   197,   880,   198,   881,
     199,   200,   882,   201,   202,   203,   204,   205,   206,   883,
     207,   884,   208,   209,   885,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   886,   220,   221,   222,   223,
     224,   225,   887,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   888,   235,   889,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   890,   891,   246,   247,   248,
     249,   892,   250,   251,   252,   893,   894,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     895,   276,   277,   278,   279,   896,   280,   281,   282,   283,
     284,   285,   897,   286,   287,   898,   899,   288,   289,   290,
     900,   901,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   902,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   903,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   904,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   905,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   906,   357,   358,   359,   360,   361,   907,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   908,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   909,   385,   386,   910,   387,   388,   389,
     390,   391,   392,   393,   911,   394,   395,   912,   913,   396,
     397,   398,   399,   400,   914,   401,   402,   403,   404,   405,
     406,   407,   915,   916,   408,   409,   410,   411,   412,   917,
     918,   413,   414,   415,   416,   417,   418,   419,   919,   420,
     421,   422,   423,   424,   425,   920,   921,   426,   922,   923,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     846,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,  1563,
      94,    95,    96,   847,    97,    98,    99,   848,   849,   850,
     851,   852,   853,   854,   100,   101,   855,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   856,
     114,   115,   116,   117,   118,   119,   857,   858,   120,   121,
     122,   123,   124,   859,   125,   126,   127,   128,   129,   860,
     130,   861,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   862,   140,   141,   142,   143,   144,   145,   863,   146,
     147,   148,   149,   864,   865,   866,   150,   867,   868,   869,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   870,
     160,   871,   161,   162,   163,   164,   165,   166,   872,   167,
     168,   169,   170,   171,   873,   874,   172,   173,   174,  1564,
     176,   875,   177,   178,   179,   876,   180,   181,   182,   877,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     878,   193,   879,   194,   195,   196,   197,   880,   198,   881,
     199,   200,   882,   201,   202,   203,   204,   205,   206,   883,
     207,   884,   208,   209,   885,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   886,   220,   221,   222,   223,
     224,   225,   887,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   888,   235,   889,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   890,   891,   246,   247,   248,
     249,   892,   250,   251,   252,   893,   894,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     895,   276,   277,   278,   279,   896,   280,   281,   282,   283,
     284,   285,   897,   286,   287,   898,   899,   288,   289,   290,
     900,   901,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   902,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   903,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   904,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   905,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   906,   357,   358,   359,   360,   361,   907,  1565,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   908,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   909,   385,   386,   910,   387,   388,   389,
     390,   391,   392,   393,   911,   394,   395,   912,   913,   396,
     397,   398,   399,   400,   914,   401,   402,   403,   404,   405,
     406,   407,   915,   916,   408,   409,   410,   411,   412,   917,
     918,   413,   414,   415,   416,   417,   418,   419,   919,   420,
     421,   422,   423,   424,   425,   920,   921,   426,   922,   923,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
      88,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,   658,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   661,     0,
     662,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   663,   664,   665,   666,   667,   668,   669,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   675,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   681,   682,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
       0,   276,   277,   278,   279,     0,   687,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,   293,   294,   295,   690,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     691,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   694,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   696,     0,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   699,   399,   700,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,   702,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     627,     0,   511,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
     130,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,     0,     0,     0,   150,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     970,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
       0,   276,   277,   278,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,   971,     0,   288,   289,   290,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,   972,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     627,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     3,     4,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
     130,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,     0,     0,     0,   150,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
       0,   276,   277,   278,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
      88,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
     130,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,     0,     0,     0,   150,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
       0,   276,   277,   278,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,  1198,   125,   126,   127,   128,   129,     0,
       0,  1199,   131,   132,   133,   134,   135,     0,   137,   138,
     139,  1200,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,  1201,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,  1202,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,  1203,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,  1204,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,  1198,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,  1200,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,  1201,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
    1629,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,  1203,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,  1204,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     3,     4,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,   470,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   471,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,   516,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   517,   395,     0,     0,   518,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,   536,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,   569,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   570,   395,     0,     0,   571,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   578,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,   536,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,   606,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,  1476,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,  1477,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,  1478,   387,     0,   389,
    1479,   391,  1480,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,  1481,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,  2028,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,  2042,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,  2203,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   528,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   529,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   530,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   531,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     544,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   573,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   576,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   580,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   599,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   614,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   618,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   621,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   529,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   531,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   940,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   942,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,  1158,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,     0,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,  1287,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,  1300,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,  1547,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,  1559,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,  1561,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,  2143,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,     0,   271,   272,   273,   274,   275,
       0,   276,   277,     0,   279,     0,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,   292,     0,   294,     0,   296,   297,   298,
     299,   300,   301,   302,     0,   304,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,     0,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   344,
     345,   346,   347,     0,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,     0,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,     0,   389,
     390,   391,   392,   393,     0,   394,   395,     0,     0,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
       0,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     992,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
     105,   106,   107,   108,     0,   993,   111,   994,   995,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     996,   997,   124,     0,   125,   126,   127,   128,     0,     0,
     130,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,     0,     0,     0,   150,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   998,   999,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   673,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,     0,   188,   189,   190,   191,     0,
       0,   193,     0,   194,   195,  1000,   197,     0,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,   206,     0,
     207,     0,     0,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,   227,     0,   229,   230,   231,   232,
    1001,  1002,     0,  1003,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,  1004,   270,  1005,   272,   273,   274,     0,
       0,   276,   277,   278,   279,     0,     0,   281,  1006,   283,
     284,   285,     0,   286,   287,     0,     0,   288,   289,   290,
       0,     0,   291,     0,   293,   294,   295,     0,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
       0,   309,   310,     0,   312,   313,   314,     0,   315,   316,
     317,   318,   319,   320,   321,   322,   323,  1007,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,     0,   362,
    1008,   364,   365,   366,   367,   368,   369,  1009,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,     0,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,     0,  1010,  1011,     0,     0,   396,
     397,     0,   399,     0,     0,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,   417,     0,  1012,     0,   420,
     421,   422,   423,   424,   425,     0,     0,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   992,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   444,   445,   446,
       0,    89,    90,    91,    92,    93,    94,    95,    96,     0,
      97,    98,    99,     0,     0,     0,     0,     0,     0,     0,
     100,   101,     0,   102,   103,   104,   105,   106,   107,   108,
       0,   993,   111,   994,   995,     0,   114,   115,   116,   117,
     118,   119,     0,     0,   120,   121,   996,   997,   124,     0,
     125,   126,   127,   128,     0,     0,   130,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,     0,
       0,     0,   150,     0,     0,     0,   151,   152,   153,   154,
     155,   156,   998,   999,   159,     0,   160,     0,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,   673,   175,   176,     0,   177,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,   186,
       0,   188,   189,   190,   191,     0,     0,   193,     0,   194,
     195,  1000,   197,     0,   198,     0,   199,   200,     0,   201,
     202,   203,   204,   205,   206,     0,   207,     0,     0,   209,
       0,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,     0,   226,
     227,     0,   229,   230,   231,   232,  1001,  1002,     0,  1003,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,     0,     0,   246,   247,   248,   249,     0,   250,   251,
     252,     0,     0,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,  1004,
     270,  1005,   272,   273,   274,     0,     0,   276,   277,   278,
     279,     0,     0,   281,  1006,   283,   284,   285,     0,   286,
     287,     0,     0,   288,   289,   290,     0,     0,   291,     0,
     293,   294,   295,     0,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,     0,   309,   310,     0,
     312,   313,   314,     0,   315,   316,   317,   318,   319,   320,
     321,   322,   323,  1007,   325,   326,   327,   328,     0,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,     0,   362,     0,   364,   365,   366,
     367,   368,   369,  1009,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,     0,
     385,   386,     0,   387,   388,   389,   390,   391,   392,   393,
       0,  1010,  1011,     0,     0,   396,   397,     0,   399,     0,
       0,   401,   402,   403,   404,   405,   406,   407,     0,     0,
     408,   409,   410,   411,   412,     0,     0,   413,   414,   415,
     416,   417,     0,  1012,     0,   420,   421,   422,   423,   424,
     425,     0,     0,   426,     0,     0,   427,   428,   429,   430,
     431,   432,     0,   797,     0,     0,     0,     0,     0,   798,
       0,     0,     0,   444,   445,   446,   810,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   811,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   812,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   799,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   813,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   814,     0,
       0,   815,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   816,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   800,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   817,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1578,     0,     0,     0,   802,   819,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   820,     0,     0,
       0,     0,     0,  1579,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   822,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   804
};

static const yytype_int16 yycheck[] =
{
       6,   577,   823,   633,     0,   566,   543,   527,    11,   938,
     494,  1488,    15,    33,   797,   670,   671,     6,    21,     0,
     495,     0,     0,    66,   592,   633,   822,  1026,    31,    32,
    1084,   799,   810,   688,   539,   698,   586,   709,  1557,    16,
     619,   938,   802,    19,  1060,     6,   584,   938,     0,   938,
     499,   966,  1563,    28,  1565,  1827,  1087,   836,  1900,   827,
     769,  1875,   783,  1507,    16,     0,   577,  1907,   579,    32,
     581,  1447,  1554,  1911,  1759,  1786,  1028,   500,     9,     0,
      83,     5,    11,    68,    11,   501,   623,  1131,   501,    13,
      14,     9,     3,    57,  2153,    49,     5,   641,     5,    68,
      57,  2148,   107,     5,    13,    14,    13,    14,  1178,     5,
      85,    40,  1180,   107,    26,  1792,    39,   146,   166,    30,
      31,    33,     5,     5,     0,    39,     5,   958,     5,   165,
     165,     5,   114,     5,     5,   743,    81,  2221,    26,   105,
      57,  2138,  1624,    72,   505,    33,    66,    66,  1816,   598,
       3,     4,     5,     4,  2287,   117,     9,   207,     9,   563,
      26,    47,     5,   134,     5,  2201,  1791,    33,   584,   266,
      91,   708,     9,  1728,   165,   180,   274,  1208,     3,   124,
       5,  1663,  1664,  2149,  2316,   119,   180,     4,    57,   233,
      26,  2402,     9,   112,    74,   117,   563,   127,  2100,  2235,
     750,    74,   335,   811,    84,   710,   814,   815,   257,    11,
     268,    84,  2458,   239,   637,    91,    36,   633,   105,   274,
      58,   191,   180,   114,   640,  1846,    26,   254,    66,   142,
    1008,    26,   737,   392,   239,  2366,  2244,   242,    40,   201,
     413,    77,   162,    11,   345,   239,    72,   112,   242,    85,
     169,   157,   413,   164,   313,   166,   793,  2265,    11,   112,
     144,    22,   155,   429,  2348,   434,  2539,   166,   470,   501,
      72,   473,    40,  2484,   166,    74,   435,   113,   379,   840,
    2316,   239,   107,    74,   170,    84,   455,   346,     5,   764,
     834,   835,   205,    84,   313,    11,   469,   183,   197,  1920,
     469,   121,   188,  2145,    72,   189,  2552,   473,   469,  1340,
     359,   217,    11,   212,  1999,    76,   345,   343,   419,    72,
     379,  2032,   221,  1699,  2597,  2036,  1845,   127,   106,   745,
     746,   224,   127,   263,   253,  2301,   469,   223,   343,   258,
     285,  1062,   106,   998,   999,   181,  2023,   268,  1011,   343,
     379,  1006,   584,   206,   390,   180,   192,  2259,   117,  2570,
    1842,   274,  1844,   327,   251,   409,   425,   258,   469,   339,
     327,     5,   469,   132,   227,   473,   346,   945,  2386,  2510,
     300,   300,   251,    11,   411,   343,   159,   791,  2521,   227,
     419,   935,   268,   258,   286,  2431,   315,  2022,   759,   390,
    2068,   633,  2399,   432,  1959,  2537,   425,   328,   640,   379,
     327,   469,    40,   379,   239,  2499,  1199,   242,   473,  2455,
     958,   469,   458,   473,   791,   469,   455,  2486,   469,    30,
      31,  1447,   331,   415,     8,   471,  1490,    11,   473,   384,
     469,    15,    16,    17,    72,   450,   984,  1168,  1930,   411,
     362,  1521,   328,   376,  1522,   425,   450,   428,   327,  1280,
     456,     0,   376,  1294,   469,  1509,   358,     8,   471,   953,
      11,   357,   956,  2287,   362,   456,  1255,   456,   456,   413,
     964,   501,  1032,   352,  2531,   960,   406,   406,   472,   411,
      91,  2176,   405,   496,  1031,   501,   362,  2208,   642,    40,
    1516,  2537,  2213,  1040,   456,  2216,    47,  1044,   423,   473,
     390,   432,   423,   745,   746,   469,   473,   390,   343,  2485,
     526,   527,   295,   566,   501,  2202,  1063,  1064,   469,  1079,
    1080,    72,   368,   509,   510,   371,   465,   543,   465,   422,
     299,   544,   958,   474,   967,   469,  1498,  1326,   500,   470,
     468,   472,   968,   529,  1092,   968,   432,   553,  2077,  2401,
     469,   323,   469,   155,   541,  2405,   551,   469,   984,  2407,
     473,  1076,   553,   469,   553,   553,   582,   583,   584,  2090,
    1130,   544,   551,   558,  1128,   467,   469,   469,     0,   471,
     469,   434,   469,   434,   470,   469,   472,   469,   469,   743,
     157,   553,   112,   115,    16,  1636,   378,   460,   461,   460,
     461,  1095,   455,   191,   455,   432,   213,   623,   553,   238,
    1228,    33,  2066,   460,   461,   450,   469,   633,   469,   170,
    1238,  2342,   224,  1241,   640,   641,   642,  2322,   455,    91,
     412,   467,   183,   460,   461,   471,   467,   188,  1224,  2491,
     471,   657,   369,   370,   251,  1686,    68,   633,   171,  2141,
     462,   463,   464,   465,   640,  2514,   810,  2516,   313,  1390,
    1391,   181,   184,   265,  1395,  1706,  1092,   127,  1216,   685,
     326,  1311,   223,  1699,   253,   637,  1197,  1342,   708,   258,
    1251,  1252,  1253,   250,  2070,   308,   270,  1701,   704,   705,
     706,   346,   708,  1311,  1735,   115,   352,  2521,   114,  1430,
    1431,  1626,  1291,  1224,   227,   213,  1295,   104,   233,  1298,
     434,   395,   728,   336,  1316,  1729,   958,  2246,  1320,   270,
    1322,   342,  1243,  2582,   379,   711,   968,  1248,   307,   745,
     746,   455,  1414,   253,   345,   721,   462,   463,   464,   465,
    1234,    29,   984,   251,  2596,  1239,  1294,   733,   355,  1580,
     763,   460,   461,   462,   463,   464,   465,   743,   458,   745,
     746,    22,   778,   432,   184,    53,   782,   783,   379,   469,
     425,  2553,  2554,  1492,   434,   425,    82,   793,    84,   195,
      86,   776,   777,   233,   779,   770,   455,   233,  1214,   469,
    1216,     4,   458,   253,   810,   455,     9,   776,   777,  1346,
     779,   309,   469,   263,   411,   471,   357,   127,   419,   469,
     452,  1589,   423,  1272,   339,  1604,   211,  2599,   834,   835,
     836,   432,   460,   461,   462,   463,   464,   465,   471,  1511,
    1480,  1481,   268,   153,  1875,   251,   470,   253,   452,   473,
     237,   826,  2371,   240,   455,    63,    64,   355,     4,  1875,
    1092,   155,     4,     9,  1008,  2376,   160,     9,   469,   155,
     383,  1408,   385,  1407,   160,  1409,  1410,  1637,  1294,   462,
    1640,   132,   456,   457,   458,   164,   460,   461,   462,   463,
     464,   465,   473,   345,   409,  1311,   409,   469,  1435,   339,
     464,   165,     8,   339,   383,   469,   385,   471,  1324,    15,
      16,    17,   453,   411,   467,   127,   469,   207,   471,   460,
     461,   462,   463,   464,   465,     8,  1487,   379,    11,   935,
     224,    53,    15,    16,    17,   464,  1990,  1474,   224,   470,
     469,   153,   471,  1087,   470,    13,    14,   473,   258,    32,
      13,    14,   958,   263,   469,   383,   470,   385,   961,   473,
     963,   470,   968,   470,   473,   659,   660,   419,   469,   409,
     471,   265,  1901,   409,  1672,  1673,  1674,  2454,   984,   265,
     432,  1560,  1214,  1562,  1216,   469,  1707,  1708,  1709,  1710,
     684,   968,  1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,
    1721,  1722,  1008,   455,  1901,   432,   470,   434,  1923,   473,
    1901,   469,  1901,   471,    22,   967,   171,   469,   335,   336,
      28,   272,   233,   452,  1654,  1031,    92,   470,   211,   469,
     473,  1037,  1028,   469,  1040,  1856,   191,   470,  1044,   233,
     473,   253,  1763,  1764,   456,    92,   258,  1028,   147,  1028,
    1028,   263,  1058,  1621,  2070,  1061,  1062,  1063,  1064,  1855,
    1843,  2538,  1294,   321,  1208,  1071,  1072,  2586,   335,   336,
    1733,  1734,   227,  1049,   325,   326,  1028,  2108,  2555,  1311,
     147,  1087,  1088,  1089,  1090,  1091,  1092,   397,   500,   501,
    1096,  1097,  1324,   147,  1854,  1101,  1856,   407,  1894,  1105,
     166,   352,  1108,  1109,  1110,  1111,  1112,  1113,  1114,  1115,
    1116,   470,   470,  1119,  1652,   473,   469,   233,   273,   166,
    1126,   383,  1128,   385,   132,  2124,   209,   147,   339,   167,
    2607,   197,  2037,   171,  2039,  1775,  1776,  1777,  1778,   551,
     469,   553,  1814,  1149,   253,   339,   212,  1563,  1564,  1565,
     197,   470,   425,   191,   473,   221,   383,   147,   385,  1155,
    1136,   457,  1168,  1647,   270,   212,   560,   470,   562,  1146,
     473,  1177,  1178,   470,   221,   470,   473,   470,   473,   470,
     473,   247,   473,   470,    80,   397,   473,   270,    22,   227,
     470,   436,  1742,   473,    28,   407,  1340,  1200,   409,   471,
     247,   470,  1208,  1740,   473,   335,   336,  1210,  1214,  1212,
    1216,    22,  1215,   470,   147,   409,   473,    28,  1221,   147,
    1223,   268,   268,   339,   470,   637,   470,   473,   383,   473,
     385,   470,  1235,   469,   473,   273,  1652,  1240,  1654,   379,
     536,  1244,  1245,  1246,  1247,   470,  1249,  1250,   473,  1255,
      35,   406,  1258,  1259,   409,  1261,  2287,    35,   469,   555,
     470,    35,   674,   473,   272,   331,    22,  1875,   528,   222,
     530,  2287,    28,  1823,   469,   469,    54,    22,   470,   470,
      54,   473,   473,    28,   331,  2106,  2285,  1283,  1294,   470,
       5,  1796,   473,   409,   470,  2078,   708,   473,   132,   335,
     336,   339,   996,   997,     5,  1311,   602,   603,   604,   470,
     469,  1005,   473,   321,   745,   746,  2347,   325,  1324,  2350,
    1326,   132,   470,   160,   469,   473,   104,   296,   469,  1890,
     104,  1563,  1564,  1565,  1340,  1311,  1874,  2115,  1876,  1315,
    1346,  1347,   469,  1922,   352,   383,  1352,   385,  1324,   469,
     456,   457,   458,   469,   460,   461,   462,   463,   464,   465,
    1054,  1055,   345,     5,   776,   777,   413,   779,   406,   469,
       5,   409,  1392,   456,   457,   458,   132,   460,   461,   462,
     463,   464,   465,   469,  1390,  1391,  1392,   132,   469,  1395,
     470,     8,   469,   473,    11,   169,   379,   469,    15,    16,
      17,  1407,  1408,  1409,  1410,   469,     5,   469,   416,  1415,
       5,   470,   190,     8,   473,  1435,   190,   433,   470,    14,
    1652,   473,  1654,    40,  1430,  1431,   469,     5,    23,  1435,
      47,   279,    27,   473,    22,   469,   419,   469,   272,   470,
      28,   470,   473,  1449,   473,   469,  1452,   470,  1454,   432,
     473,   747,  2173,   470,  1870,    72,   473,   469,  1874,   237,
    1876,   272,   240,   237,   470,   146,   240,   473,  1474,   207,
      95,   470,   455,   251,   473,   771,    35,   251,   470,  1485,
     352,   473,   470,  1503,   160,   473,   469,   321,   265,  2097,
    2521,   325,  1636,  1499,   160,   263,  1485,  2293,  2048,   222,
     796,   469,  1498,   470,   282,  2521,   473,  1513,   282,   390,
    1499,   469,  2062,   809,   325,    84,   272,  1498,   352,  1498,
    1498,   473,  1528,    22,  1485,   470,   390,   272,   473,    28,
    2109,  2110,   470,  2163,   830,   473,  2257,  2057,  1499,   390,
    1546,   352,  1686,    53,   132,    53,  1498,   470,   326,   582,
     473,   244,   326,   170,   390,   967,   470,  1563,  1564,  1565,
     475,   390,  1706,   432,   147,   321,   183,   642,   346,   325,
      91,   188,   346,   253,   253,    35,   321,   469,   471,   473,
     325,   422,   416,   469,   469,    34,   469,   469,   366,   428,
       9,  1735,   366,  1569,   388,   388,   352,    11,  1604,   473,
    2321,   388,   469,   258,   469,   416,   223,   352,   641,   642,
     390,   174,   156,   165,   470,  1759,  1028,   469,   413,    35,
     205,   355,   213,   473,  1627,   269,   473,   469,   274,   213,
    1636,  2286,   253,   132,   213,   470,  1612,   305,  1870,   266,
     147,   425,  1874,   939,  1876,   469,  1652,     6,  1654,   147,
     432,   253,    11,   270,  1650,   268,    15,   268,    35,   253,
     416,    20,    21,    22,   345,    35,    25,    34,   467,    28,
     966,   416,    31,    32,  2090,   467,   390,  1683,  1654,  2287,
    1686,   390,   390,  1659,   272,  1661,  1098,  1693,   469,  1665,
    1666,  1697,   470,   390,  1700,   470,   165,   470,   379,   470,
    1706,  1707,  1708,  1709,  1710,   470,   470,  1713,  1714,  1715,
    1716,  1717,  1718,  1719,  1720,  1721,  1722,    76,   470,   470,
    1726,  1727,   471,    82,    83,    84,    85,    86,  1771,  1735,
     470,  1875,   473,   321,  1740,   810,   452,   325,   419,  2394,
     357,  1747,   470,  1155,  1750,   470,  1752,  2163,  2569,  1769,
     452,   432,   470,  1759,  1760,   165,   452,  1763,  1764,   470,
     470,   390,  1768,  1769,   352,   470,  1786,   281,   429,  2330,
    1746,  2255,   470,   272,   455,   470,   278,   810,  1784,   469,
    1786,   469,   469,   469,   429,   419,   268,   458,   469,   454,
     269,  1797,   269,   269,   232,  1784,   411,  1786,   112,   473,
    1806,   834,   835,   836,   390,   253,   469,   147,   191,   272,
     147,   147,   470,   390,  2351,   390,  1822,   390,   390,  2387,
     470,   470,   321,  1784,    35,  1786,   325,   468,   416,  1125,
     470,   345,   432,   266,  2372,  1838,   453,   473,   268,   456,
     457,   458,    35,   460,   461,   462,   463,   464,   465,  1145,
     147,  1147,   147,   352,   258,  1999,   343,   467,  2090,  1862,
    2335,   242,   470,   138,  1870,   379,   165,    11,  1874,  1875,
    1876,  1283,   160,  2348,  1877,  1878,  1879,  1880,  1881,  1882,
    1883,  1884,  1885,  1886,   474,   165,   429,   379,   470,   470,
     470,  2428,  1898,  2461,   470,  1191,   165,   455,   469,  1875,
     174,   328,   935,  2440,   470,   419,   473,    49,  2392,   470,
     470,    82,   418,  2521,   469,   269,   147,   416,   432,   469,
     169,  1897,   400,  1919,   469,    35,    78,   142,   469,   413,
     468,  2163,   468,  1008,   473,   470,   470,   165,   469,   642,
     155,   455,   470,   470,  1950,   160,   469,   212,   470,  1485,
    2526,    93,   469,   277,   212,   469,  2372,   381,    35,   275,
    2376,    53,  2437,  1499,  2108,   469,   432,   281,   177,   458,
     193,  2115,  2456,   258,  1270,  1008,   118,    54,   182,   258,
    1392,   390,  2520,   458,   390,   470,    35,  1993,  1994,   253,
     205,   105,  1998,  1999,   136,   469,   432,  2003,   140,   469,
    2006,  2007,   268,    35,   468,  2011,   165,   469,     8,   224,
     287,    11,  1087,   469,   212,    15,    16,    17,   469,   161,
     431,    84,   164,  1435,   128,   470,  2032,   104,   105,   315,
    2036,   345,  2176,   213,   469,   112,   178,   469,   112,    35,
     147,  1453,    72,  2032,   119,   147,   336,  2036,    35,   470,
     265,  2057,   336,    35,  1087,    53,   469,  1469,   473,   274,
     418,   469,    72,  2059,  2060,   379,    35,   413,   181,   400,
     271,  2032,    66,  1485,    66,  2036,  2052,   469,  2054,   473,
      35,   352,   458,   258,  2090,   181,  1498,  1499,   235,   469,
     400,  1503,   169,  2099,    35,  1128,   469,   271,   457,   458,
     469,   271,  2108,   462,  2520,   419,   470,   810,   469,  2115,
     251,   268,   471,   190,   335,   322,   258,   193,   432,   268,
     268,    32,   469,    21,   266,   553,   117,  1857,   411,  2102,
    1222,  1870,  1147,  1208,  1558,   494,   495,   496,  1618,  2163,
    2372,   455,  1897,  2287,  2376,  2523,  1652,  2589,  2379,  2568,
    2556,  2147,  2306,  1552,   797,   469,  1564,  2163,  1912,  1614,
     237,  2520,  1874,   240,  2566,   307,  1549,  2173,  2518,   528,
    2176,   530,  1904,  1622,   251,  1208,   253,   536,  2322,  2185,
    2186,   770,  1478,  2189,  1821,   544,   953,  2163,   188,   968,
     405,  2061,  2455,  1390,  1391,  2201,   555,  2423,  1395,   558,
    1820,  2231,  2208,  2347,  2517,   282,  2350,  2213,   738,   209,
    2216,  2217,  2201,  1513,   763,  1194,   786,  2223,  2224,  2208,
     785,  1528,  1255,  1800,  2213,  1168,  2447,  2216,  2217,  2235,
    2053,  2237,  1193,  1430,  1431,   788,  1499,  1786,  1650,  2023,
    2201,  2038,  1784,   602,   603,   604,  2235,  2208,  1784,   326,
    1786,  2257,  2213,  2256,  2343,  2216,  2431,  2442,  2430,  2443,
    2227,  2507,  1327,  2508,  1123,  1340,  2495,  1516,  1453,   346,
     270,  1450,  1348,  1126,  2235,  1261,  1146,    -1,    -1,  1324,
      -1,  2287,    -1,    -1,    -1,  2288,  2289,   646,  2520,   366,
      -1,   368,    -1,  1326,   371,    -1,    -1,  2300,    -1,    -1,
    2296,    -1,    -1,    -1,    -1,  1008,    -1,  1340,    -1,    -1,
    2316,  2287,    -1,    -1,    -1,  2321,  2322,    -1,    -1,    -1,
      -1,  2317,    -1,    -1,  1620,    -1,    -1,  2316,    -1,  1625,
    1626,  2351,  2338,  1629,    -1,    -1,  2342,    -1,    -1,    -1,
      -1,  2347,    -1,    -1,  2350,  2351,    -1,  1643,    35,    -1,
      -1,    -1,    -1,  2342,    -1,  2316,  2362,  1769,  2361,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2372,    54,    -1,    -1,
    2376,  2377,  1784,    -1,  1786,    -1,    -1,  2521,    -1,    -1,
      -1,  2342,    -1,    -1,  1087,    -1,    -1,    -1,   747,    -1,
      -1,    -1,   469,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   763,   764,    -1,    -1,  2404,    -1,
      -1,   770,   771,    -1,   773,    -1,    -1,   104,    -1,    -1,
      -1,    -1,  2428,    -1,  2400,  2431,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    72,  2440,    -1,    -1,   796,   797,    -1,
      -1,  2447,  2431,    -1,    -1,    84,    -1,    -1,    -1,  2455,
     809,    -1,    -1,    -1,    -1,  2451,   456,   457,   458,    -1,
     460,   461,   462,   463,   464,   465,  2455,   826,    -1,  2475,
    2431,   830,    -1,   112,    -1,   114,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1781,  1782,  1783,  2494,  2495,
      -1,    -1,    -1,    -1,  2455,    -1,  2032,    -1,    -1,    -1,
    2036,    -1,    -1,   190,    -1,  1208,    -1,  1919,    -1,    -1,
    1707,  1708,  1709,  1710,  2520,  2521,  1713,  1714,  1715,  1716,
    1717,  1718,  1719,  1720,  1721,  1722,    -1,   526,   527,    -1,
     169,  2537,    -1,  2539,  2530,    -1,    -1,    -1,    -1,    -1,
    1836,    -1,    -1,    -1,    -1,  2521,    -1,    -1,  2537,    -1,
     237,    -1,    -1,   240,    -1,    -1,   195,    -1,    -1,    -1,
      -1,  1636,    -1,    -1,   251,    -1,  1763,  1764,    -1,    -1,
      -1,  1604,    -1,    -1,   933,    -1,  2537,    -1,    -1,    -1,
     939,    -1,    -1,   582,   583,    -1,    -1,    -1,   947,    -1,
      -1,  2597,  2598,    -1,   953,   282,    -1,   956,    -1,    -1,
      -1,   960,   961,  1636,   963,   964,  1902,   966,    -1,    -1,
      -1,  1686,    -1,    -1,   253,    -1,    -1,    -1,    -1,   258,
    2032,    -1,    -1,    -1,  2036,    -1,    -1,  1923,    -1,    -1,
      -1,  1706,    20,    -1,    -1,    -1,    -1,  1340,    -1,   326,
      -1,    -1,   641,    -1,   633,    -1,    -1,  2059,  2060,    -1,
     142,   640,    -1,  1686,    -1,    -1,    -1,    -1,   657,   346,
    1735,   300,    -1,   155,    -1,  2201,    -1,    -1,   160,    -1,
      -1,    -1,  2208,  1706,    -1,    -1,   315,  2213,   642,   366,
    2216,    -1,    -1,    -1,  1759,    73,   685,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2235,
      88,  1060,  1735,    -1,    -1,   704,   705,   706,    -1,   708,
      -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,  2015,
    2016,  2017,  2018,    -1,    -1,    -1,  1759,    -1,    -1,   728,
      -1,    -1,   224,    -1,    -1,  2147,  1095,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,   141,   743,    11,   745,   746,    -1,    15,
      16,    17,   150,    -1,    -1,    -1,  1125,   406,    -1,    -1,
      -1,    -1,    -1,   265,   162,    -1,    32,    -1,    -1,   778,
    2316,    -1,   274,   782,   783,    -1,  1145,    -1,  1147,    -1,
      -1,    -1,   642,    -1,    -1,    -1,  2208,    -1,  1157,  1158,
    1875,  2213,    -1,   191,  2216,    -1,  2342,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   642,
      -1,    -1,   811,    -1,    -1,   814,   815,    -1,    -1,    -1,
      -1,    -1,  1191,    -1,    -1,   834,   835,   836,    -1,    -1,
    1199,  1200,  1875,    -1,    -1,    -1,   810,    -1,   236,    -1,
      -1,  1210,  1211,  1212,  1213,    -1,  1215,    -1,    -1,    -1,
      -1,    -1,  1221,    -1,  1223,    -1,    -1,    -1,    -1,    -1,
      -1,     0,    -1,    -1,    -1,  1234,  1235,    -1,    -1,    -1,
    1239,  1240,    -1,    -1,  2296,  1244,  1245,  1246,  1247,    -1,
    1249,  1250,    -1,    -1,    -1,  2431,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,  2317,    -1,    -1,    -1,    -1,
      -1,  1270,  1271,   405,    -1,    -1,    -1,    -1,   306,  2455,
      -1,    -1,    -1,    -1,  1999,  1284,    -1,    -1,    -1,    -1,
    2342,    -1,    -1,  1636,    -1,    -1,   935,    -1,    -1,  2351,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,
      -1,   339,    -1,   209,    -1,    -1,    -1,    -1,   346,    -1,
     810,   349,    91,    -1,    -1,    -1,  1999,    -1,  2264,    -1,
     642,    -1,    -1,    -1,    -1,   467,  2173,    -1,   470,   471,
     368,    -1,    -1,  1686,   973,   974,    -1,   810,    -1,    -1,
      -1,   379,  2404,    -1,    -1,    -1,    -1,    -1,   386,    -1,
      -1,  2537,    -1,  1706,    -1,    -1,    -1,   395,    -1,    -1,
      -1,    -1,    -1,   142,   270,    -1,    -1,  2313,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
      -1,   160,  1735,  2108,    -1,    -1,   165,   425,  1037,  2451,
    2115,    -1,    -1,    -1,  1008,   174,    -1,    -1,   177,    -1,
      -1,    -1,    -1,  1042,  1043,    -1,  1759,    -1,    -1,  1058,
    2257,  1050,  1061,  1052,  1053,  1064,    -1,    -1,    -1,    -1,
      -1,    -1,  1071,  1072,  2370,  2108,   205,    -1,  1067,    -1,
    1069,    -1,  2115,    -1,    -1,    -1,    -1,    -1,  1447,  1088,
    1089,  1090,  1091,  1082,  1083,   224,    -1,  1096,  1097,    -1,
      -1,  2176,  1101,    -1,    -1,    -1,  1105,  2403,    -1,  1108,
    1109,  1110,  1111,  1112,  1113,  1114,  1115,  1116,  2530,  1478,
    1119,    -1,    -1,  1087,  2321,     8,  1485,  1126,    11,  1128,
      -1,    -1,    15,    16,    17,    -1,   265,    -1,   810,   268,
    1499,    -1,    -1,  2176,  1503,   274,    -1,  1506,  1507,    32,
    1149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1008,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    -1,
      -1,    -1,  1875,    -1,    -1,    -1,    -1,    -1,  1177,  1178,
      -1,    -1,    -1,    32,    -1,  1008,    -1,    -1,  1177,  1178,
      -1,    40,    -1,    -1,    -1,  1554,    -1,    -1,    47,   328,
     456,   457,   458,    -1,   460,   461,   462,   463,   464,   465,
      -1,    -1,  2287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1087,    -1,  1228,
      -1,    -1,    -1,    -1,  1208,    -1,    -1,  2322,    -1,  1238,
     379,    -1,  1241,    -1,  2287,  1614,  1255,    -1,    -1,  1258,
    1259,  1620,  1261,    -1,  1087,  1624,  1625,  1626,  1627,    -1,
    1629,    -1,  2347,    -1,    -1,  2350,   405,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1643,    -1,    -1,    -1,  1647,  2322,
      -1,    -1,     0,    -1,    -1,    -1,  1999,    -1,    -1,    -1,
     429,    -1,   431,   432,  1663,  1664,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2347,    -1,    -1,  2350,    -1,    -1,
      -1,   170,  1311,    -1,    -1,    -1,   209,  1326,    -1,    -1,
      -1,    -1,    -1,    -1,   183,  1324,  1008,    -1,   467,   188,
    1699,   470,   471,   472,    -1,    -1,    -1,  1336,  1347,    -1,
      -1,    -1,    -1,  1352,    -1,    -1,    -1,    -1,  1208,    -1,
     209,   210,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   223,    -1,  1340,    -1,    -1,    -1,
      -1,    -1,    -1,    91,    -1,  1208,    -1,   270,    -1,    -1,
      -1,    -1,    -1,  1392,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   253,  2108,    -1,   256,  1407,    -1,
    1409,  1410,  2115,    -1,  1773,  1087,  1415,    -1,    -1,    -1,
      -1,   270,  1781,  1782,  1783,  1784,    -1,  1786,  1787,    -1,
      -1,    -1,  1791,  1792,   142,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2521,   155,    -1,    -1,
    1449,    -1,   160,  1452,    -1,  1454,    -1,   165,    -1,    -1,
      -1,  1820,    -1,    -1,    -1,    -1,   174,    -1,    -1,   177,
      -1,    -1,    -1,  2176,    -1,    -1,    -1,  1836,    -1,  1838,
      -1,    -1,    -1,  1842,  1843,  1844,    -1,  1846,  2521,    -1,
    1340,    -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,
    1489,    -1,    -1,  1862,    -1,  1864,    -1,    -1,   357,    -1,
      -1,    -1,    -1,    -1,  1513,    -1,   224,  1340,  1877,  1878,
    1879,  1880,  1881,  1882,  1883,  1884,  1885,  1886,    -1,  1528,
      -1,  1520,  1521,    -1,    -1,    -1,  1208,    -1,    -1,    -1,
      -1,    -1,    -1,  1902,    -1,    -1,    -1,  1546,    -1,    -1,
      -1,    -1,    -1,  1912,    -1,    -1,    -1,   265,    -1,    -1,
     268,  1920,    -1,    -1,  1923,    -1,   274,    -1,   722,    -1,
      -1,  1930,    -1,   456,   457,   458,    -1,   460,   461,   462,
     463,   464,   465,    -1,  2287,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   453,  1604,   760,   456,   457,   458,
      -1,   460,   461,   462,   463,   464,   465,    -1,    -1,  2322,
     328,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2347,    -1,    -1,  2350,    -1,    -1,
       0,    -1,    -1,  2012,    -1,    -1,  2015,  2016,  2017,  2018,
      -1,    -1,    -1,  2022,  2023,    -1,  2025,    -1,  1340,  2028,
      -1,   379,  1636,  2032,    -1,    -1,    -1,  2036,    -1,    -1,
      -1,  1670,  1671,  2042,  1683,   839,  1675,    -1,    -1,    -1,
     844,    -1,    -1,    -1,  1693,    -1,    -1,   405,  1697,    -1,
      -1,  1700,  2061,    -1,    -1,    -1,    -1,  2066,    -1,    -1,
      -1,  2070,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2078,
      -1,   429,  1686,   431,   432,    -1,    -1,  1726,  1727,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    91,  1706,    -1,  2103,    -1,    -1,    -1,  1747,    -1,
      -1,  1750,    -1,  1752,    -1,    -1,    -1,    -1,    -1,   467,
      -1,  1760,   470,   471,   472,    -1,    -1,    -1,    -1,  1768,
    1769,  1735,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2141,    -1,    -1,    -1,  1636,    -1,    -1,  2148,
      -1,    -1,   142,    -1,    -1,  1759,    -1,    -1,  1797,  2158,
      -1,    -1,    -1,    -1,    -1,   155,    -1,  1806,    -1,    -1,
     160,    -1,    -1,  1636,    -1,   165,    -1,    -1,  2521,    -1,
      -1,    -1,    -1,  1822,   174,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,  1686,    -1,    -1,    -1,
      -1,    28,  2201,  2202,    -1,    -1,    -1,  2206,    35,  2208,
      -1,    -1,    -1,    -1,  2213,   205,  1706,  2216,  2217,    -1,
    2219,    -1,  2221,  1686,    -1,    -1,    -1,    54,    -1,    -1,
      -1,    -1,    -1,    -1,   224,    -1,  2235,    -1,    -1,    -1,
      -1,  1035,    -1,  1706,    -1,  1735,  1875,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2255,  2256,    -1,  1898,
      -1,    -1,    -1,  1057,    -1,  2264,    -1,    -1,  1062,  1759,
      -1,  1875,  1735,    -1,    -1,   265,    -1,   104,   268,  1073,
    1074,  1075,    -1,  1077,   274,    -1,    -1,    -1,    -1,  2288,
    2289,    -1,    -1,    -1,    -1,    -1,  1759,    -1,    -1,  2298,
      -1,  2300,    -1,    -1,    -1,   132,    -1,  1936,    -1,    -1,
      -1,  1950,    -1,    -1,  2313,    -1,    -1,  2316,    -1,    -1,
      -1,    -1,    -1,    -1,  1636,    -1,     8,    -1,    -1,    11,
    1124,    -1,    -1,    15,    16,    17,  2335,    -1,   328,    -1,
      -1,    -1,    -1,  2342,    -1,    -1,    -1,    -1,    -1,  2348,
      32,    -1,    -1,    -1,  1993,  1994,    -1,    -1,  2357,  1998,
      -1,    -1,  2361,   190,  2003,    -1,    -1,  2006,  2007,    -1,
    1164,  2370,  2011,    -1,  1686,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1176,    -1,    -1,  1875,    -1,  1181,    -1,   379,
      -1,    -1,    -1,  2392,  1706,  1999,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2403,    -1,    -1,    -1,    -1,    -1,
     237,    -1,  1875,   240,    -1,   405,    -1,    -1,  2057,    -1,
      -1,    -1,    -1,  1735,   251,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2431,    -1,    -1,    -1,    -1,    -1,  2437,   429,
      -1,   431,   432,  2442,    -1,   272,    -1,  1759,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   282,  2455,  2456,  2457,  2458,
    2099,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2097,    -1,
      -1,    -1,    -1,  2102,    -1,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,     8,    -1,    -1,    11,  2116,  2117,    -1,
      15,    16,    17,    -1,   321,    -1,    -1,    -1,   325,   326,
    2499,    -1,    -1,    -1,  2108,    -1,    -1,    -1,  2507,  1999,
      -1,  2115,    -1,    -1,    -1,    -1,    -1,    -1,  2517,   346,
      -1,    -1,    -1,    -1,    -1,   352,    -1,   209,    -1,    -1,
      -1,    -1,  2531,    -1,    -1,    -1,  1999,    -1,  2537,   366,
      -1,    -1,    -1,    -1,    -1,    -1,  2185,  2186,    -1,    -1,
    2189,    -1,    -1,  2552,    -1,    -1,  1350,    -1,    -1,    -1,
      -1,    -1,    -1,  1875,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2176,    -1,    -1,    -1,    -1,  1371,    -1,    -1,
      -1,    -1,    -1,    -1,  2223,  2224,    -1,    -1,   270,   416,
      -1,    -1,    -1,    -1,  1388,    -1,  1390,  1391,  2237,  1393,
      -1,  1395,    -1,    -1,    -1,  1399,    -1,    -1,    -1,    -1,
      -1,    -1,  1406,    -1,    -1,    -1,    -1,  1411,  2108,    -1,
      -1,    -1,    -1,    -1,    -1,  2115,    -1,  1421,  1422,  1423,
    1424,    -1,    -1,    -1,    -1,    -1,  1430,  1431,    -1,  1433,
    1434,    -1,    -1,    -1,    -1,  2108,    -1,    -1,    -1,  2278,
    2279,  1445,  2115,    -1,  1448,    -1,    -1,    -1,  2287,    -1,
      -1,    -1,  1456,  1457,  1458,  1459,  1460,  1461,  1462,  1463,
    1464,  1465,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       0,    -1,    -1,  2287,   209,    -1,  2176,  1999,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,  2338,
      -1,    -1,  1496,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      30,    31,  2351,  2176,    -1,    -1,    -1,    -1,  2322,    -1,
      -1,    -1,    -1,  2362,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,  2377,    -1,
      -1,    -1,    -1,  2347,    -1,   270,  2350,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    91,    -1,    -1,   456,   457,   458,    -1,   460,   461,
     462,   463,   464,   465,    -1,    -1,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2108,  2287,    -1,    -1,
      -1,    -1,   122,  2115,    -1,    -1,    -1,    -1,  2447,    -1,
      -1,    -1,   132,  1607,  1608,  1609,    -1,    -1,   138,    -1,
      -1,    -1,    -1,    -1,  2287,    -1,   146,    -1,   148,   149,
      -1,    -1,  2322,    -1,    -1,    -1,  2475,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    -1,
      -1,    -1,    -1,    -1,    -1,  2494,  2495,  2347,    -1,  2322,
    2350,    -1,    -1,    32,  2176,    -1,    -1,   187,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,
      -1,    -1,    -1,    -1,  2347,    -1,    -1,  2350,  1682,    -1,
      -1,    -1,  2521,    -1,  1688,    -1,    -1,    -1,    -1,    -1,
    2539,    -1,    -1,    72,    -1,    -1,   226,    -1,    -1,  1703,
    1704,  1705,    -1,  1707,  1708,  1709,  1710,  2521,    -1,  1713,
    1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,  1723,
      -1,   456,   457,   458,    -1,   460,   461,   462,   463,   464,
     465,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1743,
      -1,    -1,     3,    -1,  1748,  1749,    -1,     8,  2597,  2598,
      11,    -1,    -1,    -1,    15,    16,    17,    -1,  1762,  1763,
    1764,  1765,    -1,  1767,   294,  2287,    -1,   297,    -1,    -1,
      -1,    32,    -1,    -1,    35,     8,    -1,    -1,    11,    40,
      -1,    -1,    15,    16,    17,    -1,    47,    -1,    -1,    -1,
      -1,   170,    -1,    -1,    -1,   325,    -1,    -1,    -1,    32,
    2322,    -1,    -1,   333,   183,    -1,    -1,    40,    -1,   188,
       8,    72,    -1,    11,    47,   345,    -1,    15,    16,    17,
      -1,  2521,   352,    -1,    -1,  2347,   356,    -1,  2350,    -1,
     209,   210,    -1,    -1,    -1,  1839,   366,    -1,    -1,    72,
      -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,  2521,   379,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   253,    -1,    -1,   256,    -1,    -1,
      32,    -1,    -1,    -1,   414,    -1,    -1,    -1,    40,   419,
      -1,   270,    -1,    -1,   273,    47,    -1,    -1,    -1,    -1,
      -1,    -1,   432,    -1,    -1,    -1,    -1,    -1,    -1,   170,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      72,    -1,   183,    -1,    -1,   455,    -1,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,   469,
      -1,    -1,   472,    -1,    -1,    -1,    -1,  1951,   209,   210,
     183,  1955,  1956,    -1,  1958,   188,    -1,  1961,  1962,  1963,
    1964,    -1,   223,    -1,  1968,  1969,  1970,  1971,  1972,  1973,
    1974,  1975,  1976,  1977,  1978,  1979,   209,   210,   357,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,  1992,    -1,
     223,  1995,   253,  1997,    -1,   256,    -1,  2001,    -1,  2521,
    2004,  2005,    -1,    -1,  2008,  2009,    -1,    -1,    -1,   270,
      -1,   209,   273,    -1,    -1,    40,    -1,    -1,   170,    -1,
     253,    -1,    47,   256,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   183,    -1,    -1,    -1,    -1,   188,   270,    -1,    -1,
     273,    -1,    -1,    -1,    -1,  2049,    -1,    72,    -1,    -1,
      -1,    -1,  2056,    -1,    -1,    -1,    -1,   209,   210,    -1,
      -1,    -1,    -1,    -1,    -1,  2069,    -1,    -1,    -1,    -1,
      -1,   223,   270,    -1,   453,    -1,    -1,   456,   457,   458,
      -1,   460,   461,   462,   463,   464,   465,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   473,    -1,   357,    -1,    -1,    -1,
      -1,   253,    -1,    -1,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,   270,    -1,
      -1,   273,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2140,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,
      -1,    -1,    -1,   188,    -1,  2169,    -1,    -1,    -1,  2173,
      -1,    -1,    -1,    -1,    -1,  2179,  2180,  2181,    -1,    -1,
    2184,    -1,    -1,  2187,  2188,    -1,    -1,    -1,  2192,    -1,
      -1,    -1,   453,    -1,    -1,   456,   457,   458,   223,   460,
     461,   462,   463,   464,   465,   357,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     453,    -1,    -1,   456,   457,   458,    -1,   460,   461,   462,
     463,   464,   465,    -1,    -1,    -1,    -1,   470,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   270,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2257,    -1,    -1,    -1,    -1,   456,   457,
     458,    -1,   460,   461,   462,   463,   464,   465,    -1,    -1,
      -1,  2275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   453,    -1,    -1,   456,   457,   458,    -1,   460,   461,
     462,   463,   464,   465,    -1,    -1,  2320,  2321,   470,    -1,
      -1,  2325,  2326,  2327,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2355,  2356,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2368,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2425,    -1,    -1,    -1,    -1,    -1,    -1,   453,    -1,
      -1,    -1,  2436,    -1,    -1,   460,   461,   462,   463,   464,
     465,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2453,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2542,    -1,
      -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,  2609,    67,    68,    69,    70,
      71,    -1,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,   129,   130,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,    -1,   220,
     221,   222,   223,    -1,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,    -1,    -1,   270,
     271,   272,    -1,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,    -1,
      -1,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,    -1,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,    -1,    -1,    -1,    -1,    -1,    -1,   460,
     461,   462,    -1,    -1,    -1,    -1,    -1,    -1,   469,   470,
      -1,    -1,    -1,   474,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
      -1,   220,   221,   222,   223,    -1,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,    -1,
      -1,   270,   271,   272,    -1,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,    -1,    -1,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,    -1,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,    -1,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,    -1,   455,    -1,    -1,    -1,
      -1,   460,   461,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     469,   470,    -1,    -1,    -1,   474,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    -1,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    -1,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,    -1,   220,   221,   222,   223,    -1,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,    -1,   266,
     267,    -1,    -1,   270,   271,   272,    -1,    -1,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,    -1,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,    -1,    -1,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,    -1,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,    -1,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,    -1,   455,    -1,
      -1,    -1,    -1,   460,   461,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   469,    -1,    -1,    -1,    -1,   474,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,   167,   168,   169,   170,   171,    -1,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,   220,   221,   222,   223,    -1,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,    -1,    -1,   270,   271,   272,    -1,    -1,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,    -1,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,    -1,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,    -1,
      -1,    -1,    -1,    -1,    -1,   460,   461,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   469,    -1,    -1,    -1,    -1,   474,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
     223,    -1,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,    -1,    -1,    -1,    -1,    -1,    -1,   460,   461,   462,
      -1,    -1,    -1,    -1,    -1,    -1,   469,    -1,    -1,    -1,
      -1,   474,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,    -1,   220,
     221,   222,   223,    -1,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,    -1,    -1,   270,
     271,   272,    -1,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,    -1,
      -1,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,    -1,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,    -1,    -1,    -1,    -1,    -1,    -1,   460,
     461,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   469,    -1,
      -1,    -1,    -1,   474,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
      -1,   220,   221,   222,   223,    -1,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,    -1,
      -1,   270,   271,   272,    -1,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,    -1,    -1,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,    -1,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,    -1,    -1,    -1,    -1,    -1,
      -1,   460,   461,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     469,   470,    -1,    -1,    -1,   474,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    -1,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    -1,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,    -1,   220,   221,   222,   223,    -1,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,    -1,   266,
     267,    -1,    -1,   270,   271,   272,    -1,    -1,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,    -1,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,    -1,    -1,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,    -1,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,    -1,    -1,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,    -1,    -1,    -1,
      -1,    -1,    -1,   460,   461,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   469,    -1,    -1,    -1,    -1,   474,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,   167,   168,   169,   170,   171,    -1,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,    -1,   220,   221,   222,   223,    -1,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,    -1,    -1,   270,   271,   272,    -1,    -1,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,    -1,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,    -1,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,    -1,    -1,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,    -1,
      -1,    -1,    -1,    -1,    -1,   460,   461,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   469,    -1,    -1,    -1,    -1,   474,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
     223,    -1,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,    -1,    -1,    -1,    -1,    -1,    -1,   460,   461,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   469,    -1,    -1,    -1,
      -1,   474,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    27,    28,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,    -1,   220,
     221,   222,   223,    -1,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,    -1,    -1,   270,
     271,   272,    -1,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,    -1,
      -1,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,    -1,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,    -1,    -1,    -1,    -1,    -1,    -1,   460,
     461,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   469,    -1,
      -1,    -1,    -1,   474,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
      -1,   220,   221,   222,   223,    -1,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,    -1,
      -1,   270,   271,   272,    -1,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,    -1,    -1,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,    -1,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,    -1,    -1,    -1,    -1,    -1,
      -1,   460,   461,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     469,    -1,    -1,    -1,    -1,   474,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    -1,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    -1,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,    -1,   220,   221,   222,   223,    -1,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,    -1,   266,
     267,    -1,    -1,   270,   271,   272,    -1,    -1,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,    -1,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,    -1,    -1,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,    -1,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,    -1,    -1,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,    -1,    -1,    -1,
      -1,    -1,    -1,   460,   461,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   469,    -1,    -1,    -1,    -1,   474,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,    -1,   220,   221,   222,   223,    -1,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,    -1,    -1,   270,   271,   272,    -1,    -1,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,    -1,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,    -1,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,    -1,    -1,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,    -1,
      -1,    -1,    -1,    -1,    -1,   460,   461,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   469,    -1,    -1,    -1,    -1,   474,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
     223,    -1,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,    -1,    -1,    -1,    -1,    -1,    -1,   460,   461,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   469,    -1,    -1,    -1,
      -1,   474,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    27,    28,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,   113,    -1,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,    -1,   220,
     221,   222,   223,    -1,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,    -1,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,    -1,    -1,   270,
     271,   272,    -1,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,    -1,
      -1,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,    -1,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   460,
     461,    -1,    -1,     3,     4,     5,     6,     7,   469,     9,
      10,    -1,    -1,   474,    -1,    -1,    -1,    -1,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    27,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    -1,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,   113,    -1,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,   133,    -1,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,    -1,
     220,   221,   222,   223,    -1,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,    -1,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    -1,   266,   267,    -1,    -1,
     270,   271,   272,    -1,    -1,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
      -1,    -1,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,    -1,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     460,   461,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   469,
      -1,    -1,    -1,    -1,   474,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    27,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    -1,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,    -1,   220,   221,   222,   223,    -1,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,    -1,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
      -1,    -1,   270,   271,   272,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,    -1,    -1,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   460,   461,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   469,    -1,    -1,    -1,    -1,   474,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    -1,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    -1,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,    -1,   208,    -1,    -1,   211,   212,   213,   214,   215,
     216,   217,    -1,    -1,   220,   221,   222,   223,    -1,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,    -1,   254,   255,
      -1,   257,   258,   259,   260,   261,   262,   263,   264,    -1,
     266,   267,    -1,    -1,   270,   271,   272,    -1,    -1,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,    -1,    -1,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
      -1,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,   424,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,    -1,    -1,
      -1,    -1,    -1,    -1,   460,   461,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   469,    -1,    -1,    -1,    -1,   474,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,    43,
      44,    45,    46,    -1,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    -1,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,   133,
      -1,   135,   136,   137,    -1,   139,    -1,   141,    -1,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,   169,    -1,   171,    -1,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,    -1,   208,    -1,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,    -1,   220,   221,   222,    -1,
      -1,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,    -1,
     254,   255,    -1,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,   266,   267,    -1,    -1,   270,   271,   272,    -1,
      -1,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,    -1,    -1,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,    -1,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
     424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   460,   461,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   469,    -1,    -1,    -1,    -1,
     474,    -1,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
      35,    -1,    37,    38,    -1,    40,    41,    42,    -1,    44,
      45,    46,    47,    48,    -1,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    -1,    -1,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
      -1,   156,   157,   158,   159,    -1,   161,    -1,   163,    -1,
      -1,   166,   167,   168,   169,    -1,   171,    -1,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,    -1,   208,    -1,    -1,   211,   212,   213,   214,
     215,   216,   217,    -1,    -1,   220,   221,   222,    -1,    -1,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,    -1,   254,
     255,    -1,   257,    -1,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,    -1,    -1,   270,   271,   272,    -1,    -1,
     275,   276,    -1,   278,    -1,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,    -1,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,    -1,   380,    -1,   382,   383,   384,
     385,   386,    -1,   388,   389,    -1,    -1,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,    -1,   424,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   470,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    27,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      -1,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,   113,    -1,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,   133,    -1,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,    -1,   154,    -1,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,    -1,   220,   221,
     222,   223,    -1,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,    -1,   254,   255,   256,   257,    -1,   259,   260,   261,
     262,   263,   264,    -1,   266,   267,    -1,   269,   270,   271,
     272,    -1,    -1,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,    -1,    -1,
     392,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
     402,   403,   404,    -1,    -1,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,   424,   425,   426,   427,    -1,    -1,   430,    -1,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,    -1,    -1,   455,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   469,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      -1,    60,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,    -1,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,   221,   222,   223,    -1,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,    -1,   254,   255,   256,   257,    -1,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,    -1,
     269,   270,   271,   272,    -1,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,    -1,    -1,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,    -1,    -1,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     469,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    -1,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    -1,    60,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    -1,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,   113,    -1,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,    -1,   154,    -1,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,    -1,   220,   221,   222,   223,    -1,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,    -1,   254,   255,   256,
     257,    -1,   259,   260,   261,   262,   263,   264,    -1,   266,
     267,    -1,    -1,   270,   271,   272,    -1,    -1,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,    -1,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,    -1,    -1,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,    -1,    -1,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,    -1,    -1,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   469,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    -1,    60,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
      -1,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,    -1,   220,   221,   222,   223,    -1,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,    -1,   254,
     255,   256,   257,    -1,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,    -1,    -1,   270,   271,   272,    -1,    -1,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,    -1,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,    -1,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,    -1,    -1,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,    -1,    -1,
       3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   469,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
     223,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
      -1,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,   268,    -1,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      -1,    -1,     3,    -1,    -1,    -1,    -1,   460,   461,   462,
      -1,    -1,    -1,    -1,    -1,    -1,   469,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,   113,    -1,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,    -1,   154,    -1,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,    -1,   220,
     221,   222,   223,    -1,   225,   226,   227,    -1,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,    -1,   254,   255,   256,   257,    -1,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,    -1,    -1,   270,
     271,   272,    -1,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,    -1,
      -1,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,    -1,    -1,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,    -1,    -1,   430,
      -1,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,    -1,    -1,   455,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   469,    -1,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    27,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    40,    41,    42,    -1,    44,    45,    46,    47,
      48,    -1,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    -1,    -1,    -1,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,    -1,   156,   157,
     158,   159,    -1,   161,    -1,   163,    -1,    -1,    -1,   167,
     168,   169,    -1,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,    -1,
     208,    -1,    -1,   211,    -1,   213,   214,   215,   216,   217,
      -1,    -1,   220,    -1,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,    -1,
     248,   249,   250,   251,   252,    -1,   254,   255,    -1,   257,
      -1,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
      -1,    -1,   270,   271,   272,    -1,    -1,   275,   276,    -1,
     278,    -1,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,    -1,   424,   425,   426,   427,
      -1,    -1,   430,    -1,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,    -1,    -1,   455,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   469,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    40,    41,    42,    -1,    44,
      45,    46,    47,    48,    -1,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    -1,    -1,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
      -1,   156,   157,   158,   159,    -1,   161,    -1,   163,    -1,
      -1,    -1,   167,   168,   169,    -1,   171,    -1,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,    -1,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,    -1,   208,    -1,    -1,   211,    -1,   213,   214,
     215,   216,   217,    -1,    -1,   220,    -1,   222,    -1,    -1,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,    -1,   248,   249,   250,   251,   252,    -1,   254,
     255,    -1,   257,    -1,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,    -1,    -1,   270,   271,   272,    -1,    -1,
     275,   276,    -1,   278,    -1,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,    -1,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,    -1,   380,    -1,   382,   383,   384,
     385,   386,    -1,   388,   389,    -1,    -1,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
      -1,    -1,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,    -1,   424,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   469,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   469,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    27,    28,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,
      41,    42,    -1,    44,    45,    46,    47,    48,    -1,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    -1,    -1,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,   113,    -1,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,    -1,   154,    -1,   156,   157,   158,   159,    -1,
     161,    -1,   163,    -1,    -1,    -1,   167,   168,   169,    -1,
     171,    -1,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,    -1,   196,    -1,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,    -1,   208,    -1,    -1,
     211,    -1,   213,   214,   215,   216,   217,    -1,    -1,   220,
      -1,   222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,    -1,   248,   249,   250,
     251,   252,    -1,   254,   255,    -1,   257,    -1,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,    -1,    -1,   270,
     271,   272,    -1,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,    -1,   380,
      -1,   382,   383,   384,   385,   386,    -1,   388,   389,    -1,
      -1,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,    -1,    -1,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,    -1,   424,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   469,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    -1,    44,    45,    46,    47,    48,
      -1,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    -1,    -1,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,    -1,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,    -1,    -1,    -1,   167,   168,
     169,    -1,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,    -1,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
      -1,    -1,   211,    -1,   213,   214,   215,   216,   217,    -1,
      -1,   220,    -1,   222,    -1,    -1,   225,   226,   227,    -1,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,    -1,   248,
     249,   250,   251,   252,    -1,   254,   255,    -1,   257,    -1,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,    -1,
      -1,   270,   271,   272,    -1,    -1,   275,   276,    -1,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
      -1,   380,    -1,   382,   383,   384,   385,   386,    -1,   388,
     389,    -1,    -1,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,    -1,    -1,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,    -1,   424,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,    -1,    -1,    -1,    -1,    -1,     3,
       4,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,    -1,
     469,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,    -1,   148,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,    -1,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,    -1,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,   279,    -1,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,    -1,
     294,   295,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   450,   451,   452,    -1,
       3,    -1,   456,   457,   458,     8,   460,   461,   462,   463,
     464,   465,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      -1,    -1,    -1,   456,   457,   458,    -1,   460,   461,   462,
     463,   464,   465,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    32,    -1,    15,
      16,    17,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      -1,     8,    47,    -1,    11,    -1,    32,    -1,    15,    16,
      17,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,
      -1,    47,    -1,    -1,    -1,    32,    -1,    72,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,    -1,
      47,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    72,    -1,    15,    16,    17,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,     8,    -1,    -1,    11,    -1,    47,
      -1,    15,    16,    17,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    -1,    -1,    -1,    72,   170,    40,    -1,    -1,    -1,
      -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,   183,    -1,
      -1,    -1,    -1,   188,   170,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,    72,    -1,
      -1,    -1,   188,   170,   209,   210,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,   223,    -1,
      -1,   188,    -1,   209,   210,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,    -1,    -1,
      -1,    -1,   209,   210,    -1,    -1,    -1,    -1,   253,    -1,
      -1,   256,    -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,
      -1,    -1,   170,    -1,    -1,   270,    -1,   253,   273,    -1,
     256,    -1,    -1,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,    -1,    -1,    -1,   270,    -1,   253,   273,    -1,   256,
      -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,
      -1,   209,   210,   270,    -1,    -1,   273,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   223,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,   256,   223,
      -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   270,    -1,    -1,   273,    -1,    -1,    -1,    -1,
      -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   253,
      -1,    -1,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     357,    -1,    -1,    -1,    -1,    -1,   270,     8,    -1,   273,
      11,    -1,    -1,    -1,    15,    16,    17,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,   453,   357,
      -1,   456,   457,   458,    -1,   460,   461,   462,   463,   464,
     465,    72,    -1,    -1,    -1,   470,    -1,   453,    -1,    -1,
     456,   457,   458,    40,   460,   461,   462,   463,   464,   465,
      47,    -1,    -1,   357,   470,    -1,   453,    -1,    -1,   456,
     457,   458,    -1,   460,   461,   462,   463,   464,   465,     8,
      -1,    -1,    11,   470,    -1,    72,    15,    16,    17,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,
      -1,    -1,    -1,    -1,    -1,   453,    -1,    -1,   456,   457,
     458,    -1,   460,   461,   462,   463,   464,   465,    -1,   170,
      -1,     8,   470,    72,    11,    -1,    -1,    -1,    15,    16,
      17,    -1,   183,   140,    -1,    -1,    -1,   188,    -1,   453,
      -1,    -1,   456,   457,   458,    32,   460,   461,   462,   463,
     464,   465,    -1,    40,    -1,    -1,   470,    -1,   209,   210,
      47,    -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   223,    -1,    -1,    -1,   183,    -1,    -1,     8,
      -1,   188,    11,    -1,    -1,    72,    15,    16,    17,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   253,    32,    -1,   256,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,   223,    -1,    47,   270,
      -1,   170,   273,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   183,    -1,    -1,    -1,    -1,   188,
      -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     209,   210,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,    -1,    -1,
      -1,   188,    -1,    -1,   253,    -1,   357,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   270,   209,   210,   273,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,
      -1,   170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     357,    -1,    -1,    -1,   183,    -1,    -1,    -1,    -1,   188,
      -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,   256,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     209,   210,    -1,   270,    -1,    -1,   273,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   453,    -1,    -1,   456,   457,   458,   357,   460,
     461,   462,   463,   464,   465,    -1,    -1,    -1,    -1,   470,
      -1,    -1,    -1,    -1,   253,    -1,    -1,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   270,    -1,    -1,   273,    -1,   453,    -1,    -1,    -1,
      -1,    -1,    -1,   460,   461,   462,   463,   464,   465,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   453,    -1,    -1,   456,   457,   458,
      -1,   460,   461,   462,   463,   464,   465,    -1,    -1,    -1,
      -1,   470,    -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   453,    -1,    -1,   456,
     457,   458,    -1,   460,   461,   462,   463,   464,   465,    -1,
      -1,    -1,    -1,   470,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   453,     3,    -1,   456,   457,   458,
      -1,   460,   461,   462,   463,   464,   465,    -1,    -1,   468,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   462,    -1,    -1,    -1,    -1,    -1,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    27,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    40,    41,    42,    -1,    44,    45,    46,    47,
      48,    -1,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    -1,    -1,    -1,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,    -1,   156,   157,
     158,   159,    -1,   161,    -1,   163,    -1,    -1,    -1,   167,
     168,   169,    -1,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,    -1,
     208,    -1,    -1,   211,    -1,   213,   214,   215,   216,   217,
      -1,    -1,   220,    -1,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,    -1,
     248,   249,   250,   251,   252,    -1,   254,   255,    -1,   257,
      -1,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
      -1,    -1,   270,   271,   272,    -1,    -1,   275,   276,    -1,
     278,    -1,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,    -1,   380,    -1,   382,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,    -1,   424,   425,   426,   427,
      -1,    -1,   430,    -1,    -1,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,     3,     4,     5,    -1,    -1,
      -1,     9,    -1,    -1,   462,    -1,    -1,    -1,    -1,    -1,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    27,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    -1,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,    -1,   220,   221,   222,   223,    -1,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,    -1,   254,   255,   256,   257,
      -1,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
     268,    -1,   270,   271,   272,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,    -1,    -1,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,     3,     4,     5,    -1,    -1,
      -1,     9,   460,   461,    -1,    -1,    -1,    -1,    -1,    -1,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    27,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    -1,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,    -1,   220,   221,   222,   223,    -1,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,    -1,   254,   255,   256,   257,
      -1,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
     268,    -1,   270,   271,   272,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,    -1,    -1,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,     3,     4,     5,    -1,    -1,
      -1,     9,   460,   461,    -1,    -1,    -1,    -1,    -1,    -1,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    27,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    -1,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,    -1,   220,   221,   222,   223,    -1,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,    -1,   254,   255,   256,   257,
      -1,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
     268,    -1,   270,   271,   272,    -1,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,    -1,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
      -1,    -1,   430,    -1,    -1,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,    -1,    -1,     8,    -1,    -1,
      11,    -1,   460,   461,    15,    16,    17,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,     8,    -1,    -1,    11,    -1,    47,    -1,    15,    16,
      17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,
      -1,    72,    -1,    40,    -1,    -1,    -1,    -1,     8,    -1,
      47,    11,    -1,    -1,    -1,    15,    16,    17,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    72,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    -1,     8,    47,    -1,    11,
     121,    -1,    -1,    15,    16,    17,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    72,    35,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,     8,    -1,    47,    11,    -1,    -1,    -1,
      15,    16,    17,    -1,    -1,    -1,    -1,    -1,    -1,   170,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,
      72,    -1,   183,    -1,    -1,    40,    -1,   188,    -1,    -1,
      -1,    -1,    47,   160,    -1,    -1,    -1,    -1,   165,    -1,
      -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   209,   210,
      -1,    -1,    -1,    -1,    -1,    -1,   183,    72,    -1,    -1,
      -1,   188,   223,    -1,    -1,    -1,    -1,    -1,    -1,   159,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     170,    -1,   209,   210,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   253,   183,    -1,   256,   223,    -1,   188,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,
      -1,    -1,   273,    -1,    -1,    -1,    -1,    -1,   170,   209,
     210,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,   256,
      -1,   183,    -1,   223,    -1,    -1,   188,    -1,    -1,    -1,
      -1,    -1,    -1,   270,    -1,    -1,   273,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   170,    -1,   209,   210,    -1,
      -1,    -1,    -1,   253,    -1,    -1,   256,    -1,   183,    -1,
      -1,   223,    -1,   188,    -1,    -1,    -1,    -1,    -1,    -1,
     270,    -1,    -1,   273,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   209,   210,   357,    -1,    -1,    -1,
      -1,   253,    -1,    -1,   256,   295,    -1,    -1,   223,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,    -1,
      -1,   273,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,
      -1,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   413,    -1,     8,   270,    -1,    11,   273,    -1,
      -1,    15,    16,    17,    -1,    -1,    -1,   357,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   290,    -1,    -1,    32,    -1,
      -1,    35,     8,    -1,    -1,    11,    40,    -1,    -1,    15,
      16,    17,   453,    47,    -1,   456,   457,   458,    -1,   460,
     461,   462,   463,   464,   465,   357,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    -1,     8,    -1,    72,    11,
      -1,    47,    -1,    15,    16,    17,   453,    -1,    -1,   456,
     457,   458,    -1,   460,   461,   462,   463,   464,   465,    -1,
      32,    -1,   357,    -1,    -1,    -1,    72,    -1,    40,    -1,
      -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   453,    -1,    -1,   456,   457,   458,    -1,
     460,   461,   462,   463,   464,   465,    -1,    -1,    -1,    -1,
      72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,   453,    -1,    -1,   456,   457,   458,    -1,   460,   461,
     462,   463,   464,   465,    -1,    -1,   170,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,   183,
      -1,    -1,    -1,    47,   188,    -1,    -1,    -1,   453,   165,
      -1,   456,   457,   458,   170,   460,   461,   462,   463,   464,
     465,    -1,    -1,    -1,    -1,   209,   210,   183,    72,    -1,
      -1,    -1,   188,    -1,    -1,    -1,    -1,    -1,    -1,   223,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,
      -1,    -1,    -1,   209,   210,    -1,    -1,    -1,    -1,    -1,
      -1,   183,    -1,    -1,    -1,    -1,   188,   223,    -1,   253,
      -1,    -1,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   270,   209,   210,   273,
      -1,    -1,    -1,    -1,    -1,    -1,   140,   253,    -1,    -1,
     256,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,   270,    -1,    11,   273,    -1,    -1,
      15,    16,    17,    -1,    -1,    -1,   170,    -1,    -1,    -1,
      -1,   253,    -1,    -1,   256,    -1,    -1,    32,    -1,   183,
      -1,    -1,    -1,    -1,   188,    40,    -1,    -1,   270,    -1,
       8,   273,    47,    11,    -1,    -1,    -1,    15,    16,    17,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   357,    -1,    -1,    -1,    72,    -1,   223,
      -1,    -1,    40,    -1,     8,    -1,    -1,    11,    -1,    47,
      -1,    15,    16,    17,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    40,    -1,    -1,    -1,
      -1,    -1,     8,    47,    -1,    11,   270,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,
      40,    47,    -1,    -1,    -1,   387,    -1,    47,    -1,   453,
      -1,    -1,   456,   457,   458,   170,   460,   461,   462,   463,
     464,   465,    -1,    -1,    -1,    -1,    72,    -1,   183,    -1,
      -1,    -1,    72,   188,    -1,    -1,    -1,   453,    -1,    -1,
     456,   457,   458,    -1,   460,   461,   462,   463,   464,   465,
      -1,    -1,   170,   357,   209,   210,     8,    -1,    -1,    11,
      -1,    -1,    -1,    -1,    -1,   183,    -1,    -1,   223,    -1,
     188,   453,    -1,    -1,   456,   457,   458,    -1,   460,   461,
     462,   463,   464,   465,    -1,    -1,   170,    -1,    40,    -1,
      -1,   209,   210,    -1,   140,    47,    -1,    -1,   253,   183,
     140,   256,    -1,    -1,   188,   223,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   270,    -1,    -1,   273,    -1,
      72,    -1,    -1,    -1,   170,   209,   210,    -1,    -1,    -1,
     170,    -1,    -1,    -1,    -1,   253,    -1,   183,   256,   223,
      -1,    -1,   188,   183,    -1,    -1,    -1,    -1,   188,   453,
      -1,    -1,   270,    -1,    -1,    -1,   460,   461,   462,   463,
     464,   465,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   256,    -1,    -1,    -1,    -1,   223,    -1,    -1,
      -1,    -1,    -1,   223,    -1,    -1,   270,    -1,   140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,
      -1,    -1,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,
     270,   183,    -1,    -1,    -1,    -1,   188,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   223,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   453,    -1,
      -1,   456,   457,   458,    -1,   460,   461,   462,   463,   464,
     465,   357,    -1,    -1,    -1,    -1,    -1,   357,   270,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   453,    -1,    -1,   456,   457,
     458,    -1,   460,   461,   462,   463,   464,   465,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   453,
      -1,    -1,   456,   457,   458,    -1,   460,   461,   462,   463,
     464,   465,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   357,    -1,   453,    -1,    -1,
      -1,    -1,    -1,   453,   460,   461,   462,   463,   464,   465,
     460,   461,   462,   463,   464,   465,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,   453,     5,    -1,    -1,    -1,    -1,    -1,   460,   461,
     462,   463,   464,   465,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    60,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
     223,    -1,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
      -1,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
     223,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
      -1,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,   268,    -1,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
     223,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
      -1,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
     223,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
      -1,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      -1,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,   162,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,   162,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
     223,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,   269,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,   269,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    35,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    35,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    35,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,    -1,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,    -1,   248,   249,   250,   251,   252,
      -1,   254,   255,    -1,   257,    -1,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,    -1,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,    -1,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,    -1,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      43,    44,    45,    46,    -1,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    -1,    -1,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,    -1,   148,   149,   150,   151,    -1,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,    -1,    -1,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,    -1,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
     223,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,    -1,
      -1,   254,   255,   256,   257,    -1,    -1,   260,   261,   262,
     263,   264,    -1,   266,   267,    -1,    -1,   270,   271,   272,
      -1,    -1,   275,    -1,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,   288,   289,    -1,   291,   292,
      -1,   294,   295,    -1,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,    -1,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,   392,
     393,    -1,   395,    -1,    -1,   398,   399,   400,   401,   402,
     403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,   418,    -1,   420,    -1,   422,
     423,   424,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   450,   451,   452,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    -1,    40,    41,    42,    43,    44,    45,    46,
      -1,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    -1,    -1,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,   113,    -1,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,   146,
      -1,   148,   149,   150,   151,    -1,    -1,   154,    -1,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,   173,    -1,    -1,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,    -1,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,    -1,   220,   221,   222,   223,    -1,   225,   226,
     227,    -1,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,    -1,    -1,   254,   255,   256,
     257,    -1,    -1,   260,   261,   262,   263,   264,    -1,   266,
     267,    -1,    -1,   270,   271,   272,    -1,    -1,   275,    -1,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,    -1,   291,   292,    -1,   294,   295,    -1,
     297,   298,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,   349,   350,    -1,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,    -1,    -1,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,    -1,    -1,   392,   393,    -1,   395,    -1,
      -1,   398,   399,   400,   401,   402,   403,   404,    -1,    -1,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
     417,   418,    -1,   420,    -1,   422,   423,   424,   425,   426,
     427,    -1,    -1,   430,    -1,    -1,   433,   434,   435,   436,
     437,   438,    -1,    22,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,   450,   451,   452,    35,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   272,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   282,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   321,    -1,    -1,    -1,   325,   326,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,
      -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   416
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    18,    28,    30,    31,    46,    55,    67,    78,    89,
      91,   108,   122,   132,   138,   146,   148,   149,   187,   226,
     294,   297,   325,   333,   345,   352,   356,   366,   379,   414,
     419,   432,   455,   469,   477,   478,   479,   480,   481,   488,
     499,   500,   501,   502,   519,   565,   568,   571,   573,   574,
     578,   584,   586,   593,   597,   598,   599,   606,   610,   624,
     626,   627,   630,   632,   633,   634,   635,   636,   637,   674,
     793,   795,   796,   801,   804,   810,   811,   813,   815,   392,
     435,   794,   191,   339,   346,   379,   425,   794,     3,    18,
      19,    20,    21,    22,    23,    24,    25,    27,    28,    29,
      37,    38,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    53,    54,    55,    56,    57,    58,
      61,    62,    63,    64,    65,    67,    68,    69,    70,    71,
      73,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      85,    86,    87,    88,    89,    90,    92,    93,    94,    95,
      99,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     113,   115,   116,   117,   118,   119,   120,   122,   123,   124,
     125,   126,   129,   130,   131,   132,   133,   135,   136,   137,
     139,   140,   141,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   154,   156,   157,   158,   159,   161,   163,
     164,   166,   167,   168,   169,   170,   171,   173,   175,   176,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     189,   190,   191,   192,   193,   194,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   206,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   220,   221,   222,   223,
     225,   226,   227,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   254,   255,   256,   257,
     259,   260,   261,   262,   263,   264,   266,   267,   270,   271,
     272,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   346,   347,   348,
     349,   350,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   377,   378,   380,   381,   382,
     383,   384,   385,   386,   388,   389,   392,   393,   394,   395,
     396,   398,   399,   400,   401,   402,   403,   404,   407,   408,
     409,   410,   411,   414,   415,   416,   417,   418,   419,   420,
     422,   423,   424,   425,   426,   427,   430,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   723,   780,   784,
     786,   816,   817,   818,   794,    49,   469,   514,   167,   171,
     227,   273,   339,   383,   385,   406,   409,   563,   605,     3,
      26,   297,   778,   784,   816,    20,    73,    88,   141,   150,
     162,   191,   236,   292,   306,   337,   339,   346,   349,   368,
     379,   386,   395,   425,   579,   580,   583,   794,   778,    91,
     423,   469,   565,   574,   589,   593,   606,   632,   795,   106,
     106,     5,   625,   783,   784,   778,    26,   388,   392,   784,
     802,   803,   812,   794,    26,   127,   644,   645,   227,   339,
     350,   388,   805,   806,   812,   794,   269,   685,   776,   784,
     166,   469,   798,   469,   313,   638,   639,   778,   638,   633,
     634,   637,     0,   472,   423,   587,   117,   201,   411,   142,
     205,   274,   405,   646,   647,   633,   635,   636,   473,    26,
     388,   392,   812,   182,   776,   778,   182,   776,   182,   685,
     182,   776,   469,   467,   471,   767,   769,   574,   606,   629,
     632,   795,   776,   784,   383,   385,   383,   385,   323,   182,
     784,   313,   346,   379,   425,   191,    26,   778,   238,   395,
     105,   379,   425,   342,   182,   581,   784,   787,   182,   777,
     778,   182,   778,   469,   585,   563,   589,     3,   419,   590,
     592,   593,   595,   596,   816,   817,   818,   587,   783,   783,
     458,   469,   469,   628,   452,   211,   471,   268,     4,     6,
       7,     8,     9,    10,    48,    50,    51,    59,    60,    63,
      64,    71,    73,    96,    97,    98,    99,   100,   101,   102,
     109,   110,   112,   131,   147,   152,   153,   158,   203,   204,
     206,   228,   229,   246,   248,   253,   258,   259,   261,   270,
     280,   293,   310,   335,   351,   360,   375,   388,   389,   394,
     396,   397,   412,   420,   453,   460,   461,   462,   469,   474,
     633,   700,   703,   706,   707,   708,   710,   711,   712,   713,
     715,   716,   720,   722,   723,   724,   726,   739,   743,   761,
     766,   773,   774,   780,   781,   782,   783,   784,   772,   773,
     805,   783,   805,   452,   165,   390,   458,   469,   776,   462,
     769,     3,   164,   166,   423,   593,   797,   799,   164,   800,
     720,   747,   638,   473,   469,   789,   470,   470,   479,   776,
     165,   207,   575,   685,    26,   127,   643,   643,    53,   643,
     155,   160,   224,   265,   652,   654,   655,   667,   669,   670,
     671,   646,   647,   469,   452,   211,   147,    22,    28,   132,
     272,   321,   325,   352,   416,   493,   496,   497,   321,   147,
      35,    54,   104,   190,   237,   240,   251,   282,   321,   326,
     346,   352,   366,   482,   485,   496,   147,   321,   352,   496,
     147,   321,   352,   496,    26,   127,   421,   462,   470,   720,
     748,   749,   786,   790,   720,   768,     3,    26,    30,    31,
      32,    33,    34,    35,    36,    39,    52,    59,    60,    66,
      72,    74,    84,    91,    96,    97,    98,   100,   101,   102,
     112,   114,   121,   127,   128,   134,   138,   142,   153,   155,
     160,   162,   165,   172,   174,   177,   188,   195,   205,   207,
     218,   219,   224,   228,   229,   253,   258,   265,   268,   269,
     273,   274,   290,   300,   315,   328,   345,   351,   362,   376,
     379,   387,   390,   391,   397,   405,   406,   412,   413,   421,
     428,   429,   431,   432,   462,   779,   791,   816,   817,   818,
     819,   767,   470,   469,   553,   469,   563,   253,   569,   425,
     182,   776,   182,   567,   776,   776,    80,   602,   436,    81,
     124,   285,   384,   147,    57,   327,   473,   582,   471,   788,
     147,   473,   582,   147,   268,   747,   379,   470,   473,     4,
     153,   268,   397,   460,   461,   484,   487,   588,   590,   591,
     594,   782,   783,   589,   469,   509,   513,   484,   594,   807,
     809,   748,     3,    48,    50,    51,    63,    64,   109,   110,
     158,   203,   204,   206,   246,   248,   261,   310,   353,   360,
     388,   389,   420,   697,   699,   701,   703,   705,   707,   708,
     709,   711,   712,   715,   716,   750,   786,   816,    35,   222,
     784,   469,   770,   422,   714,   720,   765,   469,   714,   714,
     469,   160,   469,   469,   469,   702,   702,   296,   633,   469,
     469,   704,   469,   469,    63,    64,   714,   720,   469,   702,
     469,   469,   469,   469,   469,   434,   455,   469,   717,   469,
     717,   469,   469,   720,   720,   720,   633,   720,   747,   770,
     769,   783,   469,   469,   783,     3,     8,    11,    15,    16,
      17,    32,    35,    40,    47,    72,   170,   183,   188,   209,
     210,   223,   253,   256,   270,   273,   357,   453,   456,   457,
     458,   460,   461,   462,   463,   464,   465,   741,   742,   743,
     745,   433,   727,   279,   720,   207,   473,   640,   469,   783,
     769,   640,     3,   112,   227,   484,   716,   783,   808,    95,
     112,   809,   112,   809,   776,   470,   473,   587,   470,   473,
     639,   777,    35,   789,   575,   608,   776,   352,    35,   784,
     635,   635,   648,   649,   720,   635,   157,   250,   661,   213,
     251,   309,   355,   411,    26,   656,   720,   460,   461,   657,
     658,   720,   722,   667,   668,   655,   654,   652,   653,   160,
     670,   263,   672,   652,   667,   747,   222,   776,    66,    74,
      84,   162,   182,   300,   406,   534,   544,   559,   784,    74,
      84,   631,    84,   631,   469,   390,   469,   532,   233,   409,
     532,    84,   473,   390,   776,   699,   484,    53,   486,   484,
     484,   104,   237,   240,    53,   390,   432,   455,   483,   244,
     339,   483,   485,   685,    84,   390,   631,   339,   776,   390,
     339,   748,   748,   749,   470,   473,   646,   647,    13,    14,
     468,   475,   390,   552,   557,   784,   432,   512,   748,   313,
     425,   147,    91,   519,   570,   571,   599,   813,   776,   253,
     482,   572,   253,    35,   469,   553,   553,   182,   547,   603,
     784,   581,   787,   779,   471,   777,   778,   778,   787,   470,
     182,   567,   776,   589,   595,     4,   782,     4,   782,   511,
     518,   791,    49,    93,   118,   136,   140,   161,   164,   178,
     258,   266,   307,   515,   473,   470,   473,   699,    34,   698,
     107,   180,   239,   242,   343,   450,   469,   718,   719,   470,
     473,   702,   788,   629,   747,   767,   469,   428,   762,   763,
     720,   747,   469,   782,   782,   747,     3,   107,   180,   239,
     242,   343,   450,   751,   752,   783,   782,   782,   782,   714,
     714,   720,     8,    15,    16,    17,   456,   457,   458,   460,
     461,   462,   463,   464,   465,   741,   746,   784,   720,   753,
     460,   461,   469,   721,   722,   743,   755,   470,   747,   720,
     747,   756,   388,   388,   782,   782,   720,    52,   165,   219,
     391,   720,   747,   759,   470,   473,   782,   474,   782,   718,
     697,   720,   720,   720,   720,     5,   791,   792,   388,    39,
     376,   771,   787,   720,   720,   469,   633,   760,   127,   153,
     253,   258,   263,   397,   407,   720,   258,   469,   720,   390,
      47,   170,   183,   188,   223,   357,   720,   720,   720,   720,
     720,   720,   720,   720,   720,   720,    26,    33,   362,   740,
     174,   156,   728,   335,   469,   739,   171,   227,   379,   383,
     385,   409,   641,   776,   774,   165,   675,   748,   675,   469,
     783,   470,   776,   797,   499,   776,   720,   470,   469,   413,
     577,   112,   281,   469,   607,   632,    35,   469,   612,   621,
     623,   784,   784,   473,    36,   121,   413,   650,   335,   336,
     460,   461,   658,   660,   722,   355,   213,   269,   473,     4,
     659,   782,   659,   335,   336,   660,   775,   776,   257,   359,
     673,   668,   653,   470,   321,   496,   469,   182,   544,   778,
     213,   253,   213,   413,   469,   537,   697,   778,   784,   182,
     778,   182,   784,    22,   132,   352,   492,   495,   527,   542,
     791,   778,   536,   556,   791,   778,   493,   778,   321,   352,
     482,   496,   484,   787,   778,   484,   787,   778,   484,   321,
     352,   496,   778,   778,   778,   778,   321,   352,   496,   778,
     778,   646,   646,   646,   421,   749,   470,   720,   720,   720,
     768,   305,   508,   470,   473,   266,   165,   390,   503,   470,
     425,   776,   784,   563,   469,   147,   147,   146,   632,   223,
     534,   544,   548,   551,   560,   562,   784,   432,   434,   539,
     432,   604,   253,   268,   582,   779,   582,   268,   582,   253,
      35,   470,   473,   462,   469,   484,   510,   594,    35,   507,
     783,   507,   253,   258,   307,   507,   507,   807,    34,   698,
     467,   467,   390,   390,   390,   469,   390,   782,   697,   702,
     470,   747,   720,   134,   763,   764,    35,   470,   720,   470,
     470,   470,   470,   165,   470,   470,   470,   473,   470,   471,
     290,   754,   470,   721,   721,   720,    11,    15,    16,    17,
     188,   209,   270,   456,   457,   458,   460,   461,   462,   463,
     464,   465,   743,   721,   470,   470,   160,   165,   757,   758,
     470,   452,   452,   470,   470,    35,   759,   747,   759,   759,
     165,   470,   770,   720,   470,   470,   470,   452,   721,   721,
     140,   747,   165,   127,   153,   258,   263,   397,   407,   469,
     140,   746,   720,   376,   771,   720,   760,   720,   390,   469,
     633,   469,   469,   278,   732,   383,   385,   383,   385,   776,
     379,   642,   642,   642,   218,   336,   469,   633,   676,   677,
     678,   685,   688,   723,   725,   726,   784,   429,   693,   646,
     693,   782,   718,   789,   629,   676,   429,   576,   419,   378,
     412,   616,   611,   620,   784,   268,   613,   784,   617,   623,
     473,   675,   458,   770,   649,   270,   741,   744,   454,   651,
       4,   782,   660,   269,   411,   657,   473,   232,   390,   720,
     253,   559,   469,   147,   469,   537,   191,   557,   520,   272,
     530,   520,    22,   132,   325,   326,   352,   489,   490,   491,
     497,   498,   147,   582,   147,   582,   527,   542,   527,   470,
     473,   523,   783,   470,   473,   458,   471,   390,   339,    84,
     390,   631,   339,   390,   390,   390,   339,   470,   470,   470,
     749,   468,   369,   370,   517,   783,   552,   508,    35,   776,
     553,   569,   379,   557,   776,   567,   776,   778,   432,   566,
     776,   470,   473,   266,   532,   266,   268,   531,   532,    35,
     147,   776,   787,   147,   511,   505,   516,   594,   783,   783,
     258,   557,   462,   557,   783,   783,   467,   782,   468,   782,
     180,   239,   719,   239,   719,   719,   782,   242,   470,   470,
     387,   720,   138,   697,   470,   720,   720,   746,   720,   757,
     697,   721,   721,   721,   721,   127,   253,   263,   721,   721,
     721,   721,   721,   721,   721,   721,   721,   721,   720,   720,
     758,   757,   717,   717,   697,   470,   470,   470,   747,   470,
     474,   783,   720,    32,    32,   720,   470,   720,   165,   469,
     750,   720,   470,   140,   721,   721,   140,   140,   720,   720,
     647,   429,   469,   733,   784,   642,   642,   642,   642,   776,
     776,   776,   633,   688,   165,   633,   677,   678,    35,   679,
     680,   784,   473,    92,   166,   197,   212,   221,   247,   331,
     682,   680,    35,   679,   681,   784,   455,   692,   769,   720,
     174,   662,   470,   662,   470,   470,   720,   328,   615,   418,
     470,   473,   770,    82,   615,   470,   473,   612,   576,   720,
     469,   651,   157,   217,   269,   776,   778,   470,   147,   557,
     544,   557,   520,   547,   470,   114,   195,   251,   253,   543,
     469,   554,   169,   112,   181,   253,   532,   483,   105,   112,
     169,   253,   368,   371,   485,   532,   352,   491,   400,   778,
     784,   495,   556,   252,   270,   353,   460,   461,   484,   521,
     558,   697,   744,   783,   786,   819,   791,   778,   778,   778,
     778,   778,   778,   778,   778,   778,   778,   646,   483,   517,
     720,   469,   604,   182,   776,   470,   572,    35,   469,   585,
     105,   251,   541,   539,   548,    78,   632,   547,   413,   601,
     582,   567,   470,   473,   557,   782,   468,   468,   470,   720,
     470,   470,   758,   165,   127,   263,   469,   470,   718,   720,
     720,   720,   750,   470,   720,    32,    32,   720,   720,   140,
     470,   470,   720,   734,   784,   776,   776,   776,   776,   680,
     681,   469,   470,     5,   784,   785,   469,   677,   212,   277,
     683,   677,   683,   212,   682,   683,   212,   381,   686,   469,
     784,   469,   275,    53,   177,   666,   783,   666,   783,   773,
     632,   281,   632,   611,   268,   469,   609,   458,   623,   615,
     746,   520,   544,   470,   470,   432,   550,   115,   184,   193,
     114,   415,   527,   545,    66,    72,    84,   112,   114,   169,
     195,   253,   258,   300,   315,   406,   525,   526,   538,    29,
      53,   564,   182,   258,   484,   720,   564,   258,   460,   461,
     487,   784,   697,   582,   582,   786,   788,   458,   390,   390,
     470,   509,   413,   504,   506,   557,    35,   253,   469,   604,
     146,   632,   551,   566,   105,   144,   189,   531,   117,   132,
     299,   432,   814,   268,   600,   784,   469,    35,   516,   468,
     721,   165,   469,   750,   470,   720,   720,   720,   470,   287,
     735,   689,   690,   725,   679,   469,   777,   677,   268,   413,
     684,   677,   212,   677,   780,   694,   695,   784,   469,   694,
     784,   469,   663,   664,   665,   720,   720,   431,   729,   729,
     616,    84,   469,   614,   622,   725,   784,   128,   720,   470,
     315,   550,   469,   540,   520,   470,   473,   469,   787,   778,
     721,   564,   115,   184,   114,   258,   213,   776,   550,   112,
      35,   147,    72,   696,   788,   464,   521,   778,   778,   483,
     119,   470,   632,   147,    35,   778,   566,   470,    26,    77,
      85,   113,   181,   192,   368,   371,   535,   535,   336,   336,
      58,    66,   227,   776,   622,   721,   750,   470,    53,   646,
     470,   473,    35,   691,   777,   470,   720,   469,   677,   684,
     469,   470,   473,   697,   694,   470,   470,   473,   730,   731,
     784,   418,   778,   720,   470,   473,    72,   618,   618,   254,
     411,   776,   520,   546,   549,   791,   527,   720,   253,   526,
      35,   550,   553,   181,   787,   413,   494,   464,   400,   509,
     783,   604,   814,   776,   632,   585,   539,    66,   271,    66,
     601,   470,   470,   747,   308,   336,   736,   692,   689,   469,
     470,   777,   747,   695,   696,   470,   664,   473,    35,   632,
     470,   693,   614,   787,   619,   787,   619,   352,   553,   470,
     473,   458,   470,   181,   235,   561,   469,   522,   720,   400,
      35,   469,   814,   566,   531,   271,   271,   469,   604,    47,
      95,   402,   720,   737,   738,   737,   470,   694,   470,   470,
     731,   733,   618,   650,   650,   621,   561,   549,   521,   251,
     533,   522,   166,   286,   358,   268,   528,   529,   555,   482,
     632,   622,   693,   738,   335,   159,   295,   159,   295,   470,
     322,   687,   619,   651,   651,   693,   529,   193,   117,   411,
     268,   555,   268,   528,   470,   814,   470,    32,   469,   650,
     520,    57,   251,   327,   352,   524,   524,   604,   738,   720,
     651,    21,   112,   258,   693,   470
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int16 yyr1[] =
{
       0,   476,   477,   478,   478,   479,   479,   479,   479,   479,
     479,   479,   479,   479,   479,   479,   479,   479,   479,   479,
     479,   479,   479,   479,   479,   479,   479,   479,   479,   479,
     479,   479,   479,   479,   479,   479,   479,   479,   479,   480,
     480,   480,   480,   480,   480,   481,   481,   482,   482,   483,
     483,   483,   484,   484,   484,   484,   485,   485,   485,   485,
     485,   485,   485,   485,   485,   485,   485,   485,   485,   485,
     486,   486,   487,   487,   487,   488,   488,   488,   488,   488,
     488,   488,   488,   489,   489,   490,   490,   491,   491,   491,
     491,   492,   492,   493,   493,   493,   493,   493,   493,   493,
     493,   493,   493,   493,   493,   493,   493,   493,   493,   493,
     493,   493,   493,   493,   493,   493,   493,   493,   493,   493,
     493,   493,   494,   494,   495,   495,   495,   495,   496,   496,
     497,   498,   498,   499,   499,   500,   501,   502,   502,   503,
     503,   504,   504,   505,   505,   506,   506,   507,   507,   508,
     508,   509,   509,   510,   510,   510,   510,   510,   511,   512,
     512,   513,   513,   514,   514,   515,   515,   515,   515,   515,
     515,   515,   515,   515,   515,   515,   515,   515,   515,   516,
     517,   517,   517,   518,   518,   519,   519,   520,   520,   521,
     521,   521,   521,   521,   521,   522,   522,   523,   524,   524,
     524,   524,   524,   525,   525,   525,   525,   526,   526,   526,
     526,   526,   526,   526,   526,   527,   528,   529,   529,   529,
     529,   529,   530,   530,   531,   531,   531,   531,   532,   533,
     533,   534,   534,   535,   535,   535,   535,   535,   535,   535,
     535,   536,   536,   537,   538,   538,   538,   538,   539,   539,
     539,   539,   540,   541,   541,   541,   542,   543,   543,   543,
     543,   543,   543,   544,   545,   545,   546,   546,   547,   548,
     548,   548,   549,   549,   550,   550,   551,   551,   552,   553,
     553,   554,   554,   555,   556,   556,   556,   556,   557,   557,
     558,   558,   558,   559,   559,   559,   559,   559,   559,   560,
     560,   561,   561,   561,   561,   562,   563,   563,   563,   563,
     563,   563,   563,   563,   564,   564,   565,   565,   566,   566,
     566,   567,   568,   568,   569,   569,   570,   570,   570,   570,
     571,   571,   572,   572,   573,   573,   573,   573,   574,   575,
     575,   575,   576,   576,   577,   577,   578,   578,   578,   578,
     578,   578,   579,   579,   579,   579,   579,   579,   579,   579,
     579,   579,   579,   579,   579,   580,   580,   580,   580,   580,
     580,   580,   581,   581,   582,   582,   582,   583,   583,   583,
     584,   584,   584,   585,   585,   586,   586,   586,   586,   587,
     587,   588,   588,   588,   589,   589,   589,   589,   589,   590,
     590,   590,   590,   591,   591,   592,   592,   593,   593,   594,
     594,   594,   594,   595,   596,   596,   597,   598,   599,   599,
     600,   601,   601,   602,   602,   603,   603,   604,   604,   605,
     605,   606,   607,   607,   607,   607,   607,   608,   608,   609,
     609,   609,   610,   610,   611,   612,   612,   613,   613,   613,
     614,   614,   614,   615,   615,   616,   616,   617,   617,   618,
     618,   619,   619,   620,   620,   621,   621,   622,   622,   623,
     624,   625,   626,   626,   626,   627,   628,   628,   629,   629,
     629,   629,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   631,   631,   632,   632,   633,
     633,   634,   634,   634,   634,   634,   634,   634,   634,   635,
     635,   636,   636,   636,   636,   636,   636,   636,   637,   637,
     637,   638,   638,   639,   640,   640,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   642,   642,   643,   643,   643,
     644,   644,   645,   645,   646,   646,   647,   648,   648,   649,
     649,   650,   650,   650,   651,   651,   651,   652,   652,   652,
     652,   653,   653,   654,   654,   654,   654,   655,   655,   656,
     656,   657,   658,   658,   658,   659,   659,   660,   660,   661,
     661,   662,   662,   663,   663,   664,   664,   665,   666,   666,
     667,   667,   668,   668,   669,   669,   670,   671,   671,   671,
     671,   672,   672,   673,   673,   673,   674,   674,   675,   675,
     676,   676,   677,   677,   677,   677,   677,   677,   677,   677,
     678,   678,   678,   678,   678,   678,   679,   679,   679,   679,
     680,   680,   681,   681,   681,   681,   681,   682,   682,   682,
     682,   683,   683,   684,   684,   685,   685,   685,   685,   686,
     687,   687,   688,   688,   689,   690,   690,   691,   691,   692,
     692,   693,   693,   694,   694,   695,   696,   696,   697,   697,
     697,   697,   697,   697,   698,   698,   698,   699,   699,   699,
     699,   699,   699,   699,   700,   700,   700,   700,   701,   701,
     702,   702,   703,   703,   703,   703,   703,   703,   703,   703,
     703,   703,   703,   704,   704,   705,   705,   706,   706,   707,
     708,   709,   709,   710,   710,   711,   712,   713,   713,   713,
     713,   713,   713,   714,   714,   715,   715,   715,   715,   716,
     717,   717,   717,   718,   718,   718,   718,   718,   718,   718,
     718,   718,   718,   718,   718,   718,   718,   719,   719,   720,
     720,   720,   720,   720,   720,   720,   720,   720,   720,   720,
     720,   720,   720,   720,   720,   720,   720,   720,   720,   720,
     720,   720,   720,   720,   720,   720,   720,   720,   720,   720,
     720,   720,   720,   720,   720,   720,   720,   720,   720,   720,
     720,   720,   720,   720,   720,   720,   720,   720,   720,   720,
     720,   720,   720,   720,   720,   720,   720,   720,   720,   720,
     720,   720,   721,   721,   721,   721,   721,   721,   721,   721,
     721,   721,   721,   721,   721,   721,   721,   721,   721,   721,
     721,   721,   721,   721,   721,   722,   722,   722,   722,   722,
     722,   722,   722,   722,   722,   723,   723,   723,   723,   723,
     723,   723,   724,   724,   725,   725,   726,   726,   726,   726,
     726,   726,   726,   726,   726,   726,   726,   726,   726,   726,
     726,   726,   726,   726,   726,   726,   726,   726,   726,   726,
     726,   726,   726,   726,   727,   727,   728,   728,   729,   729,
     730,   730,   731,   732,   732,   732,   733,   734,   734,   735,
     735,   736,   736,   736,   737,   737,   738,   738,   738,   738,
     738,   739,   739,   739,   740,   740,   740,   741,   741,   742,
     742,   742,   742,   742,   742,   742,   742,   742,   742,   742,
     742,   743,   743,   744,   744,   745,   745,   745,   745,   745,
     745,   745,   745,   746,   746,   747,   747,   748,   748,   749,
     749,   749,   750,   750,   751,   751,   752,   752,   752,   752,
     752,   752,   752,   752,   753,   753,   754,   755,   755,   756,
     756,   756,   756,   756,   756,   757,   758,   759,   759,   759,
     760,   760,   761,   762,   762,   763,   764,   764,   765,   765,
     766,   766,   767,   767,   767,   767,   768,   768,   769,   769,
     770,   770,   771,   771,   772,   772,   773,   773,   774,   774,
     774,   774,   775,   775,   776,   776,   777,   777,   778,   779,
     780,   780,   781,   781,   781,   781,   781,   781,   781,   781,
     781,   781,   781,   781,   781,   781,   782,   783,   784,   784,
     784,   785,   785,   786,   786,   786,   787,   787,   788,   788,
     789,   789,   790,   791,   791,   791,   791,   791,   792,   792,
     793,   793,   793,   793,   793,   793,   794,   794,   794,   795,
     796,   796,   796,   796,   796,   797,   797,   797,   797,   797,
     798,   798,   799,   799,   800,   800,   801,   802,   802,   803,
     803,   803,   804,   804,   804,   805,   805,   805,   805,   806,
     806,   806,   806,   807,   807,   808,   808,   808,   808,   808,
     808,   808,   809,   809,   810,   810,   810,   810,   811,   811,
     812,   812,   813,   813,   813,   813,   814,   814,   814,   814,
     815,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   818,   818,   818,   818,   818,
     818,   818,   818,   818,   818,   818,   818,   818,   818,   818,
     818,   818,   818,   818,   818,   818,   818,   818,   818,   819,
     819,   819,   819,   819,   819,   819,   819,   819,   819,   819,
     819,   819,   819,   819,   819,   819,   819,   819,   819,   819,
     819,   819,   819,   819,   819,   819,   819,   819,   819,   819,
     819,   819,   819,   819,   819,   819,   819,   819,   819,   819,
     819,   819,   819,   819,   819,   819,   819,   819,   819,   819,
     819,   819,   819,   819,   819,   819,   819,   819,   819,   819,
     819,   819,   819,   819,   819,   819,   819,   819,   819,   819,
     819,   819,   819,   819,   819,   819
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     6,
       8,     6,     8,     6,     8,     4,     6,     1,     2,     1,
       1,     0,     1,     2,     2,     1,     2,     2,     1,     2,
       3,     2,     2,     2,     2,     3,     3,     3,     1,     3,
       1,     0,     1,     2,     2,     4,     6,     4,     6,     4,
       6,     4,     6,     1,     2,     3,     2,     1,     3,     2,
       3,     1,     3,     2,     5,     3,     6,     4,     6,     6,
       6,     5,     5,     6,     9,     4,     5,     7,     6,     4,
       8,     4,     2,     4,     3,     6,     4,     2,     2,     2,
       2,     1,     2,     0,     1,     2,     2,     2,     1,     3,
       4,     2,     0,     2,     4,     2,     1,    11,     9,     1,
       1,     3,     0,     1,     3,     1,     0,     1,     0,     1,
       0,     1,     3,     1,     1,     1,     3,     0,     2,     2,
       0,     2,     0,     1,     0,     1,     1,     1,     3,     3,
       1,     1,     3,     3,     3,     3,     4,     3,     2,     1,
       1,     1,     1,     1,     3,     9,    12,     0,     2,     1,
       1,     1,     1,     1,     1,     3,     0,     1,     2,     1,
       1,     2,     2,     3,     1,     1,     2,     2,     1,     2,
       3,     5,     2,     5,     5,     2,     3,     1,     1,     2,
       2,     0,     4,     0,     3,     4,     4,     0,     3,     2,
       0,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     1,     2,     2,     2,     2,     2,
       2,     0,     3,     3,     3,     0,     1,     2,     1,     2,
       2,     2,     2,     4,     1,     3,     1,     3,     1,     1,
       1,     1,     3,     1,     2,     0,     1,     0,     1,     3,
       0,     2,     0,     3,     3,     1,     5,     3,     1,     3,
       1,     4,     5,     5,     6,     3,     7,     4,    11,     1,
       3,     2,     2,     2,     0,     3,     1,     1,     2,     2,
       2,     2,     1,     0,     1,     2,     7,    10,     2,     3,
       0,     4,     4,     7,     2,     0,     1,     1,     1,     1,
       5,     8,     1,     0,     2,     3,     2,     3,     7,     1,
       2,     3,     2,     0,     2,     0,     6,     4,     6,     4,
       6,     8,     1,     1,     1,     2,     1,     2,     1,     1,
       1,     3,     3,     3,     3,     2,     2,     1,     3,     1,
       1,     1,     1,     3,     1,     1,     0,     1,     1,     1,
       3,     9,    12,     3,     0,     2,     4,     3,     5,     1,
       0,     1,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     4,     3,    13,    16,
       1,     2,     0,     1,     0,     1,     0,     2,     0,     1,
       0,     7,     1,     4,     4,     7,     2,     1,     3,     4,
       3,     0,     1,     0,     2,     3,     5,     8,     5,     0,
       5,     5,     7,     2,     0,     1,     1,     1,     3,     2,
       0,     1,     0,     1,     3,     1,     3,     1,     3,     2,
       2,     1,     2,     4,     5,     5,     3,     0,     1,     1,
       1,     1,     6,     6,     8,     6,     8,     6,     8,     6,
       8,     8,    10,     8,    10,     1,     0,     1,     1,     3,
       3,     1,     2,     4,     4,     2,     3,     5,     5,     1,
       1,     9,     9,     1,     2,     4,     4,     4,     2,     2,
       3,     1,     3,     6,     2,     0,     3,     3,     4,     4,
       4,     4,     3,     2,     1,     1,     0,     1,     1,     0,
       1,     5,     1,     0,     1,     0,     3,     1,     3,     4,
       3,     1,     1,     0,     2,     2,     0,     2,     2,     1,
       1,     1,     0,     2,     4,     5,     4,     2,     3,     1,
       1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     3,     0,     1,     3,     1,     1,     2,     2,     0,
       1,     3,     1,     0,     1,     2,     3,     2,     4,     2,
       3,     2,     0,     1,     2,     0,     4,     5,     2,     0,
       1,     3,     2,     3,     2,     3,     2,     3,     1,     4,
       3,     4,     5,     4,     5,     4,     5,     2,     4,     1,
       1,     0,     1,     4,     5,     4,     0,     2,     2,     2,
       1,     1,     0,     4,     2,     1,     2,     2,     4,     6,
       4,     0,     2,     6,     2,     1,     3,     4,     0,     2,
       0,     2,     0,     1,     3,     3,     2,     0,     2,     3,
       5,     6,     2,     3,     3,     4,     0,     1,     1,     1,
       1,     1,     2,     4,     1,     1,     1,     1,     2,     3,
       3,     0,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     2,     1,     3,     0,     1,     1,     1,     1,     5,
       2,     1,     1,     1,     1,     4,     1,     2,     2,     1,
       3,     3,     2,     1,     0,     5,     2,     5,     2,     1,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     3,
       3,     3,     3,     3,     3,     3,     0,     1,     4,     1,
       3,     3,     5,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       3,     3,     2,     2,     3,     3,     5,     4,     6,     3,
       5,     4,     6,     4,     6,     5,     7,     3,     2,     4,
       3,     2,     3,     3,     4,     3,     4,     3,     4,     5,
       6,     6,     7,     6,     7,     6,     7,     3,     4,     4,
       6,     1,     1,     3,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     5,     6,     6,     7,     1,     1,     2,     2,     4,
       1,     1,     1,     2,     2,     3,     5,     6,     8,     6,
       6,     4,     4,     1,     1,     1,     5,     1,     1,     4,
       1,     4,     1,     4,     1,     4,     1,     1,     1,     1,
       1,     1,     6,     4,     4,     4,     4,     6,     5,     5,
       5,     4,     6,     4,     5,     0,     5,     0,     2,     0,
       1,     3,     3,     2,     2,     0,     6,     1,     0,     3,
       0,     2,     2,     0,     1,     4,     2,     2,     2,     2,
       2,     4,     3,     5,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     1,     4,     1,     4,     1,     2,     1,
       2,     1,     2,     1,     3,     1,     3,     1,     3,     1,
       3,     3,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     3,     2,     3,     0,     3,
       3,     2,     2,     1,     0,     2,     2,     3,     2,     1,
       1,     3,     5,     1,     2,     4,     2,     0,     1,     0,
       1,     2,     2,     2,     3,     5,     1,     0,     1,     2,
       0,     2,     1,     0,     1,     0,     1,     3,     3,     2,
       1,     1,     1,     3,     1,     2,     1,     3,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     2,     6,     2,
       3,     5,     6,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     2,     2,     2,     2,     1,     1,     0,     8,
       4,     5,     5,     4,     6,     1,     1,     1,     1,     1,
       1,     0,     1,     3,     1,     0,     2,     1,     1,     1,
       2,     3,     2,     3,     3,     1,     3,     3,     2,     3,
       3,     3,     3,     1,     1,     1,     1,     3,     5,     1,
       1,     1,     1,     3,     2,     3,     4,     2,     1,     1,
       1,     3,     9,    11,    12,    14,     3,     4,     4,     0,
       8,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YY_LOCATION_PRINT
#  if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#   define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

#  else
#   define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#  endif
# endif /* !defined YY_LOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yykind < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yykind], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    yy_state_fast_t yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize;

    /* The state stack.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss;
    yy_state_t *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yynerrs = 0;
  yystate = 0;
  yyerrstatus = 0;

  yystacksize = YYINITDEPTH;
  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;


  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2:
#line 454 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 13382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3:
#line 470 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 13398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4:
#line 482 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 13409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 38:
#line 524 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 13415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 39:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 40:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 41:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 42:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 13523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 13529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 13535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 13541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 13547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 13553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 13559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 13568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 13574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 13582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 13590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 13598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 13606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 13614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 13622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 13630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 13638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 13646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 13654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 13663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 13671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 13679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 13687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 13693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 13699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 13705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 13711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 13717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 13827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 13833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 13839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 13845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 13853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 13861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 13876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 13884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 13892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 13900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 13960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 13971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 13982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 13994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 14006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 14018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 14030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 14050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 14062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 14130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 14142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 14153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 14171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 14182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 14218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 14228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 14239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 14250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 14261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 14267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 14273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 14281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 14290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 14299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 14307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 14313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 14319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 14325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 14331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 14337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 14351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 14365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135:
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 14375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					(yyval.node) = (PGNode *)n;
				}
#line 14384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137:
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 14416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138:
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 14439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139:
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 14445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140:
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 14451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141:
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 14459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142:
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 14465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143:
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 14473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144:
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 14481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145:
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 14487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146:
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 14493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147:
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 14499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148:
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 14505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149:
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 14511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150:
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 14517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151:
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 14523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152:
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 14529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153:
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 14535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154:
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 14541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155:
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 14547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156:
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 14553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157:
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 14559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158:
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 14567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159:
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 14575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160:
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 14581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161:
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 14587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162:
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 14593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163:
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 14601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164:
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 14607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165:
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 14615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166:
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 14623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167:
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 14631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168:
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 14639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169:
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 14647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170:
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 14655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171:
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 14663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172:
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 14671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173:
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 14679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174:
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 14687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175:
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 14695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176:
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 14703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177:
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 14711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178:
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 14719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179:
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 14725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180:
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 14731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181:
#line 210 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 14737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182:
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 14743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183:
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 14751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184:
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 14759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185:
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186:
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187:
#line 41 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 14799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188:
#line 43 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 14827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189:
#line 69 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 14833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190:
#line 70 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 14839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191:
#line 71 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 14845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192:
#line 72 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 14851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193:
#line 73 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 14857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194:
#line 74 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 14863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195:
#line 78 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 14869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196:
#line 79 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 14875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197:
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 14881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198:
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 14887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199:
#line 90 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 14893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200:
#line 91 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 14899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201:
#line 92 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 14905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202:
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 14911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203:
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 14922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204:
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 14928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205:
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 14934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206:
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 14951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207:
#line 125 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 14962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208:
#line 132 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 14973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209:
#line 139 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 14987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210:
#line 149 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 15001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211:
#line 159 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212:
#line 171 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 15030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213:
#line 180 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 15043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214:
#line 189 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215:
#line 208 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 15070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216:
#line 214 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 15076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217:
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 15082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218:
#line 222 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 15088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219:
#line 224 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 15094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220:
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 15100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221:
#line 228 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 15106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222:
#line 233 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 15112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223:
#line 234 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                        { (yyval.list) = NIL; }
#line 15118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224:
#line 238 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 15124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225:
#line 239 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 15130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226:
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 15136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227:
#line 241 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 15142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228:
#line 246 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 15148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229:
#line 250 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 15154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230:
#line 251 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 15160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231:
#line 257 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 15171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232:
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233:
#line 268 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 15183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234:
#line 269 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 15189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235:
#line 270 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 15195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236:
#line 271 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 15201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237:
#line 272 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 15207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238:
#line 273 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 15213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239:
#line 274 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 15219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240:
#line 275 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 15225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241:
#line 281 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 15231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242:
#line 282 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 15237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243:
#line 286 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244:
#line 292 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 15254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245:
#line 299 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 15265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246:
#line 306 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 15276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247:
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 15287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248:
#line 324 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249:
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 15299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250:
#line 326 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 15305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251:
#line 327 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 15311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252:
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 15317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253:
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 15323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254:
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 15329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255:
#line 338 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 15335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256:
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257:
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 15347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258:
#line 349 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 15353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259:
#line 350 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 15359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260:
#line 351 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 15365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261:
#line 352 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 15371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262:
#line 353 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 15377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263:
#line 359 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					n->fdwoptions = (yyvsp[-1].list);
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
				}
#line 15400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264:
#line 382 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 15408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265:
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 15416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266:
#line 392 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 15422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267:
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 15428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268:
#line 397 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 15434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269:
#line 401 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270:
#line 402 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271:
#line 403 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272:
#line 408 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 15460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273:
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 15468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274:
#line 419 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 15474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275:
#line 420 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 15480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276:
#line 425 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277:
#line 426 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 15492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278:
#line 431 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 15500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279:
#line 438 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 15506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280:
#line 439 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 15512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281:
#line 444 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 15518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282:
#line 445 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 15524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283:
#line 449 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 15530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284:
#line 455 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 15538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285:
#line 459 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 15546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286:
#line 463 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 15555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287:
#line 468 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 15563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288:
#line 475 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289:
#line 476 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 15575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290:
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 15581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291:
#line 482 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 15591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292:
#line 488 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 15602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293:
#line 499 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 15619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294:
#line 513 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 15636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295:
#line 526 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 15654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296:
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 15671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297:
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 15689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298:
#line 569 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 15711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299:
#line 591 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 15719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300:
#line 595 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 15727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301:
#line 602 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 15735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302:
#line 606 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 15747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303:
#line 614 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 15755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304:
#line 618 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 15763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305:
#line 626 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 15774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306:
#line 635 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 15780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307:
#line 636 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 15786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308:
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 15792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309:
#line 638 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 15798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310:
#line 640 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 15809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311:
#line 647 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 15820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312:
#line 653 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 15826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313:
#line 654 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 15832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314:
#line 659 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 15838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315:
#line 660 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 15844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 15861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 15878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318:
#line 41 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 15884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319:
#line 42 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 15890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320:
#line 43 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 15896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321:
#line 49 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 15910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322:
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[-1].str);
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323:
#line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[-1].str);
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324:
#line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 15951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325:
#line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 15957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332:
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333:
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 15997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 16007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 16017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 16027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 16037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338:
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 16051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339:
#line 22 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 16059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340:
#line 26 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 16070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341:
#line 33 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 16081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342:
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343:
#line 44 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 16093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344:
#line 50 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345:
#line 51 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 16105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346:
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347:
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348:
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349:
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350:
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 16175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351:
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 16189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352:
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 16195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353:
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 16201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354:
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 16207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355:
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 16213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356:
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 16219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357:
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 16225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358:
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 16231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359:
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 16237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360:
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 16243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361:
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 16249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362:
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 16255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363:
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 16261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364:
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 16267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365:
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 16273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366:
#line 91 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 16279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367:
#line 92 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 16285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368:
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 16291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369:
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 16297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370:
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 16303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371:
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 16309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372:
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 16315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373:
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 16321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374:
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 16327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375:
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 16333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376:
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 16339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377:
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 16345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378:
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 16351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379:
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 16357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380:
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 16368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381:
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 16388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382:
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 16408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383:
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 16414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384:
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 16420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385:
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 16431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386:
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 16445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387:
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 16456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388:
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 16467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389:
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 16473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390:
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 16479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391:
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 16485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392:
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 16491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393:
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 16497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399:
#line 65 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 16503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400:
#line 66 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 16509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401:
#line 67 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 16515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402:
#line 68 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 16521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403:
#line 73 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 16527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404:
#line 74 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 16533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405:
#line 80 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 16541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406:
#line 84 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 16549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407:
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 16555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408:
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 16561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409:
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 16567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410:
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 16573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411:
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 16579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412:
#line 105 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 16585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413:
#line 111 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 16593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414:
#line 118 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 16599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415:
#line 119 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 16605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416:
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 16619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417:
#line 21 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 16629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418:
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419:
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420:
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 16689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421:
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 16695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422:
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 16701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423:
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 16707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424:
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 16713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425:
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 16719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426:
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 16725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427:
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428:
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 16737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429:
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 16743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430:
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 16749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431:
#line 10 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 16761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432:
#line 22 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 16771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433:
#line 28 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 16782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434:
#line 35 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 16792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435:
#line 41 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 16803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436:
#line 48 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 16813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437:
#line 58 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 16821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438:
#line 62 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 16830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439:
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 16842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440:
#line 80 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 16854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441:
#line 88 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 16862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442:
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 16868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443:
#line 96 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 16874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444:
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 16886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445:
#line 114 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 16895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446:
#line 119 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 16920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447:
#line 144 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 16933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448:
#line 154 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 16946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449:
#line 163 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 16954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450:
#line 170 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 16969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451:
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 16984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452:
#line 192 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 16999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453:
#line 206 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454:
#line 207 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 17011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455:
#line 213 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 17017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456:
#line 214 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 17023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457:
#line 219 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 17029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458:
#line 220 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 17035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459:
#line 226 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460:
#line 227 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 17047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461:
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462:
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 17059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463:
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 17065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464:
#line 240 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 17071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465:
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466:
#line 246 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 17083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467:
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 17089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468:
#line 251 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 17095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469:
#line 257 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 17107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470:
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 17117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471:
#line 16 "third_party/libpg_query/grammar/statements/load.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 17123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 17134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 17146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 17158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 17170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 17176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 17182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482:
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483:
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484:
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485:
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486:
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487:
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488:
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489:
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490:
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491:
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492:
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493:
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494:
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495:
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 17371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496:
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 17377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499:
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 17383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500:
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 17389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501:
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502:
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 17406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503:
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 17418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504:
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 17430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505:
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 17442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506:
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 17454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507:
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 17466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508:
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 17478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509:
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510:
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511:
#line 158 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-6].list);
					n->intoClause = (yyvsp[-5].into);
					n->fromClause = (yyvsp[-4].list);
					n->whereClause = (yyvsp[-3].node);
					n->groupClause = (yyvsp[-2].list);
					n->havingClause = (yyvsp[-1].node);
					n->windowClause = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 17506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512:
#line 172 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-7].list);
					n->targetList = (yyvsp[-6].list);
					n->intoClause = (yyvsp[-5].into);
					n->fromClause = (yyvsp[-4].list);
					n->whereClause = (yyvsp[-3].node);
					n->groupClause = (yyvsp[-2].list);
					n->havingClause = (yyvsp[-1].node);
					n->windowClause = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 17523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513:
#line 184 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514:
#line 186 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 17552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515:
#line 205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 17560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516:
#line 209 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 17568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517:
#line 213 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 17576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518:
#line 230 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 17587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519:
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 17598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520:
#line 244 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 17609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521:
#line 253 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 17615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522:
#line 254 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 17621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523:
#line 258 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 17634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524:
#line 270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 17648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525:
#line 280 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 17654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526:
#line 289 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 17663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527:
#line 294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 17672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528:
#line 299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 17681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529:
#line 304 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 17690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530:
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 17702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531:
#line 317 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 17714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532:
#line 325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 17723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533:
#line 330 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 17732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534:
#line 335 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 17741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535:
#line 341 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 17747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536:
#line 342 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 17753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537:
#line 346 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 17759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538:
#line 347 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 17765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539:
#line 348 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 17771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540:
#line 355 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 17777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541:
#line 356 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 17783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542:
#line 360 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 17789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543:
#line 361 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544:
#line 365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 17801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545:
#line 366 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546:
#line 370 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547:
#line 374 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 17819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548:
#line 375 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 17825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549:
#line 379 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 17838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550:
#line 388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 17851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551:
#line 398 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 17857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552:
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 17863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553:
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 17869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554:
#line 403 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 17875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555:
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 17881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556:
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 17887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557:
#line 409 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 17893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558:
#line 410 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 17899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559:
#line 411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 17905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560:
#line 412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 17911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561:
#line 416 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562:
#line 417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 17923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563:
#line 422 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 17929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564:
#line 424 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 17942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565:
#line 440 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 17948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566:
#line 442 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 17954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567:
#line 447 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 17960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568:
#line 450 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 17966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569:
#line 454 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570:
#line 456 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 17981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571:
#line 463 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572:
#line 483 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573:
#line 485 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574:
#line 487 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 18005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575:
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 18011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576:
#line 492 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 18017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577:
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 18023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578:
#line 497 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 18029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579:
#line 500 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 18035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580:
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 18041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581:
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582:
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583:
#line 531 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584:
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 18065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585:
#line 536 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586:
#line 537 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587:
#line 542 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 18085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588:
#line 554 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589:
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 18097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590:
#line 559 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591:
#line 560 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592:
#line 564 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593:
#line 565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 18121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594:
#line 569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595:
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 18133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596:
#line 575 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 18145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597:
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 18151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598:
#line 586 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 18157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599:
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 18163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600:
#line 588 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 18169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601:
#line 592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602:
#line 593 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 18181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603:
#line 598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 18187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604:
#line 599 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 18193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605:
#line 600 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 18199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606:
#line 610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 18209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607:
#line 616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 18219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608:
#line 633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609:
#line 634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610:
#line 638 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611:
#line 639 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612:
#line 646 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-1].range)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-1].range);
				}
#line 18252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613:
#line 651 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeTableSample *n = (PGRangeTableSample *) (yyvsp[0].node);
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					/* relation_expr goes inside the PGRangeTableSample node */
					n->relation = (PGNode *) (yyvsp[-2].range);
					(yyval.node) = (PGNode *) n;
				}
#line 18264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614:
#line 659 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 18275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615:
#line 666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 18287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616:
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					/*
					 * The SQL spec does not permit a subselect
					 * (<derived_table>) without an alias clause,
					 * so we don't either.  This avoids the problem
					 * of needing to invent a unique refname for it.
					 * That could be surmounted if there's sufficient
					 * popular demand, but for now let's just implement
					 * the spec and see if anyone complains.
					 * However, it does seem like a good idea to emit
					 * an error message that's better than "syntax error".
					 */
					if ((yyvsp[0].alias) == NULL)
					{
						if (IsA((yyvsp[-1].node), PGSelectStmt) &&
							((PGSelectStmt *) (yyvsp[-1].node))->valuesLists)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("VALUES in FROM must have an alias"),
									 errhint("For example, FROM (VALUES ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
						else
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("subquery in FROM must have an alias"),
									 errhint("For example, FROM (SELECT ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
					}
					(yyval.node) = (PGNode *) n;
				}
#line 18326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617:
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					/* same comment as above */
					if ((yyvsp[0].alias) == NULL)
					{
						if (IsA((yyvsp[-1].node), PGSelectStmt) &&
							((PGSelectStmt *) (yyvsp[-1].node))->valuesLists)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("VALUES in FROM must have an alias"),
									 errhint("For example, FROM (VALUES ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
						else
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("subquery in FROM must have an alias"),
									 errhint("For example, FROM (SELECT ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
					}
					(yyval.node) = (PGNode *) n;
				}
#line 18355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618:
#line 734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 18363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619:
#line 738 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 18372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620:
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 18380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621:
#line 768 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					(yyval.jexpr) = n;
				}
#line 18396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622:
#line 780 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					(yyval.jexpr) = n;
				}
#line 18413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623:
#line 793 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					(yyval.jexpr) = n;
				}
#line 18431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624:
#line 807 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					(yyval.jexpr) = n;
				}
#line 18446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625:
#line 818 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					(yyval.jexpr) = n;
				}
#line 18462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626:
#line 833 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 18472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627:
#line 839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 18481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628:
#line 844 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 18491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629:
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 18500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630:
#line 856 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 18506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631:
#line 857 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 18512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632:
#line 866 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 18520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633:
#line 870 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 18528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634:
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 18538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635:
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 18548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636:
#line 886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 18556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637:
#line 891 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 18562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638:
#line 892 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 18568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639:
#line 893 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 18574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640:
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 18580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641:
#line 898 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 18586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642:
#line 899 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 18592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643:
#line 911 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 18598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644:
#line 912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645:
#line 918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 18615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646:
#line 925 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 18626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647:
#line 932 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 18637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648:
#line 939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 18648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649:
#line 962 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeTableSample *n = makeNode(PGRangeTableSample);
					/* n->relation will be filled in later */
					n->method = (yyvsp[-4].list);
					n->args = (yyvsp[-2].list);
					n->repeatable = (yyvsp[0].node);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) n;
				}
#line 18662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650:
#line 974 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].node); }
#line 18668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651:
#line 975 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 18674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652:
#line 991 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 18688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653:
#line 1001 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 18702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654:
#line 1013 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 18708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655:
#line 1017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 18714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656:
#line 1018 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 18720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657:
#line 1021 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658:
#line 1022 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659:
#line 1025 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 18738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660:
#line 1026 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661:
#line 1031 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662:
#line 1032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 18756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663:
#line 1038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 18764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664:
#line 1042 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 18772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665:
#line 1048 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 18794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666:
#line 1069 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 18806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667:
#line 1076 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 18812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668:
#line 1089 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 18821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669:
#line 1094 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 18831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670:
#line 1101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 18840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671:
#line 1106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 18850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672:
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 18859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673:
#line 1117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 18869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674:
#line 1126 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 18875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675:
#line 1128 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 18881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676:
#line 1130 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 18887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677:
#line 1134 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678:
#line 1135 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679:
#line 1136 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680:
#line 1137 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681:
#line 1138 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682:
#line 1140 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 18926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683:
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 18936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684:
#line 1164 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685:
#line 1165 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686:
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687:
#line 1167 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688:
#line 1179 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689:
#line 1185 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-2].str)), (yyvsp[-1].list)));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-2]);
				}
#line 18980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690:
#line 1192 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 18986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691:
#line 1193 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 18992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692:
#line 1200 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693:
#line 1205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694:
#line 1210 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695:
#line 1215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696:
#line 1220 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697:
#line 1225 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698:
#line 1230 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699:
#line 1235 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700:
#line 1241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701:
#line 1247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702:
#line 1253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703:
#line 1260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 19119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704:
#line 1281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 19127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705:
#line 1291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706:
#line 1295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707:
#line 1303 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708:
#line 1307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 19160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709:
#line 1315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 19173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710:
#line 1327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711:
#line 1348 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712:
#line 1352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713:
#line 1358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714:
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 19230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715:
#line 1375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 19240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716:
#line 1383 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717:
#line 1393 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718:
#line 1395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719:
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 19270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720:
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721:
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722:
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723:
#line 1407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 19294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724:
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 19300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725:
#line 1416 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 19313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726:
#line 1425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727:
#line 1433 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 19338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728:
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729:
#line 1453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730:
#line 1460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 19365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731:
#line 1461 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 19371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732:
#line 1462 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 19377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733:
#line 1467 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 19383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734:
#line 1469 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 19389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735:
#line 1471 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 19395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736:
#line 1473 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 19401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737:
#line 1475 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 19407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738:
#line 1477 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = (yyvsp[0].list); }
#line 19413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739:
#line 1479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 19422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740:
#line 1484 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 19431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741:
#line 1489 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 19441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742:
#line 1495 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
					linitial((yyval.list)) = makeIntConst(INTERVAL_MASK(DAY) |
												INTERVAL_MASK(HOUR) |
												INTERVAL_MASK(MINUTE) |
												INTERVAL_MASK(SECOND), (yylsp[-2]));
				}
#line 19453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743:
#line 1503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 19462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744:
#line 1508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
					linitial((yyval.list)) = makeIntConst(INTERVAL_MASK(HOUR) |
												INTERVAL_MASK(MINUTE) |
												INTERVAL_MASK(SECOND), (yylsp[-2]));
				}
#line 19473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745:
#line 1515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
					linitial((yyval.list)) = makeIntConst(INTERVAL_MASK(MINUTE) |
												INTERVAL_MASK(SECOND), (yylsp[-2]));
				}
#line 19483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746:
#line 1521 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 19489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747:
#line 1526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0])));
				}
#line 19497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748:
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[-3])),
									makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 19506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749:
#line 1565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750:
#line 1567 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1])); }
#line 19518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751:
#line 1569 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 19530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752:
#line 1577 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 19540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753:
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 19546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754:
#line 1594 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 19552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755:
#line 1596 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756:
#line 1598 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757:
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758:
#line 1602 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759:
#line 1604 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760:
#line 1606 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761:
#line 1608 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762:
#line 1610 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763:
#line 1612 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764:
#line 1614 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765:
#line 1616 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766:
#line 1618 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767:
#line 1621 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768:
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 19636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769:
#line 1625 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 19642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770:
#line 1628 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771:
#line 1630 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772:
#line 1632 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 19660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773:
#line 1634 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 19666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774:
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 19675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775:
#line 1642 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 19684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776:
#line 1647 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 19695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777:
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 19704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778:
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 19715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779:
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 19724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780:
#line 1671 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 19736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781:
#line 1679 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 19745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782:
#line 1684 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 19757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783:
#line 1693 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 19769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784:
#line 1701 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 19781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785:
#line 1709 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 19793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786:
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 19805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787:
#line 1735 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 19817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788:
#line 1743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789:
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 19841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790:
#line 1759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 19853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791:
#line 1767 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792:
#line 1775 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 19885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793:
#line 1791 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 19897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794:
#line 1799 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 19909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795:
#line 1807 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 19921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796:
#line 1815 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 19933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797:
#line 1823 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 19945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798:
#line 1831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 19957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799:
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 19965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800:
#line 1843 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 19973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801:
#line 1847 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802:
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 19989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803:
#line 1855 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 20001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804:
#line 1863 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 20013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805:
#line 1871 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 20025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806:
#line 1879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 20037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807:
#line 1887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 20061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808:
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 20087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809:
#line 1929 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 20102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810:
#line 1940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 20113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811:
#line 1947 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812:
#line 1972 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813:
#line 1974 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1])); }
#line 20143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814:
#line 1976 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 20149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815:
#line 1978 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 20155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816:
#line 1980 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817:
#line 1982 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818:
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819:
#line 1986 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820:
#line 1988 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821:
#line 1990 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822:
#line 1992 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823:
#line 1994 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824:
#line 1996 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825:
#line 1998 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826:
#line 2000 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827:
#line 2002 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828:
#line 2004 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829:
#line 2006 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 20239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830:
#line 2008 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 20245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831:
#line 2010 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 20253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832:
#line 2014 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 20261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833:
#line 2018 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 20269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834:
#line 2022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 20277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835:
#line 2035 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836:
#line 2036 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837:
#line 2038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[-1]));
				}
#line 20305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838:
#line 2050 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[-1].ival);
					p->location = (yylsp[-1]);
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				}
#line 20324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839:
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-2].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[-2].node);
				}
#line 20340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840:
#line 2077 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841:
#line 2079 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842:
#line 2081 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843:
#line 2092 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 20395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844:
#line 2116 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845:
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 20418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846:
#line 2133 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-4].list), (yyvsp[-2].list), (yylsp[-4]));
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847:
#line 2139 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), list_make1((yyvsp[-2].node)), (yylsp[-5]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848:
#line 2146 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-7].list), lappend((yyvsp[-5].list), (yyvsp[-2].node)), (yylsp[-7]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849:
#line 2153 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 20464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850:
#line 2163 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851:
#line 2170 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852:
#line 2198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-3].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-2].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						n->agg_order = (yyvsp[-2].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-1].node);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 20534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853:
#line 2233 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854:
#line 2243 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855:
#line 2244 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856:
#line 2252 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 20562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857:
#line 2258 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 20570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858:
#line 2262 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 20578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859:
#line 2266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 20586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860:
#line 2270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 20594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861:
#line 2274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 20602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862:
#line 2278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 20610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863:
#line 2282 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 20618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864:
#line 2286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 20626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865:
#line 2290 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 20634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866:
#line 2294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 20642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867:
#line 2298 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 20650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868:
#line 2302 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 20658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869:
#line 2306 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 20666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870:
#line 2310 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 20674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871:
#line 2314 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 20682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872:
#line 2318 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), (yylsp[-5])); }
#line 20688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873:
#line 2320 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 20696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874:
#line 2324 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 20709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875:
#line 2333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 20718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876:
#line 2338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 20729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877:
#line 2345 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 20748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878:
#line 2360 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 20759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879:
#line 2367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 20767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880:
#line 2371 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 20775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881:
#line 2375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 20783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882:
#line 2379 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 20791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883:
#line 2383 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 20802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884:
#line 2396 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885:
#line 2397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886:
#line 2401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 20820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887:
#line 2402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888:
#line 2410 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889:
#line 2411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890:
#line 2415 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 20844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891:
#line 2417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 20850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892:
#line 2422 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 20860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893:
#line 2430 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 20866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894:
#line 2432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 20883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895:
#line 2445 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 20889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896:
#line 2450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 20907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897:
#line 2475 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898:
#line 2476 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 20919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899:
#line 2479 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900:
#line 2480 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901:
#line 2492 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					if (n->frameOptions & (FRAMEOPTION_START_VALUE_PRECEDING |
										   FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("RANGE PRECEDING is only supported with UNBOUNDED"),
								 parser_errposition((yylsp[-1]))));
					if (n->frameOptions & (FRAMEOPTION_START_VALUE_FOLLOWING |
										   FRAMEOPTION_END_VALUE_FOLLOWING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("RANGE FOLLOWING is only supported with UNBOUNDED"),
								 parser_errposition((yylsp[-1]))));
					(yyval.windef) = n;
				}
#line 20953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902:
#line 2510 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 20963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903:
#line 2516 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904:
#line 2526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 20996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905:
#line 2543 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 21037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906:
#line 2588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907:
#line 2596 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908:
#line 2604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909:
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910:
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911:
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912:
#line 2641 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 21109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913:
#line 2642 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 21115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914:
#line 2645 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 21121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915:
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 21127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916:
#line 2647 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 21133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917:
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918:
#line 2651 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 21145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919:
#line 2654 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 21151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920:
#line 2655 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 21157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921:
#line 2656 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 21163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922:
#line 2657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 21169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923:
#line 2658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 21175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924:
#line 2659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 21181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925:
#line 2660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 21187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926:
#line 2661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 21193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927:
#line 2662 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 21199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928:
#line 2663 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 21205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929:
#line 2664 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 21211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930:
#line 2665 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 21217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931:
#line 2669 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932:
#line 2671 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933:
#line 2676 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934:
#line 2678 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935:
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936:
#line 2685 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937:
#line 2687 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 21259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938:
#line 2689 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 21265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939:
#line 2691 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 21271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940:
#line 2693 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 21277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941:
#line 2695 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 21283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942:
#line 2697 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 21289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943:
#line 2711 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944:
#line 2713 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 21301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945:
#line 2717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946:
#line 2721 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947:
#line 2728 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948:
#line 2732 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949:
#line 2738 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 21341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950:
#line 2742 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 21354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951:
#line 2751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 21367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952:
#line 2761 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 21373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953:
#line 2762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 21379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954:
#line 2767 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 21387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955:
#line 2770 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956:
#line 2777 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957:
#line 2778 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "year"; }
#line 21405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958:
#line 2779 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "month"; }
#line 21411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959:
#line 2780 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "day"; }
#line 21417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960:
#line 2781 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "hour"; }
#line 21423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961:
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "minute"; }
#line 21429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962:
#line 2783 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "second"; }
#line 21435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963:
#line 2784 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964:
#line 2795 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 21449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965:
#line 2799 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 21457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966:
#line 2806 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967:
#line 2812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 21469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968:
#line 2813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969:
#line 2830 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 21483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970:
#line 2834 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 21492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971:
#line 2839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 21500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972:
#line 2843 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), -1));
				}
#line 21519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973:
#line 2858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 21527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974:
#line 2862 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 21533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975:
#line 2866 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976:
#line 2869 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977:
#line 2872 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 21551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978:
#line 2873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979:
#line 2874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980:
#line 2878 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 21574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981:
#line 2884 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 21580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982:
#line 2895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 21594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983:
#line 2908 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984:
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985:
#line 2914 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 21618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986:
#line 2924 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987:
#line 2925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 21630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988:
#line 2928 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989:
#line 2929 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 21642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990:
#line 2933 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 21650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991:
#line 2937 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 21658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992:
#line 2944 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 21666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993:
#line 2948 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeNode(PGAStar);
				}
#line 21674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994:
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 21686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995:
#line 2960 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 21698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996:
#line 2970 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997:
#line 2971 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 21710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998:
#line 2975 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999:
#line 2976 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000:
#line 2980 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001:
#line 2981 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004:
#line 2995 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005:
#line 2996 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 21746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006:
#line 3000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 21752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007:
#line 3001 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 21758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008:
#line 3005 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 21770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009:
#line 3021 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 21782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010:
#line 3029 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 21794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011:
#line 3037 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					n->fields = list_make1(makeNode(PGAStar));
					n->location = (yylsp[0]);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[0]);
				}
#line 21810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012:
#line 3058 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 21816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013:
#line 3059 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 21822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014:
#line 3071 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 21830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015:
#line 3075 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 21859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016:
#line 3102 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017:
#line 3104 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 21871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018:
#line 3108 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019:
#line 3110 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020:
#line 3121 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021:
#line 3123 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 21898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022:
#line 3134 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 21906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023:
#line 3138 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024:
#line 3142 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025:
#line 3146 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026:
#line 3150 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027:
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 21954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028:
#line 3166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-5].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, nor ORDER BY.
					 */
					foreach(lc, (yyvsp[-3].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-2].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-2]))));

					t->typmods = (yyvsp[-3].list);
					t->location = (yylsp[-5]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 21990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029:
#line 3198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 21998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030:
#line 3202 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 22008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031:
#line 3208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 22019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032:
#line 3216 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGTypeName *t = (yyvsp[-5].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						t->typmods = lappend((yyvsp[0].list), makeParamRef(0, (yylsp[-3])));
					}
					else
						t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
												makeParamRef(0, (yylsp[-3])));
					(yyval.node) = makeParamRefCast(0, (yylsp[-1]), t);
				}
#line 22035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033:
#line 3228 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 22043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034:
#line 3232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 22051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035:
#line 3236 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 22059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036:
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 22065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037:
#line 3242 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038:
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039:
#line 3259 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040:
#line 3260 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041:
#line 3263 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042:
#line 3264 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043:
#line 3269 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044:
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045:
#line 3271 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046:
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047:
#line 3275 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 22131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048:
#line 3279 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049:
#line 3281 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 22143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050:
#line 3285 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051:
#line 3286 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053:
#line 3297 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054:
#line 3298 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055:
#line 3299 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056:
#line 3300 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057:
#line 3301 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058:
#line 3304 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059:
#line 3305 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 22218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 22228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 22267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 22273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 22279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069:
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 22294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070:
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071:
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072:
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 22346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073:
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 22358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074:
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 22372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075:
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 22378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076:
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 22384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077:
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 22390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078:
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 22396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079:
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 22410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080:
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 22416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081:
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 22422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082:
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 22428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083:
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 22434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084:
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 22440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085:
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 22446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 22452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 22463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088:
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 22473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089:
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 22479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 22490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091:
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 22501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = true;
					(yyval.node) = (PGNode *) n;
				}
#line 22521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095:
#line 32 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 22537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096:
#line 34 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 22548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097:
#line 42 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 22563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098:
#line 53 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 22575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099:
#line 65 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 22587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100:
#line 73 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 22599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101:
#line 81 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 22610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102:
#line 88 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 22621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103:
#line 98 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 22627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104:
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 22633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 22641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106:
#line 110 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 22649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107:
#line 114 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 22668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108:
#line 129 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 22679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 22685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110:
#line 136 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 22691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111:
#line 137 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 22697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114:
#line 4 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *) n;
				}
#line 22719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115:
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "timezone";
					(yyval.node) = (PGNode *) n;
				}
#line 22729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116:
#line 16 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "transaction_isolation";
					(yyval.node) = (PGNode *) n;
				}
#line 22739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117:
#line 22 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "all";
					(yyval.node) = (PGNode *) n;
				}
#line 22749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120:
#line 31 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121:
#line 33 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 22761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122:
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 22777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123:
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 22793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124:
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 22814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125:
#line 54 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 22835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126:
#line 74 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 22841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127:
#line 75 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 22847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128:
#line 76 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 22853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129:
#line 77 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 22859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130:
#line 8 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
					n->name = (yyvsp[-5].str);
					n->args = (yyvsp[-3].list);
					n->function = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 22875 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 23 "third_party/libpg_query/grammar/statements/create_function.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, -1);
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}

static PGNode *
makeParamRefCast(int number, int location, PGTypeName *tpname)
{
	PGNode *p = makeParamRef(number, location);
	return makeTypeCast(p, tpname, -1);
}

/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
