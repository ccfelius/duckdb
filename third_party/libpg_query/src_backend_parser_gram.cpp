/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CENTURIES_P = 68,               /* CENTURIES_P  */
  YYSYMBOL_CENTURY_P = 69,                 /* CENTURY_P  */
  YYSYMBOL_CHAIN = 70,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 71,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 72,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 73,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 74,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 75,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 76,                     /* CLASS  */
  YYSYMBOL_CLOSE = 77,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 78,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 79,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 80,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 81,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 82,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 83,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 84,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 85,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 86,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 87,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 88,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 89,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 90,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 91,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 92,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 93,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 94,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 95,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 96,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 97,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 98,                      /* COPY  */
  YYSYMBOL_COST = 99,                      /* COST  */
  YYSYMBOL_CREATE_P = 100,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 101,                    /* CROSS  */
  YYSYMBOL_CSV = 102,                      /* CSV  */
  YYSYMBOL_CUBE = 103,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 104,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 105,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 106,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 107,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 108,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 109,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 110,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 111,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 112,                      /* DEC  */
  YYSYMBOL_DECADE_P = 113,                 /* DECADE_P  */
  YYSYMBOL_DECADES_P = 114,                /* DECADES_P  */
  YYSYMBOL_DECIMAL_P = 115,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 116,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 117,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 118,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 119,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 120,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 121,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 122,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 123,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 124,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 125,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 126,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 127,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 128,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 129,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 130,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 131,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 132,                 /* DISTINCT  */
  YYSYMBOL_DO = 133,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 134,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 135,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 136,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 137,                     /* DROP  */
  YYSYMBOL_EACH = 138,                     /* EACH  */
  YYSYMBOL_ELSE = 139,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 140,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 141,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 142,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 143,                    /* END_P  */
  YYSYMBOL_ENUM_P = 144,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 145,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 146,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 147,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 148,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 149,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 150,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 151,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 152,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 153,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 154,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 155,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 156,                /* EXTENSION  */
  YYSYMBOL_EXTENSIONS = 157,               /* EXTENSIONS  */
  YYSYMBOL_EXTERNAL = 158,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 159,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 160,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 161,                   /* FAMILY  */
  YYSYMBOL_FETCH = 162,                    /* FETCH  */
  YYSYMBOL_FILTER = 163,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 164,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 165,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 166,                /* FOLLOWING  */
  YYSYMBOL_FOR = 167,                      /* FOR  */
  YYSYMBOL_FORCE = 168,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 169,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 170,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 171,                   /* FREEZE  */
  YYSYMBOL_FROM = 172,                     /* FROM  */
  YYSYMBOL_FULL = 173,                     /* FULL  */
  YYSYMBOL_FUNCTION = 174,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 175,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 176,                /* GENERATED  */
  YYSYMBOL_GLOB = 177,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 178,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 179,                    /* GRANT  */
  YYSYMBOL_GRANTED = 180,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 181,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 182,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 183,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 184,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 185,                  /* HANDLER  */
  YYSYMBOL_HAVING = 186,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 187,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 188,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 189,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 190,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 191,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 192,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 193,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 194,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 195,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 196,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 197,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 198,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 199,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 200,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 201,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 202,                /* INCREMENT  */
  YYSYMBOL_INDEX = 203,                    /* INDEX  */
  YYSYMBOL_INDEXES = 204,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 205,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 206,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 207,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 208,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 209,                  /* INNER_P  */
  YYSYMBOL_INOUT = 210,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 211,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 212,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 213,                   /* INSERT  */
  YYSYMBOL_INSTALL = 214,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 215,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 216,                    /* INT_P  */
  YYSYMBOL_INTEGER = 217,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 218,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 219,                 /* INTERVAL  */
  YYSYMBOL_INTO = 220,                     /* INTO  */
  YYSYMBOL_INVOKER = 221,                  /* INVOKER  */
  YYSYMBOL_IS = 222,                       /* IS  */
  YYSYMBOL_ISNULL = 223,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 224,                /* ISOLATION  */
  YYSYMBOL_JOIN = 225,                     /* JOIN  */
  YYSYMBOL_JSON = 226,                     /* JSON  */
  YYSYMBOL_KEY = 227,                      /* KEY  */
  YYSYMBOL_LABEL = 228,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 229,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 230,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 231,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 232,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 233,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 234,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 235,                     /* LEFT  */
  YYSYMBOL_LEVEL = 236,                    /* LEVEL  */
  YYSYMBOL_LIKE = 237,                     /* LIKE  */
  YYSYMBOL_LIMIT = 238,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 239,                   /* LISTEN  */
  YYSYMBOL_LOAD = 240,                     /* LOAD  */
  YYSYMBOL_LOCAL = 241,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 242,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 243,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 244,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 245,                   /* LOGGED  */
  YYSYMBOL_MACRO = 246,                    /* MACRO  */
  YYSYMBOL_MAP = 247,                      /* MAP  */
  YYSYMBOL_MAPPING = 248,                  /* MAPPING  */
  YYSYMBOL_MATCH = 249,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 250,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 251,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 252,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 253,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 254,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLENNIA_P = 255,              /* MILLENNIA_P  */
  YYSYMBOL_MILLENNIUM_P = 256,             /* MILLENNIUM_P  */
  YYSYMBOL_MILLISECOND_P = 257,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 258,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 259,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 260,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 261,                 /* MINVALUE  */
  YYSYMBOL_MODE = 262,                     /* MODE  */
  YYSYMBOL_MONTH_P = 263,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 264,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 265,                     /* MOVE  */
  YYSYMBOL_NAME_P = 266,                   /* NAME_P  */
  YYSYMBOL_NAMES = 267,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 268,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 269,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 270,                    /* NCHAR  */
  YYSYMBOL_NEW = 271,                      /* NEW  */
  YYSYMBOL_NEXT = 272,                     /* NEXT  */
  YYSYMBOL_NO = 273,                       /* NO  */
  YYSYMBOL_NONE = 274,                     /* NONE  */
  YYSYMBOL_NOT = 275,                      /* NOT  */
  YYSYMBOL_NOTHING = 276,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 277,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 278,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 279,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 280,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 281,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 282,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 283,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 284,                 /* OBJECT_P  */
  YYSYMBOL_OF = 285,                       /* OF  */
  YYSYMBOL_OFF = 286,                      /* OFF  */
  YYSYMBOL_OFFSET = 287,                   /* OFFSET  */
  YYSYMBOL_OIDS = 288,                     /* OIDS  */
  YYSYMBOL_OLD = 289,                      /* OLD  */
  YYSYMBOL_ON = 290,                       /* ON  */
  YYSYMBOL_ONLY = 291,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 292,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 293,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 294,                  /* OPTIONS  */
  YYSYMBOL_OR = 295,                       /* OR  */
  YYSYMBOL_ORDER = 296,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 297,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 298,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 299,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 300,                  /* OUTER_P  */
  YYSYMBOL_OVER = 301,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 302,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 303,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 304,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 305,                    /* OWNED  */
  YYSYMBOL_OWNER = 306,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 307,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 308,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 309,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 310,                /* PARTITION  */
  YYSYMBOL_PASSING = 311,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 312,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 313,                  /* PERCENT  */
  YYSYMBOL_PERSISTENT = 314,               /* PERSISTENT  */
  YYSYMBOL_PIVOT = 315,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 316,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 317,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 318,                  /* PLACING  */
  YYSYMBOL_PLANS = 319,                    /* PLANS  */
  YYSYMBOL_POLICY = 320,                   /* POLICY  */
  YYSYMBOL_POSITION = 321,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 322,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 323,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 324,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 325,                /* PRECISION  */
  YYSYMBOL_PREPARE = 326,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 327,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 328,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 329,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 330,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 331,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 332,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 333,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 334,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 335,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 336,                  /* QUALIFY  */
  YYSYMBOL_QUARTER_P = 337,                /* QUARTER_P  */
  YYSYMBOL_QUARTERS_P = 338,               /* QUARTERS_P  */
  YYSYMBOL_QUOTE = 339,                    /* QUOTE  */
  YYSYMBOL_RANGE = 340,                    /* RANGE  */
  YYSYMBOL_READ_P = 341,                   /* READ_P  */
  YYSYMBOL_REAL = 342,                     /* REAL  */
  YYSYMBOL_REASSIGN = 343,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 344,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 345,                /* RECURSIVE  */
  YYSYMBOL_REF = 346,                      /* REF  */
  YYSYMBOL_REFERENCES = 347,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 348,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 349,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 350,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 351,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 352,                  /* RELEASE  */
  YYSYMBOL_RENAME = 353,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 354,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 355,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 356,                  /* REPLICA  */
  YYSYMBOL_RESET = 357,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 358,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 359,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 360,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 361,                /* RETURNING  */
  YYSYMBOL_RETURNS = 362,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 363,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 364,                    /* RIGHT  */
  YYSYMBOL_ROLE = 365,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 366,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 367,                   /* ROLLUP  */
  YYSYMBOL_ROW = 368,                      /* ROW  */
  YYSYMBOL_ROWS = 369,                     /* ROWS  */
  YYSYMBOL_RULE = 370,                     /* RULE  */
  YYSYMBOL_SAMPLE = 371,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 372,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 373,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 374,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 375,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 376,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 377,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 378,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 379,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 380,                   /* SECRET  */
  YYSYMBOL_SECURITY = 381,                 /* SECURITY  */
  YYSYMBOL_SELECT = 382,                   /* SELECT  */
  YYSYMBOL_SEMI = 383,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 384,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 385,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 386,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 387,                   /* SERVER  */
  YYSYMBOL_SESSION = 388,                  /* SESSION  */
  YYSYMBOL_SET = 389,                      /* SET  */
  YYSYMBOL_SETOF = 390,                    /* SETOF  */
  YYSYMBOL_SETS = 391,                     /* SETS  */
  YYSYMBOL_SHARE = 392,                    /* SHARE  */
  YYSYMBOL_SHOW = 393,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 394,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 395,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 396,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 397,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 398,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 399,                     /* SOME  */
  YYSYMBOL_SQL_P = 400,                    /* SQL_P  */
  YYSYMBOL_STABLE = 401,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 402,             /* STANDALONE_P  */
  YYSYMBOL_START = 403,                    /* START  */
  YYSYMBOL_STATEMENT = 404,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 405,               /* STATISTICS  */
  YYSYMBOL_STDIN = 406,                    /* STDIN  */
  YYSYMBOL_STDOUT = 407,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 408,                  /* STORAGE  */
  YYSYMBOL_STORED = 409,                   /* STORED  */
  YYSYMBOL_STRICT_P = 410,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 411,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 412,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 413,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 414,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 415,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 416,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 417,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 418,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 419,                    /* TABLE  */
  YYSYMBOL_TABLES = 420,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 421,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 422,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 423,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 424,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 425,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 426,                   /* TEXT_P  */
  YYSYMBOL_THEN = 427,                     /* THEN  */
  YYSYMBOL_TIES = 428,                     /* TIES  */
  YYSYMBOL_TIME = 429,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 430,                /* TIMESTAMP  */
  YYSYMBOL_TO = 431,                       /* TO  */
  YYSYMBOL_TRAILING = 432,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 433,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 434,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 435,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 436,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 437,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 438,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 439,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 440,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 441,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 442,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 443,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 444,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 445,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 446,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 447,                    /* UNION  */
  YYSYMBOL_UNIQUE = 448,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 449,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 450,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 451,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 452,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 453,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 454,                   /* UPDATE  */
  YYSYMBOL_USE_P = 455,                    /* USE_P  */
  YYSYMBOL_USER = 456,                     /* USER  */
  YYSYMBOL_USING = 457,                    /* USING  */
  YYSYMBOL_VACUUM = 458,                   /* VACUUM  */
  YYSYMBOL_VALID = 459,                    /* VALID  */
  YYSYMBOL_VALIDATE = 460,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 461,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 462,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 463,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 464,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 465,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 466,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 467,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 468,                /* VERSION_P  */
  YYSYMBOL_VIEW = 469,                     /* VIEW  */
  YYSYMBOL_VIEWS = 470,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 471,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 472,                 /* VOLATILE  */
  YYSYMBOL_WEEK_P = 473,                   /* WEEK_P  */
  YYSYMBOL_WEEKS_P = 474,                  /* WEEKS_P  */
  YYSYMBOL_WHEN = 475,                     /* WHEN  */
  YYSYMBOL_WHERE = 476,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 477,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 478,                   /* WINDOW  */
  YYSYMBOL_WITH = 479,                     /* WITH  */
  YYSYMBOL_WITHIN = 480,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 481,                  /* WITHOUT  */
  YYSYMBOL_WORK = 482,                     /* WORK  */
  YYSYMBOL_WRAPPER = 483,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 484,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 485,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 486,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 487,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 488,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 489,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 490,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 491,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 492,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 493,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 494,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 495,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 496,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 497,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 498,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 499,                    /* YES_P  */
  YYSYMBOL_ZONE = 500,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 501,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 502,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 503,                  /* WITH_LA  */
  YYSYMBOL_504_ = 504,                     /* '<'  */
  YYSYMBOL_505_ = 505,                     /* '>'  */
  YYSYMBOL_506_ = 506,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 507,                /* POSTFIXOP  */
  YYSYMBOL_508_ = 508,                     /* '+'  */
  YYSYMBOL_509_ = 509,                     /* '-'  */
  YYSYMBOL_510_ = 510,                     /* '*'  */
  YYSYMBOL_511_ = 511,                     /* '/'  */
  YYSYMBOL_512_ = 512,                     /* '%'  */
  YYSYMBOL_513_ = 513,                     /* '^'  */
  YYSYMBOL_UMINUS = 514,                   /* UMINUS  */
  YYSYMBOL_515_ = 515,                     /* '['  */
  YYSYMBOL_516_ = 516,                     /* ']'  */
  YYSYMBOL_517_ = 517,                     /* '('  */
  YYSYMBOL_518_ = 518,                     /* ')'  */
  YYSYMBOL_519_ = 519,                     /* '.'  */
  YYSYMBOL_520_ = 520,                     /* ';'  */
  YYSYMBOL_521_ = 521,                     /* ','  */
  YYSYMBOL_522_ = 522,                     /* '?'  */
  YYSYMBOL_523_ = 523,                     /* '{'  */
  YYSYMBOL_524_ = 524,                     /* '}'  */
  YYSYMBOL_525_ = 525,                     /* '#'  */
  YYSYMBOL_526_ = 526,                     /* '$'  */
  YYSYMBOL_527_ = 527,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 528,                 /* $accept  */
  YYSYMBOL_stmtblock = 529,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 530,                /* stmtmulti  */
  YYSYMBOL_stmt = 531,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 532,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 533,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 534,               /* SeqOptList  */
  YYSYMBOL_opt_with = 535,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 536,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 537,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 538,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 539,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 540,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 541, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 542,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 543, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 544, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 545,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 546,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 547, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 548,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 549,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 550,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 551,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 552,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 553,               /* DetachStmt  */
  YYSYMBOL_opt_database = 554,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 555,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 556,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 557,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 558,               /* opt_col_id  */
  YYSYMBOL_CommentOnStmt = 559,            /* CommentOnStmt  */
  YYSYMBOL_comment_value = 560,            /* comment_value  */
  YYSYMBOL_comment_on_type_any_name = 561, /* comment_on_type_any_name  */
  YYSYMBOL_qualified_name = 562,           /* qualified_name  */
  YYSYMBOL_ColId = 563,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 564,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 565,                   /* Sconst  */
  YYSYMBOL_indirection = 566,              /* indirection  */
  YYSYMBOL_indirection_el = 567,           /* indirection_el  */
  YYSYMBOL_attr_name = 568,                /* attr_name  */
  YYSYMBOL_ColLabel = 569,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 570,                 /* CopyStmt  */
  YYSYMBOL_copy_database_flag = 571,       /* copy_database_flag  */
  YYSYMBOL_copy_from = 572,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 573,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 574, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 575,                /* opt_using  */
  YYSYMBOL_opt_as = 576,                   /* opt_as  */
  YYSYMBOL_opt_program = 577,              /* opt_program  */
  YYSYMBOL_copy_options = 578,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 579,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 580,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 581,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 582,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 583,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 584,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 585, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 586,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 587,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 588,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 589,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 590,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 591, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 592,       /* generic_option_arg  */
  YYSYMBOL_key_action = 593,               /* key_action  */
  YYSYMBOL_ColConstraint = 594,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 595,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 596,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 597,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 598,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 599,      /* generic_option_elem  */
  YYSYMBOL_key_update = 600,               /* key_update  */
  YYSYMBOL_key_actions = 601,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 602,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 603,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 604,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 605,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 606,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 607,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 608,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 609,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 610,                  /* OptWith  */
  YYSYMBOL_definition = 611,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 612,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 613,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 614,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 615,                /* columnDef  */
  YYSYMBOL_def_list = 616,                 /* def_list  */
  YYSYMBOL_index_name = 617,               /* index_name  */
  YYSYMBOL_TableElement = 618,             /* TableElement  */
  YYSYMBOL_def_elem = 619,                 /* def_elem  */
  YYSYMBOL_opt_definition = 620,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 621,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 622,               /* columnElem  */
  YYSYMBOL_opt_column_list = 623,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 624,              /* ColQualList  */
  YYSYMBOL_key_delete = 625,               /* key_delete  */
  YYSYMBOL_reloption_elem = 626,           /* reloption_elem  */
  YYSYMBOL_columnList = 627,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 628,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 629,                /* func_type  */
  YYSYMBOL_ConstraintElem = 630,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 631,         /* TableElementList  */
  YYSYMBOL_key_match = 632,                /* key_match  */
  YYSYMBOL_TableLikeClause = 633,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 634,                  /* OptTemp  */
  YYSYMBOL_generated_when = 635,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 636,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 637,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 638,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 639,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 640,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 641,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 642,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 643,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 644,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 645,         /* reserved_keyword  */
  YYSYMBOL_CreateFunctionStmt = 646,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 647,              /* macro_alias  */
  YYSYMBOL_param_list = 648,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 649,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 650,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 651,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 652,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 653,          /* opt_secret_name  */
  YYSYMBOL_opt_persist = 654,              /* opt_persist  */
  YYSYMBOL_opt_storage_specifier = 655,    /* opt_storage_specifier  */
  YYSYMBOL_CreateSeqStmt = 656,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 657,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 658,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 659,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 660,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 661,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 662,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 663,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 664,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 665,             /* using_clause  */
  YYSYMBOL_DropStmt = 666,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 667,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 668,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 669,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 670,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 671, /* drop_type_name_on_any_name  */
  YYSYMBOL_DropSecretStmt = 672,           /* DropSecretStmt  */
  YYSYMBOL_opt_storage_drop_specifier = 673, /* opt_storage_drop_specifier  */
  YYSYMBOL_ExecuteStmt = 674,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 675,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 676,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 677,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 678,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 679,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 680,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 681,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 682,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 683, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 684,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 685,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 686,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 687,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 688,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 689,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 690,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 691,                /* IndexStmt  */
  YYSYMBOL_access_method = 692,            /* access_method  */
  YYSYMBOL_access_method_clause = 693,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 694,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 695,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 696,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 697,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 698,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 699,              /* insert_rest  */
  YYSYMBOL_insert_target = 700,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 701,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 702,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 703,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 704,       /* insert_column_item  */
  YYSYMBOL_set_clause = 705,               /* set_clause  */
  YYSYMBOL_opt_or_action = 706,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 707,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 708,               /* index_elem  */
  YYSYMBOL_returning_clause = 709,         /* returning_clause  */
  YYSYMBOL_override_kind = 710,            /* override_kind  */
  YYSYMBOL_set_target_list = 711,          /* set_target_list  */
  YYSYMBOL_opt_collate = 712,              /* opt_collate  */
  YYSYMBOL_opt_class = 713,                /* opt_class  */
  YYSYMBOL_insert_column_list = 714,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 715,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 716, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 717,             /* index_params  */
  YYSYMBOL_set_target = 718,               /* set_target  */
  YYSYMBOL_LoadStmt = 719,                 /* LoadStmt  */
  YYSYMBOL_file_name = 720,                /* file_name  */
  YYSYMBOL_opt_from_repo = 721,            /* opt_from_repo  */
  YYSYMBOL_opt_ext_version = 722,          /* opt_ext_version  */
  YYSYMBOL_PragmaStmt = 723,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 724,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 725,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 726,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 727,               /* RenameStmt  */
  YYSYMBOL_opt_column = 728,               /* opt_column  */
  YYSYMBOL_SelectStmt = 729,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 730,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 731,         /* select_no_parens  */
  YYSYMBOL_select_clause = 732,            /* select_clause  */
  YYSYMBOL_opt_select = 733,               /* opt_select  */
  YYSYMBOL_simple_select = 734,            /* simple_select  */
  YYSYMBOL_value_or_values = 735,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 736,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 737,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 738,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 739, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 740,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 741,              /* with_clause  */
  YYSYMBOL_cte_list = 742,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 743,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 744,         /* opt_materialized  */
  YYSYMBOL_into_clause = 745,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 746,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 747,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 748,          /* all_or_distinct  */
  YYSYMBOL_by_name = 749,                  /* by_name  */
  YYSYMBOL_distinct_clause = 750,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 751,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 752,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 753,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 754,              /* sort_clause  */
  YYSYMBOL_sortby_list = 755,              /* sortby_list  */
  YYSYMBOL_sortby = 756,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 757,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 758,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 759,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 760,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 761,             /* limit_clause  */
  YYSYMBOL_offset_clause = 762,            /* offset_clause  */
  YYSYMBOL_sample_count = 763,             /* sample_count  */
  YYSYMBOL_sample_clause = 764,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 765,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 766,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 767,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 768,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 769,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 770,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 771,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 772, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 773,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 774,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 775,            /* first_or_next  */
  YYSYMBOL_group_clause = 776,             /* group_clause  */
  YYSYMBOL_group_by_list = 777,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 778,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 779,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 780,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 781,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 782,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 783,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 784,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 785,            /* having_clause  */
  YYSYMBOL_qualify_clause = 786,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 787,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 788,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 789,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 790,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 791,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 792,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 793,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 794,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 795,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 796,              /* from_clause  */
  YYSYMBOL_from_list = 797,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 798,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 799,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 800,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 801,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 802,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 803,             /* pivot_header  */
  YYSYMBOL_pivot_value = 804,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 805,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 806,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 807,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 808,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 809,             /* joined_table  */
  YYSYMBOL_alias_clause = 810,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 811,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 812,        /* func_alias_clause  */
  YYSYMBOL_join_type = 813,                /* join_type  */
  YYSYMBOL_join_outer = 814,               /* join_outer  */
  YYSYMBOL_join_qual = 815,                /* join_qual  */
  YYSYMBOL_relation_expr = 816,            /* relation_expr  */
  YYSYMBOL_func_table = 817,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 818,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 819,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 820,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 821,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 822,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 823,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 824,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 825,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 826,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 827,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 828,             /* opt_Typename  */
  YYSYMBOL_Typename = 829,                 /* Typename  */
  YYSYMBOL_qualified_typename = 830,       /* qualified_typename  */
  YYSYMBOL_opt_array_bounds = 831,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 832,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 833,            /* ConstTypename  */
  YYSYMBOL_GenericType = 834,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 835,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 836,                  /* Numeric  */
  YYSYMBOL_opt_float = 837,                /* opt_float  */
  YYSYMBOL_Bit = 838,                      /* Bit  */
  YYSYMBOL_ConstBit = 839,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 840,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 841,         /* BitWithoutLength  */
  YYSYMBOL_Character = 842,                /* Character  */
  YYSYMBOL_ConstCharacter = 843,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 844,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 845,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 846,                /* character  */
  YYSYMBOL_opt_varying = 847,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 848,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 849,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 850,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 851,             /* year_keyword  */
  YYSYMBOL_month_keyword = 852,            /* month_keyword  */
  YYSYMBOL_day_keyword = 853,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 854,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 855,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 856,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 857,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 858,      /* microsecond_keyword  */
  YYSYMBOL_week_keyword = 859,             /* week_keyword  */
  YYSYMBOL_quarter_keyword = 860,          /* quarter_keyword  */
  YYSYMBOL_decade_keyword = 861,           /* decade_keyword  */
  YYSYMBOL_century_keyword = 862,          /* century_keyword  */
  YYSYMBOL_millennium_keyword = 863,       /* millennium_keyword  */
  YYSYMBOL_opt_interval = 864,             /* opt_interval  */
  YYSYMBOL_a_expr = 865,                   /* a_expr  */
  YYSYMBOL_b_expr = 866,                   /* b_expr  */
  YYSYMBOL_c_expr = 867,                   /* c_expr  */
  YYSYMBOL_d_expr = 868,                   /* d_expr  */
  YYSYMBOL_indirection_expr_or_a_expr = 869, /* indirection_expr_or_a_expr  */
  YYSYMBOL_indirection_expr = 870,         /* indirection_expr  */
  YYSYMBOL_list_expr = 871,                /* list_expr  */
  YYSYMBOL_struct_expr = 872,              /* struct_expr  */
  YYSYMBOL_func_application = 873,         /* func_application  */
  YYSYMBOL_func_expr = 874,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 875,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 876, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 877,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 878,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 879,            /* filter_clause  */
  YYSYMBOL_export_clause = 880,            /* export_clause  */
  YYSYMBOL_window_clause = 881,            /* window_clause  */
  YYSYMBOL_window_definition_list = 882,   /* window_definition_list  */
  YYSYMBOL_window_definition = 883,        /* window_definition  */
  YYSYMBOL_over_clause = 884,              /* over_clause  */
  YYSYMBOL_window_specification = 885,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 886, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 887,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 888,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 889,             /* frame_extent  */
  YYSYMBOL_frame_bound = 890,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 891, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 892,            /* qualified_row  */
  YYSYMBOL_row = 893,                      /* row  */
  YYSYMBOL_dict_arg = 894,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 895,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 896, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 897,                  /* map_arg  */
  YYSYMBOL_map_arguments = 898,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 899,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 900, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 901,                 /* sub_type  */
  YYSYMBOL_all_Op = 902,                   /* all_Op  */
  YYSYMBOL_MathOp = 903,                   /* MathOp  */
  YYSYMBOL_qual_Op = 904,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 905,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 906,              /* subquery_Op  */
  YYSYMBOL_any_operator = 907,             /* any_operator  */
  YYSYMBOL_c_expr_list = 908,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 909,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 910,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 911,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 912,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 913,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 914,            /* func_arg_expr  */
  YYSYMBOL_type_list = 915,                /* type_list  */
  YYSYMBOL_extract_list = 916,             /* extract_list  */
  YYSYMBOL_extract_arg = 917,              /* extract_arg  */
  YYSYMBOL_overlay_list = 918,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 919,          /* overlay_placing  */
  YYSYMBOL_position_list = 920,            /* position_list  */
  YYSYMBOL_substr_list = 921,              /* substr_list  */
  YYSYMBOL_substr_from = 922,              /* substr_from  */
  YYSYMBOL_substr_for = 923,               /* substr_for  */
  YYSYMBOL_trim_list = 924,                /* trim_list  */
  YYSYMBOL_in_expr = 925,                  /* in_expr  */
  YYSYMBOL_case_expr = 926,                /* case_expr  */
  YYSYMBOL_when_clause_list = 927,         /* when_clause_list  */
  YYSYMBOL_when_clause = 928,              /* when_clause  */
  YYSYMBOL_case_default = 929,             /* case_default  */
  YYSYMBOL_case_arg = 930,                 /* case_arg  */
  YYSYMBOL_columnref = 931,                /* columnref  */
  YYSYMBOL_opt_slice_bound = 932,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 933,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 934,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 935,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 936, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 937,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 938, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 939,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 940,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 941,                /* target_el  */
  YYSYMBOL_except_list = 942,              /* except_list  */
  YYSYMBOL_opt_except_list = 943,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 944,          /* replace_list_el  */
  YYSYMBOL_replace_list = 945,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 946,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 947,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 948,      /* qualified_name_list  */
  YYSYMBOL_name_list = 949,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 950,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 951, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 952,                     /* name  */
  YYSYMBOL_func_name = 953,                /* func_name  */
  YYSYMBOL_AexprConst = 954,               /* AexprConst  */
  YYSYMBOL_Iconst = 955,                   /* Iconst  */
  YYSYMBOL_type_function_name = 956,       /* type_function_name  */
  YYSYMBOL_function_name_token = 957,      /* function_name_token  */
  YYSYMBOL_type_name_token = 958,          /* type_name_token  */
  YYSYMBOL_any_name = 959,                 /* any_name  */
  YYSYMBOL_attrs = 960,                    /* attrs  */
  YYSYMBOL_opt_name_list = 961,            /* opt_name_list  */
  YYSYMBOL_param_name = 962,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 963,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 964,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 965,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 966,               /* UpdateStmt  */
  YYSYMBOL_UpdateExtensionsStmt = 967,     /* UpdateExtensionsStmt  */
  YYSYMBOL_UseStmt = 968,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 969,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 970,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 971,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 972,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 973,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 974,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 975,            /* generic_reset  */
  YYSYMBOL_reset_rest = 976,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 977,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 978,                 /* set_rest  */
  YYSYMBOL_generic_set = 979,              /* generic_set  */
  YYSYMBOL_var_value = 980,                /* var_value  */
  YYSYMBOL_zone_value = 981,               /* zone_value  */
  YYSYMBOL_var_list = 982,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 983,         /* VariableShowStmt  */
  YYSYMBOL_describe_or_desc = 984,         /* describe_or_desc  */
  YYSYMBOL_show_or_describe = 985,         /* show_or_describe  */
  YYSYMBOL_opt_tables = 986,               /* opt_tables  */
  YYSYMBOL_var_name = 987,                 /* var_name  */
  YYSYMBOL_table_id = 988,                 /* table_id  */
  YYSYMBOL_ViewStmt = 989,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 990          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  872
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   73357

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  528
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  463
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2132
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3540

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   760


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   525,   526,   512,     2,     2,
     517,   518,   510,   508,   521,   509,   519,   511,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   527,   520,
     504,   506,   505,   522,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   515,     2,   516,   513,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   523,     2,   524,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   507,
     514
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   505,   505,   521,   533,   542,   543,   544,   545,   546,
     547,   548,   549,   550,   551,   552,   553,   554,   555,   556,
     557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
     577,   578,   579,   580,   581,   582,   584,     9,    18,    27,
      36,    45,    54,    63,    72,    85,    87,    93,    94,    99,
     103,   107,   118,   126,   130,   139,   148,   157,   166,   175,
     184,   192,   200,   209,   218,   227,   236,   253,   262,   271,
     280,   290,   303,   318,   327,   335,   350,   358,   368,   378,
     385,   392,   400,   407,   418,   419,   424,   428,   433,   438,
     446,   447,   452,   456,   457,   458,     7,    13,    19,    25,
       9,    13,    44,    45,    46,    50,    51,    55,    59,    60,
      64,    70,    75,    76,    77,    78,     6,    15,    25,    35,
      45,    55,    65,    75,    85,    95,   106,   117,   127,   140,
     141,     9,    23,    29,    36,    42,    49,    59,    63,    71,
      72,    73,    77,    86,    95,   102,   103,   108,   120,   125,
     150,   155,   160,   166,   176,   186,   192,   203,   214,   229,
     230,   236,   237,   242,   243,   249,   250,   254,   255,   260,
     262,   268,   269,   273,   274,   277,   278,   283,     7,    16,
      25,    46,    47,    50,    54,     7,    14,    22,     9,    19,
      29,    42,    43,     7,    17,    27,    40,    41,    45,    46,
      47,    51,    52,     7,     7,    14,    31,    51,    55,    65,
      69,    75,    76,     9,    17,    29,    30,    34,    35,    36,
      41,    42,    43,    48,    52,    56,    60,    64,    68,    72,
      76,    80,    84,    88,    92,    97,   101,   105,   112,   113,
     117,   118,   119,     7,    16,    28,    29,     2,     9,    15,
      21,    28,    35,    45,    46,    47,     2,     7,    21,    36,
      56,    57,    84,    85,    86,    87,    88,    89,    93,    94,
      99,   104,   105,   106,   107,   108,   113,   120,   121,   122,
     139,   146,   153,   163,   173,   185,   193,   202,   220,   221,
     225,   226,   230,   239,   262,   276,   283,   288,   290,   292,
     294,   297,   300,   301,   302,   303,   308,   312,   313,   318,
     325,   330,   331,   332,   333,   334,   335,   336,   337,   343,
     344,   348,   353,   360,   367,   374,   386,   387,   388,   389,
     393,   398,   399,   400,   405,   410,   411,   412,   413,   414,
     415,   420,   440,   469,   470,   474,   478,   479,   480,   484,
     488,   496,   497,   502,   503,   504,   508,   516,   517,   522,
     523,   527,   532,   536,   540,   545,   553,   554,   558,   559,
     563,   564,   570,   581,   594,   608,   622,   636,   650,   673,
     677,   684,   688,   696,   701,   708,   718,   719,   720,   721,
     722,   729,   736,   737,   742,   743,     9,    19,    29,    39,
      49,    59,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      95,    96,    97,    98,    99,   100,   105,   106,   111,   112,
     113,   118,   119,   120,     8,    20,    33,    46,    58,    70,
      86,    87,    91,    95,     7,     1,    30,    49,    61,    62,
      63,    67,    68,    73,    77,    82,    86,    94,    95,    99,
     100,   105,   106,   110,   111,   116,   117,   118,   119,   120,
     121,   122,   127,   135,   139,   144,   145,   150,   154,   159,
     163,   167,   171,   175,   179,   183,   187,   191,   195,   199,
     203,   207,   211,   215,   219,   227,   232,   233,   234,   235,
     236,   242,   246,    47,    48,    52,    53,    54,    72,    73,
      80,    88,    96,   104,   112,   120,   131,   132,   159,   164,
     172,   188,   205,   222,   239,   240,   259,   263,   267,   271,
     275,   285,   296,   306,   315,   326,   337,   349,   364,   382,
     382,   386,   386,   390,   390,   394,   400,   407,   411,   412,
     416,   417,   431,   438,   445,   455,   456,   459,   472,   473,
     474,   478,   489,   497,   502,   507,   512,   517,   525,   533,
     538,   543,   550,   551,   555,   556,   557,   561,   568,   569,
     573,   574,   578,   579,   580,   584,   585,   589,   590,   606,
     607,   610,   619,   630,   631,   632,   635,   636,   637,   641,
     642,   643,   644,   648,   649,   653,   655,   671,   673,   678,
     681,   689,   693,   697,   701,   705,   709,   716,   721,   728,
     729,   733,   738,   742,   746,   754,   761,   762,   767,   768,
     772,   773,   778,   780,   782,   787,   807,   808,   810,   815,
     816,   820,   821,   824,   825,   850,   851,   856,   860,   861,
     865,   866,   870,   871,   872,   873,   874,   878,   891,   898,
     905,   912,   913,   917,   918,   922,   923,   927,   928,   932,
     933,   937,   938,   942,   953,   954,   955,   956,   960,   961,
     966,   967,   968,   977,   983,   992,   993,  1006,  1007,  1011,
    1012,  1016,  1017,  1023,  1029,  1037,  1046,  1054,  1063,  1072,
    1076,  1081,  1092,  1106,  1107,  1110,  1111,  1112,  1115,  1123,
    1132,  1133,  1134,  1135,  1138,  1146,  1155,  1159,  1166,  1167,
    1171,  1180,  1184,  1209,  1213,  1226,  1240,  1255,  1267,  1280,
    1294,  1308,  1321,  1336,  1355,  1361,  1366,  1372,  1379,  1380,
    1388,  1392,  1396,  1402,  1409,  1414,  1415,  1416,  1417,  1418,
    1419,  1423,  1424,  1436,  1437,  1442,  1449,  1456,  1463,  1495,
    1506,  1519,  1524,  1525,  1528,  1529,  1532,  1533,  1538,  1539,
    1544,  1548,  1554,  1575,  1583,  1596,  1599,  1603,  1603,  1606,
    1607,  1609,  1614,  1621,  1626,  1632,  1637,  1643,  1647,  1654,
    1661,  1671,  1672,  1676,  1678,  1681,  1685,  1686,  1687,  1688,
    1689,  1690,  1695,  1715,  1716,  1717,  1718,  1729,  1743,  1744,
    1750,  1755,  1760,  1765,  1770,  1775,  1780,  1785,  1791,  1797,
    1803,  1810,  1832,  1841,  1845,  1853,  1857,  1865,  1877,  1898,
    1902,  1908,  1912,  1925,  1933,  1943,  1945,  1947,  1949,  1951,
    1953,  1958,  1959,  1966,  1975,  1983,  1992,  2003,  2011,  2012,
    2013,  2017,  2017,  2020,  2020,  2023,  2023,  2026,  2026,  2029,
    2029,  2032,  2032,  2035,  2035,  2038,  2038,  2041,  2041,  2044,
    2044,  2047,  2047,  2050,  2050,  2053,  2053,  2056,  2058,  2060,
    2062,  2064,  2066,  2068,  2070,  2072,  2074,  2076,  2078,  2080,
    2082,  2087,  2092,  2098,  2105,  2110,  2116,  2122,  2153,  2155,
    2157,  2165,  2180,  2182,  2184,  2186,  2188,  2190,  2192,  2194,
    2196,  2198,  2200,  2202,  2204,  2206,  2208,  2210,  2213,  2215,
    2217,  2220,  2222,  2224,  2226,  2228,  2233,  2238,  2245,  2250,
    2257,  2262,  2269,  2274,  2282,  2290,  2298,  2306,  2324,  2332,
    2340,  2348,  2356,  2364,  2372,  2376,  2392,  2400,  2408,  2416,
    2424,  2432,  2440,  2444,  2448,  2452,  2456,  2464,  2472,  2480,
    2488,  2508,  2530,  2541,  2548,  2562,  2570,  2578,  2598,  2600,
    2602,  2604,  2606,  2608,  2610,  2612,  2614,  2616,  2618,  2620,
    2622,  2624,  2626,  2628,  2630,  2632,  2634,  2636,  2638,  2640,
    2644,  2648,  2652,  2666,  2667,  2681,  2682,  2683,  2694,  2718,
    2729,  2739,  2743,  2747,  2754,  2758,  2765,  2769,  2786,  2790,
    2792,  2795,  2798,  2809,  2814,  2821,  2827,  2833,  2842,  2846,
    2853,  2861,  2869,  2880,  2900,  2936,  2947,  2948,  2955,  2961,
    2963,  2965,  2969,  2978,  2983,  2990,  3005,  3012,  3016,  3020,
    3024,  3028,  3038,  3047,  3069,  3070,  3074,  3075,  3076,  3080,
    3081,  3088,  3089,  3093,  3094,  3099,  3107,  3109,  3123,  3126,
    3153,  3154,  3157,  3158,  3166,  3174,  3182,  3191,  3201,  3219,
    3265,  3274,  3283,  3292,  3301,  3313,  3314,  3315,  3316,  3317,
    3331,  3332,  3335,  3336,  3340,  3350,  3351,  3355,  3356,  3360,
    3367,  3368,  3373,  3374,  3379,  3380,  3383,  3384,  3385,  3388,
    3389,  3392,  3393,  3394,  3395,  3396,  3397,  3398,  3399,  3400,
    3401,  3402,  3403,  3404,  3405,  3408,  3410,  3415,  3417,  3422,
    3424,  3426,  3428,  3430,  3432,  3434,  3436,  3450,  3452,  3457,
    3461,  3468,  3473,  3479,  3483,  3490,  3495,  3502,  3507,  3515,
    3519,  3525,  3529,  3538,  3549,  3550,  3554,  3558,  3565,  3566,
    3567,  3568,  3569,  3570,  3571,  3572,  3573,  3574,  3575,  3576,
    3577,  3578,  3579,  3589,  3593,  3600,  3607,  3608,  3624,  3628,
    3633,  3637,  3652,  3657,  3661,  3664,  3667,  3668,  3669,  3672,
    3679,  3689,  3703,  3704,  3708,  3719,  3720,  3723,  3724,  3727,
    3731,  3738,  3746,  3754,  3762,  3772,  3773,  3778,  3779,  3783,
    3784,  3785,  3789,  3798,  3806,  3814,  3823,  3838,  3839,  3844,
    3845,  3855,  3856,  3860,  3861,  3865,  3866,  3869,  3885,  3893,
    3903,  3904,  3907,  3908,  3911,  3915,  3916,  3920,  3921,  3924,
    3925,  3926,  3936,  3937,  3941,  3943,  3949,  3950,  3954,  3955,
    3958,  3969,  3972,  3983,  3987,  3991,  4003,  4007,  4016,  4023,
    4061,  4065,  4069,  4073,  4077,  4081,  4085,  4091,  4108,  4109,
    4110,  4113,  4114,  4115,  4118,  4119,  4120,  4123,  4124,  4127,
    4129,  4134,  4135,  4138,  4142,  4143,     7,    18,    19,    23,
      24,    25,    26,    27,    28,     7,    26,    50,    73,    80,
      85,    86,    87,    88,     8,    33,    62,    66,    67,    72,
      73,    78,    79,    83,    84,    89,    90,     7,    16,    25,
      34,    43,    52,     5,    12,    22,    23,     7,    15,    26,
      27,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,     7,    19,    33,     9,    16,    26,    33,    44,    45,
      50,    51,    52,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    91,    92,    93,    98,    99,   104,
     108,   116,   117,   122,   123,   124,   130,   135,   143,   144,
      10,    16,    22,    28,    38,    39,    47,    58,    70,    78,
      89,    95,    99,   103,   118,   125,   126,   127,   131,   132,
       7,    16,    24,    34,    35,    41,    42,    43,    46,    47,
      48,     8,    22,    36,    48,    56,    70,    71,    72,    73,
      74,    87,    88,    93,    94,    98,    99,     7,    18,    31,
      35,    42,    53,    54,    60,    61,     9,    19,     7,    16,
      28,    35,    42,    51,    52,    56,    57,     2,     7,    12,
      17,    26,    33,    43,    44,    51,     3,    10,    17,    24,
      31,    38,    45,    52,    61,    61,    63,    63,    65,    65,
      67,    68,    72,    73,     6,     8,    21,    34,    47,    65,
      87,    88,    89,    90,    11,    24,    37,    54,    55,    56,
      61,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P",
  "CENTURIES_P", "CENTURY_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY",
  "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
  "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
  "CROSS", "CSV", "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P",
  "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECADE_P",
  "DECADES_P", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION",
  "EXTENSIONS", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH",
  "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN",
  "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GROUP_P", "GROUPING",
  "GROUPING_ID", "GROUPS", "HANDLER", "HAVING", "HEADER_P", "HOLD",
  "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE",
  "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P",
  "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", "INHERITS",
  "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE",
  "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER", "INTERSECT",
  "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN",
  "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P",
  "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN",
  "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO",
  "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD",
  "MICROSECOND_P", "MICROSECONDS_P", "MILLENNIA_P", "MILLENNIUM_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING",
  "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OTHERS",
  "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED",
  "OWNER", "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING",
  "PASSWORD", "PERCENT", "PERSISTENT", "PIVOT", "PIVOT_LONGER",
  "PIVOT_WIDER", "PLACING", "PLANS", "POLICY", "POSITION", "POSITIONAL",
  "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE",
  "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUARTER_P", "QUARTERS_P", "QUOTE", "RANGE",
  "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE",
  "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE",
  "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE", "SCROLL", "SEARCH",
  "SECOND_P", "SECONDS_P", "SECRET", "SECURITY", "SELECT", "SEMI",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P",
  "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE",
  "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING", "VACUUM",
  "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR",
  "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW", "VIEWS",
  "VIRTUAL", "VOLATILE", "WEEK_P", "WEEKS_P", "WHEN", "WHERE",
  "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER",
  "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT",
  "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI",
  "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P",
  "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'?'", "'{'", "'}'", "'#'",
  "'$'", "':'", "$accept", "stmtblock", "stmtmulti", "stmt",
  "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "CallStmt", "CheckPointStmt", "opt_col_id",
  "CommentOnStmt", "comment_value", "comment_on_type_any_name",
  "qualified_name", "ColId", "ColIdOrString", "Sconst", "indirection",
  "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_database_flag", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "CreateFunctionStmt", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSecretStmt", "opt_secret_name",
  "opt_persist", "opt_storage_specifier", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "DropSecretStmt", "opt_storage_drop_specifier", "ExecuteStmt",
  "execute_param_expr", "execute_param_list", "execute_param_clause",
  "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "file_name", "opt_from_repo",
  "opt_ext_version", "PragmaStmt", "PrepareStmt", "prep_type_clause",
  "PreparableStmt", "RenameStmt", "opt_column", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause", "opt_select",
  "simple_select", "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "opt_materialized",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "by_name", "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "qualified_typename", "opt_array_bounds", "SimpleTypename",
  "ConstTypename", "GenericType", "opt_type_modifiers", "Numeric",
  "opt_float", "Bit", "ConstBit", "BitWithLength", "BitWithoutLength",
  "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "week_keyword",
  "quarter_keyword", "decade_keyword", "century_keyword",
  "millennium_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr_or_a_expr", "indirection_expr", "list_expr",
  "struct_expr", "func_application", "func_expr", "func_expr_windowless",
  "func_expr_common_subexpr", "list_comprehension", "within_group_clause",
  "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "opt_window_exclusion_clause", "qualified_row", "row",
  "dict_arg", "dict_arguments", "dict_arguments_opt_comma", "map_arg",
  "map_arguments", "map_arguments_opt_comma",
  "opt_map_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnref", "opt_slice_bound",
  "opt_indirection", "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt",
  "UpdateExtensionsStmt", "UseStmt", "VacuumStmt", "vacuum_option_elem",
  "opt_full", "vacuum_option_list", "opt_freeze", "VariableResetStmt",
  "generic_reset", "reset_rest", "VariableSetStmt", "set_rest",
  "generic_set", "var_value", "zone_value", "var_list", "VariableShowStmt",
  "describe_or_desc", "show_or_describe", "opt_tables", "var_name",
  "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3099)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2058)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    7298,   -42,   856, -3099, -3099,   277,   -42, 50018, 65441,   125,
     -42,   111,  2670, 52010, -3099, -3099, 46532, 40030,   -42, 55496,
   72822,   405,   274, 31496,   734, 55994, 55994, -3099, -3099, -3099,
   65441, 55496, 56492,   -42,   387, 65939, -3099,   -42, 33986, 52508,
     -13, -3099, 55496,    39,   357, 56990, 55496,  3374,   892,   388,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099,   450, -3099, -3099, -3099, -3099,   190,
   -3099, -3099, -3099, -3099, -3099,   146, -3099,   117,   170, 31496,
   31496,  1428,   406, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, 33488, -3099, -3099, -3099, -3099, 57488, 55496,
   57986, 53006, 58484, -3099,   671,   950, -3099,   203, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
     206, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099,   501, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099,   209, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
     439,   210, -3099, -3099, -3099,   512, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099,   968, -3099, -3099,   927,  3422, 55496,
     860,   896,   744, -3099, 58982, -3099,   768, 55496, -3099, -3099,
     113,   776,   921, -3099, -3099, 53504, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, 47030, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099,   933, -3099, -3099,   743, -3099,   195, -3099, -3099,   781,
     775, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
     891, -3099, -3099, -3099,   898, 66437, 59480, 59978, -3099,   767,
    1528, 41635, 72840, 30498, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099,   450, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, 55994, 65441, 55994,
     772,   792,  1153,   817, 31994,   822, 34485,   831,   859,  1192,
     868,   873,   885,   895,   357, 30997,   930,   439, -3099, 60476,
   60476,   -26,  2505, -3099, 60476, 60974, -3099,   949, -3099,   950,
   -3099, -3099, -3099,  1282, -3099,  -113,   948, -3099, 61472, 61472,
   61472,   981,  1265, -3099, -3099, -3099,   994, -3099, -3099,  1228,
   20107, 20107, 66935, 66935,   950, 66935,  1025, -3099, -3099,    73,
   -3099, -3099, -3099,  1428,  1012,   439, -3099, -3099, 52508, -3099,
   -3099,   282,  1369, 20107, 55496,  1027, -3099,  1035,  1027,  1047,
    1067,  1094, -3099,  7298, -3099, 55496,  1395,  1294, 54002,   395,
     395,  1571,   395,   922,  1044,  2697,  2910, -3099,  1796, -3099,
    1134,  1236,  1158,  1443, -3099,  1012,  1508,   760,  1319,  1530,
    5197,  1546,   804,  1556,   827,  1576,  1650, 20107, 47528,   439,
   -3099, 11199, 20107, -3099, -3099, -3099,  1316, -3099, -3099, -3099,
   -3099, -3099, 55496, 65441,  1230,  1233, -3099, -3099, -3099, -3099,
    1413,  1482, -3099,  1719, -3099, -3099,  1308, 61970, 62468, 62966,
   63464, 67433,  1693, -3099, -3099,  1632, -3099, -3099, -3099,  1312,
   -3099, -3099, -3099,   185, 67931,  1647,  1292,   105, -3099,  1649,
     112, -3099,  1667,  1534, 14867, -3099,  1472, -3099, -3099, -3099,
     357, -3099, -3099, -3099,   584, -3099, -3099, 43646, 72840,  1401,
    1318, -3099,  1282, 20107, 20107,  1320,  7205, 60476, 60974, 20107,
   55496, -3099, 20107, 24823,  1323, 20107, 20107, 12247, 20107, 29502,
   60476,  2505,  1325, -3099,   651, 55496,  1327, -3099,  1425,  1425,
     387, 31496,  1628, -3099,  1346,  1624,  1551, -3099, 31496,  1551,
    1359,  1336,  1630,  1551, -3099,   612,  1633,  1425, 34983,  1342,
   -3099,  1425,  1564, -3099, -3099, 55994,  1394, 20107, 14867, 70421,
    1823, -3099, -3099, -3099, -3099,  1629, 65441,  1349, -3099, -3099,
   -3099, -3099, -3099, -3099,    91,  1864,   197,  1865, 20107,   197,
     197,  1355,   215,   215, -3099,  1549,  1358, -3099,   216,  1361,
    1362,  1877,  1878,   183,   168,   977,   197, 20107, -3099,   215,
    1368,  1881,  1371,  1884,   151,   192, -3099,   218, 20107, 20107,
   20107,  1744, 20107, 10151, -3099, 55496,  1886, 47528,   558, -3099,
     439,  1379,   950, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
    1382, -3099,   198,  6120, -3099, -3099, -3099, -3099, -3099, -3099,
    1422, -3099, -3099, -3099, -3099,  1601, 20107, -3099, -3099,  1383,
    1628, -3099,   223, -3099, -3099,  1628, -3099, -3099, -3099, -3099,
   -3099,   248,  1808, 20107, 20107, 65441,   439, -3099, 68429, -3099,
   -3099, -3099, -3099, -3099, -3099,   657, -3099,   450, 45295,  1403,
    1407,  1027, 55496, 55496,  1887, -3099, -3099, -3099, -3099,  1035,
   52508,   157,  1712,   150,  1537, -3099, -3099,  1428,  1428, 15391,
     763,   207,    70, 15915, 20631,  1764,  1654,   235,   635,  1769,
   -3099,  1659,  1889, 24823, 20107, 20107,   922,  1044, 20107, -3099,
   -3099, -3099,  1710, 55496, 50516,   328,   816,  1435,  1518,  1438,
      85,  1857, -3099,  1440, -3099,  1523, 55496, 72368,   254, -3099,
    1897,   254,   254,   688,  1898,  1535,   263,  1707,   774,   321,
    3704, -3099,  1440, 52508,   271,   791,  1440, 55496,  1541,   830,
    1440,  1851, 65441,  1318, 41179,  1450, -3099, -3099, -3099,   176,
   14867, -3099,  1049,  1225,  1281,   421,   191,  1299,  1331, 14867,
    1411,  1432,   182,  1447,  1484,  1510,  1590,  1611,  1690,  1698,
    1704,   166,  1706,  1711,  1720,  1724,  1726,  1733, -3099,  1740,
     186,  1750,   228, 14867,  1753, -3099,   196, -3099, 45295,    30,
   -3099, -3099,  1761, 45494, -3099,  1759,  1558,  1560, 65441,  1513,
   55496,   762,  1607,  1841,  1895, 70904, 55496,  1721,  3704,  1722,
    1481,  1959,  1727,  1233,  1731,  1490,  1734, -3099,  1809, -3099,
   68927, 47528, -3099, -3099, -3099, -3099, -3099,  1858,  1843, 65441,
   47528,  1497, -3099, -3099, 65441, -3099, 55496, 55496, -3099, 55496,
   65441, -3099,   706, 45295,  2004,  1026, 72840, 49022, -3099, -3099,
   -3099, -3099,   632,   975, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099,   950, 47528, -3099,  3093,  1394, 44266,  1501,
   20107, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099,  1502,  1849, -3099, -3099,  6046,  1505, 44561,  1509,
   24823, 24823,   439,  1655, -3099, -3099, 24823,  1512, 49520, 44180,
    1514,  1519, 44785, 16439, 20107, 16439, 16439, 44853, -3099,  1520,
   44907, 60476,  1522, 55496, 54500, -3099, -3099, -3099, 20107, 20107,
    2505, 54998,  1555, -3099, 31496, -3099,  1811, 31496, -3099, -3099,
    2377, -3099, 31496,  1815, 20107, 31496, -3099,  1760,  1762,  1529,
   31496, -3099, 55496,  1531, 55496, -3099, -3099, -3099, -3099, 55994,
   -3099, 45295, -3099,  1533,   714,  1526, -3099, -3099, -3099, -3099,
   -3099,  1583, -3099,  1583,  1583, -3099, -3099, -3099, -3099,  1542,
    1542,  1543, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099,  1544,   977, -3099,  1583, -3099,
    1542, -3099, -3099, -3099, -3099, -3099, -3099, -3099, 72368, -3099,
   -3099, -3099, -3099,   408,   627, -3099,  1545, -3099, -3099, -3099,
   -3099,  1550, -3099,  1532,  2011, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, 41329,   785,  1542,  2530, -3099, -3099,
   20107, 20107, -3099, -3099,  1559, 45295,  1580, -3099, -3099, 20107,
   20107, -3099, -3099, -3099, -3099,  2049, -3099, 20107,  1583,  1583,
   -3099,  8001, -3099, 39467, 16963,  1634,  1646,  2049, -3099,  2049,
   -3099,  8001,  2067,  2067, 37473, -3099,  1725, 44974, -3099,  1561,
    1538,  7751,  1566,  1552, -3099,  1567,  1569, -3099, -3099, 42152,
     177,   439,   439, 20107, -3099,  2049, 20107, 44336, 44336, -3099,
     205, 70421, 20107, 20107, 20107, 20107, 20107, 20107, 20107, 20107,
   46034,  1653,   180, 65441, 20107, 20107,  1573,  1057, -3099, 20107,
    1814, -3099,  1574, 20107,  1666,   253, 20107, 20107, 20107, 20107,
   20107, 20107, 20107, 20107, 20107, -3099, -3099, 28491,   230,   572,
    1918,  1939,   -41,   514, 20107,  1931, 11199, -3099,  1931, -3099,
   -3099, -3099, -3099, -3099,   224, -3099, -3099,  1533,  1533, -3099,
   65441, -3099, 55496,   282, 51512, 20107, -3099, -3099,  1584,  1588,
     139, -3099,  1651, -3099, -3099, 55496, -3099, 37971,  1892, -3099,
     292,  1586, -3099, 44141,  1845,  1892,  1428, -3099, -3099, 25871,
    1723,  1894,  1825, -3099, -3099,  1810,  1813, -3099,  1603, 45542,
   21155, 21155, -3099,  1420, 45295,  1429, -3099, -3099, -3099, -3099,
   -3099, -3099,    93, -3099, 55496,    79, 35481, -3099,  1606,   134,
   -3099,  1672,  1941,  1909,  1764,   635,  1613, -3099,  1002,  1615,
   69425, 55496,  1906,  1859,  1910,   322, 70421, -3099, -3099, -3099,
   -3099, 55496, 65441, 63962, 69923, 48026, 55496, 47528, -3099, -3099,
   -3099, -3099, 55496,  1524, 55496,  8080, -3099, -3099, -3099, -3099,
     254, -3099, -3099, -3099, -3099, -3099, 65441, 55496, -3099, -3099,
     254, 65441, 55496,   254, -3099,  1086, 55496, 55496, 55496, 55496,
    1137, 55496, 55496,   950, -3099, -3099, -3099, 21679,    38,    38,
    1842, 12771,   144, -3099, 20107, 20107,   169,   281, 65441,  1807,
   -3099, -3099,   786,  1855,   174, -3099,  1675, 55496, 55496, 55496,
   55496, 65441, 55496,   672, -3099, -3099, -3099, -3099, -3099,  1631,
   -3099,  1641,  1995,  3704, -3099,  1998, 51014,   167,  1622,  1999,
    1691,  2020, 13295,  2133,  2027,  2185,  1673,  1914, -3099, -3099,
    1904, -3099, 65441,  2192, -3099,   105, -3099, 47528, -3099,   112,
   -3099,  1911,   221, -3099, 14867, 20107, -3099, -3099, -3099, -3099,
   -3099, -3099,  1318, 29000, -3099,   808, -3099, -3099,  2156,   950,
    2156,   548, -3099, -3099,  2156, -3099,  2140,  2156, -3099, -3099,
   70421, -3099,  7838, -3099, 20107, 20107, -3099, 20107,  2032, -3099,
    2194,  2194, 70421, 24823, 24823, 24823, 24823, 24823, 24823,   677,
    1368, 24823, 24823, 24823, 24823, 24823, 24823, 24823, 24823, 24823,
   26395,   147, -3099, -3099,   825,  2167, 20107, 20107,  2041,  2032,
   20107, -3099, 70421,  1692, -3099,  1694,  1695, 20107, -3099, 70421,
   -3099, 55496,  1696,   -18,     8, -3099,  1699,  1700, -3099,  1628,
   -3099,   910,   947, 55496,  3685,  5406,  5532, -3099, -3099, 20107,
    2037,  2377, 31496, -3099, 20107,  1705, -3099, -3099, 31496,  2054,
   -3099, -3099, -3099, 35979,  2377, 70421,   833, -3099, 55496, 70421,
     835, -3099, -3099, 20107, -3099, 14867,  2220, 70421,  2189, 65441,
   65441,  2221,  1714,  1715,  2049,  1801, -3099,  1804,  1806,  1816,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   70421, -3099, -3099, -3099, -3099,   257, -3099, -3099, -3099, -3099,
    1735,  1729, 20107, 20107,    83, -3099, 39973,  1737,  1739,  4558,
   -3099,  1745, -3099,  1718, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099,  1741, -3099,  1743, -3099,  1747,  1752,  1767,  1751,  1755,
   55496, -3099, 22203, -3099, 65441, -3099, -3099, 20107, 20107, 55496,
   -3099,  1744, -3099,  1758,  1763, 40012, -3099, -3099, -3099,   265,
     769,  6007,   514,  3071,  3071,  3071,  8001, -3099, -3099, -3099,
    1771, -3099, 24823, 24823, -3099,  5492,  3418, 10151, -3099, -3099,
    2106, -3099,  1109, -3099,  1773, -3099, -3099,  4883, -3099, 39467,
    7397, 20107,   181, -3099, 20107,  1573, 20107,  1848,  3071,  3071,
    3071,   293,   293,   265,   265,   265,   769,   514, -3099, -3099,
   -3099,  1774, 20107, 47528, -3099,  1775,  1776,  2125,  1371, 20107,
   -3099, -3099, 31496,  1555,    30,  1555,  2049, 44336, -3099,  1035,
   -3099, -3099,  1035, 45295, 55496, -3099, -3099,  2034,  1777, 31496,
    1820,  2246,  2239, 65441, -3099, -3099,  1778,  1931,  1794, -3099,
   -3099,  1800, 20107,  2664,  1800, -3099,  1892,    -1,  2012,  1043,
    1043,  1420,  2013, -3099, -3099,  1852, -3099, -3099, -3099, 20107,
   13819,  1434, -3099,  1437, -3099, -3099, -3099, -3099, -3099,  1784,
   -3099,  2064, -3099, 55496, -3099, -3099, 24823,  2250, 20107, 36477,
    2251,  2045, -3099, -3099, -3099,  1882,  1440, 20107,  2039, -3099,
     109,  1795,  2163,   344,  2113, 65441, -3099,   298,   330, -3099,
     794,  2168,   221,  2173,   221, 47528, 47528, 47528,   847, -3099,
   -3099, -3099,   950, -3099,  -114,   877, -3099, -3099, -3099, -3099,
    1896,  1032,  3704,  1440, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099,   319,  1071,  1440,  1899, -3099,  1905, -3099,  1907,  1136,
    1440, -3099, -3099,  1650,  8577, 45295,   394,   144,   144,   144,
   14867, -3099,  2044,  2046,  1817, 45295, 45295,   159, -3099, -3099,
   -3099, -3099,  1826, -3099,   213, -3099, 65441, -3099, -3099, -3099,
    1807,  1895, 55496,  3704,  1827,  2297,  1233,  1490,  1809, -3099,
    1985,   853,  2327, -3099, 65441, 55496, 55496, 55496, 64460, -3099,
   -3099, -3099,  1830,  1824, -3099,     0,  2061,  2060, 55496,  1872,
   55496,  1438,  2314, 55496, -3099,   879, 17487, 65441, -3099, 47528,
    2206, 55496,  1843, -3099, -3099, -3099, -3099, 65441, -3099, -3099,
   45295, -3099, -3099, 20107, 48524, -3099, -3099, -3099, -3099, -3099,
   -3099, 47528, -3099,   950, -3099,   950,  2081, 65441, 42650,   950,
   43148,   950,  1844, -3099, 45295, 40051, 45295,  2041, -3099,   149,
    2194,  2243,  2243,  2243,  3589,  2191,   332,  1850,  2243,  2243,
    2243,   278,   278,   149,   149,   149,  2194,   147,   949, 49520,
    1854, -3099, 45295, 45295, -3099, -3099,  1847, -3099, -3099, -3099,
   -3099,  1863,  1866, -3099, -3099, -3099, -3099, -3099, -3099, 65441,
    1097,  1555,   -13,   -13,   -13,   -13, -3099, 55496, 55496, 55496,
   45295,  2307,  2182, -3099,  2377, 45295, 55496, -3099, 27443, 55496,
   -3099,  2202, -3099,  2292, -3099, 55496,   886, -3099, -3099, -3099,
     888,  1860,  1715, 70421,   890,   902, -3099,  2049,   145,  1870,
    1516,   914,   855,  1436, -3099, 52508, -3099, -3099,  1875, 45106,
   20107, -3099,  2234, -3099, -3099, -3099, 20107, 20107, -3099, 39467,
   -3099, -3099, -3099, -3099,   466,   466,  1876, 10151, 45173, -3099,
    2196, 40098, 45295, -3099,  1725, -3099, -3099, 44336, 20107,   533,
    2371, 20107,  1880, 20107,  2227, -3099, -3099,  1888, -3099, -3099,
   70421, 20107,  1883,  5141, 24823, 24823,  6102, -3099,  6631, 20107,
   10151, -3099, 41218,  1879,  1893,  1842, 18011, -3099,  2102,  1900,
   -3099,  2037,   144,  2037,  1902, -3099, -3099, -3099, -3099,  2530,
   -3099, 20107,  2043, 65441,   517,    59,   964, -3099,   439, 37971,
    1820, 20107,   279, -3099, -3099,  1901, -3099,  1800, -3099, -3099,
   -3099,  2118, -3099, -3099, -3099, 55496, -3099,  1912, -3099, 35481,
    2231, 10675, -3099, 35481, 55496, 55496, 40137,  2261, -3099, 65441,
   65441, 65441, -3099, 65441,  1903,  1913,   990,  1908,   348, -3099,
    2153,   990,  2240,   644,  1438,   263,  2080,    27, -3099, -3099,
   -3099,  1973, 55496, -3099, 65441, -3099, -3099, -3099, -3099, -3099,
   48026, -3099, -3099, 38968, 47528, -3099, 47528, 55496, 55496, 55496,
   55496, 55496, 55496, 55496, 55496, 55496, 55496,  1318, 20107, -3099,
   20107,  1916,  1920,  1922,  1842, -3099, -3099, -3099,   173, -3099,
    1924, -3099, -3099, -3099,   321, -3099,   213,  1925, -3099, 51014,
    3422,  1691,  2382,  1928,  1895,   359, 64943, -3099,  1929,  1927,
     970,  3704,  1932,  2383, -3099,   167, 51014, -3099, -3099, -3099,
    2331, -3099,   767,   225, -3099,  1233, -3099,  3422,  1490, -3099,
    3422, 45295,  1809,   978, 65441,  1972, -3099,   221,   984, -3099,
   -3099, -3099, -3099, -3099, 65441,  1930, -3099,  1930, -3099, -3099,
    1930, -3099, -3099, -3099, -3099, 24823,  2274,  1933, 70421, -3099,
   -3099, 55496, -3099, -3099, -3099,   996,  1943,  2037, 55496, 55496,
   55496, 55496, -3099, -3099, -3099, 18535, 20107,  1979, -3099,  1950,
   11723,  2271, -3099, 26919, -3099, -3099,  1953, 35979, 65441, -3099,
   -3099, -3099, -3099,  2049, -3099, -3099, 65441, -3099,  1958, -3099,
    1960, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   20107, 45295, -3099, 45295, -3099, -3099, -3099, -3099, -3099,  6654,
   -3099,  1954,  1966, 65441, 20107, -3099, -3099, -3099,   455, 20107,
   20107,  5492, -3099, 41331, 20107, 70421,  1039,  5492,   244, 20107,
    3786,  4532, 20107, 20107,  6722, 40490, -3099, 22727, 14343, -3099,
    1968, 20107, 40576, 38469, -3099, 31496,  2182,  1969,  2182,   950,
    1971, 45295, 20107, -3099, -3099, -3099, -3099,  2014,   390, 32990,
    2201, -3099,  1986, 65441, -3099,  2043, 45295, -3099, -3099, 39467,
   -3099, -3099, -3099, -3099, -3099,  2437,  1554,  1980,  1984, -3099,
    1354, -3099, -3099, 65441,  1989, -3099,  1990,   990, -3099, 65441,
    2018, -3099,   331,  2298,   140, -3099, 20107, -3099,  2392,  2470,
    2153,  1994, 65441, 55496, 24823, -3099,   581,   204, -3099,  2285,
   55496,  2018,  2428, -3099, -3099, -3099,   348, -3099,  2328,  2241,
   -3099,   254, -3099, 20107,   348,  2244,   260, 65441, -3099, -3099,
    2024, -3099, 70421,   221,   221, -3099,  1526,  2000,  2006,  2007,
    2008,  2009,  2015,  2017,  2021,  2022,  2026, -3099,  2029,  2030,
    2033,  2036,  2042,  2052,  2058,  2065,  1544,  2068, -3099,  2071,
    1901,  2072,  2075,  2079,  2084,  2086, 71387,  2088,  2089,  2090,
    2092,  1545,  2095,   632,   975, -3099, -3099, -3099, -3099,  2096,
   -3099, -3099, -3099,  1292,  2025, -3099, -3099, -3099,  2099, -3099,
    2108, -3099, -3099, -3099, -3099, -3099, -3099,  2035,  2040, -3099,
   -3099, -3099,   144,  2019,  2047, 65441,  1318,   116, 65441,  2050,
    1872,  2493, 19059, 47528,   867,  2268,  2062, -3099,   950,  1691,
   -3099, 51014,  2684,   669,  2060, -3099,   250,  1872, -3099,  2453,
    1691,  2083,  2543, -3099,  2082, -3099,  2310, 65441,  2101, -3099,
   -3099, 48524,  1930,  4510, 24823, 70421,  1048,  1055, -3099,  2611,
    2267,  2182, -3099, -3099, -3099, -3099, -3099,  2105,   -49,  2107,
    9627,  2104, -3099, -3099, -3099, -3099, -3099, -3099, 45295, 45295,
   65441,  2290, -3099, -3099,  2109,  2116, 36975,  2576,  2119, -3099,
   -3099,  2442, -3099, 30000, -3099,  1715,  2120,  1715, 70421,  1715,
   -3099, -3099, 45295, 20107, -3099, -3099, 41257,  2455,  5492,  5492,
   41331,  1061, -3099,  5492, 20107, 20107,  5492,  5492, 20107, -3099,
    9102,   402, -3099,  1072, -3099, 40615, -3099, 71870, -3099, -3099,
    1979,   950,  1979, -3099, -3099,  2124, -3099, -3099, -3099,  2186,
   -3099, -3099,  1074,  2558,  2043, 20107, -3099, -3099,  2134, 35481,
   -3099, -3099, -3099, -3099, 35481,   990, -3099,  2304,  2018,  2137,
   -3099, -3099, -3099, -3099, -3099, -3099, 40654, -3099,    33, 20107,
   -3099,  1284,  3589, -3099, -3099, -3099, -3099,  2018,  1233, -3099,
   55496,  2615,  2513, -3099, -3099, 45295, -3099, -3099,  2049,  2049,
   -3099, -3099,  2292, -3099, -3099,  2147, -3099, -3099,  1292,   335,
   38968, 55496, 55496, -3099, -3099,  2150, -3099, -3099, -3099, -3099,
   -3099,   321,  2545,  1078,   167, -3099,  3422,  3422, 45295,  1080,
   55496,  2521, 51014, -3099,  2634,  2164, 55496,  1872,   314,   314,
   -3099,  2312, -3099,  2317, -3099, -3099,  2647,   324, -3099, 19583,
   47528, 55496, -3099, -3099, 32492, -3099,  4510,  1087, -3099, -3099,
    2170,  2172, -3099,  1979, 20107,  2176, 20107, -3099, 23251,  2650,
    2174, -3099, 20107,  2247, 27967, -3099, 20107, -3099, 55496, 60476,
    2179, 60476, -3099, -3099, -3099, -3099, -3099, 20107, -3099,  5492,
    5492,  5492, 20107, -3099, 20107, -3099, -3099, -3099,  2387,  2290,
   -3099,  2290, 20107,  3422,   439,  2906, 65441,   -17, -3099, 45295,
   -3099, -3099, -3099, 55496, -3099, 47528, -3099,   990,   386,  2181,
   20107, 40740,  2420, -3099, -3099,  2452, -3099,  2512, -3099,  2249,
     497,  2265, -3099, -3099, -3099, -3099,  1318,   950,  1691,  2060,
    2083, -3099, -3099,  2193, 55496,  3422,   167,   767, -3099, -3099,
   -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099, -3099,
   -3099,  3422,  2638,  2422,  2639,  3422, 45295,  1089,  1972, 20107,
      97, -3099,  1131,  2636, -3099, -3099,  2708,  2290,  2200, 23251,
    2203, -3099,  2205, 65441, 45295,  2348, -3099, -3099,  2208, -3099,
   -3099, 20107, -3099, 41657,  2207,  2215,  2665,  1842,  2247,  2247,
   -3099,   390, -3099, -3099,  2642, 32492,  2599,  1233,   990,  2237,
    1147, -3099, -3099, -3099, -3099, -3099,  3704, -3099, 41093,  2464,
     194,  2454,  2181, 20107, -3099,  2303, -3099, -3099, -3099,  2710,
   -3099, -3099, 51014,  2242,  2083,  2060,  1872,  2083,  2465, -3099,
    2468, -3099, -3099,  2245, 41132, 65441, 65441,  1691, 32492, 65441,
    2248,  2247, -3099,  2252, -3099, -3099, -3099, 54500, -3099,  2253,
   -3099, -3099, -3099, 20107,   123, -3099, -3099,  2295, 55496,  1168,
      37,  2452, 38968, -3099, 47528,  1278,   386,  2559, -3099, -3099,
   -3099, -3099,   300,  2475, -3099,  2478, -3099, 45295, -3099,  3422,
   51014, -3099, -3099, -3099, -3099, -3099, -3099, 32492,  2636, -3099,
     292, -3099,  1555, -3099,   292, -3099, -3099, -3099, -3099, -3099,
    1514, 23775, 23775, 23775,  2254,  3422, -3099,  1555, -3099,  2380,
    2454, -3099, -3099, -3099, -3099, -3099,   492,   492,  2651, -3099,
    2322, -3099,  2083,  1176, 65441,  1800, -3099,  1800, 25347,  2410,
     175, 44219,  2632, -3099,  2632,  2632, -3099, -3099, -3099, 37971,
   -3099, -3099,  2756, -3099,   202, -3099, -3099, -3099,  1691,   292,
   -3099, -3099,  2748, -3099, -3099, -3099, -3099, -3099,   214, -3099,
   -3099, -3099,  1555,   990, -3099, -3099, -3099,  1555,  1800, 24299,
    2417, -3099,  2488, -3099, -3099, -3099, -3099, -3099, -3099, -3099
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     156,   265,     0,  1392,  1391,  1464,   265,     0,  1326,     0,
     265,   488,   403,     0,  1485,  1484,     0,   208,   265,     0,
     156,     0,     0,     0,     0,     0,     0,   551,   554,   552,
       0,     0,     0,   265,   591,     0,  1486,   265,     0,     0,
     583,   553,     0,  1442,     0,     0,     0,     0,     0,     2,
       4,     5,     6,     7,     8,     9,    23,    10,    11,    12,
      13,    19,    14,    15,    16,    17,    18,    20,    21,    22,
      25,    24,    26,    27,  1349,    28,    29,    30,    31,     0,
      32,    33,    34,    35,    36,   527,   513,   596,   526,     0,
       0,   155,   695,   534,    37,    39,    38,    40,    41,    42,
      43,    44,  1487,  1483,    45,   264,   263,   257,     0,     0,
       0,     0,     0,  1463,     0,     0,   258,   112,  1511,  1512,
    1513,  1514,  1515,  1516,  1517,  1518,  1519,  1520,  1521,  1888,
    1522,  1523,  1524,  1525,  1526,  1889,  1527,  1528,  1529,  1834,
    1835,  1890,  1836,  1837,  1530,  1531,  1532,  1533,  1534,  1535,
    1536,  1537,  1538,  1539,  1838,  1839,  1540,  1541,  1542,  1543,
    1544,  1840,  1891,  1841,  1545,  1546,  1547,  1548,  1549,  1892,
    1550,  1551,  1552,  1553,  1554,  1555,  1556,  1557,  1558,  1893,
    1559,  1560,  1561,  1562,  1563,  1564,  1565,  1566,  1567,  1568,
    1842,  1569,  1570,  1843,  1571,  1572,  1573,  1574,  1575,  1576,
    1577,  1578,  1579,  1580,  1581,  1582,  1583,  1584,  1585,  1586,
    1587,  1588,  1589,  1590,  1591,  1592,  1593,  1594,  1595,  1596,
    1597,  1844,  1598,  1599,  1600,  1601,  1602,  1603,  1845,  1604,
    1605,  1606,  1846,  1607,  1608,  1609,  1894,  1895,  1610,  1611,
    1847,  1897,  1612,  1613,  1848,  1849,  1614,  1615,  1616,  1617,
    1618,  1619,  1620,  1621,  1622,  1898,  1623,  1624,  1625,  1626,
    1627,  1628,  1629,  1630,  1631,  1632,  1633,  1634,  1899,  1850,
    1635,  1636,  1637,  1638,  1639,  1851,  1852,  1853,  1640,  1900,
    1901,  1641,  1902,  1642,  1643,  1644,  1645,  1646,  1647,  1648,
    1903,  1649,  1904,  1650,  1651,  1652,  1653,  1654,  1655,  1656,
    1657,  1854,  1658,  1659,  1660,  1661,  1662,  1663,  1664,  1665,
    1666,  1667,  1668,  1669,  1670,  1671,  1672,  1673,  1674,  1675,
    1676,  1677,  1855,  1906,  1856,  1678,  1679,  1680,  1857,  1681,
    1682,  1907,  1683,  1858,  1684,  1859,  1685,  1686,  1687,  1688,
    1689,  1690,  1691,  1692,  1693,  1694,  1860,  1908,  1695,  1909,
    1861,  1696,  1697,  1698,  1699,  1700,  1701,  1702,  1703,  1704,
    1705,  1706,  1707,  1708,  1862,  1910,  1709,  1710,  1863,  1711,
    1712,  1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,
    1722,  1723,  1724,  1864,  1725,  1726,  1727,  1728,  1729,  1730,
    1731,  1732,  1733,  1734,  1735,  1736,  1737,  1738,  1739,  1740,
    1741,  1742,  1743,  1911,  1744,  1745,  1746,  1865,  1747,  1748,
    1749,  1750,  1751,  1752,  1753,  1754,  1755,  1756,  1757,  1758,
    1759,  1760,  1761,  1762,  1763,  1764,  1765,  1866,  1766,  1767,
    1912,  1768,  1769,  1867,  1770,  1771,  1772,  1773,  1774,  1775,
    1776,  1777,  1778,  1779,  1780,  1781,  1782,  1868,  1783,  1869,
    1784,  1785,  1786,  1914,  1787,  1788,  1789,  1790,  1791,  1792,
    1870,  1871,  1793,  1794,  1872,  1795,  1873,  1796,  1797,  1874,
    1798,  1799,  1800,  1801,  1802,  1803,  1804,  1805,  1806,  1807,
    1808,  1809,  1810,  1811,  1812,  1813,  1814,  1875,  1876,  1815,
    1915,  1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,  1824,
    1825,  1826,  1827,  1828,  1829,  1877,  1878,  1879,  1880,  1881,
    1882,  1883,  1884,  1885,  1886,  1887,  1830,  1831,  1832,  1833,
       0,   113,   114,  1273,  1494,     0,  1251,   112,  1847,  1854,
    1868,  1324,  1325,   113,     0,   260,   487,     0,     0,     0,
       0,     0,     0,   210,     0,   397,   396,     0,  1315,   402,
       0,     0,     0,   116,   108,  1711,   115,  1250,   106,   122,
    2058,  2059,  2060,  2061,  1945,  2062,  2063,  2064,  2065,  1946,
    2066,  1947,  1948,  1949,  1950,  1951,  1952,  2067,  2068,  2069,
    1954,  1953,  2070,  1955,  2071,  1956,  2072,  1957,  1958,  2073,
    2074,  1959,  1565,  1960,  1961,  2075,  2076,  2077,  2078,  2079,
    2080,  2081,  2082,  2083,  1962,  1963,  2084,  2085,  1964,  2086,
    2087,  1965,  2088,  1966,  1967,  1968,  2089,  2090,  1969,  1970,
    2091,  1971,  2092,  2093,  1972,  1973,  1976,  1974,  2094,  1975,
    2095,  1977,  1978,  1979,  2096,  2097,  1980,  1981,  2098,  1982,
    1983,  1984,  1985,  1986,  2099,  1987,  2100,  1988,  1989,  2101,
    2102,  2103,  2104,  2105,  1991,  1990,  1992,  1993,  2106,  2107,
    2108,  2109,  1994,  1995,  1996,  2110,  2111,  1997,  2112,  2113,
    1998,  1999,  2114,  2000,  2001,  2115,  2002,  2003,  2116,  2004,
    2005,  2117,  2118,  2119,  2006,  2120,  2007,  2008,  2121,  2122,
    2009,  2010,  2123,  2011,  2124,  2125,  2126,  2127,  2012,  2013,
    2128,  2014,  2129,  2130,  2131,  2132,  2015,  2016,  2017,  2018,
    2019,  2020,  2021,  2022,  2023,  2024,  2025,  1460,   124,   123,
     125,     0,   421,   422,     0,   432,     0,   414,   419,   415,
       0,   441,   434,   442,   423,   413,   435,   424,   412,   209,
       0,   443,   429,   417,     0,     0,     0,     0,   261,   222,
     403,     0,   156,     0,  1353,  1354,  1355,  1356,  1357,  1358,
    1363,  1359,  1360,  1361,  1362,  1364,  1365,  1366,  1367,  1368,
    1344,  1349,  1369,  1370,  1371,  1372,  1373,  1374,  1375,  1376,
    1377,  1378,  1379,  1380,  1381,  1382,  1383,     0,  1326,     0,
       0,  1840,  1891,  1845,     0,  1858,     0,  1861,  1862,  1747,
    1869,  1872,  1873,  1874,  1875,     0,   765,   115,   110,   749,
       0,   529,   699,   709,   749,   754,  1036,   777,  1037,     0,
     117,  1424,  1423,  1425,  1420,   195,  1288,  1472,  1612,  1652,
    1764,  1870,  1793,  1490,  1473,  1467,  1471,   262,   590,   588,
       0,  1222,  1612,  1652,  1751,  1764,  1870,  1400,  1404,     0,
     259,  1492,  1477,     0,  1478,   115,   535,   582,     0,   266,
    1441,     0,  1446,     0,  1727,   562,   565,  1282,   563,   527,
       0,     0,     1,   156,  1348,  1456,     0,   162,     0,   586,
     586,     0,   586,     0,   519,     0,     0,   527,   522,   526,
     696,  1489,  1870,  1793,  1476,  1479,  1621,     0,     0,  1621,
       0,  1621,     0,  1621,     0,     0,  1466,  1206,     0,  1252,
     118,     0,     0,  1337,  1333,  1338,  1334,  1339,  1332,  1331,
    1340,  1336,     0,     0,     0,   368,   401,   400,   399,   398,
     403,  1621,  1299,     0,   450,   451,     0,     0,     0,     0,
       0,   206,  1310,   109,   107,  1621,  1461,   430,   431,     0,
     420,   416,   418,     0,     0,  1621,  1277,   440,   436,  1621,
     440,  1244,  1621,     0,     0,   214,     0,   396,  1346,  1384,
    2012,  1385,  1386,  1398,     0,  1399,  1389,  1352,   156,     0,
     486,  1323,  1425,     0,     0,     0,  1157,   749,   754,     0,
       0,   767,     0,  1177,     0,  1183,     0,     0,     0,   749,
     534,     0,   709,   766,   111,     0,   747,   748,   637,   637,
     591,     0,   572,   759,     0,     0,   762,   760,     0,   762,
       0,     0,     0,   762,   758,   717,     0,   637,     0,   747,
     750,   637,     0,   769,  1343,     0,  1428,     0,     0,     0,
       0,  1470,  1468,  1469,  1474,     0,     0,     0,  1254,  1256,
    1257,  1125,  1267,  1015,     0,  1835,  1836,  1837,  1198,  1838,
    1839,  1841,  1842,  1843,   974,  1585,  1844,  1265,  1846,  1848,
    1849,  1851,  1852,  1853,  1854,  1855,  1856,     0,  1266,  1859,
    1690,  1864,  1865,  1867,  1870,  1871,  1264,  1876,     0,     0,
       0,  1233,  1148,     0,  1014,     0,     0,     0,  1199,  1207,
    1007,     0,     0,   813,   814,   835,   836,   815,   841,   842,
     844,   816,     0,  1229,   908,  1003,  1217,  1012,  1020,  1016,
    1055,  1018,  1035,  1021,  1092,  1013,     0,  1019,  1005,  1225,
     572,  1223,     0,  1006,  1253,   572,  1221,  1403,  1401,  1407,
    1402,     0,     0,     0,     0,     0,   111,  1448,  1449,  1440,
    1438,  1439,  1437,  1436,  1443,     0,  1445,  1349,  1143,  1145,
       0,   564,     0,     0,     0,   516,   515,   517,     3,  1282,
       0,     0,     0,  1602,     0,   584,   585,     0,     0,     0,
       0,     0,     0,     0,     0,   680,   611,   612,   614,   677,
     681,   689,     0,     0,     0,     0,     0,   523,     0,  1488,
    1482,  1480,     0,     0,     0,   140,   140,     0,     0,     0,
       0,     0,   100,    49,    93,     0,     0,     0,     0,   236,
     249,     0,     0,     0,     0,     0,   246,     0,     0,   229,
     223,   225,    51,     0,   140,     0,    47,     0,     0,     0,
      53,  1464,     0,   486,  1205,     0,   120,   121,   119,   112,
       0,  2026,  1888,  1889,  1890,  1891,  1841,  1892,  1893,     0,
    1894,  1895,  1847,  1897,  1898,  1899,  1900,  1901,  1902,  1903,
    1904,  1854,  1906,  1907,  1908,  1909,  1910,  1911,  2052,  1912,
    1868,  1914,  1874,     0,  1915,  1028,   113,  1270,  1151,   596,
    1149,  1283,     0,     0,  1335,     0,     0,     0,     0,   484,
       0,     0,     0,     0,  1295,     0,     0,  1621,   202,  1621,
     368,     0,  1621,   368,  1621,     0,  1621,   207,   211,  1309,
    1312,     0,   433,   428,   426,   425,   427,  1621,   255,     0,
       0,  1278,   438,   439,     0,   407,     0,     0,   409,     0,
       0,   219,     0,   217,     0,   403,   156,     0,   230,  1394,
    1395,  1393,     0,     0,  1351,   233,  1388,  1397,  1387,  1396,
    1350,   250,  1345,     0,     0,  1341,   473,  1428,     0,     0,
       0,  1158,   884,   883,   865,   866,   881,   882,   867,   868,
     875,   876,   886,   885,   873,   874,   869,   870,   863,   864,
     879,   880,   871,   872,   877,   878,   861,   862,  1172,  1159,
    1160,  1161,  1162,  1163,  1164,  1165,  1166,  1167,  1168,  1169,
    1170,  1171,     0,     0,   708,   706,     0,     0,     0,     0,
       0,     0,  1199,     0,   978,  1013,     0,     0,     0,  1143,
    1182,     0,     0,     0,     0,     0,     0,  1143,  1188,     0,
       0,   733,   745,     0,   630,   636,   707,   705,     0,  1222,
     700,     0,   779,   759,     0,   758,     0,     0,   761,   755,
       0,   756,     0,     0,     0,     0,   757,     0,     0,     0,
       0,   703,     0,   745,     0,   704,   776,  1427,  1426,     0,
    1421,  1410,  1418,   196,     0,  1274,  1916,  1917,  1918,   823,
    1919,   852,   830,   852,   852,  1920,  1921,  1922,  1923,   819,
     819,   832,  1924,  1925,  1926,  1927,  1928,   820,   821,   857,
    1929,  1930,  1931,  1932,  1933,     0,     0,  1934,   852,  1935,
     819,  1936,  1937,  1938,   824,  1939,   787,  1940,     0,  1941,
     822,   788,  1942,   860,   860,  1943,     0,   847,  1944,  1275,
    1276,     0,  1154,   797,   805,   806,   807,   808,   833,   834,
     809,   839,   840,   810,   907,     0,   819,   156,  1475,  1491,
       0,  1148,  1022,   851,   838,  1197,     0,   846,   845,     0,
    1148,   828,   827,   826,  1009,     0,   825,  1105,   852,   852,
     850,   933,   829,     0,     0,     0,     0,     0,   856,     0,
     854,   934,   912,   913,     0,  1232,  1241,  1143,  1147,     0,
    1007,  1143,     0,     0,  1095,  1097,     0,  1024,  1025,     0,
    1200,  1255,  1008,     0,  1260,     0,     0,   907,   907,  1228,
    1125,     0,  1115,  1118,     0,     0,  1122,  1123,  1124,     0,
       0,     0,  1220,     0,  1133,  1135,     0,     0,   949,  1131,
       0,   952,     0,     0,     0,     0,  1119,  1120,  1121,  1111,
    1112,  1113,  1114,  1116,  1117,  1129,  1110,   930,     0,  1004,
       0,  1058,     0,   929,  1226,   698,     0,  1258,   698,  1412,
    1416,  1417,  1415,  1411,     0,  1406,  1405,  1408,  1409,  1493,
       0,  1450,  1434,     0,  1431,  1146,   693,   566,  1246,     0,
     570,  1457,  1455,   161,   160,     0,   213,     0,   539,   538,
     605,   597,   599,   605,     0,   537,     0,   653,   654,     0,
       0,     0,     0,   686,   684,  1254,  1267,   641,   615,   640,
       0,     0,   619,     0,   645,   908,   679,   521,   609,   610,
     613,   520,     0,   682,     0,   692,     0,   558,   560,   543,
     557,   555,   540,   548,   680,   614,     0,  1481,     0,     0,
       0,     0,     0,  1621,     0,     0,   790,    84,    65,   320,
     139,     0,     0,     0,     0,     0,     0,     0,    92,    89,
      90,    91,     0,     0,     0,     0,  1274,   234,   235,   248,
       0,   239,   240,   237,   241,   242,     0,     0,   227,   228,
       0,     0,     0,     0,   226,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1465,  1458,  1201,  1206,   596,   596,
     596,     0,   594,   595,     0,     0,     0,     0,     0,   472,
     366,   376,     0,     0,     0,  1299,     0,     0,     0,     0,
       0,   206,     0,   403,  1300,  1298,  1302,  1301,  1303,  1591,
     190,     0,     0,   201,   198,     0,   365,   339,     0,     0,
    1314,     0,     0,     0,     0,     0,     0,  1621,   355,  1311,
       0,  1462,     0,     0,   253,   440,  1279,     0,   437,   440,
    1245,     0,   440,   221,     0,     0,  1347,  1390,   231,   251,
     232,   252,   486,   481,   511,     0,   489,   494,   470,     0,
     470,     0,   491,   495,   470,   490,     0,   470,   485,  1422,
       0,  1051,     0,  1041,     0,     0,   768,     0,     0,  1042,
     980,   981,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     998,   997,  1043,   772,     0,   775,     0,     0,  1180,  1181,
       0,  1044,     0,     0,  1187,     0,     0,     0,  1049,     0,
     710,     0,     0,     0,   625,   629,   632,     0,   635,   572,
     528,  1612,  1652,     0,   583,   583,   583,   581,   571,     0,
     657,     0,     0,   734,     0,     0,   736,   738,     0,     0,
     741,   716,   715,     0,     0,     0,     0,   780,     0,  1250,
       0,  1430,  1429,     0,   197,     0,     0,     0,   805,     0,
       0,     0,   795,   791,     0,   887,   888,   889,   890,   891,
     892,   893,   894,   895,   896,   897,   898,   899,   811,  1287,
       0,   817,  1292,  1293,  1290,     0,  1286,  1289,  1291,  1294,
       0,     0,     0,     0,  1196,  1192,     0,     0,     0,     0,
    1100,  1102,  1104,     0,   849,   848,  1109,  1115,  1118,  1122,
    1123,  1124,  1119,  1120,  1121,  1111,  1112,  1113,  1114,  1116,
    1117,     0,  1137,     0,  1091,     0,     0,     0,     0,     0,
       0,  1231,     0,   976,     0,  1026,  1011,     0,     0,  1098,
    1027,  1233,  1208,     0,     0,     0,  1263,  1262,   909,   918,
     921,   953,   954,   925,   926,   927,   931,  1285,  1284,  1227,
       0,  1219,     0,     0,   910,   935,   940,     0,  1189,   970,
       0,   958,     0,   948,     0,   956,   960,   936,   951,     0,
     932,     0,  1220,  1134,  1136,     0,  1132,     0,   922,   923,
     924,   914,   915,   916,   917,   919,   920,   928,  1108,  1106,
    1107,     0,  1206,     0,  1218,     0,     0,  1060,     0,     0,
     955,  1224,     0,   779,   596,   779,     0,   907,  1451,  1282,
    1444,  1433,  1282,  1144,  1247,  1281,   568,     0,     0,     0,
    1453,   147,   151,     0,  1207,   181,   183,   698,     0,   603,
     604,   608,     0,     0,   608,   587,   536,  1865,  1747,     0,
       0,     0,     0,   646,   687,     0,   678,   643,   644,     0,
     642,  1254,   647,  1253,   648,   651,   652,   620,  1242,   688,
     690,     0,   683,     0,  1248,   542,   561,     0,     0,     0,
       0,     0,   525,   524,   694,     0,    50,     0,  1621,    67,
       0,     0,     0,     0,     0,     0,   270,     0,   370,   270,
     105,  1621,   440,  1621,   440,  1515,  1586,  1765,     0,    63,
     344,    96,     0,   133,   373,     0,   329,    86,   101,   126,
       0,     0,   224,    52,   238,   243,   129,   247,   244,  1319,
     245,   140,     0,    48,     0,   127,     0,  1317,     0,     0,
      54,   131,  1321,  1466,     0,  1205,     0,   594,   594,   594,
       0,  1150,     0,     0,     0,  1152,  1153,   948,  1328,  1329,
    1330,  1327,   458,   471,     0,   367,     0,   483,   461,   462,
     472,  1297,     0,   202,   368,     0,   368,     0,   211,  1299,
       0,     0,   192,   188,     0,     0,     0,     0,   366,   358,
     356,   389,     0,   363,   357,     0,     0,   315,     0,  1509,
       0,     0,     0,     0,   452,     0,     0,   206,   212,     0,
       0,     0,   255,   256,   406,  1280,   408,     0,   410,   220,
     218,  1342,   478,  1148,     0,   476,   482,   475,   477,   480,
     474,     0,   469,     0,   504,     0,     0,     0,     0,     0,
       0,     0,     0,  1038,  1156,     0,  1175,  1174,   979,   986,
     989,   993,   994,   995,  1176,     0,     0,     0,   990,   991,
     992,   982,   983,   984,   985,   987,   988,   996,   777,     0,
       0,   771,  1185,  1184,  1178,  1179,     0,  1046,  1047,  1048,
    1186,     0,     0,   746,   623,   621,   624,   626,   622,     0,
       0,   779,   583,   583,   583,   583,   580,     0,     0,     0,
     778,     0,   674,   740,     0,   764,     0,   737,   720,     0,
     728,     0,   735,   784,   751,     0,     0,   753,  1419,   801,
       0,   796,   792,     0,     0,     0,   802,     0,     0,     0,
       0,     0,     0,     0,  1155,     0,   589,  1023,     0,     0,
       0,  1193,     0,   975,   818,   831,     0,  1103,  1017,     0,
    1126,  1090,   859,   858,   860,   860,     0,     0,     0,  1240,
       0,  1144,  1094,  1096,  1241,  1010,   843,   907,     0,     0,
       0,     0,     0,     0,     0,   959,   950,     0,   957,   961,
       0,     0,     0,   944,     0,     0,   942,   971,   938,     0,
       0,   972,  1205,     0,  1209,     0,     0,  1059,  1068,   701,
     697,   657,   594,   657,     0,  1413,  1435,  1432,   569,   156,
    1454,     0,   170,     0,     0,     0,     0,   173,   187,   184,
    1453,     0,     0,   598,   600,     0,  1127,   608,   602,   650,
     649,     0,   618,   685,   616,     0,   691,     0,   559,     0,
     545,     0,   719,     0,     0,     0,     0,     0,   319,     0,
       0,     0,   270,     0,   378,     0,   385,     0,     0,   370,
     351,    85,     0,     0,     0,    59,   104,    77,    69,    55,
      83,     0,     0,    88,     0,    81,    98,    99,    97,   102,
       0,   280,   305,     0,     0,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   486,  1206,  1202,
    1206,     0,     0,     0,   596,   592,   593,  1029,     0,   457,
     510,   507,   508,   506,   229,   377,     0,     0,   200,   365,
       0,  1314,     0,     0,  1296,   403,     0,   193,     0,   191,
       0,   202,   368,     0,   343,   339,   364,   337,   336,   338,
       0,  1510,   222,     0,  1504,   368,  1313,     0,     0,   453,
       0,   447,   211,     0,     0,  1308,   254,   440,     0,   465,
     505,   512,   492,   497,     0,   503,   499,   498,   493,   501,
     500,   496,  1039,  1050,  1173,     0,     0,     0,     0,   770,
     773,     0,  1045,  1040,   744,     0,     0,   657,     0,     0,
       0,     0,   574,   573,   579,     0,     0,  1062,   739,     0,
       0,     0,   726,   714,   721,   722,     0,     0,     0,   782,
     781,   752,   805,     0,   785,   805,     0,   805,     0,   803,
       0,   812,   900,   901,   902,   903,   904,   905,   906,   837,
       0,  1195,  1191,  1099,  1101,  1138,   855,   853,  1230,  1143,
    1235,  1237,     0,     0,     0,  1093,   977,  1261,   911,     0,
       0,   941,  1190,   962,     0,     0,     0,   937,  1126,     0,
       0,     0,     0,     0,   946,     0,  1213,  1206,     0,  1212,
       0,     0,     0,     0,  1034,   702,   674,     0,   674,     0,
       0,  1452,     0,  1447,   148,   149,   150,     0,     0,     0,
     165,   142,     0,     0,   182,   170,   158,   606,   607,     0,
     601,   617,  1243,  1249,   544,     0,  1007,     0,     0,   541,
       0,   134,   270,     0,     0,    66,     0,   387,   331,   379,
     362,   346,     0,     0,     0,   271,     0,   404,     0,     0,
     352,     0,     0,     0,     0,   332,     0,     0,   291,     0,
       0,   362,     0,   369,   287,   288,     0,    58,    78,     0,
      74,     0,   103,     0,     0,     0,     0,     0,    61,    73,
       0,    56,     0,   440,   440,    64,  1274,  1916,  1917,  1918,
    1919,  1920,  1921,  1922,  1923,  1924,  1925,  2036,  1926,  1927,
    1928,  1929,  1930,  1931,  1932,  1933,  2045,  1934,   277,  1935,
    1690,  1936,  1937,  1938,  1939,  1940,     0,  1941,   788,  1942,
    1943,  2124,  1944,  1111,  1112,   275,   276,   372,   272,  1275,
     273,   380,   274,     0,   375,   330,   130,  1320,     0,   128,
       0,  1318,   137,   135,   132,  1322,  1459,     0,     0,  1032,
    1033,  1030,   594,     0,     0,     0,   486,   464,     0,     0,
    1509,     0,     0,     0,     0,  1621,     0,   189,     0,  1314,
     199,   365,     0,   395,   315,   390,     0,  1509,  1507,     0,
    1314,  1503,     0,   444,     0,   203,     0,     0,     0,   411,
     479,     0,   502,   999,     0,     0,     0,     0,   633,     0,
     639,   674,   578,   577,   576,   575,   656,  1560,  1848,  1746,
       0,   660,   655,   658,   663,   665,   664,   666,   662,   673,
       0,   676,   763,  1139,  1141,     0,     0,     0,     0,   727,
     729,     0,   731,     0,   783,   799,     0,   800,     0,   798,
     793,   804,  1194,  1238,  1239,  1234,     0,   908,   968,   966,
     963,     0,   964,   945,     0,     0,   943,   939,     0,   973,
       0,     0,  1210,     0,  1054,     0,  1057,  1071,  1067,  1066,
    1062,  1029,  1062,  1414,   567,   169,   146,   172,   171,     0,
    1207,   179,     0,     0,   170,     0,   174,   454,     0,     0,
     556,   718,   549,   550,     0,   383,    68,     0,   362,     0,
     270,   348,   347,   350,   345,   349,     0,   405,     0,     0,
     289,     0,   296,   334,   335,   333,   290,   362,   368,   292,
       0,     0,     0,    70,    60,    57,    62,    71,     0,     0,
      72,    75,   784,    87,    80,  1274,  2045,  2054,     0,     0,
       0,     0,     0,  1204,  1203,     0,   460,   459,   509,   456,
     467,   229,     0,     0,   339,  1506,     0,     0,   449,     0,
       0,     0,   365,   194,     0,     0,     0,  1509,     0,     0,
     267,     0,   312,     0,   215,  1508,     0,     0,  1495,     0,
       0,     0,  1306,  1307,     0,   466,  1000,     0,  1001,   774,
       0,     0,   631,  1062,     0,     0,     0,   667,   661,     0,
    1061,  1063,     0,   628,  1142,   723,     0,   725,     0,   749,
       0,   749,   732,   794,   786,  1236,  1052,     0,   965,   969,
     967,   947,  1206,  1214,  1206,  1211,  1056,  1070,  1073,   676,
    1259,   676,     0,     0,   157,     0,     0,   154,   141,   159,
    1128,   546,   547,     0,   270,     0,   361,   384,   301,   279,
       0,     0,     0,   286,   293,   394,   295,     0,    79,    95,
       0,     0,   374,   138,   136,  1031,   486,     0,  1314,   315,
    1503,   446,   205,     0,     0,     0,   339,   222,  1505,   328,
     321,   322,   323,   324,   325,   326,   327,   342,   341,   313,
     314,     0,     0,     0,     0,     0,   448,     0,  1308,     0,
     176,   185,     0,   176,  1002,   634,     0,   676,     0,     0,
       0,   659,     0,     0,   675,     0,   532,  1140,     0,   713,
     711,     0,   712,     0,     0,     0,     0,   596,   628,   628,
     143,     0,   144,   180,     0,     0,     0,   368,   386,   360,
       0,   353,   299,   298,   300,   304,     0,   302,     0,   318,
       0,   311,   279,     0,    82,     0,   381,   455,   463,     0,
     269,  1497,   365,     0,  1503,   315,  1509,  1503,     0,  1500,
       0,   445,   204,     0,     0,     0,   178,  1314,     0,   178,
       0,   628,   669,     0,   668,  1065,  1064,   630,   724,     0,
    1053,  1216,  1215,     0,  1077,   531,   530,     0,     0,     0,
       0,   394,     0,   340,     0,     0,   301,     0,   294,   391,
     392,   393,     0,   307,   297,   308,    76,    94,   382,     0,
     365,  1498,   268,   216,  1496,  1501,  1502,     0,   176,   175,
     605,   177,   779,   186,   605,   638,   533,   670,   627,   730,
    1072,     0,     0,     0,     0,     0,   153,   779,   164,     0,
     311,   359,   354,   278,   303,   317,     0,     0,     0,   309,
       0,   310,  1503,     0,   178,   608,  1304,   608,  1834,  1561,
    1800,     0,  1089,  1078,  1089,  1089,  1069,   145,   152,     0,
     270,   283,     0,   282,     0,   371,   306,  1499,  1314,   605,
     166,   167,     0,  1082,  1081,  1080,  1084,  1083,     0,  1076,
    1074,  1075,   779,   388,   281,   285,   284,   779,   608,     0,
       0,  1086,     0,  1087,   163,  1305,   168,  1079,  1085,  1088
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3099, -3099, -3099,  1926,    64,    72,  -897, -1188,  -922, -1191,
   -3099,  -107,    77, -3099, -3099,   184, -3099,  1020, -3099,   187,
    -783,   557, -3099,  1118, -3099, -3099,  1562,   526,    80,    86,
    2023, -3099,   993, -3099,  3522,  2550,  3750,   649,  -515,  -881,
   -1227,     3,    17, -3099, -3099, -3099, -3099, -3099,  -624,   502,
   -1205, -3099,   442, -3099, -3099, -3099, -3099,  -197,   160, -2262,
       6, -2172, -2894,  -551, -3099,  -654, -3099,  -309, -3099,  -602,
   -3099, -1053,  -610,  -644, -2808, -1133, -3099,  1627,  -361, -3099,
     599, -3099, -2537, -3099, -3099,   587, -3099, -1157, -3099, -2265,
     162,  -588, -2604, -2541, -2175,  -894,   240,  -593,   226, -2130,
   -1203, -3099,   611, -3099,  -579, -3099,  -900, -2492,    90, -2763,
   -1644,    -7, -3099, -3099, -3099,  -716, -3099, -2507,    95,  1548,
   -2085,    98, -1668, -3099, -3099, -1682,    48, -2112,     7, -2100,
     100, -3099, -3099,   102,    18,  -625,   290, -3099,   110, -3099,
   -3099,  1525,  -871, -3099, -3099,   499,   114,   979, -3099, -2554,
   -3099,  -573, -3099,  -618,  -608, -3099, -3099,    32,  -903,  1511,
   -3099, -3099, -3099,    11, -3099,  -463, -3099, -3099, -2552, -3099,
      21, -3099, -3099, -3099, -3099, -1489,  -399,   303, -3099, -3099,
    -535, -2581,  -487, -3099, -2992, -3038, -3099, -3099,  -633, -3008,
   -2058,   122,    71,  1890,  1507,   124,   126, -3099,   336,   127,
   -1140,     4,  2066,   -35,   -51, -3099,   -37, -3099, -3099, -3099,
     652, -3099, -3099,    15,    42,  1728, -3099, -1031, -3099, -1728,
     536, -3099,  1915,  1917, -2146,  -866,   -77, -3099,   705, -1667,
   -2125,  -656,  1144,  1709,  1708,   461, -2535, -3099,  -514, -3099,
     270, -3099, -3099,   693,  1188, -1560, -1556, -3099, -2159, -3099,
    -431,  -319, -3099, -3099, -3099, -3099, -3099, -2513, -2432,  -653,
    1156, -3099,  1713, -3099, -3099, -3099, -3099,    22, -1490,  2881,
     736,   -88, -3099, -3099, -3099, -3099,   164, -3099,   925,  -144,
   -3099,  2110,  -690,  -794,  1936,     1,   131, -1799,   -15,  2122,
     504, -3099, -3099,   506, -2074, -1416,   462,  -234,   920, -3099,
   -3099, -1273, -3099, -1890, -1174, -3099, -3099,  -727,  -784, -3099,
   -3099, -3099,   447,  1433, -3099, -3099,  1686,  1891, -3099,  -907,
    1923,  -790, -1025,  1935,  -925,  1940,  -938,  -935,  -930,  1942,
    1945,  1947,  1948,  1949,  1951,  1952, -1533,  4841,  -668,  2749,
   -2209, -3099, -2204,  1053,  1058,    46, -3099, -1395,     2, -3099,
   -3099, -3099, -3099, -2712, -3099,  -393, -3099,  -390, -3099, -3099,
   -3099, -1641, -3098, -1666, -3099,  3691,   864, -3099, -3099,   459,
   -3099, -3099, -3099, -3099, -1549, -3099,  5160,   761, -3099, -2018,
   -3099, -3099,  -987,  -836, -1161,  -988, -1221, -1919, -3099, -3099,
   -3099, -3099, -3099, -3099, -1036, -1774,  -214,   823, -3099, -3099,
     916, -3099, -3099, -3099, -1714, -2104, -3099, -3099, -3099,   829,
    1506,   136,  -826, -1618, -3099,   878, -2353, -3099, -3099,   456,
   -3099,  -599, -1119, -2428,  2288,    50, -3099,  -655, -2510, -3099,
   -3099,  -719, -2662, -1106,  -893, -3099,   129,  1689,    23,   130,
   -3099,   132,  1271, -3099, -3099, -3099,   133, -3099,   304,   137,
     457, -3099,   971, -3099,   687,    29, -3099, -3099, -3099,    40,
    2860,    13, -2907
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    48,    49,    50,   754,   755,  1843,  1790,  2945,  1231,
    1780,  1355,   756,  2607,  2608,  2609,  2248,  1212,  3374,  2249,
    1213,  1214,  2611,    54,    55,    56,   115,  1243,   757,   758,
     531,    59,  2298,   922,   806,  1098,   808,  1099,  1612,   910,
    1246,  1247,   759,  2649,  2310,  3171,  2698,  3172,  2373,  2304,
    1365,  2366,  1884,  1824,  1366,   539,  1898,  2699,  2654,  1885,
     760,  2596,  2947,  3367,  2622,  3505,  2883,  2884,  3364,  3365,
    2599,  2251,  3433,  3434,  2681,  1771,  3428,  2329,  3307,  2255,
    2236,  2885,  2337,  3266,  2993,  2252,  2865,  2330,  3360,  1859,
    2331,  3361,  3120,  2332,  1821,  1847,  2600,  3435,  2256,  1822,
    2595,  2948,  1759,  2333,  3371,  2334,   550,  2869,   761,  2684,
    1311,   533,   522,   523,  1540,   719,  1287,   720,   762,   940,
    1853,   763,  1304,  1835,    65,  1318,   551,  1856,   764,  1844,
     765,  2668,  2669,   766,   767,  1174,  2552,  2170,   768,   745,
     746,   957,  1335,   747,    71,  1864,   769,  1341,  1342,   965,
      73,   875,  1357,   770,  1358,  1359,   974,    74,  2700,   976,
     977,    75,    76,   772,  3203,  3008,  1320,  1860,  2342,   552,
     773,  2830,  2172,  2555,  3356,    79,  3101,  2175,  1172,  3104,
    3321,  2823,  3099,  2556,  3396,  3450,  3102,  2176,  2177,  3322,
    2178,   774,   823,  1036,  1480,   775,   776,  1040,  2026,   777,
    1762,   778,  1100,    86,    87,  1012,    88,  3114,    89,    90,
    1737,  1738,  1739,   853,   865,   866,  2168,  1452,  1968,   858,
    1177,  1706,   840,   841,  2294,   883,  1813,  1701,  1702,  2181,
    2563,  1730,  1731,  1186,  1187,  1956,  3336,  1957,  1958,  1445,
    1446,  3212,  1718,  1722,  1723,  2202,  2192,  1709,  2442,  3031,
    3032,  3033,  3034,  3035,  3036,  3037,  1101,  2737,  3223,  1726,
    1727,  1189,  1190,  1191,  1735,  2212,    92,    93,  2153,  2539,
    2540,   812,  3048,  1469,  1740,  2741,  2742,  2743,  3051,  3052,
    3053,   813,  1007,  1008,  1031,  1026,  1459,  1976,   814,   815,
    1933,  1934,  2411,  1033,  1970,  1986,  1987,  2749,  2464,  1541,
    2237,  1542,  1543,  2003,  1544,  1102,  1545,  1571,  1103,  1576,
    1547,  1104,  1105,  1106,  1550,  1107,  1108,  1109,  1110,  1564,
    1111,  1112,  1588,  2005,  2006,  2007,  2008,  2009,  2010,  2011,
    2012,  2013,  2014,  2015,  2016,  2017,  2018,  1158,  1741,  1114,
    1115,  1116,  1117,  1118,  1119,  1120,  1121,   817,  1122,  1123,
    1661,  2147,  2538,  3041,  3220,  3221,  2814,  3089,  3248,  3347,
    3464,  3492,  3493,  3519,  1124,  1125,  1604,  1605,  1606,  2040,
    2041,  2042,  2043,  2141,  1655,  1656,  1126,  2952,  1658,  2063,
    3044,  3045,  1159,  1438,  1599,  1289,  1290,  1555,  1412,  1413,
    1419,  1908,  1427,  1431,  1938,  1939,  1439,  2109,  1127,  2034,
    2035,  2482,  1566,  1128,  1245,  1611,  2809,  2144,  1659,  2103,
    1135,  1129,  1136,  1131,  1595,  1596,  2499,  2781,  2782,  2073,
    2209,  1688,  2214,  2215,   961,  1132,  1133,  1134,  1291,   526,
    1556,  3451,  1331,  1164,  1292,  2099,   779,   107,   780,   781,
      97,   782,  1154,   862,  1155,  1157,   783,   834,   835,   784,
     847,   848,  1482,  1675,  1483,   871,   102,   103,  1200,   836,
     854,   786,  3198
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     521,   885,   886,  1230,    84,   909,    61,    66,  1430,   718,
     884,    77,   870,   104,  1130,    91,   521,    60,    69,   717,
    1027,    78,  1196,    95,   856,   818,   958,  1160,  1248,   101,
    1301,  1299,  1840,  1935,  2062,    91,  2184,   972,  1805,  1794,
     888,  1793,   852,  1777,  1689,   810,  2151,  1758,  1402,   785,
    1484,  1403,   771,   524,   889,  1354,  1404,   525,  1990,  2568,
    1590,  1400,  1810,  1691,    51,   744,  1764,  2601,  2025,   816,
    2558,  1344,    52,   525,  1360,   849,  1768,    53,  2460,  2541,
      57,  2543,   521,   521,  2086,  2087,    58,  2693,   868,  1338,
      62,   818,   818,  2286,  1798,    63,   902,   824,    64,  1665,
      67,  2522,    68,  1866,  1668,  2594,  1602,   894,  2462,  2981,
      70,   810,   810,  2953,    72,  2557,  2950,  1232,  2979,  1236,
    1009,  1240,    80,  1248,    81,  1030,    82,    83,  2997,    94,
      96,  2655,    98,    99,   968,   816,   816,   100,  2994,   525,
     525,  2641,  2642,  2643,  2780,   973,  -514,   960,  1369,  2318,
    -368,  2844,  1567,  1568,  1052,  2849,  -860,  2311,  1912, -1330,
    1912,  2204,  1913,  1914,  2414,  1914,   536,  2207,  1332,  1580,
    -518, -1905,  2443, -1905,   820,  1332,  2827,  3395,  2155, -2045,
   -2045, -1271, -1252,  1749,  2315,  2452,  3190, -1896,  -857, -1268,
   -1268, -1913,  -857,  1414,  2670, -2036, -2036,  -860,   978, -2054,
   -2054, -1272,  -852,   820, -2031, -2031,  2663,  1052, -1271, -1269,
   -1269, -1896,   860,  2658, -1913, -1272,  2650,  3175,   820,  1672,
    -819,  -832,  2480,  -847,  3269,  2101,  2101,  1185,   820,   820,
    1188,    23,  2662,  1147,  3194, -1109,  2437,  2438,  2439,  2744,
    -468, -2056, -2056, -1109,  2745,  1142,  -514,  2705,  2707,  1554,
    2710,  1669,  1348,   820,  3107,  1546,  1598,  1052,  1348,  3124,
    2138,   972,  1808,  1052,   879,  1248,  3282,  -229,  2139,  1052,
    -518,  1809,  -229,  3354, -1130,  1323,  1621,  3139,  1752,  1696,
    2973,  1623, -1130,   537,  1332,  1149,   820,   934,  2677,  1912,
    -651,  3159,  1004,  1913,  1914,  2424,  1778,  1710,  1030,  1781,
    1782,  2110,   949,  3090,  1621,  3092,  2122,  3461,  1622,  1623,
    1009,  1631,   876,  3468,  1324,  2217,     3,     4,  3530,  3525,
    1710,  2426,  1361,  3135,  1952,  1423,   881,  2148,  2858,  2111,
    1769,  3399,  2998,  2179,   881,   880,  1572,  2292,  2597,  1631,
    1146,  3514,  3215,  1711,  3299,  1633,  2308,  3419,  2088,   788,
    1693,  1674,  1582,  1760,  1998,  1952,  1010,  2727,  2210,   935,
    1362,  3454,  1746,  2828,  1796,  1670,  1711,  3429,  1742,  1743,
    -789,  1707,  3191,  1633,    27,    28,    29,  2427,  3249,   876,
    3251,  2867,  2816,  3381,  2818,   113,  2605,  3192,  3312,  2166,
    3512,   105,  2623,  1037,  3141,  3531,  2817,  1181,  3313,  3300,
    2031,  1760,  3146,   877,  1038,  2624,   857,  2868,  3301,  2037,
    1760,  1712,  2629,   881,  2167,   534,  2900,   838,  2180,  1850,
    2857,  1761,  3476,  1812,  3298,  1175,  3158,  1554,  2533,  3006,
    2123,  3537,  3302,  1546, -2030, -2030,  -514,  3184,  1754,  3483,
     106,    34,  2840,  2837,  2112,  1301,  3509,  2124,  3196,  2297,
    3185,  3121,  2125,  1150,  2114,  1151,  3484,  1618,   936,  2594,
    -518,  2594,  1713,  3462,  2716,  1333,  1621,  1509,  -671,   114,
     877,  2775,  1333,  1183,  2598,  2211,  2149,  3441,    39,  1708,
    3444,  3380,  3526,  2238,  3136,  1713,  1361,  3532,   789,  1671,
    2126,  3469,  3463,  1325,  2425,  1011,  3280,   937,  2999,  3515,
    3355,  3327,  2293,  3430,  1143,  3303,  -789,  -514,  3213,  1590,
    2838,    41,  1694,   787,  3264,  1554,  1584,  1767,  3304,   839,
    2428,  1546,    44,  3258,  1714,  1621,  3122,  1176,  3471,  1622,
    1623,  -518,   938,  3274,  2744,  1633,  1770,   540,    45,  2745,
    1744,  1051,   924,  1745,  1912,  1692,  2974,  1714,  1913,  1914,
    3270,  1811,  1915,  1916,  1917,  3501,   861,  1755,  2033,  1995,
    1631,  2300,    46,  1361,   882,  3314,  1361,  1361,  3021,  2789,
    2062,  2990,  2456,  3170,  3012,  3507,  2829,  3442,  3193,  1144,
    3004,  1333,   939,  1610,  1684,   718,  1567,  1568,   985,  3431,
    2291,  2218,  1046,  2229,  1633,   946,  2102,  2524,  1944,  3125,
     541,  2796,  1767,  3002, -1109,  2309,  1561,  2115,    47,  1326,
     958,  1580,   907,  2714,   950,  1868,   908,  2717,  2116,  2651,
    2652,  1872,  1959,  3443,  2545,  -514,  1334,  2382,   538,  2140,
    2204,   972,  1585,  1337,  2566,  2571,  1878,  3289,  1979,  2388,
    2355,  1052,  3533, -1130,   878,  2738,  2335,  2127,  2336,  -518,
    2953,  2664,  1794,  2950,  1586,  1924,  1925,  1926,  1927,  1928,
    1929,  2759,  1929,  1563,  -514,  2692,  -514,  1298,  1587,  2416,
    -368,  2044,  2045,  1585,   822,   822,  2421,  2361,  2154, -1330,
    3115,  3261,  2673, -1905,  2655, -1905,  3262,  2560,  -518,  1577,
    -518,  1577,   907, -1271, -1252,  1586,   908,  1879,  1881, -1896,
    -857,  3133,  1797, -1913,  2728,  2729,  2730,  2731,  1569,  1589,
    3235,  2475,  2453, -1272,  -852,  1616,  2453,  1001,   870,  3305,
   -1271,  3179,  3306, -1896,  2030,  1598, -1913, -1272,  1876,  1248,
    2082,  1248,  1570,  1575,  1598,  -847,  3379,  1869,  1554,   973,
    1666,  2156,  1788,  3386,  1546,   998,   971,  2474,  2065,  1152,
    2630,  1950,  1910,  1911,  3477,  1919,  1352,  1353,  1931,  3385,
    1467,  2887,  1352,  1353,   906,  3502,  1789,    91,  3148,  3149,
     870,  -229,  -229,  1572,  2291,  3106,  3134,  2083,  1654,  2234,
    1621,   785,   545,  2825,   967,   975,  1204,   521,  1926,  1927,
    1928,  1929,  1205,  1582,  1783,  3362,   818,  1181,   521,  3016,
    1788,  2234,   888,  1651,  1652,  1653,  1654,   818,  3097,  2395,
     549,  1197,  1468,  3415,  3416,  1631,   889,  3348,  3188,  3349,
    2602,  3108,  1704,  2376,  1789,  1920,  3165,  1000,  2377,  2021,
    1204,  1554,  2422,   521,   521,  2888,  1205,  1546,  2826,  2235,
     816,  2979,   819,  1148,   525,  3452,  3098,  3281,  3173,  1633,
     540,   816,  3503,  1204,  1867,   525,   521,  3363,  2264,  1205,
     982,  2591,  3055,  1148,  2345,  3057,  3456,  3059,  2267,  2422,
    3189,  2270,  2387,  1183,   863, -1316,  3071,    84,  2262,    61,
      66,  3504,   849,   849,    77,   849,   104,  2378,    91,  1585,
      60,    69,   872,  1153,    78,  3401,    95,  1206,  1760,  3185,
     521,   718,   101,  2415,  1286,   521,  1161,  1610,   873,  1763,
    2639,  1586,  2953,   541,  2104,  2950,  2534,   874,  3243,  2889,
    2038,  2640,  1184,  1450,  2967,  1587,  2968,   890,  2431,  3244,
    1460,  2603,  2068,  2321,  2069,    23,   934,    51,  3317,  1784,
    2062,  1206,  2287,  2288,  2289,    52,   905,  1585,  3267,  1785,
      53,  2496,  2396,    57,   907,   820,  3527,  1286,   908,    58,
    2084,  2365,  2397,    62,  1206,  2226,  1554,  2320,    63,  1586,
     971,    64,  1546,    67,  2787,    68,   521,   521,  1302,  1880,
    2367,  1344,   521,    70,  1052,   521,   521,    72,   521,   521,
     521,   521,  2263,    91,  2354,    80,  3254,    81,  2356,    82,
      83,  2358,    94,    96,   521,    98,    99,   785,   935,  3375,
     100,   521,  2273,   818,  1935,  1456,  1867,  2280, -1905,  1769,
     818,  1463,  1649,  1650,  1651,  1652,  1653,  1654,  1204,   911,
     521,  1286,  1539,   810,  1205,   923,  1769,  1921,  1922,  1923,
     810,  1924,  1925,  1926,  1927,  1928,  1929,  2569,  1578,  1579,
     912,   521,  1052,  2546,  1207,  2238,  2547,   816,   870,   108,
    2025,   525, -2027, -2027,   816,  2203,  2203,  2265,   525,  2644,
     521,  1794,  2268,   907,  2566,  1769,   913,  1609,    27,    28,
      29,   521,   521,   521,  1181,   521,   521,  2142,  1207,  1182,
     718,  2143,  3358,  3081,  2577,   545,  3207,   967,  1207,   930,
    1608,  1953,  1346,  1378,  1379,  1347,  1954,  1826,  1585,  2861,
    1554,  2420,  1204,  1208,  1386,  1387,  1546,  1209,  1205,   521,
     548,  1207,  1554,   549,   942,  1361,  1698,  1699,  1546,  1705,
    1586,  2631,  1041,  1042,  1043,  1361,   521,   521,  1361,  1206,
     889,   889,   914,   889,  1589,    34,  1827,  1792,  -209,  1210,
    1461,  2604,  1554,  2605,  1466,  1148,   941,  1234,  1546,  1554,
    1183,  1209,  1602,  1204,  1799,  1546,   907,   972, -1252,  1205,
     908,   915,   521,  1386,  1387,  1682,   521,   521,  1683,   948,
    1238,  1828,    39,  2606,  1209,   947,   521,   521,   521,  2110,
    2754,   521,  2616,  1235,  2618,  1554,  2478,  2862,   936,  1554,
     951,  1546,  2678,  1802,   540,  1546,  -595,  1554,  2686,  1184,
    1539,  -595,  1826,  1546,   916,    41,  1239,  2111,  1795,  1943,
    1211,  1945,  1946,  1206,  1873,  1770,    44,  1874,  1361,   109,
    1554,  1829,  1994,  1392,  1393,  1995,  1546,   937, -2028, -2028,
     110,  2514,  1770,  1286,   952,  2389,  2390,  2391,  2392,  2393,
    2394,  1827,  1286,  2398,  2399,  2400,  2401,  2402,  2403,  2404,
    2405,  2406,  2407,  2863,  1211,  2864,  2375,   541,   953,  2515,
    2379,  2512,  2666,  2381,  1206,   111,  1286,  1769,   954,  1447,
      47,  1770,  -595,   926,   964,   927,  3180,  1211,  2542,   983,
    2062,  1767,  1392,  1393, -2029, -2029,  1207,  1471,  1539,  1137,
    1138,  1475,  1140,  2019,  2305,  3017,  2020,  2306,  1767,   984,
    1834,  1836, -2032, -2032,   718,  1837,  1769,  1838,  1217,   928,
     985,   929,   939,   718,  1861,   112,  2370,  2739,  3523,  2371,
    2746,  -595,  2112,  2432,   986,  2433,  1829,  2113,  1218,   989,
     971,   917,  2114,  2408, -2033, -2033,  2409,  1767,   992,  2469,
    2951,  2454,   918,  2457,  2455,  2225,  2455,   718,  2871,  1209,
    3510,    91,  3511,   521,   994,  2619,  1971,  1883,  2620,  1973,
    2434,  2613,  2435,  2615,  1977,   785,   993,  1980,  3486,   975,
    1207,  1769,  1984,  1453,  1219,   995,  2854,   919,  2856,  2516,
     996,  1210,  2580,  3498,  2517,  2625,  1453,  2689,  2626,  1300,
    1995,  2874,   997,  3536,  2751,  2628,  2752,  2455,  2755,  2020,
     920,  2756,   998,   521,   521,  2898,  1178,  2891,  1180,   521,
    2757,   521,  2661,  2756, -2034, -2034,   521,   521,   521,   521,
     818,  1207,  2966,  2855,  2509,  2510,   980,   921,   822,  2271,
    1003,   521,   521,  1209,  2632, -2035, -2035,   521,  3534,   545,
     521,   967,  1032,  3535,  1035,   521,   818,   521,   521,   818,
   -2037, -2037,  1211,   521,   818,  1039,  2976,   818,  1034,  2776,
    2777,  2890,   818,  2899,   816,  2272,   810,   549,   525,   810,
    1220,  1044,  2832,  1770,   810,  2833,  1548,   810,  2989,  1045,
    2278,  2306,   810,  1139,  1209,  2115,  3005, -2038, -2038,  2371,
     816,  2544,  3010,   816,   525,  3011,  2116,   525,   816,  2636,
    1602,   816,   525,  1046,  3018,   525,   816,  3019,  1047,  1016,
     525,  1539,  1770, -2039, -2039,  1141,  2279,  1598,  3344,  1221,
    3345,  1145,  1016,  2763,  2570,  2570,  2764,  2766,  1554,  1222,
    1156,  2765,  2767,  2768,  1546,  2762,  1211,  2518,  1162,  1767,
    1204,  1223,  1163,   521,   521,  1017,  1205,  3072,  2519,  3272,
    2020,  2027,   521,   521,  2878,  1165,  3208,  1170,  1017,  2020,
     521,  1454,    91,  3209,  2022,  2023,  2455,   521,  2024,  3238,
    2028,  1019,  2020,  1224,  1462,  1166,  2029,  1770,  1767,  1171,
    3245,   540,  3255,  1995,  1019,  3256,  3288,  1211,  3292,  2306,
      23,  2371,   718, -2040, -2040,  3324,   521,  3392,  2020,   521,
    2371,  2566,  1167,  2879,  1539,   521,   521,   521,   521,   521,
     521,   521,   521,   718, -2041, -2041,  1356,   521,   521,  3152,
    1179,  2880,   521,  2098,  2151,  1398,   521,  1226,  2697,   521,
     521,   521,   521,   521,   521,   521,   521,   521,   972,  3397,
     521,  1198,  3398,  1767,   541,  2186,  1199,   521,  1201,  1286,
    1203,  1206,  1227,  1051,  1548,  3423,  1912,  1202,  3424,   889,
    1913,  1914,  1215,  1554,  1915,  1916,  1917,  2082,   521,  1546,
    1051,  1229,  1216,  1912,  1478,  -527,  3467,  1913,  1914,  3398,
    1242,  1915,  1916,  1917,  3508,   116,  3116,  3398,  1233,   535,
    -527,  -527,   521, -2042, -2042,  -527,   540,   748,  1237,  2898,
    1023, -2043, -2043,   521,   521,  1153,  -527, -2044, -2044, -2046,
   -2046,  -527,   837,  1023, -2047, -2047,   850,   543,  1241,  1455,
    1554, -1316,  2881, -2048, -2048,  1294,  1546, -2049, -2049, -2050,
   -2050,  2882,  1455,    27,    28,    29, -2051, -2051,  1297,  1539,
    1298,  1614,  1548, -2053, -2053,  2848,  -527,  1303,   718,  1305,
     718,  1617,  1998, -2055, -2055,  2984, -2057, -2057,  2250,   541,
    2254,  3169,  -527,  2338,  1814,  1815,  -527,  1306,  2972,  1388,
    1389,  1667,  1319,  3485,  1321,  3234,  1300,  3487,  2205,  2206,
    1673,  3000,  -527,  -208,    23,  1322,  3473,  -646,  -646,  1329,
     521,  1336,  -650,  -650,  1286,  -649,  -649,   521,   521,  3323,
      34,  1330,  2758,  2760,  1392,  1393,  3112,  3113,  1207,  1339,
    3083,  3494,  3495,   966,  1340,  -527,  3009,  1345,  3520,  3521,
    1677,  1678,  1363,  1554,  -527,  1364,   545,  1370,   546,  1546,
    1428,  -527,  3528,  1441,  1443,  1286,  1444,    39,  1451,  1457,
    -527,  1458,  2339,  1464,  1918,  1465,  2800,  2801,  1470,  1474,
     718,  1476,  1479,  1557,   549,  1558,  1560,  1286,   521,  -823,
    -830,  2219,  1569,  2566,  1573,    47,   971,  1919,  -671,  -672,
      41,  1209,  -820,  -821,  2444,  1583,  -824,  2951,  1584,  -822,
    2447,    44,  1594,  1539,  1919,  1607,  1613,   521,   521,  1615,
     521,   544,  1660,  1662,  1664,  1539,   521,   521,   521,   521,
     521,   521,  1676,  1210,   521,   521,   521,   521,   521,   521,
     521,   521,   521,   521,  1685,  1686,  1697,  1690,  1554,   521,
     521,  1182,  1695,   521,  1546,  1539,  1732,    27,    28,    29,
     521,  1184,  1539,   879,  1734,    47,  1747,  1920,  1736,  1766,
    1772,   545,  1765,   967,  1774,  1767,  1779,  1786,  -596,   113,
    3323,  1773,   521,  -596,  1920,   521,  1787,   521,  1361,  3144,
     547,   521,  1801,  1791,   818,  1548,   548,  1807,  1539,   549,
     818,  1817,  1539,  3286,  1211,  -527,   521,  1831,  1286,  1818,
    1539,  1819,  1823,  1832,   810,  1833,  1842,  1845,  1846,  1848,
     810,  -527,  1849,  3323,    34,  1554,  1851,  1852,  1855,  1854,
    1862,  1546,  1882,  1539,   880,  1863,  1867,  1875,   816,  1901,
    1903,  1904,   525,  1906,   816,   521,   521,  1909,   525,  3054,
    1932,  1969,  3153,  3154,  -596,  1940,  1972,  1941,  1948,  1951,
    1978,    39,  1981,  1602,  1982,  1996,  1983,  3013,  1988,  1563,
    2002,  2001,  3323,   907,  1993,  2033,  1165,   908,  1052,  1570,
    1575,  1997,  1999,  2066,  1217,   521,    85,  2000,  1548,   907,
     521,   521,   870,   908,    41,  2067,  2032,  2075,  1621,  2078,
    2072,  3377,  2100,  -596,  1218,    44,    85,  2077,  2079,   809,
    2107,  2119,   881,  2080,  2118,   521,   521,  2121,  3056,  2145,
     521,    45,  2146,  2152,    85,  2164,  2165,  2182,  2169,  3339,
     880,  2185,  1554,   869,   521,  2194,  2196,   521,  1546,   521,
    1217,  2195,  2220,  2197,  2199,    46,  2198,  2216,  1992,  2221,
    1219,  2224,  2227,  2231,  2232,   521,   718,  2233,   881,    47,
    1218,  2303,   521,  2307,  2312,   521,  1554,  2325,  2322,  2951,
    2326,  2340,  1546,  3130,   818,   809,   809,   887,  2324,  1921,
    1922,  1923,   521,  1924,  1925,  1926,  1927,  1928,  1929,    85,
    2341,   818,  2343,  2346,   810,   521,  1921,  1922,  1923,  2347,
    1924,  1925,  1926,  1927,  1928,  1929,  1219,  2892,  2348,  2350,
    2349,   810,   521,   521,  2351,  2353,  2372,  2893,   816,  2380,
    2894,  2357,   525,  1548,  1937,  1912,  3132,  2410,  1936,   521,
    2417,   521,  2418,  2419,  2423,   816,  2429,  2430,  2441,   525,
     521,  2448,  2446,  2459,  2466,  1554,  1220,  2871,  2461,  2467,
    2468,  1546,  2470,  2872,  1794,  2471,  1361,  2472,   718,   718,
     718,  1361,  2488,   882,  3275,  2477,  2873,  2473,  2250,  2250,
    2250,  1051,  2492,  2476,  1912,  2484,  2894,  2485,  1913,  1914,
    2489,  2490, -2058, -2058, -2058,  2491,  2487,  2493,  1554,  2494,
    2874,  2508,  2875,  2495,  1546,  1221,  2505,   521,  2513,  2529,
    2537,  2506,  1220,  1286,  2548,  1222,  2553,   870,  1879,  1881,
    2520,  2530,  2535,  2536,  2549,   972,  2551,  1223,  2554,  2559,
    2561,   558,  2562,  -652,  2572,  2575,  2573,   749,  2576,  2579,
    2583,  2584,  2589,  2585,  2587,  2590,  2593,  1834,  1836,   826,
    2612,  1539,  1837,  2157,  1838,  2614,  2645,  2627,  2646,  1224,
    2633,  1221,   820,   867,   867,  2647,  2634,  2660,  2635,   521,
    2665,  1222,   718,  2648,  2659,  2676,  3206,  1548,  2675,  2679,
    2680,  2683,  1883,  1223,  2687,  2895,   521,   971,  2694,  1548,
    2876,  2704,  2712,  2715,   718,  2722,  2735,  2718,  2736,  2747,
    1554,  2721,  2748,  2082,  1883,  2753,  1546,  2772,  3328,  1051,
    3330,  2723,  1912,  1226,  2724,  1224,  1913,  1914,  2761,  1548,
    1915,  1916,  1917,  2769,  2778,  2784,  1548,   898,  2792,  2794,
    3338,  2798,   521,  2813,  2822,  2795,  2807,  2790,  1227,  2841,
    2808,   818,  2845,  2853,  1013,  2902,  2886,  2996,  2839,  1014,
    2819,  2815,  2982,  2992,  2859,  2866,  3460,  1229,  2877,  3007,
    2843,  2860,  1548,  2878,  2969,  3340,  1548,  3342,  2970,  1226,
    2971,   521,  2978,  2975,  1548,  2983,  3014,  2987,  2988,  2991,
    3015,  2306,  2283,    14,    15,   816,  1539,  3040,  2810,   525,
    1148,  3020,   870,  3421,  1227,  2299,  2299,  1548,  3042,  3425,
    3046,  3050,  1549,   521,  3060,  3063,  3061,  3096,  1015,   521,
     521,  3414,  2879,  1229,  3064,  2896,  3084,  3091,  2897,  3094,
     521,  3103,  3105,  1879,  1881,   870,  3109,  3119,  3110,    23,
    2880,   521,  3111,  3123,   521,  1361,   521,  3117,  3118,  3127,
    3128,  3129,  3137,  1539,   521,  3409,  3140,   521,   521, -2026,
    3142,  3143,   521,   521,  3147, -2027, -2028, -2029, -2030,   521,
    3161,  3160,  1356,  3176, -2031,  1920, -2032,  3166,  2374,  3162,
   -2033, -2034,  1013,  3181,   521, -2035,  2847,  1014, -2037, -2038,
    1016,  3163, -2039,  2027,   521, -2040,  3164,   520,   532,  2831,
    3195, -2041,  3197,   556,    91,  3167,  2022,  2023,  3174,   556,
    2024, -2042,  2028,   807,   521,   821,   821, -2043,  2029,  3182,
     825,   556,   833,  3199, -2044,   833,  1017, -2046,   851,   855,
   -2047, -2048,   855,  1919, -2049,   556,   556,  1767, -2050,  3200,
    3201,  2881,  1018, -2051,    85, -2052,  1015, -2053, -2054, -2055,
    2882, -2056,  1019,   718, -2057, -1269,  2949,   718,  3204,   718,
    3210,  3211,  3214,  2250,  3216,  3218,  3222,  2954,    11,  2254,
    3224,   521,  1554,   521,  3225,  3228,  3233,  3229,  1546,   807,
     807,  3230,    27,    28,    29,  3252,  1020,  3237,  3253,  3257,
    1549,  3263,  3260,   851,  3265,  3277,    14,    15,   855,   556,
     855,   855,   855,  1920,  2980,  3278, -1268,  1974,  3285,  3287,
    1834,  1836,  2046,  3294,  3295,  1837,  3449,  1838,  1016,  2047,
    2048,  3309,  3296,  2049,  2050,  2051,  3310,  3311,  3325,  3326,
    3332,  3001,  1021,  3329,  3003,  3333,  3341,  3346,  3366,  1022,
    3136,  3370,    23,  3372,  3335,   870,  3373,  3376,   521,    34,
    3382,  1539,  3388,  3390,  1017,  3389,  3395,  3400,  3402,  3407,
      36,  3404,  3087,  3411,  3413,  1551,  3408,  1450,   521,   521,
    1018,  3412,  3420,   521,  1013,  3418,   521,  3427,  1549,  1014,
    1019,  1023,    38,  3422,  3432,  3438,    39, -2058, -2058, -2058,
    3439,  1924,  1925,  1926,  1927,  1928,  1929,  3465,  3445,  3440,
    1024,  3446,  3447,   521,  3475,  3478,  3455,  1361,  3480,  3499,
    3457,  3459,  3496,  3476,  1020,  1548,  3477,   521,  3513,    41,
    3518,  3524,   521,   521,  3529,  3538,  3539,   521,  1539,  3150,
      44,  2901,   521,  2258,   870,   521,   521,  2610,  1015,  1168,
     521,  1286,  2161,  1803,   521,   909,    45,  2905,   521,  2637,
    2301,   981,  2656,  2701,  3205,   521,  2977,   818,    85,   869,
    1021,  3436,  3273,  3506,  3474,  3481,  3500,  1022,  3308,  1025,
      46,  1757,  2592,  2617,  1975,  3186,  3472,   810,  2995,  2870,
    3479,  2588,  3470,   944,    47,    27,    28,    29,   540,  1830,
    2835,  2696,  2955,  2359,  1865,  3393,    23,  3353,  1877,   521,
     987,   816,  2834,  3453,  3417,   525,  3522,   521,  2578,  1023,
    1016,   999,  1367, -1316,  1899,  1921,  1922,  1923,  1192,  1924,
    1925,  1926,  1927,  1928,  1929,  2820,   521,  2564,  1024,  2223,
    1687,  2726,  2574,  3458,  1728,  1539,  1729,  2191,  3403,  3331,
    2222,  2621,  1733,  1551,   811,  2550,  1017,  3049,  2451,  3232,
    1548,   541,    34,  2720,  2719,  1002,   988,  2750,  3279,   887,
    2465,  1399,  1018,    36,  1415,  1448,  1401,  1449,  1405,  2949,
    1552,  1406,  1019,  1407,  1408,  1409,  2368,  1410,  1411,    85,
    3406,  2369,  3405,  2503,  2567,    38,  2774,  1013,  2527,    39,
    2481,  2525,  1014,  2653,  2160,  1960,  2565,  1025,  3095,  2504,
    2786,  1549,  1553,   895,  2458,   542,  1020,  1548,     0,    40,
       0,  2667,     0,     0,     0,   521,   718,     0,     0,     0,
       0,     0,    41,     0,   543,     0,  1883,  1193,     0,     0,
       0,  1551,     0,    44,     0,   870,  3187,     0,     0,    27,
      28,    29,     0,     0,   971,     0,     0,   521,  1539,    45,
       0,  1015,  1021,  1356,     0,     0,     0,     0,     0,  1022,
       0,     0,  2702,   521,  2703,     0,     0,     0,  2708,     0,
    2711,     0,     0,    46,     0,   963,     0,     0,     0,     0,
       0,     0,     0,   544,    85,     0,     0,    47,     0,     0,
    -208,  1539,     0,     0,  1549,     0,   521,     0,     0,     0,
       0,  1023,     0,     0,     0,     0,    34,   521,   521,     0,
    1548,   521,     0,   521,     0,     0,     0,   809,    23,  1620,
    1024,     0,  1621,  1016,   809,     0,  1622,  1623,     0,   855,
   -2058, -2058, -2058,   545,   855,   546,     0,   855,   521,     0,
       0,     0,     0,    39,     0,   556,     0,     0,  1552,     0,
       0,     0,   547,     0,     0,     0,     0,  1631,   548,  1017,
    1562,   549,   521,     0,  1632,     0,     0,     0,     0,     0,
       0,     0,  1574,     0,     0,  1018,    41,     0,     0,     0,
    1553,     0,     0,     0,     0,  1019,     0,    44,  1886,  1025,
       0,  1633,   867,  2949,  1194,     0,     0,     0,     0,  1600,
       0,     0,     0,    45,     0,  1548,     0,     0,  2052,  2053,
    2054,     0,  2055,  2056,  2057,  2058,  2059,  2060,     0,  1020,
    3290,  3291,     0,     0,     0,     0,     0,    46,     0,  1549,
       0,     0,   521,   718,     0,  1887,  1552,   521,     0,     0,
    1195,    47,     0,  1883,     0,     0,   818,   521,     0,   521,
    3351,   521,     0,     0,  1551,   521,  1888,   521,     0,   521,
       0,    27,    28,    29,     0,  1021,     0,     0,  1553,     0,
     521,     0,  1022,     0,  1889,   521,     0,   521,  1890,     0,
       0,     0,  1548,   887,   887,   521,   887,     0,  1634,     0,
     816,     0,     0,     0,   525,     0,     0,  3350,   718,  3352,
       0,  1891,     0,   521,  1892,  1635,     0,     0,  3359,     0,
    1636,     0,  2946,     0,  1023,     0,     0,     0,     0,     0,
    1893,     0,     0,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,  1024,     0,   956,   556,   556,     0,  3384,
       0,     0,     0,     0,     0,  2653,     0,  1551,  1639,     0,
       0,     0,   521,     0,     0,  3387,     0,     0,     0,  3391,
       0,     0,   521,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,  1549,   521,     0,     0,   979,   532,   821,
       0,     0,     0,     0,   520,  1549,   855,     0,   521,  1548,
       0,     0,     0,     0,     0,   807,     0,   818,    41,  1006,
    1006,     0,  1025,  1642,  1006,  1029,   521,     0,     0,    44,
       0,     0,     0,  1894,     0,  1549,     0,     0,   833,   833,
     833,  1895,  1549,  1548,     0,    45,     0,     0,     0,     0,
       0,   521,   833,   833,     0,   833,     0,     0,     0,     0,
     818,   816,     0,  1896,     0,   525,   521,     0,   855,    46,
       0,     0,    85,     0,   556,  2949,     0,   718,  1549,  1552,
       0,     0,  1549,    47,     0,   855,  1620,  3359,   855,  1621,
    1549,     0,  1897,  1622,  1623,     0,     0,     0,     0,     0,
     521,     0,  1551,  3482,   816,     0,     0,     0,   525,   818,
     867,  1553,     0,  1549,   521,   521,   521,     0,     0,     0,
       0,     0,  1548,     0,  1631,  1644,     0,     0,  3093,  3497,
       0, -2058,   855,  1296,     0,     0,     0,     0,     0,     0,
       0,   521,     0,     0,     0,     0,     0,   855,   855,   855,
     855,  1317,     0,   816,     0,     0,     0,   525,  1633,     0,
      14,    15,     0,     0,  1328,  1548,     0,     0,     0,     0,
       0,     0,  1552,     0,     0,     0,     0,     0,     0,     0,
     809,     0,   521,   809,     0,     0,     0,     0,   809,     0,
       0,   809,     0,     0,     0,     0,   809,  1006,  1029,     0,
     855,     0,     0,  1422,  1553,     0,    23,     0,     0,  1006,
    1006,     0,     0,     0,     0,   556,     0,     0,     0,     0,
       0,   807,     0,  2511,   859,     0,     0,     0,   807,     0,
       0,     0,  1645,     0,     0, -2058, -2058, -2058,   556,  1649,
    1650,  1651,  1652,  1653,  1654,  1477,  1551,     0,     0,     0,
       0,     0,     0,     0,    23, -2058,  1559,  1051,  1551,     0,
    1912,     0,     0,     0,  1913,  1914,     0,  1548,  1915,  1916,
    1917,     0, -2058,     0,     0,     0,     0, -2058,     0,     0,
       0,     0,     0,    85,     0,  1870,     0,  1871,  1551,     0,
     897,     0,   900,     0,   904,  1551,     0,  3183,     0,     0,
       0,     0,     0,     0,     0,   556,     0,  1552,     0,     0,
       0,     0,     0,     0,     0, -2058,     0,     0,     0,     0,
    1356,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1551,     0,     0,     0,  1551,     0,     0,     0,  1553,
       0,     0,     0,  1551,     0, -1788,     0,     0,     0,    27,
      28,    29,     0,     0,     0,  1679,     0,     0,  1681,     0,
       0,     0,  2108,     0,     0,     0,  1551,     0,     0,     0,
    1642,     0,   556,   556,     0,     0,     0,     0,     0,     0,
     855,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,    28,    29,
    3250,     0,  1424,  1422,  1217,     0,     0,     0,     0,     0,
       0,     0,     0,   855,  1756,     0,    34,     0,     0,     0,
       0,  1549,     0,   557,  1218,     0,   855,    36,     0,   557,
       0,     0,   887,     0,     0,     0,     0,     0,     0,     0,
       0,   557,     0,   855,     0, -1788,     0,   855,     0,    38,
       0,  1552,  1804,    39,  1051,   557,   557,  1912,     0,     0,
       0,  1913,  1914,  1552,    34,  1915,  1916,  1917,     0,  2946,
    1219,  1919, -2058,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3074,  1553,     0,     0,    41,     0,     0,     0,
       0,     0, -1788,  1552,     0,  1553,     0,    44,     0,     0,
    1552,    39,     0,     0,     0,     0,     0, -1788,  1820,     0,
     855,     0, -1788,    45,     0,     0,   855, -1788,     0,   557,
       0,     0,     0,     0,     0,  1553, -1788,     0,     0,  1548,
    1858, -1788,  1553,     0,    41,     0,  1552,    46,     0,   956,
    1552,  1920,     0,     0,   956,    44,   556,   556,  1552,   556,
     956,    47,     0,     0,     0,     0,  1549,     0,     0,     0,
       0,    45,     0, -1788,     0,  2323,  1220,     0,  1553,     0,
       0,  1552,  1553,     0,    85,     0,     0,     0,     0, -2058,
    1553,     0,     0, -1788,     0,    46,  1649,  1650,  1651,  1652,
    1653,  1654,     0,  1725,     0,     0,  3378,     0,     0,    47,
       0,     0,  1424,  1553,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1549,     0,  1221,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1222,     0,     0,     0,     0,
    1422,  1422, -1788,     0,     0, -1788,  1422,  1223,   520,     0,
       0, -1788,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1006,     0,   556,  1955,     0,     0,     0,     0,     0,
       0,   855,     0,     0,   807,     0,     0,   807,  1919,  1224,
       0,     0,   807,     0,  1551,   807,     0,     0,     0,     0,
     807, -1788,   556,     0,   556,     0,     0,     0,     0,  1991,
       0,     0,     0,     0,     0,     0,     0,     0,   809,  2230,
       0,     0,     0,     0,   809,     0, -1788,     0,     0,  2239,
       0,  2242,     0,     0,  2253,     0,  1549,     0,     0,     0,
    2257,   925,  2259,  1226,     0,     0,   932,     0,     0,   933,
       0,  2946,     0,     0,     0,  2266,     0,     0,  1920,     0,
    2269,     0,     0,     0,  2274,  2275,  2276,  2277,  1227,  2281,
    2282,     0,     0,  1921,  1922,  1923,     0,  1924,  1925,  1926,
    1927,  1928,  1929,     0,   857,     0,     0,  1229,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1788,  2061,     0,     0,     0,     0,     0,     0,
       0,     0, -1788,     0,  2071,     0,     0,     0,     0,  1551,
       0,  1549,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1788,     0, -1788, -1788,     0,     0,     0,     0,  1424,
    1424,     0,     0,  1600,     0,  1424,     0,     0,     0,     0,
       0,     0,     0,   956,     0,     0,     0,     0,     0,     0,
       0,  2108,     0,     0,     0,     0,     0,     0,     0,     0,
   -1788,     0,     0, -1788, -1788, -1788,  1551,  2531,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   809,  1552,
       0,     0,     0,     0,     0,     0,     0,     0,  1549,     0,
    2158,     0,   855,     0,   855,   809,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   855,     0,  2174,     0,     0,
       0,  1553,     0,     0,     0,     0,     0,     0,     0,  1422,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   855,     0,   556,     0,     0,     0,
    1921,  1922,  1923,     0,  1924,  1925,  1926,  1927,  1928,  1929,
    1756,   556,     0,     0,     0,   557,     0,     0,     0,  1551,
       0,   556,  2240,   556,  2244,     0,   556,     0,   991,     0,
       0,     0,   556,     0,   556,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1549,   956,   556,     0,     0,
       0,   956,   556,     0,     0,     0,   556,   556,   556,   556,
       0,   556,   556,     0,  1552,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2302,  1549,
       0,     0,     0,     0,     0,     0,     0,   855,   855,   855,
     855,  1317,   855,     0,     0,     0,  1553,     0,   869,     0,
       0,     0,     0,     0,     0,     0,  2328,  1169,     0,     0,
       0,     0,     0,     0,  1551,     0,     0,     0,     0,     0,
       0,  1552,  2352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1553,  1295,     0,     0,     0,  1549,     0,
       0,     0,  1870,     0,     0,     0,     0,     0,  2193,  1308,
    1310,  1313,  1315,  1422,  1422,  1422,  1422,  1422,  1422,     0,
       0,  1422,  1422,  1422,  1422,  1422,  1422,  1422,  1422,  1422,
    1422,  1551,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1549,     0,     0,     0,     0,   557,   557,     0,     0,
       0,   556,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1417,   855,  1552,     0,     0,     0,  1051,     0,
       0,  1912,   807,     0,     0,  1913,  1914,     0,   807,  1915,
    1916,  1917,     0,   556,     0,     0,     0,     0,   556,     0,
    1051,     0,     0,  1912,     0,     0,  1553,  1913,  1914,  2463,
    2463,  1915,  1916,  1917,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1600,     0,     0,  1620,     0,  3075,  1621,
       0,     0,     0,  1622,  1623,  1624,  1625,  1626,  1627,  1628,
       0,     0,     0,     0,     0,     0,     0,     0,  1551,     0,
       0,     0,     0,  1549,  1629,     0,  1600,     0,     0,     0,
       0,     0,     0,     0,  1631,     0,     0,     0,     0,  1552,
       0,  1632,     0,     0,   557,    85,     0,     0,     0,     0,
     556,    85,  1551,     0,  2500,     0,  2682,     0,     0,   556,
       0,     0,     0,     0,     0,     0,     0,     0,  1633,     0,
       0,  1553,     0,     0,     0,     0,     0,  2846,     0,     0,
       0,     0,  1422,  1422,     0,     0,     0,     0,     0,     0,
       0,     0,  1424,  1424,  1424,  1424,  1424,  1424,     0,  2061,
    1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,
       0,     0,     0,     0,  1425,     0,  1552,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1551,   807,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   556,     0,     0,     0,  1553,   807,
       0,     0,     0,  2174,     0,  1748,    85,     0,     0,     0,
       0,     0, -2058,     0,     0,  1634,     0,     0,  1775,     0,
       0,     0,     0,     0,  1551,     0,     0,     0,     0,     0,
       0,     0,  1635,    85,  1919,  1442,    85,  1636,     0,  1800,
       0,     0,     0,   556,     0,     0,  1422,     0,     0,   556,
       0,     0,     0,     0,     0,     0,     0,     0,  1473,     0,
    1637,  1638,     0,     0,     0,  1820,     0,     0,     0,     0,
       0,     0,     0,  1552,     0,  1639,     0,     0,     0,     0,
       0,     0,  1920,     0,     0,     0,  1600,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1825,     0,  1920,  1553,     0,  1552,  1841,     0,
       0,     0,     0,  1640,     0,     0,  1641,     0,     0,     0,
       0,     0,     0,     0,     0,  1603,  1551,     0,     0,     0,
    1642,  1424,  1424,  1643,     0,  1549,  1820,     0,     0,  1553,
       0,     0,   855,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2850,  2851,  1820,   855,   855,   855,     0,     0,
       0,   809,     0,     0,  1425,     0,     0,     0,   556,     0,
     855,  1620,     0,   855,  1621,   869,     0,  1317,  1622,  1623,
    2903,   855,     0,     0,     0,     0,  1552,   956,     0,     0,
       0,     0,   557,   557,     0,  2956,  2957,  2958,  2959,  2960,
    2961,  2962,  2963,  2964,  2965,     0,     0,  1820,  1820,  1631,
    1820,     0,     0,     0,     0,     0, -2058,     0,  1553,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1552,
       0,     0,  1644,     0,     0,     0,     0,     0,     0,   520,
       0,     0,     0,  1633,     0,  1424,     0,     0,     0,     0,
       0,     0,     0,  1967,     0,     0,     0,     0,     0,  2725,
       0,  1553,     0,     0,     0,     0,     0,   855,   855,   855,
       0,     0,     0,     0,     0,     0,   556,     0,  1422,   556,
       0,     0,     0,     0,     0,   556,     0,     0,     0,     0,
       0,     0,     0,     0,  1921,  1922,  1923,     0,  1924,  1925,
    1926,  1927,  1928,  1929,     0,   855,     0,     0,  2521,     0,
       0,     0,     0,     0,     0,     0,  1921,  1922,  1923,  2061,
    1924,  1925,  1926,  1927,  1928,  1929,     0,     0,     0,     0,
       0,  1552,     0,     0,     0,     0,     0,     0,    85,  1645,
   -2058,     0,  1646,  1647,  1648,     0,  1649,  1650,  1651,  1652,
    1653,  1654,     0,     0,  1422,  1422,     0, -2058,     0,     0,
       0,     0, -2058,  1553,     0,  2486,   557,   557,     0,   557,
       0,     0,     0,     0,     0,     0,  1600,     0,     0,     0,
       0,     0,     0,  2824,     0,     0,     0,     0,  1551,  2174,
       0,  1425,  1425,     0,     0,     0,     0,  1425,     0,     0,
   -2058,     0,     0,     0,     0,   855,     0,     0,     0,   556,
       0,     0,     0,   556,   556,   556,     0,     0,     0,  1820,
    1756,  1820,     0,  1858,     0,     0,     0,     0,     0,  1620,
       0,     0,  1621,     0,     0,     0,  1622,  1623,     0,     0,
       0,  3131,   556,     0,  2904,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1642,     0,   556,   556,   556,
     556,   556,   556,   556,   556,   556,   556,  1631,     0,     0,
       0,     0,     0,   557, -2058,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2159,     0,  2162,     0,     0,  2328,
       0,     0,     0,     0,     0,     0,   855,  2171,     0,     0,
       0,  1633,  1985,  1204,  1989,     0,  1756,     0,     0,  1205,
       0,     0,     0,     0,     0,     0,     0,  1217,     0,     0,
       0,     0,    85,    85,  1858,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1820,     0,  2208,  1218,     0,     0,
       0,     0,     0,     0,     0,  1422,     0,     0,     0,     0,
       0,   556,     0,  1424,  1424,     0,     0, -2058,   855,   855,
     855,   855,     0,     0,     0,     0,  2799,     0,     0,     0,
    1422,     0,     0,  1422,     0,     0,     0,   556,   956,     0,
       0,     0,     0,  1219,     0,     0,  3058,     0,     0,     0,
       0,     0,     0,  1552,     0,     0,     0,     0, -2058,    85,
       0,    85,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3065,  1206, -2058,     0,     0,     0,     0,
   -2058,     0,     0,     0,     0,  1553,     0,     0,     0,  2313,
    2314,  2316,  2317,  2150,  2319,     0,     0,     0,     0,     0,
       0,    85,     0,  3088,     0,   807,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    85, -2058,  3100,
       0,    85,     0,  2174, -2058,     0,     0,     0,     0,  2061,
       0,  1649,  1650,  1651,  1652,  1653,  1654,     0,     0,  1220,
    1425,     0,     0,  1756,     0,     0, -1790,     0,     0,  1820,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   956,   556,  1422,     0,     0,     0,  3276,     0,
     855,     0,     0,  1642,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3151,  1221,  3283,
    3284,     0,     0,     0,     0,     0,     0,     0,  1222,     0,
       0,     0,     0,     0,  1424,     0,     0,     0,     0,     0,
    1223,     0,     0,     0,  3297,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2436,   557,     0,     0,  3043,
       0,  1207,     0,     0,     0,     0,     0,     0,     0,     0,
    1620,   557,  1224,  1621,     0,    85, -1790,  1622,  1623,     0,
       0,   557,     0,   557,     0,     0,   557,     0,     0,     0,
       0,     0,   557,     0,   557,  3168,     0,     0,  1820,     0,
       0,    85, -1805,  3067,     0, -2058,     0,   557,  1631,     0,
       0,  2328,   557,     0,     0, -2058,   557,   557,   557,   557,
    1225,   557,   557, -1790,  1209,     0,  1226,  3202,     0,     0,
       0,     0,     0,     0,  1422,     0,     0,     0, -1790,     0,
       0,     0,  1633, -1790,     0,     0,     0,     0, -1790,     0,
       0,  1227,     0,     0,     0,     0,  1228, -1790,     0,     0,
    3219,     0, -1790,     0,     0,     0,   556,     0,     0,     0,
    1229,     0,     0,   556,  1425,  1425,  1425,  1425,  1425,  1425,
       0,     0,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,     0,  1424, -1790,     0,     0,     0,     0,     0,
       0,     0, -1805,     0,     0,     0,     0,  3247,     0,     0,
       0,     0, -2058,     0, -1790,     0,     0,     0,     0,  1649,
    1650,  1651,  1652,  1653,  1654,     0,     0,  1211,     0,   556,
       0,     0,     0,     0,   556,     0,     0,     0,     0, -2058,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1805,
       0,  1113,  1113,     0,     0,     0, -2058,     0,     0,     0,
     556, -2058,     0, -1790, -1805,     0, -1790,     0,     0, -1805,
       0,   557, -1790,     0, -1805,     0,  3466,     0,     0,     0,
       0,   556,   556, -1805,     0,     0,     0,     0, -1805,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -2058,
     855,     0,  1756,  2450,     0,     0,   556,     0,  1989,     0,
       0,     0, -1790,     0,     0,     0,     0,     0,  1244,     0,
   -1805,   855,  1288,  1293,  3320,     0,     0,     0,     0,     0,
       0,     0,     0,  1424,     0,     0,     0, -1790,     0,     0,
   -1805,     0,     0,     0,  1422,     0,     0,     0,   556,  1006,
       0,  1006,     0,     0,  1642,     0,     0,     0,     0,     0,
       0,     0,     0,  1425,  1425,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1343,  3100,     0,     0,     0,
       0,     0,     0,   855,     0,     0,     0,     0,     0, -1805,
     557,     0, -1805,     0,  1368,   857,     0,     0, -1805,  1603,
    1416,     0,     0,  1418,  2657,     0,  1429,  1432,  1437,  1440,
       0,     0,     0,     0,   855,     0,     0,  2671,  2672,  2674,
       0,     0,     0, -1790,     0,     0,     0,     0,     0,     0,
       0,     0,  2685, -1790,     0,  2688,     0,     0, -1805,     0,
       0,     0,     0,  2695,     0,     0,     0,     0,  1481,  1288,
       0,     0, -1790,  3219, -1790, -1790, -2058,     0,     0,     0,
       0,     0,     0, -1805,     0,     0,     0,     0,     0,  1565,
       0,     0,     0,     0,     0,  3320,     0,  1425,     0,     0,
       0,     0,     0,     0,   557,     0,     0,     0,  1581,     0,
       0, -1790,     0,     0, -1790, -1790, -1790,     0,     0,  1591,
    1592,  1593,  1756,  1597,  1601,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   956,   956,     0,  3320,   956,
       0,   857,     0,     0,     0,     0,     0,  1955,     0,  2732,
    2733,  2734,     0,   557,     0,     0,     0,  1663,   556,  2582,
       0,     0,     0,  3337,     0,     0,     0,     0,     0, -1805,
       0,     0,     0,     0,  1481,  1481,     0,     0,     0, -1805,
    1756,     0,     0, -2058,     0,     0,     0,  3320,     0,     0,
    1649,  1650,  1651,  1652,  1653,  1654,     0,     0, -1805,     0,
   -1805, -1805,     0,     0,     0,  1620,     0,     0,  1621,     0,
    1703,     0,  1622,  1623,  1719,  1724,  1626,  1627,  1628,     0,
       0,     0,     0,     0,   956,  1113,  1113,     0,     0,     0,
       0,     0,     0,  1629,     0,     0,     0, -1805,     0,  2174,
   -1805, -1805, -1805,  1631,  1620,     0,     0,  1621,     0,     0,
    1632,  1622,  1623,  1624,  1625,  1626,  1627,  1628,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1629,     0,     0,     0,     0,  1633,   557,     0,
       0,  1288,  1631,     0,     0,     0,     0,  2842,     0,  1632,
    1288,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1620,     0,     0,  1621,     0,     0,     0,  1622,  1623,     0,
       0,     0,     0,  1619,  1288,     0,  1633,     0,  1620,     0,
       0,  1621,     0,     0,     0,  1622,  1623,  1624,  1625,  1626,
    1627,  1628,     0,     0,     0,     0,     0,     0,  1631,     0,
       0,     0,     0,  1426,     0, -2058,  1629,     0,     0,     0,
    1630,     0,     0,     0,     0,     0,  1631,     0,     0,     0,
       0,     0,     0,  1632,     0,     0,     0,     0,     0,     0,
       0,     0,  1633,     0,  1634,     0,     0,     0,  2986,     0,
       0,     0,     0,     0,     0,     0,   557,     0,     0,   557,
    1633,  1635,     0,     0,     0,  1985,  1636,     0,     0,     0,
       0,  1902,     0,     0,     0,  1425,  1425,     0,     0,     0,
       0,     0,     0,  1634,     0,     0,     0,     0,     0,  1637,
    1638,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1635,     0,     0,     0,  1639,  1636,     0,  2802,     0,     0,
    3022,  3023,  3024,  3025,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1637,  1638,
       0,     0,     0,  1657,  1437,     0,  1437,  1437,     0, -2058,
       0,     0,  1640,  1639,     0,  1641,     0,     0,     0,  1113,
    1113,     0,     0,     0,     0,     0, -2058,  1634,     0,  1642,
       0, -2058,  1643,     0,     0,  1113,     0,     0,     0,     0,
       0,     0,     0,     0,  1635,     0,     0,     0,  1657,  1636,
       0,  1640,     0,     0,  1641,     0,     0,     0,     0,   557,
       0,     0,     0,   557,   557,   557,     0,     0,  1642, -2058,
       0,  1643,  1637,  1638,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1426,     0,     0,     0,  1639,     0,     0,
       0,     0,   557,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   557,   557,   557,
     557,   557,   557,   557,   557,   557,   557,     0,     0,     0,
       0,     0,     0,     0,  1642,  1640,     0,     0,  1641,     0,
       0,  1644,  3138,     0,  1657,     0,  1425,     0,     0,     0,
    2036,     0,  1642,     0,     0,  1643,     0,     0,  2039,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1425,     0,     0,     0,     0,     0,     0,     0,     0,
    1644,     0,     0,     0,     0,     0,     0,     0,  1657,     0,
       0,     0,     0,  1657,     0,     0,     0,  2085,     0,     0,
       0,     0,     0,  2089,  2090,  2091,  2092,  2093,  2094,  2095,
    2096,  1985,     0,     0,     0,  2105,  2106,     0,     0,     0,
    2117,     0,     0,     0,  2120,     0,     0,  2128,  2129,  2130,
    2131,  2132,  2133,  2134,  2135,  2136, -2058,  2450,  2137,     0,
       0,     0,     0,  1657,     0,  1113,     0,  1288,  1645,     0,
       0,  1646,  1647,  1648,  1644,  1649,  1650,  1651,  1652,  1653,
    1654,     0,     0,     0,     0,     0,  2163,     0,  1657,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1645,     0,     0,
    1646,  1647,  1648,     0,  1649,  1650,  1651,  1652,  1653,  1654,
       0,  1592,  1593,     0,     0,  1425,     0,  1905,     0,     0,
       0,     0,     0,     0,     0,     0,  1657,     0,  1657,     0,
    1426,  1426,     0,  1930,     0,     0,  1426,     0,     0,  1657,
       0,     0,  1657,     0,     0,     0,     0,  1657,     0,     0,
    1657,     0,     0, -2058,     0,     0,     0,     0,     0,     0,
    1649,  1650,  1651,  1652,  1653,  1654,     0,     0,     0,     0,
       0,  1645,     0,   557,  1646,  1647,  1648,     0,  1649,  1650,
    1651,  1652,  1653,  1654,     0,     0,     0,     0,     0,  1620,
       0,  1657,  1621,     0,     0,     0,  1622,  1623,  2285,     0,
       0,     0,  1288,     0,     0,  2295,  2296,     0,     0,     0,
       0,     0,  1620,     0,     0,  1621,     0,     0,     0,  1622,
    1623,  1624,  1625,  1626,  1627,  1628,     0,  1631,     0,     0,
       0,     0,     0,     0, -2058,     0,     0,     0,     0,     0,
    1629,     0,     0,  1288,  2783,     0,     0,     0,     0,     0,
    1631,     0,  3293,     0,     0,  1425,     0,  1632,     0,     0,
       0,  1633,     0,     0,     0,  1343,  2360,     0,     0,     0,
       0,     0,     0,  3318,     0,  1657,     0,     0,     0,     0,
    1620,     0,     0,  1621,  1633,     0,     0,  1622,  1623,     0,
       0,  1657,     0,     0,     0,  2384,  2385,     0,  2386,     0,
       0,  1657,  1657,  1657,     0,     0,     0,  1657,     0,     0,
       0,  1657,     0,     0,     0,     0,     0,     0,  1631,     0,
       0,     0,     0,     0,     0, -2058,  2803,  2412,  2413,     0,
       0,  2163,     0,     0,     0,  3357,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3227,     0,     0,     0,
       0,     0,  1633,  2450,     0,     0,     0,     0, -2058,     0,
    2440,     0,     0,     0,     0,  2445,  3383,     0,     0,     0,
       0,     0,     0,  1657,     0, -2058,     0,     0,     0,     0,
   -2058,  1634,     0,     0,  1481,     0,  1288,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1635,     0,
       0,     0,     0,  1636,     0,     0,     0,     0,     0,   557,
       0,     0,     0,  1657,   557,     0,     0,  3078, -2058,     0,
       0,     0,     0,     0,  2479,     0,  1637,  1638,     0,  1657,
       0,     0,     0,     0,  1657,     0,     0,     0,     0,     0,
     557,  1639,     0,     0,     0,     0,     0,     0,     0, -2058,
       0,  1930,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   557,   557,  2498,     0,  1425, -2058,     0,  2501,  2502,
       0, -2058,     0,  1642,     0,     0,     0,     0,     0,  1640,
       0,     0,  1641,     0,     0,     0,   557,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1642,     0,     0,  1643,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -2058,
       0,     0,  2523,     0,     0,  2526,     0,  2528,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   557,     0,
       0,     0,     0,  2532,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1642,     0,     0,     0,     0,     0,
       0,     0,     0,  1703,     0, -2058,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1724,  2135,     0,     0,     0,     0,     0,     0,  1644,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1113,
       0,     0,  1657,     0,     0,     0,     0,     0,  2586,     0,
    1930,  1930,     0,  1426,  1426,  1426,  1426,  1426,  1426,     0,
       0,  1426,  1426,  1426,  1426,  1426,  1426,  1426,  1426,  1426,
    1426,  1930,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2058,     0,     0,     0,
       0,     0,     0,     0,     0,  1593,     0,     0,     0,     0,
       0,  1288, -2058,     0,     0,     0,     0,     0,     0,  1649,
    1650,  1651,  1652,  1653,  1654,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1645,     0,     0,  1646,  1647,
    1648,     0,  1649,  1650,  1651,  1652,  1653,  1654,   557,     0,
       0,     0,  2076,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2691,     0,     0,
       0,     0,     0,     0,     0,     0,  1657,     0,     0,  1657,
       0,     0,     0,     0,     0,     0,     0,     0,  1371,     0,
     820,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -2058,     0,     0,     0,     0,     0,     0,
    1649,  1650,  1651,  1652,  1653,  1654,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1657,     0,     0,     0,  1657,
    1657,  1657,  1657,  1657,  1657,  1657,  1657,     0,     0,     0,
       0,     0,  1426,  1426,     0,  1657,  1657,     0,     0,     0,
       0,     0,     0,  1372,  1373,     0,     0,  1657,     0,     0,
    1657,     0,     0,     0,     0,     0,     0,     0,  1657,  1657,
    1657,  1657,  1657,  1657,  1657,  1657,  1657,  1657,   -46,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1374,  1375,     0,     0,  1376,  1377,
       1,  2771,     0,  1657,     0,     0,     0,  2773,  2039,     0,
       2,     0,     3,     4,     0,     0,     0,     0,  2779,     0,
       0,     0,     0,     0,     0,     5,     0,     0,     0,  2788,
       6,     0,  2791,     0,  2793,     0,     0,     0,     0,     7,
       0,     0,  2797,     0,     0,     0,     0,     0,     0,     0,
    2804,  2805,     0,     8,     0,     0,  1426,  2812,     0,     0,
       0,     0,     9,     0,    10,     0,     0,     0,     0,     0,
       0,     0,  2821,     0,  1378,  1379,    11,     0,    12,     0,
       0,     0,  2836,     0,     0,  1620,     0,     0,  1621,    13,
       0,     0,  1622,  1623,     0,     0,  1626,  1627,  1628,     0,
       0,     0,  1113,     0,    14,    15,    16,     0,     0,     0,
       0,     0,     0,  1629,     0,    17,     0,     0,     0,     0,
       0,    18,     0,  1631,     0,  1657,     0,     0,     0,    19,
    1632,    20,    21,     0,     0,  1657,  1657,     0,  1380,  1381,
    1382,  1383,  1384,  1385,  1386,  1387,    22,     0,  1388,  1389,
      23,     0,     0,     0,     0,     0,     0,  1633,     0,  2285,
       0,  2285,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    25,     0,     0,     0,     0,     0,     0,     0,
    1657,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,     0,
       0,     0,  1390,  1391,  1657,  1657,  1657,     0,     0,  1930,
    1930,  1930,  1930,  1930,  1930,     0,     0,     0,  1930,  1930,
    1930,  1930,  1930,  1930,  1930,  1930,  1930,  1930,     0,     0,
       0,     0,  1657,  1657,  1634,     0,  3038,  3039,     0,     0,
       0,     0,     0,  1392,  1393,     0,     0,     0,     0,     0,
       0,  1635,     0,     0,     0,     0,  1636,     0,     0,     0,
    1657,     0,     0,     0,     0,  1657,     0,     0,     0,     0,
       0,  3062,     0,    27,    28,    29,     0,     0,     0,  1637,
    1638,    30,     0,     0,    31,  3066,     0,     0,     0,     0,
    3068,  3069,     0,     0,  1639,  3070,     0,     0,     0,  1657,
    3073,     0,     0,  3076,  3077,     0,     0,     0,  2285,  1288,
       0,     0,  3085,     0,     0,    32,     0,     0,  1657,     0,
       0,  1657,  1657,  1113,    33,     0,     0,     0,     0,  1930,
    1930,     0,  1640,     0,     0,  1641,     0,     0,  1394,  1395,
      34,     0,     0,  1657,  1426,  1426,  1657,    35,  1657,  1642,
       0,    36,  1657,     0,     0,     0,     0,     0,     0,     0,
       0,    37,  1396,  1397,     0,     0,     0,  3126,     0,     0,
       0,     0,     0,    38,     0,     0,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3145,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,  1657,     0,     0,     0,
      41,     0,     0,    42,     0,     0,    43,     0,     0,  1620,
       0,    44,  1621,     0,     0,     0,  1622,  1623,  1624,  1625,
    1626,  1627,  1628,     0,     0,     0,     0,    45,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1629,     0,     0,
       0,  1644,     0,     0,     0,     0,     0,  1631,     0,     0,
       0,    46,     0,     0,  1632,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    47,     0,     0,   -46,     0,
       0,     0,     0,  3178,     0,     0,     0,     0,     0,     0,
       0,  1633,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1620,     0,     0,  1621,
       0,  1657,     0,  1622,  1623,  1624,  1625,  1626,  1627,  1628,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1601,     0,     0,  1629,  1426,     0,     0,     0,     0,
       0,     0,     0,     0,  1631,     0,     0,     0,     0,     0,
       0,  1632,     0,     0,     0,     0,     0,     0,  1645,     0,
       0,  1646,  1647,  1648,  2498,  1649,  1650,  1651,  1652,  1653,
    1654,     0,     0,     0,     0,  3239,  3240,     0,  1633,  3241,
       0,  1593,     0,     0,     0,     0,     0,     0,  1634,     0,
       0,  1657,     0,  1657,     0,     0,     0,     0,     0,  1657,
       0,     0,     0,     0,     0,  1635,  3259,     0,  1657,     0,
    1636,  1657,     0,  1657,     0,     0,     0,  1657,     0,     0,
    1930,  1930,     0,     0,  1657,  1657,     0,     0,     0,     0,
    3271,     0,  1657,  1637,  1638,     0,     0,     0,     0,     0,
       0,  1657,     0,     0,     0,     0,     0,     0,  1639,     0,
       0,     0,     0,     0,     0,     0,  1657,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1620,
       0,     0,  1621,     0,     0,  1634,  1622,  1623,     0,     0,
    1626,  1627,  1628,     0,     0,     0,  1640,     0,     0,  1641,
       0,     0,  1635,     0,  1426,     0,     0,  1636,     0,     0,
    3316,     0,     0,  1642,     0,     0,  1643,  1631,     0,     0,
       0,     0,     0,     0,  1632,     0,     0,     0,     0,  3038,
    1637,  1638,     0,  3334,     0,     0,     0,  1113,     0,     0,
       0,     0,     0,     0,     0,  1639,     0,     0,  3343,     0,
       0,  1633,     0,  2285,     0,  2285,     0,     0,     0,     0,
       0,     0,     0,  1113,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1204,     0,     0,     0,
       0,  3368,  1205,  1640,     0,     0,  1641,     0,     0,     0,
    1217,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1642,     0,     0,  1643,     0,     0,     0,     0,     0,     0,
    1218,     0,     0,     0,     0,  1644,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3394,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3038,     0,     0,  1930,  1426,     0,     0,     0,  1634,     0,
       0,     0,  1113,     0,     0,     0,  1219,     0,     0,     0,
       0,     0,     0,     0,     0,  1635,     0,     0,  1657,  1657,
    1636,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3437,     0,     0,  1206,     0,     0,
       0,     0,  1657,  1637,  1638,     0,  1657,     0,  1657,  1657,
    1657,     0,  1644,  1657,     0,     0,  1657,  1657,  1639,     0,
       0,     0,     0,     0,     0,  1657,     0,     0,     0,     0,
       0,     0,  1645,     0,     0,  1646,  1647,  1648,     0,  1649,
    1650,  1651,  1652,  1653,  1654,     0,     0,     0,     0,  2076,
       0,     0,     0,     0,     0,     0,  1640,     0,     0,  1641,
       0,     0,  1220,     0,     0,     0,  1657,     0,     0,     0,
       0,     0,  1930,  1642,     0,     0,     0,     0,     0,     0,
       0,     0,  3491,  3491,  3491,  1657,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3491,
       0,  1221,     0,     0,     0,     0,     0,     0,  1657,  1645,
       0,  1222,  1646,  1647,  1648,     0,  1649,  1650,  1651,  1652,
    1653,  1654,     0,  1223,     0,     0,  2383,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1930,     0,     0,     0,
    3491,     0,     0,     0,  1207,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1224,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1644,     0,     0,     0,  1657,
    1657,  1657,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1657,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1657,     0,  2260,     0,     0,     0,  1209,     0,  1226,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1227,     0,     0,     0,     0,  2261,
       0,     0,     0,     0,     0,     0,  1657,     0,     0,     0,
       0,     0,     0,  1229,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1657,     0,     0,     0,     0,     0,
       0,     0,  1645,  1657,     0,  1646,  1647,  1648,     0,  1649,
    1650,  1651,  1652,  1653,  1654,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1657,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1211,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1657,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     117,  1048,   820,  1049,  1050,  1051,  1052,  1053,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1657,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,  1054,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,  1055,   141,  1056,  1057,     0,   144,   145,   146,   147,
     148,   149,  1058,   790,   150,   151,   152,   153,  1059,  1060,
     156,  1657,   157,   158,   159,   160,   791,     0,   792,     0,
    1061,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1062,
     191,   192,  1063,   194,  1064,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1065,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1066,
     222,   223,   224,   225,   226,   227,   793,  1067,   229,     0,
     230,   231,  1068,   233,     0,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,     0,   243,     0,  1069,
    1070,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1071,  1072,     0,  1073,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
       0,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1074,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1075,   323,  1076,   325,   326,
     327,   328,  1077,   329,   330,   331,   332,  1078,   795,   334,
    1079,   336,   337,   338,     0,   339,   340,     0,     0,  1080,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     797,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   798,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,  1081,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,   403,   404,   405,   406,  1082,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,     0,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,   430,   431,   432,  1083,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   800,     0,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,   459,  1084,  1085,     0,     0,
     462,   463,   801,   465,   802,  1086,   467,   468,   803,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1087,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,  1088,     0,
       0,     0,     0,     0,     0,  1089,  1090,  1091,     0,     0,
       0,     0,  1092,     0,  1093,     0,     0,     0,     0,  1094,
    1095,     0,  1096,  1097,  2638,   117,  1048,   820,  1049,  1050,
    1051,  1052,  1053,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,  1054,     0,     0,   129,   130,   131,     0,   132,   133,
     134,   135,   136,   137,   138,   139,  1055,   141,  1056,  1057,
       0,   144,   145,   146,   147,   148,   149,  1058,   790,   150,
     151,   152,   153,  1059,  1060,   156,     0,   157,   158,   159,
     160,   791,     0,   792,     0,  1061,   164,   165,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,  1062,   191,   192,  1063,   194,  1064,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,  1065,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,  1066,   222,   223,   224,   225,   226,
     227,   793,  1067,   229,     0,   230,   231,  1068,   233,     0,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,     0,   243,     0,  1069,  1070,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,   274,  1071,  1072,
       0,  1073,     0,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,     0,     0,   289,   290,   291,   292,
       0,   293,   294,   295,   296,   297,   298,   299,   300,  1074,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
    1075,   323,  1076,   325,   326,   327,   328,  1077,   329,   330,
     331,   332,  1078,   795,   334,  1079,   336,   337,   338,     0,
     339,   340,     0,     0,  1080,   342,   343,     0,     0,   344,
     345,   346,   347,   348,   349,   797,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   798,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,  1081,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,   401,   402,   403,   404,   405,   406,
    1082,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,     0,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,   430,   431,   432,  1083,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   800,     0,     0,   450,
     451,     0,   452,   453,   454,   455,   456,   457,   458,     0,
     459,  1084,  1085,     0,     0,   462,   463,   801,   465,   802,
    1086,   467,   468,   803,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,  1087,     0,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,  1088,     0,     0,     0,     0,     0,     0,
    1089,  1090,  1091,     0,     0,     0,     0,  1092,     0,  1093,
       0,     0,     0,     0,  1094,  1095,     0,  1096,  1097,  3242,
     117,  1048,   820,  1049,  1050,  1051,  1052,  1053,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,  1054,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,  1055,   141,  1056,  1057,     0,   144,   145,   146,   147,
     148,   149,  1058,   790,   150,   151,   152,   153,  1059,  1060,
     156,     0,   157,   158,   159,   160,   791,     0,   792,     0,
    1061,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1062,
     191,   192,  1063,   194,  1064,   195,     0,   196,   197,   198,
     199,   200,   201,    14,    15,   202,   203,   204,   205,     0,
       0,   206,   207,  1065,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1066,
     222,   223,   224,   225,   226,   227,   793,  1067,   229,     0,
     230,   231,  1068,   233,     0,   234,     0,   235,   236,    23,
     237,   238,   239,   240,   241,   242,     0,   243,     0,  1069,
    1070,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1071,  1072,     0,  1073,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
       0,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1074,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1075,   323,  1076,   325,   326,
     327,   328,  1077,   329,   330,   331,   332,  1078,   795,   334,
    1079,   336,   337,   338,     0,   339,   340,     0,     0,  1080,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     797,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    27,    28,    29,     0,   362,   363,   798,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,  1081,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,   403,   404,   405,   406,  1082,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    34,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
      36,   430,   431,   432,  1083,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   800,    38,     0,   450,   451,    39,   452,   453,   454,
     455,   456,   457,   458,     0,   459,  1084,  1085,     0,     0,
     462,   463,   801,   465,   802,  1086,   467,   468,   803,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,    41,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     804,  1087,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,    45,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,  1088,     0,
      46,     0,     0,     0,     0,  1089,  1090,  1091,     0,     0,
       0,     0,  1092,     0,  1093,  3217,     0,     0,     0,  1094,
    1095,     0,  1096,  1097,   117,  1048,   820,  1049,  1050,  1051,
    1052,  1053,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
    1054,     0,     0,   129,   130,   131,     0,   132,   133,   134,
     135,   136,   137,   138,   139,  1055,   141,  1056,  1057,     0,
     144,   145,   146,   147,   148,   149,  1058,   790,   150,   151,
     152,   153,  1059,  1060,   156,     0,   157,   158,   159,   160,
     791,     0,   792,     0,  1061,   164,   165,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1062,   191,   192,  1063,   194,  1064,   195,
       0,   196,   197,   198,   199,   200,   201,    14,    15,   202,
     203,   204,   205,     0,     0,   206,   207,  1065,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,  1066,   222,   223,   224,   225,   226,   227,
     793,  1067,   229,     0,   230,   231,  1068,   233,     0,   234,
       0,   235,   236,    23,   237,   238,   239,   240,   241,   242,
       0,   243,     0,  1069,  1070,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,   274,  1071,  1072,     0,
    1073,     0,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   290,   291,   292,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1074,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1075,
     323,  1076,   325,   326,   327,   328,  1077,   329,   330,   331,
     332,  1078,   795,   334,  1079,   336,   337,   338,     0,   339,
     340,     0,     0,  1080,   342,   343,     0,     0,   344,   345,
     346,   347,   348,   349,   797,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    27,    28,    29,     0,
     362,   363,   798,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,  1081,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,   401,   402,   403,   404,   405,   406,  1082,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    34,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,    36,   430,   431,   432,  1083,   434,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   800,    38,     0,   450,   451,
      39,   452,   453,   454,   455,   456,   457,   458,     0,   459,
    1084,  1085,     0,     0,   462,   463,   801,   465,   802,  1086,
     467,   468,   803,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,    41,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   804,  1087,     0,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
      45,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,  1088,     0,    46,     0,     0,     0,     0,  1089,
    1090,  1091,     0,     0,     0,     0,  1092,     0,  1093,     0,
       0,     0,     0,  1094,  1095,     0,  1096,  1097,   117,  1048,
     820,  1049,  1050,  1051,  1052,  1053,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,  1054,     0,     0,   129,   130,   131,
       0,   132,   133,   134,   135,   136,   137,   138,   139,  1055,
     141,  1056,  1057,     0,   144,   145,   146,   147,   148,   149,
    1058,   790,   150,   151,   152,   153,  1059,  1060,   156,     0,
     157,   158,   159,   160,   791,     0,   792,     0,  1061,   164,
     165,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,  1062,   191,   192,
    1063,   194,  1064,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1065,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1066,   222,   223,
     224,   225,   226,   227,   793,  1067,   229,     0,   230,   231,
    1068,   233,     0,   234,     0,   235,   236,    23,   237,   238,
     239,   240,   241,   242,     0,   243,     0,  1069,  1070,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,  1071,  1072,     0,  1073,     0,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,     0,     0,   289,
     290,   291,   292,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1074,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1075,   323,  1076,   325,   326,   327,   328,
    1077,   329,   330,   331,   332,  1078,   795,   334,  1079,   336,
     337,   338,     0,   339,   340,     0,     0,  1080,   342,   343,
       0,     0,   344,   345,   346,   347,   348,   349,   797,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      27,    28,    29,     0,   362,   363,   798,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,  1081,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,   401,   402,   403,
     404,   405,   406,  1082,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    34,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,   430,
     431,   432,  1083,   434,     0,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   800,
       0,     0,   450,   451,    39,   452,   453,   454,   455,   456,
     457,   458,     0,   459,  1084,  1085,     0,     0,   462,   463,
     801,   465,   802,  1086,   467,   468,   803,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,    41,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   804,  1087,
       0,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,    45,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,  1088,     0,    46,     0,
       0,     0,     0,  1089,  1090,  1091,     0,     0,     0,     0,
    1092,     0,  1093,     0,     0,     0,     0,  1094,  1095,     0,
    1096,  1097,  1249,  1048,   820,  1049,  1050,  1051,  1052,  1053,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,  1250,
     126,   127,   128,     0,     0,     0,  1251,     0,  1054,     0,
       0,  1252,   130,   131,     0,   132,   133,   134,  1253,   136,
     137,   138,   139,  1055,  1254,  1056,  1057,     0,   144,   145,
     146,   147,   148,   149,  1058,   790,   150,   151,   152,   153,
    1059,  1060,   156,     0,   157,   158,   159,   160,   791,     0,
    1255,     0,  1256,   164,   165,   166,   167,   168,  1257,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
    1258,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,  1062,   191,   192,  1063,   194,  1064,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,  1259,     0,   206,   207,  1065,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1066,   222,   223,   224,   225,   226,   227,   793,  1067,
     229,     0,   230,   231,  1068,   233,     0,   234,     0,   235,
    1260,     0,  1261,   238,   239,  1262,  1263,   242,     0,   243,
       0,  1069,  1070,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,  1264,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,  1265,   269,
     270,   271,   272,   273,   274,  1071,  1072,     0,  1073,     0,
     278,  1266,  1267,   281,  1268,   283,   284,   285,   286,   287,
     288,     0,     0,   289,  1269,   291,  1270,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1271,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1075,  1272,  1076,
     325,   326,   327,   328,  1077,   329,   330,  1273,   332,  1078,
     795,   334,  1079,   336,   337,   338,     0,   339,   340,     0,
       0,  1080,   342,   343,     0,     0,   344,   345,   346,  1274,
     348,  1275,   797,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     798,  1276,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,  1081,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,   401,   402,  1277,   404,   405,   406,  1082,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,     0,  1278,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,  1279,   431,   432,  1083,   434,     0,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,  1280,   448,   800,     0,     0,   450,   451,     0,   452,
    1281,   454,   455,   456,   457,   458,     0,   459,  1084,  1085,
       0,     0,   462,   463,   801,   465,   802,  1086,   467,   468,
    1282,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,  1087,  1283,   489,  1284,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
    1088,     0,     0,     0,     0,     0,     0,  1089,  1090,  1091,
       0,     0,     0,     0,  1092,     0,  1093,  1285,     0,     0,
       0,  1094,  1095,     0,  1096,  1097,   117,  1048,   820,  1049,
    1050,     0,  1052,  1053,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,  1054,     0,     0,   129,   130,   131,     0,   132,
     133,   134,   135,   136,   137,   138,   139,  1055,   141,  1056,
    1057,     0,   144,   145,   146,   147,   148,   149,  1058,   790,
     150,   151,   152,   153,  1059,  1060,   156,     0,   157,   158,
     159,   160,   791,     0,   792,     0,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1062,   191,   192,  1063,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,    14,
      15,   202,   203,   204,   205,     0,     0,   206,   207,  1065,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,  1066,   222,   223,   224,   225,
     226,   227,   793,  1067,   229,     0,   230,   231,  1068,   233,
       0,   234,     0,   235,   236,    23,   237,   238,   239,   240,
     241,   242,     0,   243,     0,  1069,  1070,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,  1071,
    1072,     0,  1073,     0,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   290,   291,
     292,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1074,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1075,   323,  1076,   325,   326,   327,   328,     0,   329,
     330,   331,   332,  1078,   795,   334,  1079,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,   347,   348,   349,   797,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    27,    28,
      29,     0,   362,   363,   798,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,  1081,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,  1082,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    34,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    36,   430,   431,   432,
    1083,   434,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   800,    38,     0,
     450,   451,    39,   452,   453,   454,   455,   456,   457,   458,
       0,   459,  1084,  1085,     0,     0,   462,   463,   801,   465,
     802,  1086,   467,   468,   803,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,    41,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   804,  1087,     0,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,    45,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,     0,     0,    46,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1092,     0,
    1093,     0,     0,     0,     0,  1094,  1095,     0,  1096,  1097,
     117,  1048,   820,  1049,  1050,  1051,  1052,  1053,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,  1054,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,  1055,   141,  1056,  1057,  1433,   144,   145,   146,   147,
     148,   149,  1058,   790,   150,   151,   152,   153,  1059,  1060,
     156,     0,   157,   158,   159,   160,   791,     0,   792,     0,
    1061,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1062,
     191,   192,  1063,   194,  1064,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1065,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1066,
     222,   223,   224,   225,   226,   227,   793,  1067,   229,     0,
     230,   231,  1068,   233,     0,   234,     0,   235,   236,  1434,
     237,   238,   239,   240,   241,   242,     0,   243,     0,  1069,
    1070,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1071,  1072,     0,  1073,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
    1435,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1074,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1075,   323,  1076,   325,   326,
     327,   328,  1077,   329,   330,   331,   332,  1078,   795,   334,
    1079,   336,   337,   338,     0,   339,   340,     0,     0,  1080,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     797,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   798,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,  1081,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,   403,   404,   405,   406,  1082,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,     0,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,   430,   431,   432,  1083,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   800,     0,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,   459,  1084,  1085,     0,  1436,
     462,   463,   801,   465,   802,  1086,   467,   468,   803,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1087,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,  1088,     0,
       0,     0,     0,     0,     0,  1089,  1090,  1091,     0,     0,
       0,     0,  1092,     0,  1093,     0,     0,     0,     0,  1094,
    1095,     0,  1096,  1097,  1249,  1048,   820,  1049,  1050,  1051,
    1052,  1053,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,  1251,     0,
    1054,     0,     0,  1252,   130,   131,     0,   132,   133,   134,
    1253,   136,   137,   138,   139,  1055,  1254,  1056,  1057,     0,
     144,   145,   146,   147,   148,   149,  1058,   790,   150,   151,
     152,   153,  1059,  1060,   156,     0,   157,   158,   159,   160,
     791,     0,  1255,     0,  1256,   164,   165,   166,   167,   168,
    1257,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,  1258,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1062,   191,   192,  1063,   194,  1064,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1065,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,  1066,   222,   223,   224,   225,   226,   227,
     793,  1067,   229,     0,   230,   231,  1068,   233,     0,   234,
       0,   235,  1260,     0,  1261,   238,   239,  1262,  1263,   242,
       0,   243,     0,  1069,  1070,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,  1264,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
    1265,   269,   270,   271,   272,   273,   274,  1071,  1072,     0,
    1073,     0,   278,  1266,  1267,   281,  1268,   283,   284,   285,
     286,   287,   288,     0,     0,   289,  1269,   291,  1270,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1271,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1075,
    1272,  1076,   325,   326,   327,   328,  1077,   329,   330,  1273,
     332,  1078,   795,   334,  1079,   336,   337,   338,     0,   339,
     340,     0,     0,  1080,   342,   343,     0,     0,   344,   345,
     346,  1274,   348,  1275,   797,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   798,  1276,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,  1081,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,   401,   402,  1277,   404,   405,   406,  1082,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,     0,  1278,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,  1279,   431,   432,  1083,   434,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,  1280,   448,   800,     0,     0,   450,   451,
       0,   452,  1281,   454,   455,   456,   457,   458,     0,   459,
    1084,  1085,     0,     0,   462,   463,   801,   465,   802,  1086,
     467,   468,  1282,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,  1087,  2290,   489,  1284,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,  1088,     0,     0,     0,     0,     0,     0,  1089,
    1090,  1091,     0,     0,     0,     0,  1092,     0,  1093,     0,
       0,     0,     0,  1094,  1095,     0,  1096,  1097,  1249,  1048,
     820,  1049,  1050,  1051,  1052,  1053,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,  1251,     0,  1054,     0,     0,  1252,   130,   131,
       0,   132,   133,   134,  1253,   136,   137,   138,   139,  1055,
    1254,  1056,  1057,     0,   144,   145,   146,   147,   148,   149,
    1058,   790,   150,   151,   152,   153,  1059,  1060,   156,     0,
     157,   158,   159,   160,   791,     0,  1255,     0,  1256,   164,
     165,   166,   167,   168,  1257,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,  1258,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,  1062,   191,   192,
    1063,   194,  1064,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1065,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1066,   222,   223,
     224,   225,   226,   227,   793,  1067,   229,     0,   230,   231,
    1068,   233,     0,   234,     0,   235,  1260,     0,  1261,   238,
     239,  1262,  1263,   242,     0,   243,     0,  1069,  1070,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,  1264,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,  1265,   269,   270,   271,   272,   273,
     274,  1071,  1072,     0,  1073,     0,   278,  1266,  1267,   281,
    1268,   283,   284,   285,   286,   287,   288,     0,     0,   289,
    1269,   291,  1270,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1271,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1075,  1272,  1076,   325,   326,   327,   328,
    1077,   329,   330,  1273,   332,  1078,   795,   334,  1079,   336,
     337,   338,     0,   339,   340,     0,     0,  1080,   342,   343,
       0,     0,   344,   345,   346,  1274,   348,  1275,   797,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   798,  1276,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,  1081,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,   401,   402,  1277,
     404,   405,   406,  1082,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,     0,  1278,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,  1279,
     431,   432,  1083,   434,     0,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,  1280,   448,   800,
       0,     0,   450,   451,     0,   452,  1281,   454,   455,   456,
     457,   458,     0,   459,  1084,  1085,     0,     0,   462,   463,
     801,   465,   802,  1086,   467,   468,  1282,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,  1087,
       0,   489,  1284,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,  1088,     0,     0,     0,
       0,     0,     0,  1089,  1090,  1091,     0,     0,     0,     0,
    1092,     0,  1093,  2344,     0,     0,     0,  1094,  1095,     0,
    1096,  1097,   117,  1048,   820,  1049,  1050,  1051,  1052,  1053,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125, -1116,
     126,   127,   128,     0,     0,     0,     0, -1116,  1054,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,   139,  1055,   141,  1056,  1057,     0,   144,   145,
     146,   147,   148,   149,  1058,   790,   150,   151,   152,   153,
    1059,  1060,   156,     0,   157,   158,   159,   160,   791,     0,
     792,     0,  1061,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,  1062,   191,   192,  1063,   194,  1064,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1065,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1066,   222,   223,   224,   225,   226,   227,   793,  1067,
     229,     0,   230,   231,  1068,   233,     0,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,     0,   243,
       0,  1069,  1070,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,  1071,  1072,     0,  1073,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1074,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1075,   323,  1076,
     325,   326,   327,   328,  1077,   329,   330,   331,   332,  1078,
     795,   334,  1079,   336,   337,   338,     0,   339,   340,     0,
       0,  1080,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   797,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     798,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,  1081,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,   401,   402,   403,   404,   405,   406,  1082,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,     0,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,   430,   431,   432,  1083,   434, -1116,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   800,     0,     0,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,     0,   459,  1084,  1085,
       0,     0,   462,   463,   801,   465,   802,  1086,   467,   468,
     803,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,  1087,     0,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
    1088,     0,     0,     0,     0,     0,     0,  1089,  1090,  1091,
       0,     0,     0,     0,  1092,     0,  1093,     0,     0,     0,
       0,  1094,  1095,     0,  1096,  1097,  1249,  1048,   820,  1049,
    1050,  1051,  1052,  1053,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
    1251,     0,  1054,     0,     0,  1252,   130,   131,     0,   132,
     133,   134,  1253,   136,   137,   138,   139,  1055,  1254,  1056,
    1057,     0,   144,   145,   146,   147,   148,   149,  1058,   790,
     150,   151,   152,   153,  1059,  1060,   156,     0,   157,   158,
     159,   160,   791,     0,  1255,     0,  1256,   164,   165,   166,
     167,   168,  1257,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,  1258,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1062,   191,   192,  1063,   194,
    1064,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,  1065,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,  1066,   222,   223,   224,   225,
     226,   227,   793,  1067,   229,     0,   230,   231,  1068,   233,
       0,   234,     0,   235,  1260,     0,  1261,   238,   239,  1262,
    1263,   242,     0,   243,     0,  1069,  1070,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,  1264,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,  1265,   269,   270,   271,   272,   273,   274,  1071,
    1072,     0,  1073,     0,   278,  1266,  1267,   281,  1268,   283,
     284,   285,   286,   287,   288,     0,     0,   289,  1269,   291,
    1270,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1271,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1075,  1272,  1076,   325,   326,   327,   328,  1077,   329,
     330,  1273,   332,  1078,   795,   334,  1079,   336,   337,   338,
       0,   339,   340,     0,     0,  1080,   342,   343,     0,     0,
     344,   345,   346,  1274,   348,  1275,   797,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   798,  1276,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,  1081,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   401,   402,  1277,   404,   405,
     406,  1082,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,     0,  1278,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,  1279,   431,   432,
    1083,   434,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,  1280,   448,   800,     0,     0,
     450,   451,     0,   452,  1281,   454,   455,   456,   457,   458,
       0,   459,  1084,  1085,     0,     0,   462,   463,   801,   465,
     802,  1086,   467,   468,  1282,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,  1087,     0,   489,
    1284,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,  1088,     0,     0,     0,     0,     0,
       0,  1089,  1090,  1091,     0,     0,     0,     0,  1092,     0,
    1093,  3082,     0,     0,     0,  1094,  1095,     0,  1096,  1097,
    1249,  1048,   820,  1049,  1050,  1051,  1052,  1053,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,  1251,     0,  1054,     0,     0,  1252,
     130,   131,     0,   132,   133,   134,  1253,   136,   137,   138,
     139,  1055,  1254,  1056,  1057,     0,   144,   145,   146,   147,
     148,   149,  1058,   790,   150,   151,   152,   153,  1059,  1060,
     156,     0,   157,   158,   159,   160,   791,     0,  1255,     0,
    1256,   164,   165,   166,   167,   168,  1257,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,  1258,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1062,
     191,   192,  1063,   194,  1064,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1065,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1066,
     222,   223,   224,   225,   226,   227,   793,  1067,   229,     0,
     230,   231,  1068,   233,     0,   234,     0,   235,  1260,     0,
    1261,   238,   239,  1262,  1263,   242,     0,   243,     0,  1069,
    1070,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,  1264,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,  1265,   269,   270,   271,
     272,   273,   274,  1071,  1072,     0,  1073,     0,   278,  1266,
    1267,   281,  1268,   283,   284,   285,   286,   287,   288,     0,
       0,   289,  1269,   291,  1270,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1271,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1075,  1272,  1076,   325,   326,
     327,   328,  1077,   329,   330,  1273,   332,  1078,   795,   334,
    1079,   336,   337,   338,     0,   339,   340,     0,     0,  1080,
     342,   343,     0,     0,   344,   345,   346,  1274,   348,  1275,
     797,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   798,  1276,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,  1081,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,  1277,   404,   405,   406,  1082,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,     0,
    1278,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,  1279,   431,   432,  1083,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,  1280,
     448,   800,     0,     0,   450,   451,     0,   452,  1281,   454,
     455,   456,   457,   458,     0,   459,  1084,  1085,     0,     0,
     462,   463,   801,   465,   802,  1086,   467,   468,  1282,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1087,     0,   489,  1284,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,  1088,     0,
       0,     0,     0,     0,     0,  1089,  1090,  1091,     0,     0,
       0,     0,  1092,     0,  1093,     0,     0,     0,     0,  1094,
    1095,     0,  1096,  1097,   117,  1048,   820,  1049,  1050,  1051,
    1052,  1053,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,  1700,   126,   127,   128,     0,     0,     0,     0,     0,
    1054,     0,     0,   129,   130,   131,     0,   132,   133,   134,
     135,   136,   137,   138,   139,  1055,   141,  1056,  1057,     0,
     144,   145,   146,   147,   148,   149,  1058,   790,   150,   151,
     152,   153,  1059,  1060,   156,     0,   157,   158,   159,   160,
     791,     0,   792,     0,  1061,   164,   165,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1062,   191,   192,  1063,   194,  1064,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1065,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,  1066,   222,   223,   224,   225,   226,   227,
     793,  1067,   229,     0,   230,   231,  1068,   233,     0,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
       0,   243,     0,  1069,  1070,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,   274,  1071,  1072,     0,
    1073,     0,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   290,   291,   292,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1074,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1075,
     323,  1076,   325,   326,   327,   328,  1077,   329,   330,   331,
     332,  1078,   795,   334,  1079,   336,   337,   338,     0,   339,
     340,     0,     0,  1080,   342,   343,     0,     0,   344,   345,
     346,   347,   348,   349,   797,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   798,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,  1081,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,   401,   402,   403,   404,   405,   406,  1082,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,     0,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,   430,   431,   432,  1083,   434,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   800,     0,     0,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,     0,   459,
    1084,  1085,     0,     0,   462,   463,   801,   465,   802,  1086,
     467,   468,   803,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,  1087,     0,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,  1088,     0,     0,     0,     0,     0,     0,  1089,
    1090,  1091,     0,     0,     0,     0,  1092,     0,  1093,     0,
       0,     0,     0,  1094,  1095,     0,  1096,  1097,   117,  1715,
     820,  1049,  1050,  1051,  1716,  1053,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,  1717,   126,   127,   128,     0,
       0,     0,     0,     0,  1054,     0,     0,   129,   130,   131,
       0,   132,   133,   134,   135,   136,   137,   138,   139,  1055,
     141,  1056,  1057,     0,   144,   145,   146,   147,   148,   149,
    1058,   790,   150,   151,   152,   153,  1059,  1060,   156,     0,
     157,   158,   159,   160,   791,     0,   792,     0,  1061,   164,
     165,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,  1062,   191,   192,
    1063,   194,  1064,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1065,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1066,   222,   223,
     224,   225,   226,   227,   793,  1067,   229,     0,   230,   231,
    1068,   233,     0,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,     0,   243,     0,  1069,  1070,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,  1071,  1072,     0,  1073,     0,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,     0,     0,   289,
     290,   291,   292,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1074,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1075,   323,  1076,   325,   326,   327,   328,
    1077,   329,   330,   331,   332,  1078,   795,   334,  1079,   336,
     337,   338,     0,   339,   340,     0,     0,  1080,   342,   343,
       0,     0,   344,   345,   346,   347,   348,   349,   797,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   798,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,  1081,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,   401,   402,   403,
     404,   405,   406,  1082,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,     0,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,   430,
     431,   432,  1083,   434,     0,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   800,
       0,     0,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,     0,   459,  1084,  1085,     0,     0,   462,   463,
     801,   465,   802,  1086,   467,   468,   803,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,  1087,
       0,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,  1088,     0,     0,     0,
       0,     0,     0,  1089,  1090,  1091,     0,     0,     0,     0,
    1092,     0,  1093,     0,     0,     0,     0,  1094,  1095,     0,
    1096,  1097,   117,  1048,   820,  1049,  1050,  1051,  1052,  1053,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,  1054,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,   139,  1055,   141,  1056,  1057,     0,   144,   145,
     146,   147,   148,   149,  1058,   790,   150,   151,   152,   153,
    1059,  1060,   156,     0,   157,   158,   159,   160,   791,     0,
     792,     0,  1061,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,  1062,   191,   192,  1063,   194,  1064,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1065,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1066,   222,   223,   224,   225,   226,   227,   793,  1067,
     229,     0,   230,   231,  1068,   233,     0,   234,     0,   235,
     236,  1434,   237,   238,   239,   240,   241,   242,     0,   243,
       0,  1069,  1070,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,  1071,  1072,     0,  1073,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1074,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1075,   323,  1076,
     325,   326,   327,   328,  1077,   329,   330,   331,   332,  1078,
     795,   334,  1079,   336,   337,   338,     0,   339,   340,     0,
       0,  1080,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   797,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     798,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,  1081,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,   401,   402,   403,   404,   405,   406,  1082,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,     0,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,   430,   431,   432,  1083,   434,     0,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   800,     0,     0,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,     0,   459,  1084,  1085,
       0,     0,   462,   463,   801,   465,   802,  1086,   467,   468,
     803,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,  1087,     0,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
    1088,     0,     0,     0,     0,     0,     0,  1089,  1090,  1091,
       0,     0,     0,     0,  1092,     0,  1093,     0,     0,     0,
       0,  1094,  1095,     0,  1096,  1097,   117,  1048,   820,  1049,
    1050,  1051,  1052,  1053,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,  1054,     0,     0,   129,   130,   131,     0,   132,
     133,   134,   135,   136,   137,   138,   139,  1055,   141,  1056,
    1057,     0,   144,   145,   146,   147,   148,   149,  1058,   790,
     150,   151,   152,   153,  1059,  1060,   156,     0,   157,   158,
     159,   160,   791,     0,   792,     0,  1061,   164,   165,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1062,   191,   192,  1063,   194,
    1064,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,  1065,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,  1066,   222,   223,   224,   225,
     226,   227,   793,  1067,   229,     0,   230,   231,  1068,   233,
       0,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,     0,   243,     0,  1069,  1070,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,  1071,
    1072,     0,  1073,     0,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   290,   291,
     292,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1074,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1075,   323,  1076,   325,   326,   327,   328,  1077,   329,
     330,   331,   332,  1078,   795,   334,  1079,   336,   337,   338,
       0,   339,   340,     0,     0,  1080,   342,   343,     0,     0,
     344,   345,   346,   347,   348,   349,   797,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   798,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,  1081,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,  1082,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,     0,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,   430,   431,   432,
    1083,   434,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   800,     0,     0,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
       0,   459,  1084,  1085,     0,     0,   462,   463,   801,   465,
     802,  1086,   467,   468,   803,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,  1087,     0,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,  1088,     0,     0,     0,     0,     0,
       0,  1089,  1090,  1091,     0,     0,     0,     0,  1092,     0,
    1093,  2064,     0,     0,     0,  1094,  1095,     0,  1096,  1097,
     117,  1048,   820,  1049,  1050,  1051,  1052,  1053,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,  1054,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,  1055,   141,  1056,  1057,     0,   144,   145,   146,   147,
     148,   149,  1058,   790,   150,   151,   152,   153,  1059,  1060,
     156,     0,   157,   158,   159,   160,   791,     0,   792,     0,
    1061,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1062,
     191,   192,  1063,   194,  1064,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1065,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1066,
     222,   223,   224,   225,   226,   227,   793,  1067,   229,     0,
     230,   231,  1068,   233,     0,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,     0,   243,     0,  1069,
    1070,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1071,  1072,     0,  1073,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
       0,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1074,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1075,   323,  1076,   325,   326,
     327,   328,  1077,   329,   330,   331,   332,  1078,   795,   334,
    1079,   336,   337,   338,     0,   339,   340,     0,     0,  1080,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     797,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   798,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,  1081,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,   403,   404,   405,   406,  1082,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,     0,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,   430,   431,   432,  1083,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   800,     0,     0,   450,   451,  2690,   452,   453,   454,
     455,   456,   457,   458,     0,   459,  1084,  1085,     0,     0,
     462,   463,   801,   465,   802,  1086,   467,   468,   803,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1087,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,  1088,     0,
       0,     0,     0,     0,     0,  1089,  1090,  1091,     0,     0,
       0,     0,  1092,     0,  1093,     0,     0,     0,     0,  1094,
    1095,     0,  1096,  1097,   117,  1048,   820,  1049,  1050,  1051,
    1052,  1053,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
    1054,     0,     0,   129,   130,   131,     0,   132,   133,   134,
     135,   136,   137,   138,   139,  1055,   141,  1056,  1057,     0,
     144,   145,   146,   147,   148,   149,  1058,   790,   150,   151,
     152,   153,  1059,  1060,   156,     0,   157,   158,   159,   160,
     791,     0,   792,     0,  1061,   164,   165,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1062,   191,   192,  1063,   194,  1064,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1065,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,  1066,   222,   223,   224,   225,   226,   227,
     793,  1067,   229,     0,   230,   231,  1068,   233,     0,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
       0,   243,     0,  1069,  1070,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,   274,  1071,  1072,     0,
    1073,     0,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   290,   291,   292,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1074,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1075,
     323,  1076,   325,   326,   327,   328,  1077,   329,   330,   331,
     332,  1078,   795,   334,  1079,   336,   337,   338,     0,   339,
     340,     0,     0,  1080,   342,   343,     0,     0,   344,   345,
     346,   347,   348,   349,   797,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   798,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,  1081,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,   401,   402,   403,   404,   405,   406,  1082,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,     0,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,   430,   431,   432,  1083,   434,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   800,     0,     0,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,     0,   459,
    1084,  1085,     0,     0,   462,   463,   801,   465,   802,  1086,
     467,   468,   803,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,  1087,     0,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     0,  2811,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,  1088,     0,     0,     0,     0,     0,     0,  1089,
    1090,  1091,     0,     0,     0,     0,  1092,     0,  1093,     0,
       0,     0,     0,  1094,  1095,     0,  1096,  1097,   117,  1048,
     820,  1049,  1050,  1051,  1052,  1053,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,  3026,   126,   127,   128,     0,
       0,     0,     0,     0,  1054,     0,     0,   129,   130,   131,
       0,   132,   133,   134,   135,   136,   137,   138,   139,  1055,
     141,  1056,  1057,     0,   144,   145,   146,   147,   148,   149,
    1058,   790,   150,   151,   152,   153,  1059,  1060,   156,     0,
     157,   158,   159,   160,   791,     0,   792,     0,  1061,   164,
     165,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,   179,   180,  3027,   182,
     183,   184,   185,   186,   187,   188,   189,  1062,   191,   192,
    1063,   194,  1064,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1065,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1066,   222,   223,
     224,   225,   226,   227,   793,  1067,   229,     0,   230,   231,
    1068,   233,     0,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,     0,   243,     0,  3028,  1070,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,  1071,  1072,     0,  1073,     0,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,     0,     0,   289,
     290,   291,   292,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1074,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1075,   323,  1076,   325,   326,   327,   328,
    1077,   329,   330,   331,   332,  1078,   795,   334,  1079,   336,
     337,   338,     0,   339,   340,     0,     0,  1080,   342,   343,
       0,     0,   344,   345,   346,   347,   348,   349,   797,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   798,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,  1081,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,   401,   402,   403,
     404,   405,  3029,  1082,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,     0,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,   430,
     431,   432,  1083,   434,     0,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   800,
       0,     0,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,     0,   459,  1084,  1085,     0,     0,   462,   463,
     801,   465,   802,  1086,   467,   468,   803,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,  1087,
       0,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,  1088,     0,     0,     0,
       0,     0,     0,  1089,  1090,  1091,     0,     0,     0,     0,
    1092,     0,  3030,     0,     0,     0,     0,  1094,  1095,     0,
    1096,  1097,   117,  1048,   820,  1049,  1050,  1051,  1052,  1053,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,  1054,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,   139,  1055,   141,  1056,  1057,     0,   144,   145,
     146,   147,   148,   149,  1058,   790,   150,   151,   152,   153,
    1059,  1060,   156,     0,   157,   158,   159,   160,   791,     0,
     792,     0,  1061,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,  1062,   191,   192,  1063,   194,  1064,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1065,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1066,   222,   223,   224,   225,   226,   227,   793,  1067,
     229,     0,   230,   231,  1068,   233,     0,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,     0,   243,
       0,  1069,  1070,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,  1071,  1072,     0,  1073,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1074,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1075,   323,  1076,
     325,   326,   327,   328,  1077,   329,   330,   331,   332,  1078,
     795,   334,  1079,   336,   337,   338,     0,   339,   340,     0,
       0,  1080,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   797,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     798,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,  1081,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,   401,   402,   403,   404,   405,   406,  1082,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,     0,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,   430,   431,   432,  1083,   434,     0,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   800,     0,     0,   450,   451,  3177,   452,
     453,   454,   455,   456,   457,   458,     0,   459,  1084,  1085,
       0,     0,   462,   463,   801,   465,   802,  1086,   467,   468,
     803,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,  1087,     0,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
    1088,     0,     0,     0,     0,     0,     0,  1089,  1090,  1091,
       0,     0,     0,     0,  1092,     0,  1093,     0,     0,     0,
       0,  1094,  1095,     0,  1096,  1097,   117,  1048,   820,  1049,
    1050,  1051,  1052,  1053,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,  1054,     0,     0,   129,   130,   131,     0,   132,
     133,   134,   135,   136,   137,   138,   139,  1055,   141,  1056,
    1057,     0,   144,   145,   146,   147,   148,   149,  1058,   790,
     150,   151,   152,   153,  1059,  1060,   156,     0,   157,   158,
     159,   160,   791,     0,   792,     0,  1061,   164,   165,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1062,   191,   192,  1063,   194,
    1064,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,  1065,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,  1066,   222,   223,   224,   225,
     226,   227,   793,  1067,   229,     0,   230,   231,  1068,   233,
       0,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,     0,   243,     0,  1069,  1070,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,  1071,
    1072,     0,  1073,     0,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   290,   291,
     292,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1074,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1075,   323,  1076,   325,   326,   327,   328,  1077,   329,
     330,   331,   332,  1078,   795,   334,  1079,   336,   337,   338,
       0,   339,   340,     0,     0,  1080,   342,   343,     0,     0,
     344,   345,   346,   347,   348,   349,   797,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   798,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,  1081,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,  1082,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,     0,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,   430,   431,   432,
    1083,   434,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   800,     0,     0,
     450,   451,  3315,   452,   453,   454,   455,   456,   457,   458,
       0,   459,  1084,  1085,     0,     0,   462,   463,   801,   465,
     802,  1086,   467,   468,   803,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,  1087,     0,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,  1088,     0,     0,     0,     0,     0,
       0,  1089,  1090,  1091,     0,     0,     0,     0,  1092,     0,
    1093,     0,     0,     0,     0,  1094,  1095,     0,  1096,  1097,
     117,  1048,   820,  1049,  1050,  1051,  1052,  1053,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,  1054,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,  1055,   141,  1056,  1057,     0,   144,   145,   146,   147,
     148,   149,  1058,   790,   150,   151,   152,   153,  1059,  1060,
     156,     0,   157,   158,   159,   160,   791,     0,   792,     0,
    1061,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1062,
     191,   192,  1063,   194,  1064,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1065,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1066,
     222,   223,   224,   225,   226,   227,   793,  1067,   229,     0,
     230,   231,  1068,   233,     0,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,     0,   243,     0,  1069,
    1070,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1071,  1072,     0,  1073,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
       0,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1074,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1075,   323,  1076,   325,   326,
     327,   328,  1077,   329,   330,   331,   332,  1078,   795,   334,
    1079,   336,   337,   338,     0,   339,   340,     0,     0,  1080,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     797,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   798,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,  1081,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,   403,   404,   405,   406,  1082,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,     0,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,   430,   431,   432,  1083,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   800,     0,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,   459,  1084,  1085,     0,     0,
     462,   463,   801,   465,   802,  1086,   467,   468,   803,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1087,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,  1088,     0,
       0,     0,     0,     0,     0,  1089,  1090,  1091,     0,     0,
       0,     0,  1092,     0,  1093,     0,     0,     0,     0,  1094,
    1095,     0,  1096,  1097,   117,  1048,   820,  1049,  1050,  1051,
    1052,  1053,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
    1054,     0,     0,   129,   130,   131,     0,   132,   133,   134,
     135,   136,   137,   138,   139,  1055,   141,  1056,  1057,     0,
     144,   145,   146,   147,   148,   149,  1058,   790,   150,   151,
     152,   153,  1059,  1060,   156,     0,   157,   158,   159,   160,
     791,     0,   792,     0,  1061,   164,   165,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1062,   191,   192,  1063,   194,  1064,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1065,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,  1066,   222,   223,   224,   225,   226,   227,
     793,  1067,   229,     0,   230,   231,  1068,   233,     0,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
       0,   243,     0,  1069,  1070,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,   274,  1071,  1072,     0,
    1073,     0,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   290,   291,   292,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1074,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1075,
     323,  1076,   325,   326,   327,   328,  1077,   329,   330,   331,
     332,  1078,   795,   334,  1079,   336,   337,   338,     0,   339,
     340,     0,     0,  1080,   342,   343,     0,     0,   344,   345,
     346,   347,   348,   349,   797,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   798,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,  1081,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,   401,   402,   403,   404,   405,   406,  1082,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,     0,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,   430,   431,   432,  1083,   434,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   800,     0,     0,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,     0,   459,
    1084,  1085,     0,     0,   462,   463,   801,   465,   802,  1086,
     467,   468,   803,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,  1087,     0,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,  1088,     0,     0,     0,     0,     0,     0,  1720,
    1721,  1091,     0,     0,     0,     0,  1092,     0,  1093,     0,
       0,     0,     0,  1094,  1095,     0,  1096,  1097,   117,  2201,
     820,  1049,  1050,  1051,  1052,  1053,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,  1054,     0,     0,   129,   130,   131,
       0,   132,   133,   134,   135,   136,   137,   138,   139,  1055,
     141,  1056,  1057,     0,   144,   145,   146,   147,   148,   149,
    1058,   790,   150,   151,   152,   153,  1059,  1060,   156,     0,
     157,   158,   159,   160,   791,     0,   792,     0,  1061,   164,
     165,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,  1062,   191,   192,
    1063,   194,  1064,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1065,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1066,   222,   223,
     224,   225,   226,   227,   793,  1067,   229,     0,   230,   231,
    1068,   233,     0,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,     0,   243,     0,  1069,  1070,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,  1071,  1072,     0,  1073,     0,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,     0,     0,   289,
     290,   291,   292,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1074,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1075,   323,  1076,   325,   326,   327,   328,
    1077,   329,   330,   331,   332,  1078,   795,   334,  1079,   336,
     337,   338,     0,   339,   340,     0,     0,  1080,   342,   343,
       0,     0,   344,   345,   346,   347,   348,   349,   797,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   798,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,  1081,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,   401,   402,   403,
     404,   405,   406,  1082,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,     0,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,   430,
     431,   432,  1083,   434,     0,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   800,
       0,     0,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,     0,   459,  1084,  1085,     0,     0,   462,   463,
     801,   465,   802,  1086,   467,   468,   803,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,  1087,
       0,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,  1088,     0,     0,     0,
       0,     0,     0,  1089,  1090,  1091,     0,     0,     0,     0,
    1092,     0,  1093,     0,     0,     0,     0,  1094,  1095,     0,
    1096,  1097,   117,  1048,   820,  1049,  1050,  1051,  1052,  1053,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,  1054,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,   139,  1055,   141,  1056,  1057,     0,   144,   145,
     146,   147,   148,   149,  1058,   790,   150,   151,   152,   153,
    1059,  1060,   156,     0,   157,   158,   159,   160,   791,     0,
     792,     0,  1061,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,  1062,   191,   192,  1063,   194,  1064,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1065,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1066,   222,   223,   224,   225,   226,   227,   793,  1067,
     229,     0,   230,   231,  1068,   233,     0,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,     0,   243,
       0,  1069,  1070,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,  1071,  1072,     0,  1073,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1074,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1075,   323,  1076,
     325,   326,   327,   328,  1077,   329,   330,   331,   332,  1078,
     795,   334,  1079,   336,   337,   338,     0,   339,   340,     0,
       0,  1080,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   797,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     798,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,  1081,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,   401,   402,   403,   404,   405,   406,  1082,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,     0,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,   430,   431,   432,  1083,   434,     0,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   800,     0,     0,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,     0,   459,  1084,  1085,
       0,     0,   462,   463,   801,   465,   802,  1086,   467,   468,
     803,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,  1087,     0,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
    1088,     0,     0,     0,     0,     0,     0,  1089,  2284,  1091,
       0,     0,     0,     0,  1092,     0,  1093,     0,     0,     0,
       0,  1094,  1095,     0,  1096,  1097,   117,  1048,   820,  1049,
    1050,  1051,  1052,  1053,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,  1054,     0,     0,   129,   130,   131,     0,   132,
     133,   134,   135,   136,   137,   138,   139,  1055,   141,  1056,
    1057,     0,   144,   145,   146,   147,   148,   149,  1058,   790,
     150,   151,   152,   153,  1059,  1060,   156,     0,   157,   158,
     159,   160,   791,     0,   792,     0,  1061,   164,   165,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1062,   191,   192,  1063,   194,
    1064,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,  1065,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,  1066,   222,   223,   224,   225,
     226,   227,   793,  1067,   229,     0,   230,   231,  1068,   233,
       0,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,     0,   243,     0,  1069,  1070,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,  1071,
    1072,     0,  1073,     0,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   290,   291,
     292,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1074,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1075,   323,  1076,   325,   326,   327,   328,  1077,   329,
     330,   331,   332,  1078,   795,   334,  1079,   336,   337,   338,
       0,   339,   340,     0,     0,  1080,   342,   343,     0,     0,
     344,   345,   346,   347,   348,   349,   797,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   798,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,  1081,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,  1082,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,     0,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,   430,   431,   432,
    1083,   434,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   800,     0,     0,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
       0,   459,  1084,  1085,     0,     0,   462,   463,   801,   465,
     802,  1086,   467,   468,   803,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,  1087,     0,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,  1088,     0,     0,     0,     0,     0,
       0,  1089,  1090,  1091,     0,     0,     0,     0,  1092,     0,
    2497,     0,     0,     0,     0,  1094,  1095,     0,  1096,  1097,
     117,  1048,   820,  1049,  1050,  1051,  1052,  1053,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,  1054,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,  1055,   141,  1056,  1057,     0,   144,   145,   146,   147,
     148,   149,  1058,   790,   150,   151,   152,   153,  1059,  1060,
     156,     0,   157,   158,   159,   160,   791,     0,   792,     0,
    1061,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1062,
     191,   192,  1063,   194,  1064,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1065,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1066,
     222,   223,   224,   225,   226,   227,   793,  1067,   229,     0,
     230,   231,  1068,   233,     0,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,     0,   243,     0,  1069,
    1070,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1071,  1072,     0,  1073,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
       0,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1074,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1075,   323,  1076,   325,   326,
     327,   328,  1077,   329,   330,   331,   332,  1078,   795,   334,
    1079,   336,   337,   338,     0,   339,   340,     0,     0,  1080,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     797,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   798,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,  1081,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,   403,   404,   405,   406,  1082,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,     0,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,   430,   431,   432,  1083,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   800,     0,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,   459,  1084,  1085,     0,     0,
     462,   463,   801,   465,   802,  1086,   467,   468,   803,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1087,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,  1088,     0,
       0,     0,     0,     0,     0,  1089,  3080,  1091,     0,     0,
       0,     0,  1092,     0,  1093,     0,     0,     0,     0,  1094,
    1095,     0,  1096,  1097,   117,  1048,   820,  1049,  1050,  1051,
    1052,  1053,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
    1054,     0,     0,   129,   130,   131,     0,   132,   133,   134,
     135,   136,   137,   138,   139,  1055,   141,  1056,  1057,     0,
     144,   145,   146,   147,   148,   149,  1058,   790,   150,   151,
     152,   153,  1059,  1060,   156,     0,   157,   158,   159,   160,
     791,     0,   792,     0,  1061,   164,   165,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   179,   180,  3027,   182,   183,   184,   185,   186,
     187,   188,   189,  1062,   191,   192,  1063,   194,  1064,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1065,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,  1066,   222,   223,   224,   225,   226,   227,
     793,  1067,   229,     0,   230,   231,  1068,   233,     0,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
       0,   243,     0,  3028,  1070,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,   274,  1071,  1072,     0,
    1073,     0,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   290,   291,   292,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1074,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1075,
     323,  1076,   325,   326,   327,   328,  1077,   329,   330,   331,
     332,  1078,   795,   334,  1079,   336,   337,   338,     0,   339,
     340,     0,     0,  1080,   342,   343,     0,     0,   344,   345,
     346,   347,   348,   349,   797,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   798,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,  1081,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,   401,   402,   403,   404,   405,  3029,  1082,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,     0,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,   430,   431,   432,  1083,   434,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   800,     0,     0,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,     0,   459,
    1084,  1085,     0,     0,   462,   463,   801,   465,   802,  1086,
     467,   468,   803,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,  1087,     0,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,  1088,     0,     0,     0,     0,     0,     0,  1089,
    1090,  1091,     0,     0,     0,     0,  1092,     0,  3030,     0,
       0,     0,     0,  1094,  1095,     0,  1096,  1097,   117,  1048,
     820,  1049,  1050,  1051,  1052,  1053,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,  1054,     0,     0,   129,   130,   131,
       0,   132,   133,   134,   135,   136,   137,   138,  3488,  1055,
     141,  1056,  1057,     0,   144,   145,   146,   147,   148,   149,
    1058,   790,   150,   151,   152,   153,  1059,  1060,   156,     0,
     157,   158,   159,   160,   791,     0,   792,     0,  1061,   164,
     165,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,  3489,
     183,   184,   185,   186,   187,   188,   189,  1062,   191,   192,
    1063,   194,  1064,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1065,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1066,   222,   223,
     224,   225,   226,   227,   793,  1067,   229,     0,   230,   231,
    1068,   233,     0,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,     0,   243,     0,  1069,  1070,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,  1071,  1072,     0,  1073,     0,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,     0,     0,   289,
     290,   291,   292,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1074,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1075,   323,  1076,   325,   326,   327,   328,
    1077,   329,   330,   331,   332,  1078,   795,   334,  1079,   336,
     337,   338,     0,   339,   340,     0,     0,  1080,   342,   343,
       0,     0,   344,   345,   346,   347,   348,   349,   797,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   798,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,  1081,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,   401,   402,   403,
     404,   405,   406,  1082,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,     0,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,   430,
     431,   432,  1083,   434,     0,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   800,
       0,     0,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,     0,   459,  1084,  1085,     0,     0,   462,   463,
     801,   465,   802,  1086,   467,   468,   803,   470,   471,  3490,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,  1087,
       0,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,  1088,     0,     0,     0,
       0,     0,     0,  1089,  1090,  1091,     0,     0,     0,     0,
    1092,     0,  1093,     0,     0,     0,     0,  1094,  1095,     0,
    1096,  1097,   117,  1048,   820,  1049,  1050,  1051,  1052,  1053,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,  1054,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,   139,  1055,   141,  1056,  1057,     0,   144,   145,
     146,   147,   148,   149,  1058,   790,   150,   151,   152,   153,
    1059,  1060,   156,     0,   157,   158,   159,   160,   791,     0,
     792,     0,  1061,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,  3489,   183,   184,   185,   186,   187,   188,
     189,  1062,   191,   192,  1063,   194,  1064,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1065,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1066,   222,   223,   224,   225,   226,   227,   793,  1067,
     229,     0,   230,   231,  1068,   233,     0,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,     0,   243,
       0,  1069,  1070,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,  1071,  1072,     0,  1073,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1074,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1075,   323,  1076,
     325,   326,   327,   328,  1077,   329,   330,   331,   332,  1078,
     795,   334,  1079,   336,   337,   338,     0,   339,   340,     0,
       0,  1080,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   797,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     798,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,  1081,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,   401,   402,   403,   404,   405,   406,  1082,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,     0,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,   430,   431,   432,  1083,   434,     0,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   800,     0,     0,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,     0,   459,  1084,  1085,
       0,     0,   462,   463,   801,   465,   802,  1086,   467,   468,
     803,   470,   471,  3490,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,  1087,     0,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
    1088,     0,     0,     0,     0,     0,     0,  1089,  1090,  1091,
       0,     0,     0,     0,  1092,     0,  1093,     0,     0,     0,
       0,  1094,  1095,     0,  1096,  1097,   117,  1048,   820,  1049,
    1050,  1051,  1052,  1053,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,  1054,     0,     0,   129,   130,   131,     0,   132,
     133,   134,   135,   136,   137,   138,   139,  1055,   141,  1056,
    1057,     0,   144,   145,   146,   147,   148,   149,  1058,   790,
     150,   151,   152,   153,  1059,  1060,   156,     0,   157,   158,
     159,   160,   791,     0,   792,     0,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1062,   191,   192,  1063,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,  1065,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,  1066,   222,   223,   224,   225,
     226,   227,   793,  1067,   229,     0,   230,   231,  1068,   233,
       0,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,     0,   243,     0,  1069,  1070,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,  1071,
    1072,     0,  1073,     0,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   290,   291,
     292,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1074,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1075,   323,  1076,   325,   326,   327,   328,     0,   329,
     330,   331,   332,  1078,   795,   334,  1079,   336,   337,   338,
       0,   339,   340,     0,     0,  1080,   342,   343,     0,     0,
     344,   345,   346,   347,   348,   349,   797,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   798,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,  1081,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,  1082,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,     0,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,   430,   431,   432,
    1083,   434,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   800,     0,     0,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
       0,   459,  1084,  1085,     0,     0,   462,   463,   801,   465,
     802,  1086,   467,   468,   803,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,  1087,     0,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,     0,     0,     0,     0,     0,     0,
       0,  1420,  1421,     0,     0,     0,     0,     0,  1092,     0,
    1093,     0,     0,     0,     0,  1094,  1095,     0,  1096,  1097,
     117,  1048,   820,  1049,  1050,  1051,  1052,  1053,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,  1054,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
   -2058,  1055,   141,  1056,  1057,     0,   144,   145,   146,   147,
     148,   149,  1058,   790,   150,   151,   152,   153,  1059,  1060,
     156,     0,   157,   158,   159,   160,   791,     0,   792,     0,
    1061,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,  3489,   183,   184,   185,   186,   187,   188,   189,  1062,
     191,   192,  1063,   194,  1064,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1065,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1066,
     222,   223,   224,   225,   226,   227,   793,  1067,   229,     0,
     230,   231,  1068,   233,     0,   234,     0,   235,   236,     0,
     237,   238,   239,   240, -2058,   242,     0,   243,     0,  1069,
    1070,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254, -2058,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1071,  1072,     0,  1073,     0,   278,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,     0,
       0,   289,   290,   291, -2058,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1074,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1075,   323,  1076,   325,   326,
     327,   328,     0,   329,   330,     0,   332,  1078,   795,   334,
    1079,   336,   337,   338,     0,   339,   340,     0,     0,  1080,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     797,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   798,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,  1081,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,   403,   404,   405,   406,  1082,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,     0,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0, -2058,   431,   432,  1083,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   800,     0,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,   459,  1084,  1085,     0,     0,
     462,   463,   801,   465,   802,  1086,   467,   468,   803,   470,
     471,  3490,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1087,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519, -2058,     0,
       0,     0,     0,     0,     0,  1089,  1090,  1091,     0,     0,
       0,     0,  1092,     0,  1093,     0,     0,     0,     0,  1094,
    1095,     0,  1096,  1097,   117,  1048,   820,  1049,  1050,     0,
    1052,  1053,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
    1054,     0,     0,   129,   130,   131,     0,   132,   133,   134,
     135,   136,   137,   138,   139,  1055,   141,  1056,  1057,     0,
     144,   145,   146,   147,   148,   149,  1058,   790,   150,   151,
     152,   153,  1059,  1060,   156,     0,   157,   158,   159,   160,
     791,     0,   792,     0,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1062,   191,   192,  1063,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1065,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,  1066,   222,   223,   224,   225,   226,   227,
     793,  1067,   229,     0,   230,   231,  1068,   233,     0,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
       0,   243,     0,  1069,  1070,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,   274,  1071,  1072,     0,
    1073,     0,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   290,   291,   292,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1074,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1075,
     323,  1076,   325,   326,   327,   328,     0,   329,   330,   331,
     332,  1078,   795,   334,  1079,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,   347,   348,   349,   797,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   798,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,  1081,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,   401,   402,   403,   404,   405,   406,  2187,
    2188,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,     0,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,   430,   431,   432,  1083,   434,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   800,     0,     0,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,     0,   459,
    1084,  1085,     0,     0,   462,   463,   801,   465,   802,  1086,
     467,   468,   803,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,  1087,     0,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,     0,     0,     0,     0,     0,     0,     0,  2189,
    2190,     0,     0,     0,     0,     0,  1092,     0,  1093,     0,
       0,     0,     0,  1094,  1095,     0,  1096,  1097,   117,  1048,
     820,  1049,  1050,  1051,  1052,  1053,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,  1054,     0,     0,   129,   130,   131,
       0,   132,   133,   134,   135,   136,   137,   138,   139,  1055,
     141,  1056,  1057,     0,   144,   145,   146,   147,   148,   149,
    1058,   790,   150,   151,   152,   153,  1059,  1060,   156,     0,
     157,   158,   159,   160,   791,     0,   792,     0,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,  1062,   191,   192,
    1063,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,  1065,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,  1066,   222,   223,
     224,   225,   226,   227,   793,  1067,   229,     0,   230,   231,
    1068,   233,     0,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,     0,   243,     0,  1069,  1070,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,  1071,  1072,     0,  1073,     0,   278,     0,   280,   281,
     282,   283,   284,   285,   286,   287,   288,     0,     0,   289,
     290,   291,   292,     0,   293,   294,   295,   296,   297,   298,
     299,   300,  1074,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,  1075,   323,  1076,   325,   326,   327,   328,
       0,   329,   330,   331,   332,  1078,   795,   334,  1079,   336,
     337,   338,     0,   339,   340,     0,     0,  1080,   342,   343,
       0,     0,   344,   345,   346,   347,   348,   349,   797,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   798,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,  1081,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,   401,   402,   403,
     404,   405,   406,  1082,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,     0,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,   430,
     431,   432,  1083,   434,     0,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   800,
       0,     0,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,     0,   459,  1084,  1085,     0,     0,   462,   463,
     801,   465,   802,  1086,   467,   468,   803,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,  1087,
       0,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,     0,     0,     0,     0,
       0,     0,     0,  1420,  1421,     0,     0,     0,     0,     0,
    1092,     0,  1093,     0,     0,     0,     0,  1094,  1095,     0,
    1096,  1097,   117,  1048,   820,  1049,  1050,     0,  1052,  1053,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,  1054,     0,
       0,   129,   130,   131,     0,   132,   133,   134,   135,   136,
     137,   138,   139,  1055,   141,  1056,  1057,     0,   144,   145,
     146,   147,   148,   149,  1058,   790,   150,   151,   152,   153,
    1059,  1060,   156,     0,   157,   158,   159,   160,   791,     0,
     792,     0,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,  1062,   191,   192,  1063,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,  1065,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,  1066,   222,   223,   224,   225,   226,   227,   793,  1067,
     229,     0,   230,   231,  1068,   233,     0,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,     0,   243,
    3047,  1069,  1070,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,  -720,   260,
     261,   262,   263,   264,   265,   266,     0,   267,   268,   269,
     270,   271,   272,   273,   274,  1071,  1072,     0,  1073,     0,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,     0,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,   299,   300,  1074,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,  1075,   323,  1076,
     325,   326,   327,   328,     0,   329,   330,   331,   332,  1078,
     795,   334,  1079,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,   347,
     348,   349,   797,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     798,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,  1081,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,     0,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,   430,   431,   432,  1083,   434,     0,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   800,     0,     0,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,     0,   459,  1084,  1085,
       0,     0,   462,   463,   801,   465,   802,  1086,   467,   468,
     803,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,  1087,     0,   489,   490,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1092,     0,  2740,     0,     0,     0,
       0,  1094,  1095,     0,  1096,  1097,   117,  1048,   820,  1049,
    1050,     0,  1052,  1053,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,  1054,     0,     0,   129,   130,   131,     0,   132,
     133,   134,   135,   136,   137,   138,   139,  1055,   141,  1056,
    1057,     0,   144,   145,   146,   147,   148,   149,  1058,   790,
     150,   151,   152,   153,  1059,  1060,   156,     0,   157,   158,
     159,   160,   791,     0,   792,     0,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,  1062,   191,   192,  1063,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,  1065,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,  1066,   222,   223,   224,   225,
     226,   227,   793,  1067,   229,     0,   230,   231,  1068,   233,
       0,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,     0,   243,     0,  1069,  1070,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,  1071,
    1072,     0,  1073,     0,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,     0,     0,   289,   290,   291,
     292,     0,   293,   294,   295,   296,   297,   298,   299,   300,
    1074,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,  1075,   323,  1076,   325,   326,   327,   328,     0,   329,
     330,   331,   332,  1078,   795,   334,  1079,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,   347,   348,   349,   797,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   798,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,  1081,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,     0,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,   430,   431,   432,
    1083,   434,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   800,     0,     0,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
       0,   459,  1084,  1085,     0,     0,   462,   463,   801,   465,
     802,  1086,   467,   468,   803,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,  1087,     0,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1092,     0,
    2740,     0,     0,     0,     0,  1094,  1095,     0,  1096,  1097,
     117,  1048,   820,  1049,  1050,     0,  1052,  1053,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,  1054,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,  1055,   141,  1056,  1057,     0,   144,   145,   146,   147,
     148,   149,  1058,   790,   150,   151,   152,   153,  1059,  1060,
     156,     0,   157,   158,   159,   160,   791,     0,   792,     0,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1062,
     191,   192,  1063,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1065,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,  1066,
     222,   223,   224,   225,   226,   227,   793,  1067,   229,     0,
     230,   231,  1068,   233,     0,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,     0,   243,     0,  1069,
    1070,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,  1071,  1072,     0,  1073,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,     0,
       0,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  1074,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1075,   323,  1076,   325,   326,
     327,   328,     0,   329,   330,   331,   332,  1078,   795,   334,
    1079,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     797,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   798,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,  1081,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,   403,   404,   405,   406,  1082,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,     0,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,   430,   431,   432,  1083,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   800,     0,     0,   450,   451,     0,   452,   453,   454,
     455,   456,   457,   458,     0,   459,  1084,  1085,     0,     0,
     462,   463,   801,   465,   802,  1086,   467,   468,   803,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,  1087,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1092,     0,  1093,     0,     0,     0,     0,  1094,
    1095,     0,  1096,  1097,   117,  1048,   820,  1049,  1050,  1051,
    1052,  1053,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
    1054,     0,     0,   129,   130,   131,     0,   132,   133,   134,
     135,   136,   137,   138,     0,  1055,   141,  1056,  1057,     0,
     144,   145,   146,   147,   148,   149,  1058,   790,   150,   151,
     152,   153,  1059,  1060,   156,     0,   157,   158,   159,   160,
     791,     0,   792,     0,  1061,   164,   165,   166,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1062,   191,   192,  1063,   194,  1064,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1065,   209,   210,
       0,   211,   212,   213,     0,   214,     0,   216,     0,   217,
     218,   219,   220,  1066,   222,   223,   224,   225,   226,   227,
     793,  1067,   229,     0,   230,   231,  1068,   233,     0,   234,
       0,   235,   236,     0,   237,   238,   239,   240,     0,   242,
       0,   243,     0,  1069,  1070,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
     268,   269,   270,   271,   272,   273,   274,  1071,  1072,     0,
    1073,     0,   278,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,     0,     0,   289,   290,   291,     0,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1074,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1075,
     323,  1076,   325,   326,   327,   328,     0,   329,   330,     0,
     332,  1078,   795,   334,  1079,   336,   337,   338,     0,   339,
     340,     0,     0,  1080,   342,   343,     0,     0,   344,   345,
     346,   347,   348,   349,   797,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   798,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,  1081,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,   401,   402,   403,   404,   405,   406,  1082,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,     0,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   431,   432,  1083,   434,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   800,     0,     0,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,     0,   459,
    1084,  1085,     0,     0,   462,   463,   801,   465,   802,  1086,
     467,   468,   803,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,  1087,     0,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,     0,     0,     0,     0,     0,     0,     0,  1089,
    1090,  1091,     0,   969,  1348,   820,  1092,     0,  1093,  1052,
       0,     0,     0,  1094,  1095,     0,  1096,  1097,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,   564,     0,     0,
       0,     0,   569,   130,   131,     0,   132,   133,   134,   571,
     136,   137,   138,   572,   573,   574,   575,   576,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   580,   581,   156,     0,   157,   158,   159,   160,   583,
       0,   585,     0,   587,   164,   165,   166,   167,   168,   588,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,   591,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   593,   191,   192,   594,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   604,   222,   223,   224,   225,   226,   227,   605,
    1349,   229,     0,   230,   231,   608,   233,     0,   234,     0,
     235,   611,     0,   613,   238,   239,   614,   615,   242,     0,
     243,     0,   618,   619,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,   621,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   624,
     625,   270,   271,   272,   273,   274,   626,   627,     0,   629,
       0,   278,   631,   632,   281,   633,   283,   284,   285,   286,
     287,   288,     0,     0,   289,   636,   291,   637,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   639,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   640,   641,
     642,   325,   326,   327,   643,     0,   329,   330,   645,   332,
       0,   647,   334,   648,   336,   337,   338,     0,   339,   340,
    1350,     0,   341,   342,   343,     0,     0,   344,   345,   654,
     655,   348,   656,   657,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   662,   663,   366,   367,   664,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   667,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,   401,   402,   670,   404,   405,   406,   671,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,     0,   673,   421,   422,   423,   424,   425,   426,
     674,   428,   429,     0,   676,   431,   432,   677,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   679,   448,   680,     0,     0,   450,   451,     0,
     452,   684,   454,   455,   456,   457,   458,     0,   459,   686,
     687,     0,     0,   462,   463,   690,   465,   691,  1351,   467,
     468,   693,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   698,   699,     0,   489,   701,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   706,   707,   708,   709,
     710,   711,   712,   713,   714,   715,   716,   516,   517,   518,
     519,     0,     0,     0,     0,   527,     0,     0,  1352,  1353,
    2362,     0,     0,     0,     0,  2363,     0,  2364,     0,     0,
       0,     0,     0,  1095,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,  1005,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,  -527,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,  -527,   230,   231,   232,   233,  -527,
     234,     0,   235,     0,     0,     0,   238,   239,   528,     0,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
    -527,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
    -527,   293,   294,   295,   296,   297,   298,   299,   300,   529,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,  -527,
     339,   340,     0,     0,   341,   342,   343,     0,  -527,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,   401,   402,     0,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,     0,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   530,   448,   449,     0,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,   461,     0,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,  -527,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   527,     0,   553,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1165,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   528,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   529,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,   401,   402,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,     0,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   530,   448,   449,     0,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
     461,     0,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   969,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2449,  3231,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     3,     4,     0,   564,     0,     0,     0,     0,
     569,   130,   131,     0,   132,   133,   134,   571,   136,   137,
     138,   572,   573,   574,   575,   576,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   580,
     581,   156,     0,   157,   158,   159,   160,   583,     0,   585,
       0,   587,   164,   165,   166,   167,   168,   588,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,   591,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     593,   191,   192,   594,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,    14,    15,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     604,   222,   223,   224,   225,   226,   227,   605,     0,   229,
       0,   230,   231,   608,   233,     0,   234,     0,   235,   611,
      23,   613,   238,   239,   614,   615,   242,     0,   243,     0,
     618,   619,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,   621,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   624,   625,   270,
     271,   272,   273,   274,   626,   627,     0,   629,     0,   278,
     631,   632,   281,   633,   283,   284,   285,   286,   287,   288,
       0,     0,   289,   636,   291,   637,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   639,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   640,   641,   642,   325,
     326,   327,   643,     0,   329,   330,   645,   332,     0,   647,
     334,   648,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   654,   655,   348,
     656,   657,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    27,    28,    29,     0,   362,   363,   662,
     663,   366,   367,   664,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     667,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
     401,   402,   670,   404,   405,   406,   671,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      34,   673,   421,   422,   423,   424,   425,   426,   674,   428,
     429,    36,   676,   431,   432,   677,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     679,   448,   680,    38,     0,   450,   451,    39,   452,   684,
     454,   455,   456,   457,   458,     0,   459,   686,   687,     0,
       0,   462,   463,   690,   465,   691,     0,   467,   468,   693,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
      41,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   970,   699,     0,   489,   701,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,    45,   499,   500,
     501,   502,   503,   504,   706,   707,   708,   709,   710,   711,
     712,   713,   714,   715,   716,   516,   517,   518,   519,     0,
     117,    46,   553,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    47,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,   129,
     130,   131,     0,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,   790,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   791,     0,   792,     0,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,    14,    15,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   793,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,   236,    23,
     237,   238,   239,   240,   241,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   794,
       0,   289,   290,   291,   292,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,     0,   795,   334,
     335,   336,   337,   338,     0,   339,   340,     0,   796,   341,
     342,   343,     0,     0,   344,   345,   346,   347,   348,   349,
     797,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    27,    28,    29,     0,   362,   363,   798,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,   403,   404,   405,   406,   407,   799,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    34,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
      36,   430,   431,   432,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   800,    38,     0,   450,   451,    39,   452,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,     0,     0,
     462,   463,   801,   465,   802,     0,   467,   468,   803,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,    41,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     804,   488,     0,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,    45,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,     0,   117,
      46,   553,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   805,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,   129,   130,
     131,     0,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,   790,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   791,     0,   792,     0,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   793,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   794,     0,
     289,   290,   291,   292,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,     0,   329,   330,   331,   332,     0,   795,   334,   335,
     336,   337,   338,     0,   339,   340,     0,   796,   341,   342,
     343,     0,     0,   344,   345,   346,   347,   348,   349,   797,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   798,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,   401,   402,
     403,   404,   405,   406,   407,   799,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,     0,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
     430,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     800,     0,     0,   450,   451,     0,   452,   453,   454,   455,
     456,   457,   458,     0,   459,   460,   461,     0,     0,   462,
     463,   801,   465,   802,     0,   467,   468,   803,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   804,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   117,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   805,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,   129,   130,   131,     0,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
     790,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   791,     0,   792,     0,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   793,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,     0,     0,   289,   290,
     291,   292,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     329,   330,   331,   332,     0,   795,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,   347,   348,   349,   797,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   798,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,   401,   402,   403,   404,
     405,   406,   407,   799,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,     0,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,   430,   431,
     432,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   800,     0,
       0,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,     0,     0,   462,   463,   801,
     465,   802,     0,   467,   468,   803,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   117,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    47,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,   129,   130,   131,     0,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,   790,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   791,     0,   792,     0,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   793,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,     0,     0,   289,   290,   291,   292,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,     0,   329,   330,
     331,   332,     0,   795,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,   347,   348,   349,   797,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   798,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,     0,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,   430,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   800,     0,     0,   450,
     451,     0,   452,   453,   454,   455,   456,   457,   458,     0,
     459,   460,   461,     0,     0,   462,   463,   801,   465,   802,
       0,   467,   468,   803,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   527,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3319,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,    14,    15,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,    23,     0,   238,   239,   528,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   529,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    27,    28,    29,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,   401,   402,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    34,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,    36,     0,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   530,   448,   449,    38,     0,   450,   451,    39,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
     461,     0,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,    41,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   804,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,    45,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   527,     0,    46,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    47,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,   891,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
      23,     0,   238,   239,   528,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   529,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    27,    28,    29,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
     401,   402,     0,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      34,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     530,   448,   449,     0,     0,   450,   451,    39,   452,     0,
     454,   455,   456,   457,   458,     0,   459,   892,   461,     0,
       0,   893,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
      41,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   804,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,    45,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   527,
       0,    46,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    47,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,    23,     0,
     238,   239,   528,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   529,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    27,    28,    29,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,   401,   402,
       0,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    34,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   530,   448,
     449,     0,     0,   450,   451,    39,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,   461,     0,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,    41,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   804,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,    45,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,     0,   527,    46,
     553,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    47,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,     0,     0,   238,
     239,   528,     0,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   529,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,   401,   402,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,     0,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,     0,
     431,   432,   433,   434,     0,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   530,   448,   449,
       0,     0,   450,   451,     0,   452,     0,   454,   455,   456,
     457,   458,     0,   459,   460,   461,     0,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,     0,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   527,     0,   553,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   990,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,     0,     0,     0,   238,   239,   528,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
       0,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     529,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   401,   402,     0,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,     0,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   431,   432,
     433,   434,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   530,   448,   449,     0,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   459,   460,   461,     0,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   527,     0,   553,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1472,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,     0,   132,   133,   134,
       0,   136,   137,   138,   139,   140,     0,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,     0,     0,   163,   164,   165,   166,   167,   168,
       0,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,   235,     0,     0,     0,   238,   239,   528,     0,   242,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,     0,   278,     0,     0,   281,     0,   283,   284,   285,
     286,   287,   288,     0,     0,   289,     0,   291,     0,     0,
     293,   294,   295,   296,   297,   298,   299,   300,   529,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   324,   325,   326,   327,   328,     0,   329,   330,     0,
     332,     0,   333,   334,   335,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,     0,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,   401,   402,     0,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,     0,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   431,   432,   433,   434,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   530,   448,   449,     0,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   459,
     460,   461,     0,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   527,     0,   553,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2213,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   528,     0,   242,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     295,   296,   297,   298,   299,   300,   529,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,   401,   402,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,     0,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,     0,   431,   432,   433,   434,     0,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   530,   448,   449,     0,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   459,   460,   461,
       0,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,     0,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     527,     0,   553,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2449,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   528,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   529,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,     0,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,     0,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,     0,   431,   432,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   530,
     448,   449,     0,     0,   450,   451,     0,   452,     0,   454,
     455,   456,   457,   458,     0,   459,   460,   461,     0,     0,
     462,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,     0,   489,     0,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   527,     0,
     553,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2581,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,     0,     0,   238,
     239,   528,     0,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   529,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,   401,   402,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,     0,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,     0,
     431,   432,   433,   434,     0,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   530,   448,   449,
       0,     0,   450,   451,     0,   452,     0,   454,   455,   456,
     457,   458,     0,   459,   460,   461,     0,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,     0,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   527,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3226,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,     0,     0,     0,   238,   239,   528,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
       0,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     529,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   401,   402,     0,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,     0,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   431,   432,
     433,   434,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   530,   448,   449,     0,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   459,   460,   461,     0,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   527,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2070,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,     0,   132,   133,   134,
       0,   136,   137,   138,   139,   140,     0,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,     0,     0,   163,   164,   165,   166,   167,   168,
       0,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,   235,     0,     0,     0,   238,   239,   528,     0,   242,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,     0,   278,     0,     0,   281,     0,   283,   284,   285,
     286,   287,   288,     0,     0,   289,     0,   291,     0,     0,
     293,   294,   295,   296,   297,   298,   299,   300,   529,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   324,   325,   326,   327,   328,     0,   329,   330,     0,
     332,     0,   333,   334,   335,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,     0,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,   401,   402,     0,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,     0,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   431,   432,   433,   434,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   530,   448,   449,     0,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   459,
     460,   461,     0,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   527,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2173,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   528,     0,   242,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     295,   296,   297,   298,   299,   300,   529,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,   401,   402,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,     0,     0,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,     0,   431,   432,   433,   434,     0,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   530,   448,   449,     0,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   459,   460,   461,
       0,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,     0,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
       0,  2906,  1348,   820,     0,     0,  2046,  1052,     0,     0,
       0,     0,     0,  2047,  2048,     0,  3087,  2049,  2050,  2051,
     118,   119,   120,   121,   122,   123,   124,   125,   560,   126,
     127,   128,   561,   562,   563,  2907,   565,   566,   567,   568,
    2908,   130,   131,   570,   132,   133,   134,  2909,   136,   137,
     138,     0,  1489,  2910,  1491,  1492,   577,   144,   145,   146,
     147,   148,   149,   578,   579,   150,   151,   152,   153,  1493,
    1494,   156,   582,   157,   158,   159,   160,     0,   584,  2911,
     586,  2912,   164,   165,   166,   167,   168,  2913,   170,   171,
     172,   589,   173,   174,   175,   176,   177,   178,   590,  2914,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    1499,   191,   192,  1500,   194,   595,   195,   596,   196,   197,
     198,   199,   200,   201,   597,   598,   202,   203,   204,   205,
     599,   600,   206,   207,  1065,   209,   210,   601,   211,   212,
     213,   602,   214,   215,   216,   603,   217,   218,   219,   220,
       0,   222,   223,   224,   225,   226,   227,     0,   606,   229,
     607,   230,   231,  1501,   233,   609,   234,   610,   235,  2915,
     612,  2916,   238,   239,  2917,  2918,   242,   616,   243,   617,
       0,     0,   246,   247,   620,   248,   249,   250,   251,   252,
     253,   254,  2919,   256,   257,   258,   259,   622,   260,   261,
     262,   263,   264,   265,   266,   623,   267,  2920,     0,   270,
     271,   272,   273,   274,  1507,  1508,   628,  1509,   630,   278,
    2921,  2922,   281,  2923,   283,   284,   285,   286,   287,   288,
     634,   635,   289,  2924,   291,  2925,   638,   293,   294,   295,
     296,   297,   298,   299,   300,  2926,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,  1516,  2927,  1518,   325,
     326,   327,  2928,   644,   329,   330,  2929,   332,   646,     0,
     334,  1520,   336,   337,   338,   649,   339,   340,   650,   651,
    2930,   342,   343,   652,   653,   344,   345,     0,  2931,   348,
    2932,     0,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   658,   659,   660,   661,   362,   363,     0,
    2933,   366,   367,     0,   369,   370,   371,   665,   372,   373,
     374,   375,   376,   377,   666,   378,   379,   380,   381,   382,
    1524,   384,   385,   386,   387,   668,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   669,
     401,   402,  2934,   404,   405,   406,  1526,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     672,  2935,   421,   422,   423,   424,   425,   426,  2936,   428,
     429,   675,  2937,   431,   432,  1530,   434,   678,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
    2938,   448,     0,   681,   682,   450,   451,   683,   452,  2939,
     454,   455,   456,   457,   458,   685,   459,  1533,  1534,   688,
     689,   462,   463,     0,   465,     0,   692,   467,   468,  2940,
     470,   471,   472,   473,   474,  2941,   695,   475,   476,   477,
     696,   478,   479,   480,   481,   697,   482,   483,   484,   485,
     486,     0,  1537,   700,   489,  2942,   491,   492,   493,   494,
     495,   496,   497,   702,   703,   498,   704,   705,   499,   500,
     501,   502,   503,   504,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   516,   517,   518,   519,     0,
     527,     0,  2052,  2053,  2054,  2046,  2943,  2944,  2057,  2058,
    2059,  2060,  2047,  2048,     0,     0,  2049,  2050,  2051,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   528,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   529,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,     0,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,     0,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,     0,   431,   432,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   530,
     448,   449,     0,     0,   450,   451,     0,   452,     0,   454,
     455,   456,   457,   458,     0,   459,   460,   461,     0,     0,
     462,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,     0,   489,     0,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,     0,     0,
       0,  2052,  2053,  2054,     0,  2055,  2056,  2057,  2058,  2059,
    2060,  1620,     0,     0,  1621,     0,     0,     0,  1622,  1623,
    1624,  1625,  1626,  1627,  1628,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1629,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1631,
    1620,     0,     0,  1621,     0,     0,  1632,  1622,  1623,  1624,
    1625,  1626,  1627,  1628,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1629,     0,
       0,     0,     0,  1633,   721,     0,     0,     0,  1631,  1620,
       0,     0,  1621,     0,     0,  1632,  1622,  1623,  1624,  1625,
    1626,  1627,  1628,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1629,     0,     0,
       0,     0,  1633,     0,     0,     0,     0,  1631,     0,     0,
       0,     0,     0,     0,  1632,     0,  1620,     0,     0,  1621,
       0,   722,     0,  1622,  1623,  1624,  1625,  1626,  1627,  1628,
       0,     0,     0,     0,     0,     0,     0,   723,     0,     0,
       0,  1633,     0,     0,  1629,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1631,  1620,     0,     0,  1621,     0,
    1634,  1632,  1622,  1623,  1624,  1625,  1626,  1627,  1628,     0,
       0,     0,     0,     0,     0,     0,     0,  1635,     0,     0,
       0,     0,  1636,  1629,     0,     0,   724,     0,  1633,     0,
       0,     0,     0,  1631,     0,     0,   725,     0,     0,  1634,
    1632,     0,     0,     0,     0,  1637,  1638,     0,     0,   726,
       0,     0,     0,     0,   727,     0,  1635,     0,     0,     0,
    1639,  1636,     0,     0,     0,     0,     0,  1633,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1634,     0,
       0,     0,     0,   728,  1637,  1638,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1635,     0,     0,  1640,  1639,
    1636,  1641,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1642,     0,     0,  1643,     0,
       0,     0,     0,  1637,  1638,  1634,   729,     0,     0,     0,
     730,     0,     0,     0,     0,     0,     0,  1640,  1639,     0,
    1641,     0,  1635,     0,     0,     0,     0,  1636,     0,     0,
       0,     0,     0,     0,  1642,     0,     0,  1643,     0,     0,
       0,     0,     0,     0,  1634,     0,     0,     0,     0,     0,
    1637,  1638,     0,     0,     0,     0,  1640,     0,     0,  1641,
       0,  1635,     0,     0,     0,  1639,  1636,     0,     0,     0,
       0,     0,     0,  1642,   543,     0,  1643,     0,     0,     0,
     731,     0,     0,     0,     0,     0,     0,     0,     0,  1637,
    1638,     0,     0,     0,     0,   732,     0,  1644,     0,     0,
       0,     0,     0,  1640,  1639,     0,  1641,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1642,     0,     0,  1643,     0,     0,     0,     0,     0,     0,
     733,     0,     0,   734,     0,     0,  1644,     0,     0,     0,
       0,     0,  1640,     0,   735,  1641,     0,   736,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1642,
       0,     0,  1643,     0,     0,   737,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1644,     0,     0,     0,   738,
       0,     0,     0,     0,     0,   739,   740,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   741,     0,     0,     0,
       0,     0,   742,     0,  1645,     0,     0,  1646,  1647,  1648,
       0,  1649,  1650,  1651,  1652,  1653,  1654,     0,     0,     0,
       0,  2483,  1644,     0,     0,     0,     0,     0,  1620,   743,
       0,  1621,     0,     0,     0,  1622,  1623,  1624,  1625,  1626,
    1627,  1628,     0,  1645,     0,     0,  1646,  1647,  1648,     0,
    1649,  1650,  1651,  1652,  1653,  1654,  1629,     0,     0,     0,
    2507,  1644,     0,     0,     0,     0,  1631,     0,     0,     0,
       0,     0,     0,  1632,     0,     0,     0,     0,     0,     0,
       0,     0,  1645,     0,     0,  1646,  1647,  1648,     0,  1649,
    1650,  1651,  1652,  1653,  1654,     0,     0,     0,     0,  2713,
    1633,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1620,     0,     0,  1621,     0,     0,
       0,  1622,  1623,  1624,  1625,  1626,  1627,  1628,     0,  1645,
       0,     0,  1646,  1647,  1648,     0,  1649,  1650,  1651,  1652,
    1653,  1654,  1629,     0,     0,     0,  2785,     0,     0,     0,
       0,     0,  1631,  1620,     0,     0,  1621,     0,     0,  1632,
    1622,  1623,  1624,  1625,  1626,  1627,  1628,     0,  1645,     0,
       0,  1646,  1647,  1648,     0,  1649,  1650,  1651,  1652,  1653,
    1654,  1629,     0,     0,     0,  2852,  1633,     0,     0,     0,
       0,  1631,  1620,     0,     0,  1621,     0,  1634,  1632,  1622,
    1623,  1624,  1625,  1626,  1627,  1628,     0,     0,     0,     0,
       0,     0,     0,     0,  1635,     0,     0,     0,     0,  1636,
    1629,     0,     0,     0,     0,  1633,     0,     0,     0,     0,
    1631,     0,     0,     0,     0,     0,     0,  1632,     0,     0,
       0,     0,  1637,  1638,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1639,     0,     0,
       0,     0,     0,     0,  1633,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1620,     0,
       0,  1621,     0,  1634,     0,  1622,  1623,  1624,  1625,  1626,
    1627,  1628,     0,     0,     0,  1640,     0,     0,  1641,     0,
    1635,     0,     0,     0,     0,  1636,  1629,     0,     0,     0,
       0,     0,  1642,     0,     0,  1643,  1631,     0,     0,     0,
       0,     0,  1634,  1632,     0,     0,     0,     0,  1637,  1638,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1635,
       0,     0,     0,  1639,  1636,     0,     0,     0,     0,     0,
    1633,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1634,     0,     0,     0,     0,     0,  1637,  1638,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1635,     0,
       0,  1640,  1639,  1636,  1641,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1642,     0,
       0,  1643,     0,     0,     0,     0,  1637,  1638,     0,     0,
       0,     0,     0,     0,  1644,     0,     0,     0,     0,     0,
    1640,  1639,     0,  1641,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1642,     0,     0,
    1643,     0,     0,     0,     0,     0,     0,  1634,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1640,
       0,     0,  1641,     0,  1635,     0,     0,     0,     0,  1636,
       0,     0,     0,     0,     0,     0,  1642,     0,     0,  1643,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1637,  1638,     0,     0,     0,     0,     0,     0,
    1644,     0,     0,     0,     0,     0,     0,  1639,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1645,     0,     0,  1646,  1647,  1648,     0,  1649,  1650,
    1651,  1652,  1653,  1654,     0,     0,     0,     0,  3079,  1644,
       0,     0,     0,     0,     0,  1640,     0,     0,  1641,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1642,     0,     0,  1643,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1644,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1645,     0,     0,
    1646,  1647,  1648,     0,  1649,  1650,  1651,  1652,  1653,  1654,
       0,     0,     0,     0,  3086,     0,     0,     0,     0,     0,
       0,  1620,     0,     0,  1621,     0,     0,     0,  1622,  1623,
    1624,  1625,  1626,  1627,  1628,     0,  1645,     0,     0,  1646,
    1647,  1648,     0,  1649,  1650,  1651,  1652,  1653,  1654,  1629,
       0,     0,     0,  3246,  1644,     0,     0,     0,     0,  1631,
    1620,     0,     0,  1621,     0,     0,  1632,  1622,  1623,  1624,
    1625,  1626,  1627,  1628,     0,  1645,     0,     0,  1646,  1647,
    1648,     0,  1649,  1650,  1651,  1652,  1653,  1654,  1629,     0,
       0,     0,  3268,  1633,     0,     0,     0,     0,  1631,     0,
       0,     0,     0,     0,     0,  1632,     0,  1620,     0,     0,
    1621,     0,     0,     0,  1622,  1623,  1624,  1625,  1626,  1627,
    1628,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1633,     0,     0,  1629,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1631,  1620,     0,     0,  1621,
       0,     0,  1632,  1622,  1623,  1624,  1625,  1626,  1627,  1628,
       0,  1645,     0,     0,  1646,  1647,  1648,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1629,     0,     0,     0,  3369,  1633,
       0,     0,     0,     0,  1631,  1620,     0,     0,  1621,     0,
    1634,  1632,  1622,  1623,  1624,  1625,  1626,  1627,  1628,     0,
       0,     0,     0,     0,     0,     0,     0,  1635,     0,     0,
       0,     0,  1636,  1629,     0,     0,     0,     0,  1633,     0,
       0,     0,     0,  1631,     0,     0,     0,     0,     0,  1634,
    1632,     0,     0,     0,     0,  1637,  1638,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1635,     0,     0,     0,
    1639,  1636,     0,     0,     0,     0,     0,  1633,     0,  1620,
       0,     0,  1621,     0,     0,     0,  1622,  1623,     0,     0,
    1626,  1627,  1628,     0,  1637,  1638,  1634,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1640,  1639,
       0,  1641,     0,  1635,     0,     0,     0,  1631,  1636,     0,
       0,     0,     0,     0,  1632,  1642,     0,     0,  1643,     0,
       0,     0,     0,     0,     0,  1634,     0,  1372,  1373,     0,
       0,  1637,  1638,     0,     0,     0,     0,  1640,     0,     0,
    1641,  1633,  1635,     0,     0,     0,  1639,  1636,     0,     0,
       0,     0,     0,     0,  1642,     0,     0,  1643,     0,     0,
       0,     0,     0,     0,  1634,     0,     0,     0,  1374,  1375,
    1637,  1638,  1376,  1377,     0,     0,     0,     0,     0,     0,
       0,  1635,     0,     0,  1640,  1639,  1636,  1641,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1642,     0,     0,  1643,     0,     0,     0,     0,  1637,
    1638,     0,     0,     0,     0,     0,     0,  1644,     0,     0,
       0,     0,     0,  1640,  1639,     0,  1641,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1634,     0,
    1642,     0,     0,  1643,     0,     0,     0,     0,  1378,  1379,
       0,     0,     0,     0,     0,  1635,  1644,     0,     0,     0,
    1636,     0,  1640,     0,     0,  1641,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1642,
       0,     0,  1643, -2058, -2058,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1639,     0,
       0,     0,     0,  1644,     0,     0,     0,     0,     0,     0,
       0,     0,  1380,  1381,  1382,  1383,  1384,  1385,  1386,  1387,
       0,     0,  1388,  1389,  1645,     0,     0,  1646,  1647,  1648,
       0,  1649,  1650,  1651,  1652,  1653,  1654,     0,     0, -2058,
       0,  3426,  1644,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1642,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1645,     0,     0,  1646,  1647,  1648,     0,
    1649,  1650,  1651,  1652,  1653,  1654,     0,     0,     0,     0,
    3448,  1644,     0,     0,     0,     0,     0,     0,     0,   721,
       0,     0,     0,     0,     0,  1620,  1390,  1391,  1621,     0,
       0,     0,  1622,  1623,  1624,  1625,  1626,  1627,  1628,     0,
    1645,     0,     0,  1646,  1647,  1648,     0,  1649,  1650,  1651,
    1652,  1653,  1654,  1629,     0,  1806,     0,     0,     0,     0,
       0,     0,     0,  1631,     0,     0,     0,  1392,  1393,     0,
    1632,     0,     0,     0,     0,     0,   722,     0,     0,  1645,
       0,     0,  1646,  1647,  1648,  1644,  1649,  1650,  1651,  1652,
    1653,  1654,   723,     0,  2806,     0,     0,  1633,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1645,     0,
       0,  1646,  1647,  1648,     0,  1649,  1650,  1651,  1652,  1653,
    1654,     0,     0,  3236,     0,     0,     0,     0,     0,     0,
       0,   724,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   725,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1394,  1395,   726,     0,     0,     0,     0,   727,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1396,  1397,     0,     0,
       0,     0,  1645,     0,  1634,  1646,  1647,  1648,   728,  1649,
    1650,  1651,  1652,  1653,  1654,     0,  2004,     0,     0,     0,
       0,  1635,     0,     0,     0,     0,  1636,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1637,
    1638,   729,     0,     0,     0,   730,     0,     0,     0,     0,
       0,     0,     0,     0,  1639,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1640,     0,     0,  1641,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1642,
       0,     0,  1643,     0,     0,   731,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     732,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   733,     0,     0,   734,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   735,
       0,     0,   736,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     737,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1644,     0,     0,   738,     0,     0,     0,     0,     0,
       0,   740,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   741,     0,     0,     0,     0,     0,   742,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   743,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   559,     0,     0,  1645,     0,
       0,  1646,  1647,  1648,     0,  1649,  1650,  1651,  1652,  1653,
    1654,     0,     0,  3410,   118,   119,   120,   121,   122,   123,
     124,   125,   560,   126,   127,   128,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   130,   131,   570,   132,   133,
     134,   571,   136,   137,   138,   572,   573,   574,   575,   576,
     577,   144,   145,   146,   147,   148,   149,   578,   579,   150,
     151,   152,   153,   580,   581,   156,   582,   157,   158,   159,
     160,   583,   584,   585,   586,   587,   164,   165,   166,   167,
     168,   588,   170,   171,   172,   589,   173,   174,   175,   176,
     177,   178,   590,   591,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   593,   191,   192,   594,   194,   595,
     195,   596,   196,   197,   198,   199,   200,   201,   597,   598,
     202,   203,   204,   205,   599,   600,   206,   207,   208,   209,
     210,   601,   211,   212,   213,   602,   214,   215,   216,   603,
     217,   218,   219,   220,   604,   222,   223,   224,   225,   226,
     227,   605,   606,   229,   607,   230,   231,   608,   233,   609,
     234,   610,   235,   611,   612,   613,   238,   239,   614,   615,
     242,   616,   243,   617,   618,   619,   246,   247,   620,   248,
     249,   250,   251,   252,   253,   254,   621,   256,   257,   258,
     259,   622,   260,   261,   262,   263,   264,   265,   266,   623,
     267,   624,   625,   270,   271,   272,   273,   274,   626,   627,
     628,   629,   630,   278,   631,   632,   281,   633,   283,   284,
     285,   286,   287,   288,   634,   635,   289,   636,   291,   637,
     638,   293,   294,   295,   296,   297,   298,   299,   300,   639,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     640,   641,   642,   325,   326,   327,   643,   644,   329,   330,
     645,   332,   646,   647,   334,   648,   336,   337,   338,   649,
     339,   340,   650,   651,   341,   342,   343,   652,   653,   344,
     345,   654,   655,   348,   656,   657,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   658,   659,   660,
     661,   362,   363,   662,   663,   366,   367,   664,   369,   370,
     371,   665,   372,   373,   374,   375,   376,   377,   666,   378,
     379,   380,   381,   382,   667,   384,   385,   386,   387,   668,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   669,   401,   402,   670,   404,   405,   406,
     671,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   672,   673,   421,   422,   423,   424,
     425,   426,   674,   428,   429,   675,   676,   431,   432,   677,
     434,   678,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   679,   448,   680,   681,   682,   450,
     451,   683,   452,   684,   454,   455,   456,   457,   458,   685,
     459,   686,   687,   688,   689,   462,   463,   690,   465,   691,
     692,   467,   468,   693,   470,   471,   472,   473,   474,   694,
     695,   475,   476,   477,   696,   478,   479,   480,   481,   697,
     482,   483,   484,   485,   486,   698,   699,   700,   489,   701,
     491,   492,   493,   494,   495,   496,   497,   702,   703,   498,
     704,   705,   499,   500,   501,   502,   503,   504,   706,   707,
     708,   709,   710,   711,   712,   713,   714,   715,   716,   516,
     517,   518,   519,   527,     0,     0,     0,     0,     0,     0,
       0,     0,  2081,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   528,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   529,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,   401,   402,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,     0,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   530,   448,   449,     0,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
     461,     0,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   527,     0,     0,     0,     0,     0,     0,     0,     0,
    2706,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   528,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   529,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
     401,   402,     0,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
       0,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     530,   448,   449,     0,     0,   450,   451,     0,   452,     0,
     454,   455,   456,   457,   458,     0,   459,   460,   461,     0,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   969,
    1348,   820,     0,     0,     0,  1052,     0,     0,  2709,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,   564,     0,     0,     0,     0,   569,   130,
     131,     0,   132,   133,   134,   571,   136,   137,   138,   572,
     573,   574,   575,   576,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   580,   581,   156,
       0,   157,   158,   159,   160,   583,     0,   585,     0,   587,
     164,   165,   166,   167,   168,   588,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,   591,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   593,   191,
     192,   594,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   604,   222,
     223,   224,   225,   226,   227,   605,  1349,   229,     0,   230,
     231,   608,   233,     0,   234,     0,   235,   611,     0,   613,
     238,   239,   614,   615,   242,     0,   243,     0,   618,   619,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
     621,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,   624,   625,   270,   271,   272,
     273,   274,   626,   627,     0,   629,     0,   278,   631,   632,
     281,   633,   283,   284,   285,   286,   287,   288,     0,     0,
     289,   636,   291,   637,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   639,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   640,   641,   642,   325,   326,   327,
     643,     0,   329,   330,   645,   332,     0,   647,   334,   648,
     336,   337,   338,     0,   339,   340,  1350,     0,   341,   342,
     343,     0,     0,   344,   345,   654,   655,   348,   656,   657,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   662,   663,   366,
     367,   664,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   667,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,   401,   402,
     670,   404,   405,   406,   671,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,     0,   673,
     421,   422,   423,   424,   425,   426,   674,   428,   429,     0,
     676,   431,   432,   677,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   679,   448,
     680,     0,     0,   450,   451,     0,   452,   684,   454,   455,
     456,   457,   458,     0,   459,   686,   687,     0,     0,   462,
     463,   690,   465,   691,  1351,   467,   468,   693,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   698,
     699,     0,   489,   701,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   706,   707,   708,   709,   710,   711,   712,   713,
     714,   715,   716,   516,   517,   518,   519,     0,     0,  1620,
       0,     0,  1621,     0,  1352,  1353,  1622,  1623,  1624,  1625,
    1626,  1627,  1628,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1629,     0,     0,
       0,     0,  2179,     0,     0,     0,     0,  1631,  1620,     0,
       0,  1621,     0,     0,  1632,  1622,  1623,  1624,  1625,  1626,
    1627,  1628,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1629,     0,     0,     0,
       0,  1633,     0,     0,     0,     0,  1631,  1620,     0,     0,
    1621,     0,     0,  1632,  1622,  1623,  1624,  1625,  1626,  1627,
    1628,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1629,     0,     0,     0,     0,
    1633,     0,     0,     0,     0,  1631,     0,  2180,     0,     0,
       0,     0,  1632,     0,  1620,     0,     0,  1621,     0,     0,
       0,  1622,  1623,  1624,  1625,  1626,  1627,  1628,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1633,
       0,     0,  1629,     0,     0,     0,  1900,     0,     0,     0,
       0,     0,  1631,     0,     0,     0,     0,     0,  1634,  1632,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1635,     0,     0,     0,     0,
    1636,     0,     0,     0,     0,     0,  1633,  1936,     0,     0,
       0,     0,  1937,     0,     0,     0,     0,  1634,     0,     0,
       0,     0,     0,  1637,  1638,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1635,     0,     0,     0,  1639,  1636,
       0,     0,     0,     0,     0,  3516,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1634,     0,     0,     0,
       0,     0,  1637,  1638,  1372,  1373,     0,     0,     0,     0,
       0,     0,     0,  1635,     0,     0,  1640,  1639,  1636,  1641,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1642,     0,     0,  1643,     0,     0,     0,
       0,  1637,  1638,  1634,     0,  1374,  1375,     0,     0,  1376,
    1377,     0,     0,     0,     0,  1640,  1639,     0,  1641,     0,
    1635,     0,     0,     0,     0,  1636,     0,     0,     0,     0,
       0,     0,  1642,     0,     0,  1643,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1637,  1638,
       0,     0,     0,     0,  1640,     0,     0,  1641,     0,     0,
       0,     0,     0,  1639,     0,     0,     0,     0,     0,     0,
       0,  1642,     0,     0,  1643,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1378,  1379,     0,     0,     0,
       0,     0,     0,     0,     0,  1644,     0,     0,     0,     0,
       0,  1640,     0,  3517,  1641,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1642,     0,
       0,  1643,     0,     0,     0,     0,     0,     0,     0,  1620,
       0,     0,  1621,     0,  1644,     0,  1622,  1623,  1624,  1625,
    1626,  1627,  1628,     0,     0,     0,     0,     0,     0,  1380,
    1381,  1382,  1383,  1384,  1385,  1386,  1387,  1629,  2183,  1388,
    1389,     0,     0,     0,     0,     0,     0,  1631,     0,     0,
       0,     0,     0,  1644,  1632,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1633,  1645,     0,     0,  1646,  1647,  1648,     0,  1649,
    1650,  1651,  1652,  1653,  1654,     0,     0,     0,     0,     0,
    1644,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1390,  1391,     0,     0,     0,     0,     0,
       0,  1645,     0,     0,  1646,  1647,  1648,     0,  1649,  1650,
    1651,  1652,  1653,  1654,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1392,  1393,     0,     0,     0,     0,
    1645,     0,     0,  1646,  1647,  1648,     0,  1649,  1650,  1651,
    1652,  1653,  1654,     0,     0,     0,     0,     0,  1634,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1635,     0,     0,     0,     0,
    1636,     0,     0,     0,     0,     0,     0,  1645,     0,     0,
    1646,  1647,  1648,     0,  1649,  1650,  1651,  1652,  1653,  1654,
       0,     0,     0,  1637,  1638,     0,     0,     0,     0,     0,
       0,     0,     0,  1620,     0,     0,  1621,     0,  1639,     0,
    1622,  1623,  1624,  1625,  1626,  1627,  1628,     0,     0,  1394,
    1395,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1629,     0,     0,     0,  1942,     0,     0,     0,     0,
       0,  1631,     0,  1396,  1397,     0,  1640,     0,  1632,  1641,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1642,     0,     0,  1643,     0,     0,     0,
       0,  1620,     0,     0,  1621,  1633,     0,     0,  1622,  1623,
    1624,  1625,  1626,  1627,  1628,     0,     0,     0,     0,  1907,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1629,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1631,
       0,     0,     0,     0,     0,     0,  1632,     0,     0,     0,
       0,     0,     0,     0,     0,  1620,     0,     0,  1621,     0,
       0,     0,  1622,  1623,  1624,  1625,  1626,  1627,  1628,     0,
       0,     0,     0,  1633,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1629,     0,     0,     0,  1949,     0,     0,
       0,     0,     0,  1631,     0,  1644,     0,     0,     0,     0,
    1632,     0,  1634,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1635,
       0,     0,  1620,     0,  1636,  1621,     0,  1633,     0,  1622,
    1623,  1624,  1625,  1626,  1627,  1628,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1637,  1638,     0,
    1629,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1631,     0,  1639,     0,     0,  1947,     0,  1632,     0,     0,
    1634,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1635,     0,     0,
       0,     0,  1636,     0,  1633,     0,     0,     0,     0,     0,
    1640,     0,  1645,  1641,     0,  1646,  1647,  1648,     0,  1649,
    1650,  1651,  1652,  1653,  1654,  1637,  1638,  1642,     0,     0,
    1643,     0,     0,     0,  1634,     0,     0,     0,     0,     0,
    1639,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1635,     0,     0,     0,     0,  1636,     0,     0,     0,
       0,     0,     0,     0,  1620,     0,     0,  1621,     0,     0,
       0,  1622,  1623,  1624,  1625,  1626,  1627,  1628,  1640,  1637,
    1638,  1641,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2074,  1629,     0,  1639,  1642,     0,     0,  1643,     0,
       0,  1634,  1631,     0,     0,     0,     0,     0,     0,  1632,
       0,     0,     0,     0,     0,     0,     0,     0,  1635,     0,
       0,     0,     0,  1636,     0,     0,     0,     0,     0,  1644,
       0,  1620,  1640,     0,  1621,  1641,  1633,     0,  1622,  1623,
    1624,  1625,  1626,  1627,  1628,     0,  1637,  1638,     0,  1642,
       0,     0,  1643,     0,     0,     0,     0,     0,     0,  1629,
       0,  1639,     0,  2783,     0,     0,     0,     0,     0,  1631,
       0,     0,     0,     0,     0,     0,  1632,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1644,     0,  1640,
       0,     0,  1641,  1633,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1642,     0,     0,  1643,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1634,     0,     0,  1645,     0,     0,  1646,
    1647,  1648,     0,  1649,  1650,  1651,  1652,  1653,  1654,     0,
    1635,  1644,     0,  1620,     0,  1636,  1621,     0,     0,     0,
    1622,  1623,  1624,  1625,  1626,  1627,  1628,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1637,  1638,
       0,  1629,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1631,     0,  1639,     0,     0,     0,     0,  1632,     0,
    1634,     0,     0,     0,  1645,     0,     0,  1646,  1647,  1648,
       0,  1649,  1650,  1651,  1652,  1653,  1654,  1635,  1644,     0,
       0,     0,  1636,     0,     0,  1633,     0,     0,     0,     0,
       0,  1640,     0,     0,  1641,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1637,  1638,     0,  1642,     0,
       0,  1643,     0,     0,     0,     0,     0,     0,  1645,     0,
    1639,  1646,  1647,  1648,     0,  1649,  1650,  1651,  1652,  1653,
    1654,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1640,     0,
       0,  1641,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1642,     0,     0,  1643,     0,
       0,     0,  1634,     0,     0,  1645,     0,     0,  1646,  1647,
    1648,     0,  1649,  1650,  1651,  1652,  1653,  1654,     0,  1635,
       0,     0,     0,     0,  1636,     0,     0,     0,     0,     0,
    1644,     0,  1620,     0,     0,  1621,     0,     0,     0,  1622,
    1623,  1624,  1625,  1626,  1627,  1628,     0,  1637,  1638,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1629,     0,  1639,  2770,     0,     0,     0,     0,     0,     0,
    1631,     0,     0,     0,     0,     0,     0,  1632,     0,     0,
    1620,     0,     0,  1621,     0,     0,     0,  1622,  1623,  1624,
    1625,  1626,  1627,  1628,     0,     0,     0,  1644,     0,     0,
    1640,     0,     0,  1641,  1633,     0,     0,     0,  1629,     0,
       0,     0,     0,     0,     0,     0,     0,  1642,  1631,     0,
    1643,     0,     0,     0,     0,  1632,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1645,     0,     0,
    1646,  1647,  1648,     0,  1649,  1650,  1651,  1652,  1653,  1654,
       0,     0,  1633,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1634,     0,     0,  1645,     0,     0,  1646,  1647,  1648,
       0,  1649,  1650,  1651,  1652,  1653,  1654,     0,  1635,  1644,
       0,     0,     0,  1636,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1816,  1638,     0,  1634,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1639,     0,     0,     0,     0,  1635,     0,     0,     0,
       0,  1636,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1637,  1638,     0,     0,     0,  1640,
       0,     0,  1641,     0,     0,     0,     0,     0,     0,  1639,
       0,     0,     0,     0,     0,     0,  1642,     0,     0,  1643,
       0,     0,     0,     0,     0,     0,  1645,     0,     0,  1646,
    1647,  1648,     0,  1649,  1650,  1651,  1652,  1653,  1654,     0,
       0,     0,     0,     0,     0,     0,     0,  1640,     0,     0,
    1641,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1642,     0,     0,  1643,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1644,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1644,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1645,     0,     0,  1646,  1647,
    1648,     0,  1649,  1650,  1651,  1652,  1653,  1654,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   559,     0,  2097,
       0,     0,     0,  1645,     0,     0,  1646,  1647,  1648,     0,
    1649,  1650,  1651,  1652,  2200,  1654,   118,   119,   120,   121,
     122,   123,   124,   125,   560,   126,   127,   128,   561,   562,
     563,   564,   565,   566,   567,   568,   569,   130,   131,   570,
     132,   133,   134,   571,   136,   137,   138,   572,   573,   574,
     575,   576,   577,   144,   145,   146,   147,   148,   149,   578,
     579,   150,   151,   152,   153,   580,   581,   156,   582,   157,
     158,   159,   160,   583,   584,   585,   586,   587,   164,   165,
     166,   167,   168,   588,   170,   171,   172,   589,   173,   174,
     175,   176,   177,   178,   590,   591,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   593,   191,   192,   594,
     194,   595,   195,   596,   196,   197,   198,   199,   200,   201,
     597,   598,   202,   203,   204,   205,   599,   600,   206,   207,
     208,   209,   210,   601,   211,   212,   213,   602,   214,   215,
     216,   603,   217,   218,   219,   220,   604,   222,   223,   224,
     225,   226,   227,   605,   606,   229,   607,   230,   231,   608,
     233,   609,   234,   610,   235,   611,   612,   613,   238,   239,
     614,   615,   242,   616,   243,   617,   618,   619,   246,   247,
     620,   248,   249,   250,   251,   252,   253,   254,   621,   256,
     257,   258,   259,   622,   260,   261,   262,   263,   264,   265,
     266,   623,   267,   624,   625,   270,   271,   272,   273,   274,
     626,   627,   628,   629,   630,   278,   631,   632,   281,   633,
     283,   284,   285,   286,   287,   288,   634,   635,   289,   636,
     291,   637,   638,   293,   294,   295,   296,   297,   298,   299,
     300,   639,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   640,   641,   642,   325,   326,   327,   643,   644,
     329,   330,   645,   332,   646,   647,   334,   648,   336,   337,
     338,   649,   339,   340,   650,   651,   341,   342,   343,   652,
     653,   344,   345,   654,   655,   348,   656,   657,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   658,
     659,   660,   661,   362,   363,   662,   663,   366,   367,   664,
     369,   370,   371,   665,   372,   373,   374,   375,   376,   377,
     666,   378,   379,   380,   381,   382,   667,   384,   385,   386,
     387,   668,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   669,   401,   402,   670,   404,
     405,   406,   671,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   672,   673,   421,   422,
     423,   424,   425,   426,   674,   428,   429,   675,   676,   431,
     432,   677,   434,   678,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   679,   448,   680,   681,
     682,   450,   451,   683,   452,   684,   454,   455,   456,   457,
     458,   685,   459,   686,   687,   688,   689,   462,   463,   690,
     465,   691,   692,   467,   468,   693,   470,   471,   472,   473,
     474,   694,   695,   475,   476,   477,   696,   478,   479,   480,
     481,   697,   482,   483,   484,   485,   486,   698,   699,   700,
     489,   701,   491,   492,   493,   494,   495,   496,   497,   702,
     703,   498,   704,   705,   499,   500,   501,   502,   503,   504,
     706,   707,   708,   709,   710,   711,   712,   713,   714,   715,
     716,   516,   517,   518,   519,   559,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,   560,   126,   127,   128,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   130,   131,   570,   132,   133,
     134,   571,   136,   137,   138,   572,   573,   574,   575,   576,
     577,   144,   145,   146,   147,   148,   149,   578,   579,   150,
     151,   152,   153,   580,   581,   156,   582,   157,   158,   159,
     160,   583,   584,   585,   586,   587,   164,   165,   166,   167,
     168,   588,   170,   171,   172,   589,   173,   174,   175,   176,
     177,   178,   590,   591,   180,   181,   182,   183,   184,   185,
     592,   187,   188,   189,   593,   191,   192,   594,   194,   595,
     195,   596,   196,   197,   198,   199,   200,   201,   597,   598,
     202,   203,   204,   205,   599,   600,   206,   207,   208,   209,
     210,   601,   211,   212,   213,   602,   214,   215,   216,   603,
     217,   218,   219,   220,   604,   222,   223,   224,   225,   226,
     227,   605,   606,   229,   607,   230,   231,   608,   233,   609,
     234,   610,   235,   611,   612,   613,   238,   239,   614,   615,
     242,   616,   243,   617,   618,   619,   246,   247,   620,   248,
     249,   250,   251,   252,   253,   254,   621,   256,   257,   258,
     259,   622,   260,   261,   262,   263,   264,   265,   266,   623,
     267,   624,   625,   270,   271,   272,   273,   274,   626,   627,
     628,   629,   630,   278,   631,   632,   281,   633,   283,   284,
     285,   286,   287,   288,   634,   635,   289,   636,   291,   637,
     638,   293,   294,   295,   296,   297,   298,   299,   300,   639,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     640,   641,   642,   325,   326,   327,   643,   644,   329,   330,
     645,   332,   646,   647,   334,   648,   336,   337,   338,   649,
     339,   340,   650,   651,   341,   342,   343,   652,   653,   344,
     345,   654,   655,   348,   656,   657,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   658,   659,   660,
     661,   362,   363,   662,   663,   366,   367,   664,   369,   370,
     371,   665,   372,   373,   374,   375,   376,   377,   666,   378,
     379,   380,   381,   382,   667,   384,   385,   386,   387,   668,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   669,   401,   402,   670,   404,   405,   406,
     671,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   672,   673,   421,   422,   423,   424,
     425,   426,   674,   428,   429,   675,   676,   431,   432,   677,
     434,   678,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   679,   448,   680,   681,   682,   450,
     451,   683,   452,   684,   454,   455,   456,   457,   458,   685,
     459,   686,   687,   688,   689,   462,   463,   690,   465,   691,
     692,   467,   468,   693,   470,   471,   472,   473,   474,   694,
     695,   475,   476,   477,   696,   478,   479,   480,   481,   697,
     482,   483,   484,   485,   486,   698,   699,   700,   489,   701,
     491,   492,   493,   494,   495,   496,   497,   702,   703,   498,
     704,   705,   499,   500,   501,   502,   503,   504,   706,   707,
     708,   709,   710,   711,   712,   713,   714,   715,   716,   516,
     517,   518,   519,   559,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
     560,   126,   127,   128,   561,   562,   563,   564,   565,   566,
     567,   568,   569,   130,   131,   570,   132,   133,   134,   571,
     136,   137,   138,   572,   573,   574,   575,   576,   577,   144,
     145,   146,   147,   148,   149,   578,   579,   150,   151,   152,
     153,   580,   581,   156,   582,   157,   158,   159,   160,   583,
     584,   585,   586,   587,   164,   165,   166,   167,   168,   588,
     170,   171,   172,   589,   173,   174,   175,   176,   177,   178,
     590,   591,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   593,   191,   192,   594,   194,   595,   195,   596,
     196,   197,   198,   199,   200,   201,   597,   598,   202,   203,
     204,   205,   599,   600,   206,   207,   208,   209,   210,   601,
     211,   212,   213,   602,   214,   215,   216,   603,   217,   218,
     219,   220,   604,   222,   223,   224,   225,   226,   227,   605,
     606,   229,   607,   230,   231,   608,   233,   609,   234,   610,
     235,   611,   612,   613,   238,   239,   614,   615,   242,   616,
     243,   617,   618,   619,   246,   247,   620,   248,   249,   250,
     251,   252,   945,   254,   621,   256,   257,   258,   259,   622,
     260,   261,   262,   263,   264,   265,   266,   623,   267,   624,
     625,   270,   271,   272,   273,   274,   626,   627,   628,   629,
     630,   278,   631,   632,   281,   633,   283,   284,   285,   286,
     287,   288,   634,   635,   289,   636,   291,   637,   638,   293,
     294,   295,   296,   297,   298,   299,   300,   639,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   640,   641,
     642,   325,   326,   327,   643,   644,   329,   330,   645,   332,
     646,   647,   334,   648,   336,   337,   338,   649,   339,   340,
     650,   651,   341,   342,   343,   652,   653,   344,   345,   654,
     655,   348,   656,   657,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   658,   659,   660,   661,   362,
     363,   662,   663,   366,   367,   664,   369,   370,   371,   665,
     372,   373,   374,   375,   376,   377,   666,   378,   379,   380,
     381,   382,   667,   384,   385,   386,   387,   668,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   669,   401,   402,   670,   404,   405,   406,   671,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   672,   673,   421,   422,   423,   424,   425,   426,
     674,   428,   429,   675,   676,   431,   432,   677,   434,   678,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   679,   448,   680,   681,   682,   450,   451,   683,
     452,   684,   454,   455,   456,   457,   458,   685,   459,   686,
     687,   688,   689,   462,   463,   690,   465,   691,   692,   467,
     468,   693,   470,   471,   472,   473,   474,   694,   695,   475,
     476,   477,   696,   478,   479,   480,   481,   697,   482,   483,
     484,   485,   486,   698,   699,   700,   489,   701,   491,   492,
     493,   494,   495,   496,   497,   702,   703,   498,   704,   705,
     499,   500,   501,   502,   503,   504,   706,   707,   708,   709,
     710,   711,   712,   713,   714,   715,   716,   516,   517,   518,
     519,   559,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,   560,   126,
     127,   128,   561,   562,   563,   564,   565,   566,   567,   568,
     569,   130,   131,   570,   132,   133,   134,   571,   136,   137,
     138,   572,   573,   574,   575,   576,   577,   144,   145,   146,
     147,   148,   149,   578,   579,   150,   151,   152,   153,   580,
     581,   156,   582,   157,   158,   159,   160,   583,   584,   585,
     586,   587,   164,   165,   166,   167,   168,   588,   170,   171,
     172,   589,   173,   174,   175,   176,   177,   178,   590,   591,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     593,   191,   192,   594,   194,   595,   195,   596,   196,   197,
     198,   199,   200,   201,   597,   598,   202,   203,   204,   205,
     599,   600,   206,   207,   208,   209,   210,   601,   211,   212,
     213,   602,   214,   215,   216,   603,   217,   218,   219,   220,
     604,   222,   223,   224,   225,   226,   227,   605,   606,   229,
     607,   230,   231,   608,   233,   609,   234,   610,   235,   611,
     612,   613,   238,   239,   614,   615,   242,   616,   243,   617,
     618,   619,   246,   247,   620,   248,   249,   250,   251,   252,
     253,   254,   621,   256,   257,   258,   259,   622,   260,   261,
     262,   263,   264,   265,   266,   623,   267,   624,   625,   270,
     271,   272,   273,   274,   626,   627,   628,   629,   630,   278,
     631,   632,   281,   633,   283,   284,   285,   286,   287,   288,
     634,   635,   289,   636,   291,   637,   638,   293,   294,   295,
     296,   297,   298,   299,   300,   639,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   640,   641,   642,   325,
     326,   327,   643,   644,   329,   330,   645,   332,   646,   647,
     334,   648,   336,   337,   338,   649,   339,   340,   650,   651,
     341,   342,   343,   652,   653,   344,   345,   654,   655,   348,
     656,   657,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   658,   659,   660,   661,   362,   363,   662,
     663,   366,   367,   664,   369,   370,   371,   665,   372,   373,
     374,   375,   376,   377,   666,   378,   379,   380,   381,   382,
     667,   384,   385,   386,   387,   668,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   669,
     401,   402,   670,   404,   405,   406,   671,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     672,   673,   421,   422,   423,   424,   425,   426,   674,   428,
     429,   675,   676,   431,   432,   677,   434,   678,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     679,   448,   680,   681,   682,   450,   451,   683,   452,   684,
     454,   455,   456,   457,   458,   685,   459,   686,   687,   688,
     689,   462,   463,   690,   465,   691,   692,   467,   468,   693,
     470,   471,   472,   473,   474,   694,   695,   475,   476,   477,
     696,   478,   479,   480,   481,   697,   482,   483,   484,   485,
     486,   698,   699,   700,   489,   701,   491,   492,   493,   494,
     495,   496,   497,   702,   703,   498,   704,   705,   499,   500,
     501,   502,   503,   504,   706,   707,   708,   709,   710,   711,
     712,   713,   714,   715,   716,   516,   517,   518,   519,   559,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,  2245,   123,   124,   125,   560,   126,   127,   128,
     561,   562,   563,   564,   565,   566,   567,   568,   569,   130,
     131,   570,   132,   133,   134,   571,   136,   137,   138,   572,
     573,   574,   575,   576,   577,   144,   145,   146,   147,   148,
     149,   578,   579,   150,   151,   152,   153,   580,   581,   156,
     582,   157,   158,   159,   160,   583,   584,   585,   586,   587,
     164,   165,   166,   167,   168,   588,   170,   171,   172,   589,
     173,   174,   175,   176,   177,   178,   590,   591,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   593,   191,
     192,   594,   194,   595,   195,   596,   196,   197,   198,   199,
     200,   201,   597,   598,   202,   203,   204,   205,   599,   600,
     206,   207,   208,  2246,   210,   601,   211,   212,   213,   602,
     214,   215,   216,   603,   217,   218,   219,   220,   604,   222,
     223,   224,   225,   226,   227,   605,   606,   229,   607,   230,
     231,   608,   233,   609,   234,   610,   235,   611,   612,   613,
     238,   239,   614,   615,   242,   616,   243,   617,   618,   619,
     246,   247,   620,   248,   249,   250,   251,   252,   253,   254,
     621,   256,   257,   258,   259,   622,   260,   261,   262,   263,
     264,   265,   266,   623,   267,   624,   625,   270,   271,   272,
     273,   274,   626,   627,   628,   629,   630,   278,   631,   632,
     281,   633,   283,   284,   285,   286,   287,   288,   634,   635,
     289,   636,   291,   637,   638,   293,   294,   295,   296,   297,
     298,   299,   300,   639,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   640,   641,   642,   325,   326,   327,
     643,   644,   329,   330,   645,   332,   646,   647,   334,   648,
     336,   337,   338,   649,   339,   340,   650,   651,   341,   342,
     343,   652,   653,   344,   345,   654,   655,   348,   656,   657,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   658,   659,   660,   661,   362,   363,   662,   663,   366,
     367,   664,   369,   370,   371,   665,   372,   373,   374,   375,
     376,   377,   666,   378,   379,   380,   381,   382,   667,   384,
     385,   386,   387,   668,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   669,   401,   402,
     670,   404,   405,   406,   671,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   672,   673,
     421,   422,   423,   424,   425,  2247,   674,   428,   429,   675,
     676,   431,   432,   677,   434,   678,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   679,   448,
     680,   681,   682,   450,   451,   683,   452,   684,   454,   455,
     456,   457,   458,   685,   459,   686,   687,   688,   689,   462,
     463,   690,   465,   691,   692,   467,   468,   693,   470,   471,
     472,   473,   474,   694,   695,   475,   476,   477,   696,   478,
     479,   480,   481,   697,   482,   483,   484,   485,   486,   698,
     699,   700,   489,   701,   491,   492,   493,   494,   495,   496,
     497,   702,   703,   498,   704,   705,   499,   500,   501,   502,
     503,   504,   706,   707,   708,   709,   710,   711,   712,   713,
     714,   715,   716,   516,   517,   518,   519,   969,     0,   820,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,   564,     0,     0,     0,     0,   569,   130,   131,     0,
     132,   133,   134,   571,   136,   137,   138,   572,   573,   574,
     575,   576,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   580,   581,   156,     0,   157,
     158,   159,   160,   583,     0,   585,     0,   587,   164,   165,
     166,   167,   168,   588,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,   591,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   593,   191,   192,   594,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   604,   222,   223,   224,
     225,   226,   227,   605,  1349,   229,     0,   230,   231,   608,
     233,     0,   234,     0,   235,   611,     0,   613,   238,   239,
     614,   615,   242,     0,   243,     0,   618,   619,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,   621,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,   624,   625,   270,   271,   272,   273,   274,
     626,   627,     0,   629,     0,   278,   631,   632,   281,   633,
     283,   284,   285,   286,   287,   288,     0,     0,   289,   636,
     291,   637,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   639,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   640,   641,   642,   325,   326,   327,   643,     0,
     329,   330,   645,   332,     0,   647,   334,   648,   336,   337,
     338,     0,   339,   340,  1350,     0,   341,   342,   343,     0,
       0,   344,   345,   654,   655,   348,   656,   657,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   662,   663,   366,   367,   664,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   667,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,   401,   402,   670,   404,
     405,   406,   671,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,     0,   673,   421,   422,
     423,   424,   425,   426,   674,   428,   429,     0,   676,   431,
     432,   677,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   679,   448,   680,     0,
       0,   450,   451,     0,   452,   684,   454,   455,   456,   457,
     458,     0,   459,   686,   687,     0,     0,   462,   463,   690,
     465,   691,  1351,   467,   468,   693,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   698,   699,     0,
     489,   701,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     706,   707,   708,   709,   710,   711,   712,   713,   714,   715,
     716,   516,   517,   518,   519,   969,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     3,     4,     0,   564,
       0,     0,     0,     0,   569,   130,   131,     0,   132,   133,
     134,   571,   136,   137,   138,   572,   573,   574,   575,   576,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   580,   581,   156,     0,   157,   158,   159,
     160,   583,     0,   585,     0,   587,   164,   165,   166,   167,
     168,   588,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,   591,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   593,   191,   192,   594,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   604,   222,   223,   224,   225,   226,
     227,   605,     0,   229,     0,   230,   231,   608,   233,     0,
     234,     0,   235,   611,     0,   613,   238,   239,   614,   615,
     242,     0,   243,     0,   618,   619,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,   621,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,   624,   625,   270,   271,   272,   273,   274,   626,   627,
       0,   629,     0,   278,   631,   632,   281,   633,   283,   284,
     285,   286,   287,   288,     0,     0,   289,   636,   291,   637,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   639,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     640,   641,   642,   325,   326,   327,   643,     0,   329,   330,
     645,   332,     0,   647,   334,   648,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   654,   655,   348,   656,   657,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   662,   663,   366,   367,   664,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   667,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,   401,   402,   670,   404,   405,   406,
     671,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,     0,   673,   421,   422,   423,   424,
     425,   426,   674,   428,   429,     0,   676,   431,   432,   677,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   679,   448,   680,     0,     0,   450,
     451,     0,   452,   684,   454,   455,   456,   457,   458,     0,
     459,   686,   687,     0,     0,   462,   463,   690,   465,   691,
       0,   467,   468,   693,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   698,   699,     0,   489,   701,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   706,   707,
     708,   709,   710,   711,   712,   713,   714,   715,   716,   516,
     517,   518,   519,   117,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,   131,     0,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,   790,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   791,
       0,   792,     0,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   793,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,     0,     0,   289,   290,   291,   292,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
       0,   795,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
     347,   348,   349,   797,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   798,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,     0,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,   430,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   800,     0,     0,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,     0,   459,   460,
     461,     0,     0,   462,   463,   801,   465,   802,     0,   467,
     468,   803,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   117,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
     129,   130,   131,     0,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,   162,
       0,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
       0,     0,   289,   290,   291,   292,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,     0,   329,   330,   331,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
       0,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,   430,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,     0,     0,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,     0,   459,   460,   461,     0,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   527,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
    1749,   157,   158,   159,   160,   161,     0,     0,  1750,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,  1751,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,  1752,   235,     0,     0,     0,
     238,   239,   528,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,  1753,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   529,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,  1754,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,   401,   402,
       0,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,     0,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   530,   448,
     449,     0,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,   461,     0,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,  1755,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   527,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,  1749,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,  1751,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,  1752,   235,     0,     0,     0,   238,   239,
     528,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,  2327,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   529,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,  1754,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,   401,   402,     0,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,     0,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   431,
     432,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   530,   448,   449,     0,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   459,   460,   461,     0,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,  1755,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   527,     0,   553,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     3,     4,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   528,     0,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   529,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,   401,   402,     0,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,     0,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   530,   448,   449,     0,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,   461,     0,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   527,     0,   553,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
     554,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   528,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   529,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   555,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,   401,   402,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,     0,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   530,   448,   449,     0,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
     461,     0,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   527,     0,   553,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   528,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   529,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,   796,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
     401,   402,     0,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
       0,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     530,   448,   449,     0,     0,   450,   451,     0,   452,     0,
     454,   455,   456,   457,   458,     0,   459,   460,   461,     0,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   527,
       0,   553,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   528,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   901,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   529,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,   796,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,   401,   402,
       0,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,     0,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   530,   448,
     449,     0,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,   461,     0,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   527,     0,   553,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,   943,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     528,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   529,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,   401,   402,     0,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,     0,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   431,
     432,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   530,   448,   449,     0,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   459,   460,   461,     0,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   527,     0,   553,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,  1173,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   528,     0,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   529,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,   796,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,   401,   402,     0,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,     0,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   530,   448,   449,     0,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,   461,     0,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   527,  1953,     0,     0,     0,     0,  1954,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   528,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   529,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,   401,   402,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,     0,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   530,   448,   449,     0,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
     461,     0,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   527,     0,   553,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   528,     0,  1961,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,  1962,
     296,   297,   298,   299,   300,   529,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
     401,   402,     0,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
       0,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     530,   448,   449,     0,     0,   450,   451,  1963,   452,     0,
     454,  1964,   456,  1965,   458,     0,   459,   460,   461,     0,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,  1966,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   527,
       0,   553,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   528,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   529,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,   401,   402,
       0,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,     0,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   530,   448,
     449,     0,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,   461,     0,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   527,     0,   820,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     528,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   529,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,   401,   402,     0,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,     0,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   431,
     432,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   530,   448,   449,     0,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   459,   460,   461,     0,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   527,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,   827,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   528,     0,
     828,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,   829,   296,   297,   298,   299,   300,   529,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,   401,   402,     0,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,     0,     0,   421,   422,   423,   424,
     830,   426,   427,   428,   429,     0,     0,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   530,   448,   449,     0,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   831,   461,     0,     0,   832,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   527,     0,   553,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   528,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   529,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,   864,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,   401,   402,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,     0,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   530,   448,   449,     0,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
     461,     0,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   527,     0,   553,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   528,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     896,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   529,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
     401,   402,     0,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
       0,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     530,   448,   449,     0,     0,   450,   451,     0,   452,     0,
     454,   455,   456,   457,   458,     0,   459,   460,   461,     0,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   527,
       0,   553,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   528,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   899,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   529,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,   401,   402,
       0,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,     0,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   530,   448,
     449,     0,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,   461,     0,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   527,     0,   553,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     528,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   903,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   529,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,   401,   402,     0,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,     0,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   431,
     432,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   530,   448,   449,     0,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   459,   460,   461,     0,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   527,     0,   553,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   528,     0,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   931,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   529,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,   401,   402,     0,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,     0,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   530,   448,   449,     0,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,   461,     0,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   527,     0,   553,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   528,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   959,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   529,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,   401,   402,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,     0,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   530,   448,   449,     0,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
     461,     0,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   527,     0,   553,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   528,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     962,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   529,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
     401,   402,     0,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
       0,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     530,   448,   449,     0,     0,   450,   451,     0,   452,     0,
     454,   455,   456,   457,   458,     0,   459,   460,   461,     0,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   527,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,  1005,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   528,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   529,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,   401,   402,
       0,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,     0,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   530,   448,
     449,     0,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,   461,     0,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   527,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,  1028,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     528,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   529,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,   401,   402,     0,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,     0,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   431,
     432,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   530,   448,   449,     0,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   459,   460,   461,     0,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   527,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,   827,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   528,     0,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   529,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,   401,   402,     0,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,     0,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   530,   448,   449,     0,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   831,   461,     0,     0,   832,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   527,     0,   553,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   528,     0,   242,     0,
     243,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,  1307,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   529,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,   401,   402,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,     0,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   530,   448,   449,     0,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
     461,     0,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   527,     0,   553,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,     0,   132,   133,   134,     0,   136,   137,
     138,   139,   140,     0,   142,   143,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,     0,     0,
       0,   163,   164,   165,   166,   167,   168,     0,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,   208,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,   235,     0,
       0,     0,   238,   239,   528,     0,   242,     0,   243,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
    1309,   254,     0,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,     0,   278,
       0,     0,   281,     0,   283,   284,   285,   286,   287,   288,
       0,     0,   289,     0,   291,     0,     0,   293,   294,   295,
     296,   297,   298,   299,   300,   529,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
     326,   327,   328,     0,   329,   330,     0,   332,     0,   333,
     334,   335,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   348,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
       0,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
     401,   402,     0,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
       0,     0,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   431,   432,   433,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     530,   448,   449,     0,     0,   450,   451,     0,   452,     0,
     454,   455,   456,   457,   458,     0,   459,   460,   461,     0,
       0,   462,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,   487,   488,     0,   489,     0,   491,   492,   493,   494,
     495,   496,   497,     0,     0,   498,     0,     0,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   527,
       0,   553,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   127,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   132,   133,   134,     0,   136,   137,   138,   139,
     140,     0,   142,   143,     0,   144,   145,   146,   147,   148,
     149,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,     0,     0,     0,   163,
     164,   165,   166,   167,   168,     0,   170,   171,   172,     0,
     173,   174,   175,   176,   177,   178,     0,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,     0,     0,
     206,   207,   208,   209,   210,     0,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,   235,     0,     0,     0,
     238,   239,   528,     0,   242,     0,   243,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,  1312,   254,
       0,   256,   257,   258,   259,     0,   260,   261,   262,   263,
     264,   265,   266,     0,   267,     0,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,     0,   278,     0,     0,
     281,     0,   283,   284,   285,   286,   287,   288,     0,     0,
     289,     0,   291,     0,     0,   293,   294,   295,   296,   297,
     298,   299,   300,   529,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,     0,   329,   330,     0,   332,     0,   333,   334,   335,
     336,   337,   338,     0,   339,   340,     0,     0,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   348,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,     0,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,   401,   402,
       0,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,     0,     0,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   431,   432,   433,   434,     0,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   530,   448,
     449,     0,     0,   450,   451,     0,   452,     0,   454,   455,
     456,   457,   458,     0,   459,   460,   461,     0,     0,   462,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,   476,   477,     0,   478,
     479,   480,   481,     0,   482,   483,   484,   485,   486,   487,
     488,     0,   489,     0,   491,   492,   493,   494,   495,   496,
     497,     0,     0,   498,     0,     0,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   527,     0,   553,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     132,   133,   134,     0,   136,   137,   138,   139,   140,     0,
     142,   143,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,     0,     0,     0,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
     208,   209,   210,     0,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,   235,     0,     0,     0,   238,   239,
     528,     0,   242,     0,   243,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,  1314,   254,     0,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,     0,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,     0,   278,     0,     0,   281,     0,
     283,   284,   285,   286,   287,   288,     0,     0,   289,     0,
     291,     0,     0,   293,   294,   295,   296,   297,   298,   299,
     300,   529,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,     0,   324,   325,   326,   327,   328,     0,
     329,   330,     0,   332,     0,   333,   334,   335,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   348,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,     0,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,   401,   402,     0,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,     0,     0,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   431,
     432,   433,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   530,   448,   449,     0,
       0,   450,   451,     0,   452,     0,   454,   455,   456,   457,
     458,     0,   459,   460,   461,     0,     0,   462,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,   487,   488,     0,
     489,     0,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   527,     0,   553,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,     0,   126,   127,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,     0,   132,   133,
     134,     0,   136,   137,   138,   139,   140,     0,   142,   143,
       0,   144,   145,   146,   147,   148,   149,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,     0,     0,     0,   163,   164,   165,   166,   167,
     168,     0,   170,   171,   172,     0,   173,   174,   175,   176,
     177,   178,     0,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,     0,     0,   206,   207,   208,   209,
     210,     0,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,   235,     0,     0,     0,   238,   239,   528,     0,
     242,     0,   243,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,  2241,   254,     0,   256,   257,   258,
     259,     0,   260,   261,   262,   263,   264,   265,   266,     0,
     267,     0,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   277,     0,   278,     0,     0,   281,     0,   283,   284,
     285,   286,   287,   288,     0,     0,   289,     0,   291,     0,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   529,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,     0,   324,   325,   326,   327,   328,     0,   329,   330,
       0,   332,     0,   333,   334,   335,   336,   337,   338,     0,
     339,   340,     0,     0,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   348,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,     0,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,   401,   402,     0,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,     0,     0,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   431,   432,   433,
     434,     0,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   530,   448,   449,     0,     0,   450,
     451,     0,   452,     0,   454,   455,   456,   457,   458,     0,
     459,   460,   461,     0,     0,   462,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,   476,   477,     0,   478,   479,   480,   481,     0,
     482,   483,   484,   485,   486,   487,   488,     0,   489,     0,
     491,   492,   493,   494,   495,   496,   497,     0,     0,   498,
       0,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,  1485,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,  1486,     0,     0,
    -790,     0,  1487,   130,   131,     0,   132,   133,   134,  1488,
     136,   137,   138,     0,  1489,  1490,  1491,  1492,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,  1493,  1494,   156,     0,   157,   158,   159,   160,     0,
       0,  1495,     0,  1496,   164,   165,   166,   167,   168,  1497,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,  1498,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,  1499,   191,   192,  1500,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,  1065,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   222,   223,   224,   225,   226,   227,     0,
       0,   229,     0,   230,   231,  1501,   233,     0,   234,     0,
     235,  1502,     0,  1503,   238,   239,  -790,  1504,   242,     0,
     243,     0,     0,     0,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,  1505,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,  1506,
       0,   270,   271,   272,   273,   274,  1507,  1508,     0,  1509,
       0,   278,  1510,  1511,   281,  1512,   283,   284,   285,   286,
     287,   288,     0,     0,   289,  1513,   291,  1514,     0,   293,
     294,   295,   296,   297,   298,   299,   300,  1515,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,  1516,  1517,
    1518,   325,   326,   327,     0,     0,   329,   330,  1519,   332,
       0,     0,   334,  1520,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,     0,
    1521,   348,  1522,     0,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,     0,  1523,   366,   367,     0,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,  1524,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,   401,   402,  1525,   404,   405,   406,  1526,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,     0,  1527,   421,   422,   423,   424,   425,   426,
    1528,   428,   429,     0,  1529,   431,   432,  1530,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,  1531,   448,     0,     0,     0,   450,   451,     0,
     452,  1532,   454,   455,   456,   457,   458,     0,   459,  1533,
    1534,     0,     0,   462,   463,     0,   465,     0,     0,   467,
     468,  1535,   470,   471,   472,   473,   474,  1536,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,     0,  1537,     0,   489,  1538,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   527,     0,   553,     0,
       0,     0,     0,     0,     0,     0,     0,   516,   517,   518,
     519,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,     0,     0,     0,   238,   239,   528,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,  2985,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
       0,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     529,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   401,   402,     0,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,     0,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   431,   432,
     433,   434,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   530,   448,   449,     0,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   459,   460,   461,     0,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   527,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,     0,   132,   133,   134,
       0,   136,   137,   138,   139,   140,     0,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,     0,     0,   163,   164,   165,   166,   167,   168,
       0,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,   235,     0,     0,     0,   238,   239,   528,     0,   242,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,     0,   278,     0,     0,   281,     0,   283,   284,   285,
     286,   287,   288,     0,     0,   289,     0,   291,     0,     0,
     293,   294,   295,   296,   297,   298,   299,   300,   529,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   324,   325,   326,   327,   328,     0,   329,   330,     0,
     332,     0,   333,   334,   335,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,     0,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,   401,   402,     0,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,     0,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   431,   432,   433,   434,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   530,   448,   449,     0,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   459,
     460,   461,     0,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   527,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   528,     0,   842,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     843,   296,   297,   298,   299,   300,   529,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,   401,   402,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   844,   413,   414,   415,   416,   417,   418,   419,
     420,     0,     0,   421,   422,   423,   424,   845,   426,   427,
     428,   429,     0,     0,   431,   432,   433,   434,     0,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   530,   448,   449,     0,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   459,   846,   461,
       0,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,     0,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     527,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   528,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   955,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   529,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,     0,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,     0,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,     0,   431,   432,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   530,
     448,   449,     0,     0,   450,   451,     0,   452,     0,   454,
     455,   456,   457,   458,     0,   459,   460,   461,     0,     0,
     462,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,     0,   489,     0,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   527,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,     0,     0,   238,
     239,   528,     0,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   529,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,   401,   402,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   844,   413,
     414,   415,   416,   417,   418,   419,   420,     0,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,     0,
     431,   432,   433,   434,     0,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   530,   448,   449,
       0,     0,   450,   451,     0,   452,     0,   454,   455,   456,
     457,   458,     0,   459,   846,   461,     0,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,     0,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   527,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,     0,     0,     0,   238,   239,   528,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,  1316,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
       0,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     529,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   401,   402,     0,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,     0,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   431,   432,
     433,   434,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   530,   448,   449,     0,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   459,   460,   461,     0,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   527,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,     0,   132,   133,   134,
       0,   136,   137,   138,   139,   140,     0,   142,   143,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,     0,     0,     0,   163,   164,   165,   166,   167,   168,
       0,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,   208,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,   235,     0,     0,     0,   238,   239,   528,     0,   242,
       0,   243,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,  1327,   254,     0,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
       0,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,     0,   278,     0,     0,   281,     0,   283,   284,   285,
     286,   287,   288,     0,     0,   289,     0,   291,     0,     0,
     293,   294,   295,   296,   297,   298,   299,   300,   529,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
       0,   324,   325,   326,   327,   328,     0,   329,   330,     0,
     332,     0,   333,   334,   335,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,     0,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,   401,   402,     0,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,     0,     0,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   431,   432,   433,   434,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   530,   448,   449,     0,     0,   450,   451,
       0,   452,     0,   454,   455,   456,   457,   458,     0,   459,
     460,   461,     0,     0,   462,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,   487,   488,     0,   489,     0,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   527,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,     0,
     126,   127,   128,     0,     0,     0,     0,     0,     0,  1680,
       0,     0,   130,   131,     0,   132,   133,   134,     0,   136,
     137,   138,   139,   140,     0,   142,   143,     0,   144,   145,
     146,   147,   148,   149,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,     0,
       0,     0,   163,   164,   165,   166,   167,   168,     0,   170,
     171,   172,     0,   173,   174,   175,   176,   177,   178,     0,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,     0,     0,   206,   207,   208,   209,   210,     0,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,   235,
       0,     0,     0,   238,   239,   528,     0,   242,     0,   243,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   256,   257,   258,   259,     0,   260,
     261,   262,   263,   264,   265,   266,     0,   267,     0,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,     0,
     278,     0,     0,   281,     0,   283,   284,   285,   286,   287,
     288,     0,     0,   289,     0,   291,     0,     0,   293,   294,
     295,   296,   297,   298,   299,   300,   529,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,     0,   324,
     325,   326,   327,   328,     0,   329,   330,     0,   332,     0,
     333,   334,   335,   336,   337,   338,     0,   339,   340,     0,
       0,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     348,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,     0,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,   401,   402,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,     0,     0,   421,   422,   423,   424,   425,     0,   427,
     428,   429,     0,     0,   431,   432,   433,   434,     0,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   530,   448,   449,     0,     0,   450,   451,     0,   452,
       0,   454,   455,   456,   457,   458,     0,   459,   460,   461,
       0,     0,   462,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,   476,
     477,     0,   478,   479,   480,   481,     0,   482,   483,   484,
     485,   486,   487,   488,     0,   489,     0,   491,   492,   493,
     494,   495,   496,   497,     0,     0,   498,     0,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     527,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,     0,   132,   133,   134,     0,   136,   137,   138,
     139,   140,     0,   142,   143,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,     0,     0,     0,
     163,   164,   165,   166,   167,   168,     0,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,   208,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,   235,     0,     0,
       0,   238,   239,   528,     0,   242,     0,   243,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,  1857,
     254,     0,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,     0,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,     0,   278,     0,
       0,   281,     0,   283,   284,   285,   286,   287,   288,     0,
       0,   289,     0,   291,     0,     0,   293,   294,   295,   296,
     297,   298,   299,   300,   529,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,     0,   329,   330,     0,   332,     0,   333,   334,
     335,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   348,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,     0,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,     0,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,     0,
       0,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,     0,   431,   432,   433,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   530,
     448,   449,     0,     0,   450,   451,     0,   452,     0,   454,
     455,   456,   457,   458,     0,   459,   460,   461,     0,     0,
     462,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
     487,   488,     0,   489,     0,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   527,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,     0,   126,   127,   128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
       0,   132,   133,   134,     0,   136,   137,   138,   139,   140,
       0,   142,   143,     0,   144,   145,   146,   147,   148,   149,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,     0,     0,     0,   163,   164,
     165,   166,   167,   168,     0,   170,   171,   172,     0,   173,
     174,   175,   176,   177,   178,     0,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,     0,     0,   206,
     207,   208,   209,   210,     0,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,   235,     0,     0,     0,   238,
     239,   528,     0,   242,     0,   243,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,  2228,   254,     0,
     256,   257,   258,   259,     0,   260,   261,   262,   263,   264,
     265,   266,     0,   267,     0,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,     0,   278,     0,     0,   281,
       0,   283,   284,   285,   286,   287,   288,     0,     0,   289,
       0,   291,     0,     0,   293,   294,   295,   296,   297,   298,
     299,   300,   529,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,     0,   324,   325,   326,   327,   328,
       0,   329,   330,     0,   332,     0,   333,   334,   335,   336,
     337,   338,     0,   339,   340,     0,     0,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   348,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,   401,   402,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,     0,     0,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,     0,
     431,   432,   433,   434,     0,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   530,   448,   449,
       0,     0,   450,   451,     0,   452,     0,   454,   455,   456,
     457,   458,     0,   459,   460,   461,     0,     0,   462,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,   476,   477,     0,   478,   479,
     480,   481,     0,   482,   483,   484,   485,   486,   487,   488,
       0,   489,     0,   491,   492,   493,   494,   495,   496,   497,
       0,     0,   498,     0,     0,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   527,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   127,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,     0,   132,
     133,   134,     0,   136,   137,   138,   139,   140,     0,   142,
     143,     0,   144,   145,   146,   147,   148,   149,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,     0,     0,     0,   163,   164,   165,   166,
     167,   168,     0,   170,   171,   172,     0,   173,   174,   175,
     176,   177,   178,     0,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
       0,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,     0,     0,   206,   207,   208,
     209,   210,     0,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,   235,     0,     0,     0,   238,   239,   528,
       0,   242,     0,   243,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,  2243,   254,     0,   256,   257,
     258,   259,     0,   260,   261,   262,   263,   264,   265,   266,
       0,   267,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,     0,   278,     0,     0,   281,     0,   283,
     284,   285,   286,   287,   288,     0,     0,   289,     0,   291,
       0,     0,   293,   294,   295,   296,   297,   298,   299,   300,
     529,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,     0,   324,   325,   326,   327,   328,     0,   329,
     330,     0,   332,     0,   333,   334,   335,   336,   337,   338,
       0,   339,   340,     0,     0,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   348,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,     0,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   401,   402,     0,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,     0,     0,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   431,   432,
     433,   434,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   530,   448,   449,     0,     0,
     450,   451,     0,   452,     0,   454,   455,   456,   457,   458,
       0,   459,   460,   461,     0,     0,   462,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,   476,   477,     0,   478,   479,   480,   481,
       0,   482,   483,   484,   485,   486,   487,   488,     0,   489,
       0,   491,   492,   493,   494,   495,   496,   497,     0,     0,
     498,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,  1485,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   127,   128,     0,     0,     0,  1486,     0,
       0,     0,     0,  1487,   130,   131,     0,   132,   133,   134,
    1488,   136,   137,   138,     0,  1489,  1490,  1491,  1492,     0,
     144,   145,   146,   147,   148,   149,     0,     0,   150,   151,
     152,   153,  1493,  1494,   156,     0,   157,   158,   159,   160,
       0,     0,  1495,     0,  1496,   164,   165,   166,   167,   168,
    1497,   170,   171,   172,     0,   173,   174,   175,   176,   177,
     178,     0,  1498,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,  1499,   191,   192,  1500,   194,     0,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,     0,     0,   206,   207,  1065,   209,   210,
       0,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,     0,   222,   223,   224,   225,   226,   227,
       0,     0,   229,     0,   230,   231,  1501,   233,     0,   234,
       0,   235,  1502,     0,  1503,   238,   239,     0,  1504,   242,
       0,   243,     0,     0,     0,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,  1505,   256,   257,   258,   259,
       0,   260,   261,   262,   263,   264,   265,   266,     0,   267,
    1506,     0,   270,   271,   272,   273,   274,  1507,  1508,     0,
    1509,     0,   278,  1510,  1511,   281,  1512,   283,   284,   285,
     286,   287,   288,     0,     0,   289,  1513,   291,  1514,     0,
     293,   294,   295,   296,   297,   298,   299,   300,  1515,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,  1516,
    1517,  1518,   325,   326,   327,     0,     0,   329,   330,  1519,
     332,     0,     0,   334,  1520,   336,   337,   338,     0,   339,
     340,     0,     0,   341,   342,   343,     0,     0,   344,   345,
       0,  1521,   348,  1522,     0,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     362,   363,     0,  1523,   366,   367,     0,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,  1524,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,   401,   402,  1525,   404,   405,   406,  1526,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,     0,  1527,   421,   422,   423,   424,   425,
     426,  1528,   428,   429,     0,  1529,   431,   432,  1530,   434,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,  1531,   448,     0,     0,     0,   450,   451,
       0,   452,  1532,   454,   455,   456,   457,   458,     0,   459,
    1533,  1534,     0,     0,   462,   463,     0,   465,     0,     0,
     467,   468,  1535,   470,   471,   472,   473,   474,  1536,     0,
     475,   476,   477,     0,   478,   479,   480,   481,     0,   482,
     483,   484,   485,   486,     0,  1537,     0,   489,  1538,   491,
     492,   493,   494,   495,   496,   497,     0,     0,   498,     0,
       0,   499,   500,   501,   502,   503,   504,  1485,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   516,   517,
     518,   519,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   127,   128,     0,     0,
       0,  1486,     0,     0,     0,     0,  1487,   130,   131,     0,
     132,   133,   134,  1488,   136,   137,   138,     0,  1489,  1490,
    1491,  1492,     0,   144,   145,   146,   147,   148,   149,     0,
       0,   150,   151,   152,   153,  1493,  1494,   156,     0,   157,
     158,   159,   160,     0,     0,  1495,     0,  1496,   164,   165,
     166,   167,   168,  1497,   170,   171,   172,     0,   173,   174,
     175,   176,   177,   178,     0,  1498,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,  1499,   191,   192,  1500,
     194,     0,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,     0,     0,   206,   207,
    1065,   209,   210,     0,   211,   212,   213,     0,  1839,   215,
     216,     0,   217,   218,   219,   220,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   229,     0,   230,   231,  1501,
     233,     0,   234,     0,   235,  1502,     0,  1503,   238,   239,
       0,  1504,   242,     0,   243,     0,     0,     0,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,  1505,   256,
     257,   258,   259,     0,   260,   261,   262,   263,   264,   265,
     266,     0,   267,  1506,     0,   270,   271,   272,   273,   274,
    1507,  1508,     0,  1509,     0,   278,  1510,  1511,   281,  1512,
     283,   284,   285,   286,   287,   288,     0,     0,   289,  1513,
     291,  1514,     0,   293,   294,   295,   296,   297,   298,   299,
     300,  1515,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,  1516,  1517,  1518,   325,   326,   327,     0,     0,
     329,   330,  1519,   332,     0,     0,   334,  1520,   336,   337,
     338,     0,   339,   340,     0,     0,   341,   342,   343,     0,
       0,   344,   345,     0,  1521,   348,  1522,     0,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   362,   363,     0,  1523,   366,   367,     0,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,  1524,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,   401,   402,  1525,   404,
     405,   406,  1526,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,     0,  1527,   421,   422,
     423,   424,   425,   426,  1528,   428,   429,     0,  1529,   431,
     432,  1530,   434,     0,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,  1531,   448,     0,     0,
       0,   450,   451,     0,   452,  1532,   454,   455,   456,   457,
     458,     0,   459,  1533,  1534,     0,     0,   462,   463,     0,
     465,     0,     0,   467,   468,  1535,   470,   471,   472,   473,
     474,  1536,     0,   475,   476,   477,     0,   478,   479,   480,
     481,     0,   482,   483,   484,   485,   486,     0,  1537,     0,
     489,  1538,   491,   492,   493,   494,   495,   496,   497,     0,
       0,   498,     0,     0,   499,   500,   501,   502,   503,   504,
    3155,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   516,   517,   518,   519,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,   127,
     128,     0,     0,     0,  2907,     0,     0,     0,     0,  2908,
     130,   131,     0,   132,   133,   134,  2909,   136,   137,   138,
       0,  1489,  2910,  1491,  1492,     0,   144,   145,   146,   147,
     148,   149,     0,     0,   150,   151,   152,   153,  1493,  1494,
     156,     0,   157,   158,   159,   160,     0,     0,  2911,     0,
    2912,   164,   165,   166,   167,   168,  2913,   170,   171,   172,
       0,   173,   174,   175,   176,   177,   178,     0,  2914,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,  1499,
     191,   192,  1500,   194,     0,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,     0,
       0,   206,   207,  1065,   209,   210,     0,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,     0,
     222,   223,   224,   225,   226,   227,     0,     0,   229,     0,
     230,   231,  1501,   233,     0,   234,     0,   235,  2915,     0,
    2916,   238,   239,  2917,  2918,   242,     0,   243,     0,     0,
       0,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,  2919,   256,   257,   258,   259,     0,   260,   261,   262,
     263,   264,   265,   266,     0,   267,  2920,     0,   270,   271,
     272,   273,   274,  1507,  1508,     0,  1509,     0,   278,  2921,
    2922,   281,  2923,   283,   284,   285,   286,   287,   288,     0,
       0,   289,  2924,   291,  2925,     0,   293,   294,   295,   296,
     297,   298,   299,   300,  3156,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,  1516,  2927,  1518,   325,   326,
     327,     0,     0,   329,   330,  2929,   332,     0,     0,   334,
    1520,   336,   337,   338,     0,   339,   340,     0,     0,   341,
     342,   343,     0,     0,   344,   345,     0,  2931,   348,  2932,
       0,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   362,   363,     0,  2933,
     366,   367,     0,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,  1524,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
     402,  2934,   404,   405,   406,     0,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,     0,
    2935,   421,   422,   423,   424,   425,   426,     0,   428,   429,
       0,  2937,   431,   432,  1530,   434,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,  3157,
     448,     0,     0,     0,   450,   451,     0,   452,  2939,   454,
     455,   456,   457,   458,     0,   459,  1533,  1534,     0,     0,
     462,   463,     0,   465,     0,     0,   467,   468,  2940,   470,
     471,   472,   473,   474,     0,     0,   475,   476,   477,     0,
     478,   479,   480,   481,     0,   482,   483,   484,   485,   486,
       0,  1537,     0,   489,  2942,   491,   492,   493,   494,   495,
     496,   497,     0,     0,   498,     0,     0,   499,   500,   501,
     502,   503,   504,   527,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   516,   517,   518,   519,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,   126,   127,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   132,   133,   134,     0,
     136,   137,   138,   139,   140,     0,   142,   143,     0,   144,
     145,   146,   147,   148,   149,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
       0,     0,     0,   163,   164,   165,   166,   167,   168,     0,
     170,   171,   172,     0,   173,   174,   175,   176,   177,   178,
       0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,     0,     0,   206,   207,   208,   209,   210,     0,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
     235,     0,     0,     0,   238,   239,   528,     0,   242,     0,
     243,     0,   244,   245,     0,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   256,   257,   258,   259,     0,
     260,   261,   262,   263,   264,   265,   266,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
       0,   278,     0,     0,   281,     0,   283,   284,   285,   286,
     287,   288,     0,     0,   289,     0,   291,     0,     0,   293,
     294,   295,   296,   297,   298,   299,   300,   529,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,     0,
     324,   325,   326,   327,   328,     0,   329,   330,     0,   332,
       0,   333,   334,   335,   336,   337,   338,     0,   339,   340,
       0,     0,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   348,     0,   350,   351,   352,   353,   354,   355,   356,
       0,   358,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,     0,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
       0,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,   401,   402,     0,   404,   405,   406,   407,     0,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,     0,     0,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   431,   432,   433,   434,     0,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   530,   448,   449,     0,     0,   450,   451,     0,
     452,     0,   454,   455,   456,   457,   458,     0,   459,   460,
     461,     0,     0,   462,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
     476,   477,     0,   478,   479,   480,   481,     0,   482,   483,
     484,   485,   486,   487,   488,     0,   489,     0,   491,   492,
     493,   494,   495,   496,   497,     0,     0,   498,     0,     0,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,  1776,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
     127,   128,     0,     0,     0,  1486,     0,     0,     0,     0,
    1487,   130,   131,     0,   132,   133,   134,  1488,   136,   137,
     138,     0,  1489,  1490,  1491,  1492,     0,   144,   145,   146,
     147,   148,   149,     0,     0,   150,   151,   152,   153,  1493,
    1494,   156,     0,   157,   158,   159,   160,     0,     0,  1495,
       0,  1496,   164,   165,   166,   167,   168,  1497,   170,   171,
     172,     0,   173,   174,   175,   176,   177,   178,     0,  1498,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
    1499,   191,   192,  1500,   194,     0,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
       0,     0,   206,   207,  1065,   209,   210,     0,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   222,   223,   224,   225,   226,   227,     0,     0,   229,
       0,   230,   231,  1501,   233,     0,   234,     0,   235,  1502,
       0,  1503,   238,   239,     0,  1504,   242,     0,   243,     0,
       0,     0,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,  1505,   256,   257,   258,   259,     0,   260,   261,
     262,   263,   264,   265,   266,     0,   267,  1506,     0,   270,
     271,   272,   273,   274,  1507,  1508,     0,  1509,     0,   278,
    1510,  1511,   281,  1512,   283,   284,   285,   286,   287,   288,
       0,     0,   289,  1513,   291,  1514,     0,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,  1516,  1517,  1518,   325,
     326,   327,     0,     0,   329,   330,  1519,   332,     0,     0,
     334,  1520,   336,   337,   338,     0,   339,   340,     0,     0,
     341,   342,   343,     0,     0,   344,   345,     0,  1521,   348,
    1522,     0,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   362,   363,     0,
    1523,   366,   367,     0,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
    1524,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
     401,   402,  1525,   404,   405,   406,     0,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
       0,  1527,   421,   422,   423,   424,   425,   426,     0,   428,
     429,     0,  1529,   431,   432,  1530,   434,     0,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
       0,   448,     0,     0,     0,   450,   451,     0,   452,  1532,
     454,   455,   456,   457,   458,     0,   459,  1533,  1534,     0,
       0,   462,   463,     0,   465,     0,     0,   467,   468,  1535,
     470,   471,   472,   473,   474,     0,     0,   475,   476,   477,
       0,   478,   479,   480,   481,     0,   482,   483,   484,   485,
     486,     0,  1537,     0,   489,  1538,   491,   492,   493,   494,
     495,   496,   497,     0,     1,   498,     0,     0,   499,   500,
     501,   502,   503,   504,     2,     0,     3,     4,     0,     0,
       0,     0,     1,     0,     0,   516,   517,   518,   519,     0,
       0,     0,     2,     0,     6,     0,     0,     0,     0,     0,
       0,     0,     0,     7,     0,     0,     0,     0,     0,     0,
       0,     0,     6,     0,     0,     0,     0,     8,     0,     0,
       0,     7,     0,     0,     0,     0,     0,     0,    10,     0,
       0,     0,     0,     0,     0,     8,     0,     0,     0,     0,
      11,     0,   750,     0,     0,     0,    10,     0,     0,     0,
       0,     0,     0,    13,     0,     0,     0,     0,    11,     0,
     750,     0,     0,     0,     0,     0,     0,     0,    14,    15,
       0,    13,     0,     0,     0,     0,     0,     0,     0,   751,
       0,     0,     0,     0,     0,    18,    14,    15,     0,     0,
       0,     0,     0,    19,     0,     0,     0,   751,     0,     0,
       0,     0,     0,    18,     0,     0,     0,     0,     0,     0,
      22,    19,     0,     0,    23,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    22,     0,
       0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    25,     0,     0,     0,     0,     0,
       0,     0,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,    28,    29,
       0,     0,     0,     0,     0,    30,     0,     0,    31,     0,
       0,     0,     0,     0,     0,    27,    28,    29,     0,     0,
       0,     0,     0,    30,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,     0,     0,     0,     0,    33,     0,
       0,     0,     0,     0,     0,     0,     0,    32,     0,     0,
       0,     0,     0,     0,    34,     0,    33,     0,     0,     0,
       0,    35,     0,     0,     0,    36,     0,     0,     0,     0,
       0,     0,    34,     0,     0,    37,     0,     0,     0,    35,
       0,     0,     0,    36,     0,     0,     0,    38,     0,     0,
       0,    39,     0,    37,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,     0,     0,    39,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,    40,
      43,     0,     0,     0,     0,    44,     0,     0,     0,   752,
       0,     0,    41,     0,     0,     0,     0,     0,    43,     0,
       0,    45,     0,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
       0,     0,     0,     0,     0,    46,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   753,
       0,     0,     0,    46,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    47
};

static const yytype_int16 yycheck[] =
{
       7,    89,    90,   900,     0,   520,     0,     0,   995,    16,
      87,     0,    47,     0,   840,     0,    23,     0,     0,    16,
     814,     0,   888,     0,    39,    23,   745,   863,   909,     0,
     930,   925,  1305,  1428,  1583,    20,  1703,   753,  1243,  1230,
      91,  1229,    38,  1217,  1163,    23,  1664,  1204,   986,    20,
    1038,   986,    20,     7,    91,   977,   986,     7,  1474,  2184,
    1085,   986,  1283,  1169,     0,    17,  1206,  2239,  1557,    23,
    2174,   964,     0,    23,   977,    35,  1209,     0,  1997,  2153,
       0,  2155,    89,    90,  1617,  1618,     0,  2349,    46,   960,
       0,    89,    90,  1807,  1234,     0,   111,    26,     0,  1130,
       0,  2119,     0,  1330,  1135,  2235,  1093,   103,  1998,  2661,
       0,    89,    90,  2623,     0,  2173,  2623,   900,  2659,   902,
     810,   904,     0,  1004,     0,   815,     0,     0,  2682,     0,
       0,  2306,     0,     0,   752,    89,    90,     0,  2675,    89,
      90,  2287,  2288,  2289,  2497,   753,     0,   746,   984,  1831,
       0,  2579,  1059,  1060,     9,  2583,     5,  1825,    11,     0,
      11,  1721,    15,    16,  1938,    16,    55,  1723,    63,  1076,
       0,     5,  1971,     5,     5,    63,   117,    80,  1668,    13,
      14,     5,     5,    74,  1828,  1984,  2994,     5,     5,    13,
      14,     5,     9,   987,  2324,    13,    14,     5,   771,    13,
      14,     5,     5,     5,    13,    14,  2318,     9,     5,    13,
      14,     5,   173,  2313,     5,     5,     3,  2980,     5,  1141,
       5,     5,   139,     5,   191,    45,    45,   883,     5,     5,
     883,   172,  2317,   858,  2997,    30,  1964,  1965,  1966,  2448,
     124,    13,    14,    38,  2448,   172,   100,  2377,  2378,  1039,
    2380,     3,     4,     5,  2835,  1039,  1092,     9,     4,   119,
      30,   977,  1250,     9,   147,  1146,  3160,     4,    38,     9,
     100,  1259,     9,   290,    30,    90,    11,  2881,   169,  1173,
     107,    16,    38,   172,    63,     3,     5,   174,   288,    11,
     291,  2953,   807,    15,    16,   313,  1218,   227,   988,  1221,
    1222,   132,   107,  2816,    11,  2818,    53,   184,    15,    16,
    1000,    46,   122,   276,   129,   181,    34,    35,   104,   117,
     227,   313,   977,   119,  1443,   993,   296,   368,  2593,   160,
     245,  3323,   107,    41,   296,   218,  1063,   193,    40,    46,
     855,   166,   391,   273,    30,    80,   172,  3355,  1621,    75,
     193,  1141,  1079,    82,  1528,  1474,   382,  2431,   279,   246,
     978,  3399,  1198,   304,    93,   117,   273,   173,  1194,  1195,
      40,   164,   122,    80,   315,   316,   317,   369,  3090,   122,
    3092,    33,  2541,  3290,  2543,   108,   359,   137,    64,   250,
    3488,   433,   506,   506,  2886,   181,  2542,   162,    74,    85,
    1561,    82,  2894,   213,   517,   519,   419,    59,    94,  1570,
      82,   341,    93,   296,   275,   290,   389,    30,   126,  1313,
    2592,    93,   122,  1289,  3187,    30,  2936,  1217,  2142,  2694,
     177,  3529,   118,  1217,    13,    14,   290,  2989,   329,  3447,
     482,   382,  2567,   164,   275,  1345,  3484,   194,  3000,   280,
    2991,   120,   199,   171,   285,   173,  3448,  1112,   345,  2589,
     290,  2591,   392,   340,   132,   360,    11,   219,   517,   192,
     213,  2489,   360,   238,   176,   396,   517,  3384,   419,   272,
    3387,  3289,   280,  1756,   280,   392,  1141,   273,   214,   241,
     237,   454,   369,   308,   512,   521,  3158,   384,   273,   324,
     517,  3213,   358,   309,   431,   191,   176,   361,  3021,  1534,
     231,   452,   355,   108,  3118,  1305,   517,   517,   204,   132,
     512,  1305,   463,  3104,   454,    11,   195,   132,  3422,    15,
      16,   361,   419,  3137,  2743,    80,   451,   178,   479,  2743,
    1196,     8,   538,  1196,    11,  1170,   373,   454,    15,    16,
     517,   521,    19,    20,    21,    63,   517,   448,   475,   521,
      46,   280,   503,  1218,   447,   241,  1221,  1222,  2727,    36,
    2119,  2671,  1988,   457,  2704,  3482,   517,  3385,   328,   506,
    2692,   360,   469,  1098,  1157,   592,  1493,  1494,   167,   395,
    1811,   457,   519,  1750,    80,   592,   416,   416,  1434,   459,
     241,  2520,   517,  2688,   399,   431,   515,   438,   517,   424,
    1329,  1518,   515,  2387,   419,  1334,   519,   285,   449,   406,
     407,  1340,  1448,  3386,  2157,   479,   521,  1900,   517,   399,
    2190,  1347,   481,   521,  2183,  2191,     4,  3174,  1464,  1912,
    1867,     9,   428,   399,   454,  2444,   479,   394,   481,   479,
    3160,  2319,  1843,  3160,   503,   508,   509,   510,   511,   512,
     513,   516,   513,   466,   518,  2347,   520,   517,   517,  1942,
     520,  1578,  1579,   481,    25,    26,  1949,  1882,  1666,   520,
    2852,  3109,  2326,   517,  2859,   517,  3114,  2177,   518,   523,
     520,   523,   515,   517,   517,   503,   519,  1352,  1353,   517,
     517,   120,   431,   517,  2432,  2433,  2434,  2435,   517,   517,
    3063,   454,  1985,   517,   517,   517,  1989,   805,   753,   405,
     517,  2983,   408,   517,  1560,  1561,   517,   517,  1346,  1610,
    1611,  1612,   517,   517,  1570,   517,  3288,  1336,  1528,  1347,
     517,   517,   479,  3297,  1528,   517,   753,  2020,  1584,   467,
     431,  1441,  1420,  1421,   454,   222,   508,   509,  1426,  3296,
     148,   117,   508,   509,   115,   273,   503,   752,   508,   509,
     805,   508,   509,  1500,  1995,  2833,   195,  1613,   513,   457,
      11,   752,   423,   266,   425,   753,    26,   794,   510,   511,
     512,   513,    32,  1520,   106,   409,   794,   162,   805,  2718,
     479,   457,   853,   510,   511,   512,   513,   805,   418,   132,
     451,   888,   200,  3348,  3349,    46,   853,  3249,   149,  3251,
      26,  2839,    59,   275,   503,   292,  2972,   805,   280,  1556,
      26,  1621,  1951,   840,   841,   191,    32,  1621,   321,   517,
     794,  3382,   108,   858,   794,  3397,   456,   512,  2978,    80,
     178,   805,   360,    26,   519,   805,   863,   471,  1780,    32,
     789,   517,  2752,   878,  1852,  2755,  3401,  2757,  1790,  1988,
     201,  1793,  1908,   238,   517,   203,  2795,   873,  1775,   873,
     873,   389,   842,   843,   873,   845,   873,   339,   873,   481,
     873,   873,     0,   861,   873,  3327,   873,   137,    82,  3440,
     907,   908,   873,  1939,   911,   912,   864,  1422,   520,    93,
     516,   503,  3422,   241,  1633,  3422,  2143,   467,   516,   275,
    1575,   527,   287,  1011,  2638,   517,  2640,   521,  1959,   527,
    1018,   137,  1587,  1833,  1589,   172,   174,   873,  3200,   251,
    2489,   137,  1808,  1809,  1810,   873,   275,   481,  3120,   261,
     873,  2070,   275,   873,   515,     5,  3508,   964,   519,   873,
    1615,  1883,   285,   873,   137,  1748,  1756,   295,   873,   503,
     977,   873,  1756,   873,  2507,   873,   983,   984,   930,     4,
    1883,  1874,   989,   873,     9,   992,   993,   873,   995,   996,
     997,   998,  1775,   978,  1865,   873,  3100,   873,  1869,   873,
     873,  1872,   873,   873,  1011,   873,   873,   978,   246,   512,
     873,  1018,  1795,  1011,  2409,  1014,   519,  1800,   517,   245,
    1018,  1020,   508,   509,   510,   511,   512,   513,    26,   517,
    1037,  1038,  1039,  1011,    32,   108,   245,   504,   505,   506,
    1018,   508,   509,   510,   511,   512,   513,     4,    71,    72,
      82,  1058,     9,  2159,   294,  2328,  2162,  1011,  1093,   203,
    2549,  1011,    13,    14,  1018,  1720,  1721,  1786,  1018,  2290,
    1077,  2262,  1791,   515,  2623,   245,   108,   519,   315,   316,
     317,  1088,  1089,  1090,   162,  1092,  1093,   515,   294,   167,
    1097,   519,  3264,  2807,  2213,   423,  3015,   425,   294,   355,
    1097,     4,   518,   189,   190,   521,     9,   345,   481,   119,
    1900,  1947,    26,   353,   259,   260,  1900,   357,    32,  1126,
     448,   294,  1912,   451,   203,  1780,  1177,  1178,  1912,  1180,
     503,  2271,   828,   829,   830,  1790,  1143,  1144,  1793,   137,
    1177,  1178,   174,  1180,   517,   382,   384,   373,   380,   389,
    1019,   357,  1942,   359,  1023,  1170,   380,   353,  1942,  1949,
     238,   357,  2149,    26,   373,  1949,   515,  1883,   517,    32,
     519,   203,  1179,   259,   260,   518,  1183,  1184,   521,   436,
     353,   419,   419,   389,   357,   252,  1193,  1194,  1195,   132,
    2463,  1198,  2245,   389,  2247,  1985,  2032,   207,   345,  1989,
     419,  1985,  2335,   373,   178,  1989,   162,  1997,  2341,   287,
    1217,   167,   345,  1997,   246,   452,   389,   160,  1233,  1433,
     460,  1435,  1436,   137,   518,   451,   463,   521,  1883,   373,
    2020,   469,   518,   378,   379,   521,  2020,   384,    13,    14,
     384,   132,   451,  1250,   469,  1913,  1914,  1915,  1916,  1917,
    1918,   384,  1259,  1921,  1922,  1923,  1924,  1925,  1926,  1927,
    1928,  1929,  1930,   273,   460,   275,  1890,   241,   377,   160,
    1894,  2107,   419,  1897,   137,   419,  1283,   245,   380,  1009,
     517,   451,   238,   423,   517,   425,   419,   460,  2154,   517,
    2839,   517,   378,   379,    13,    14,   294,  1027,  1305,   842,
     843,  1031,   845,   518,   518,  2721,   521,   521,   517,   517,
    1304,  1304,    13,    14,  1321,  1304,   245,  1304,    40,   423,
     167,   425,   469,  1330,  1321,   469,   518,  2446,  3500,   521,
    2449,   287,   275,   423,   517,   425,   469,   280,    60,   517,
    1347,   373,   285,   518,    13,    14,   521,   517,   517,  2004,
    2623,   518,   384,   518,   521,   353,   521,  1364,    74,   357,
    3485,  1346,  3487,  1370,   172,   518,  1454,  1364,   521,  1457,
     423,  2242,   425,  2244,  1462,  1346,   517,  1465,  3452,  1347,
     294,   245,  1470,    37,   106,   517,  2589,   419,  2591,   280,
     517,   389,  2218,  3467,   285,   518,    37,   518,   521,   373,
     521,   117,   517,  3528,   518,   373,   518,   521,   518,   521,
     442,   521,   517,  1420,  1421,  2606,   880,  2605,   882,  1426,
     518,  1428,  2316,   521,    13,    14,  1433,  1434,  1435,  1436,
    1428,   294,  2637,  2590,  2102,  2103,   787,   469,   789,   353,
     510,  1448,  1449,   357,   373,    13,    14,  1454,  3522,   423,
    1457,   425,   503,  3527,   172,  1462,  1454,  1464,  1465,  1457,
      13,    14,   460,  1470,  1462,   517,  2654,  1465,   819,  2494,
    2495,  2604,  1470,  2606,  1428,   389,  1454,   451,  1428,  1457,
     202,   500,   518,   451,  1462,   521,  1039,  1465,   518,   224,
     353,   521,  1470,   844,   357,   438,   518,    13,    14,   521,
    1454,  2156,   518,  1457,  1454,   521,   449,  1457,  1462,   373,
    2497,  1465,  1462,   519,   518,  1465,  1470,   521,   290,   173,
    1470,  1528,   451,    13,    14,   500,   389,  2363,  3242,   251,
    3244,   519,   173,  2471,  2189,  2190,  2471,  2472,  2328,   261,
     171,  2471,  2472,  2473,  2328,  2470,   460,   438,   521,   517,
      26,   273,   517,  1560,  1561,   209,    32,   518,   449,   275,
     521,  1557,  1569,  1570,   280,   518,   518,   172,   209,   521,
    1577,   225,  1557,   518,  1557,  1557,   521,  1584,  1557,   518,
    1557,   235,   521,   305,   225,   518,  1557,   451,   517,   295,
     518,   178,   518,   521,   235,   521,   518,   460,   518,   521,
     172,   521,  1609,    13,    14,   518,  1613,   518,   521,  1616,
     521,  3160,   518,   329,  1621,  1622,  1623,  1624,  1625,  1626,
    1627,  1628,  1629,  1630,    13,    14,   977,  1634,  1635,  2902,
      59,   347,  1639,  1630,  3252,   986,  1643,   359,  2357,  1646,
    1647,  1648,  1649,  1650,  1651,  1652,  1653,  1654,  2364,   518,
    1657,   517,   521,   517,   241,  1706,   420,  1664,   500,  1666,
     152,   137,   384,     8,  1217,   518,    11,   224,   521,  1706,
      15,    16,   353,  2463,    19,    20,    21,  2558,  1685,  2463,
       8,   403,   152,    11,  1035,   147,   518,    15,    16,   521,
      40,    19,    20,    21,   518,     6,  2853,   521,   152,    10,
     162,   147,  1709,    13,    14,   167,   178,    18,   152,  2900,
     364,    13,    14,  1720,  1721,  1683,   162,    13,    14,    13,
      14,   167,    33,   364,    13,    14,    37,   314,   152,   383,
    2520,   203,   448,    13,    14,   419,  2520,    13,    14,    13,
      14,   457,   383,   315,   316,   317,    13,    14,   518,  1756,
     517,  1102,  1305,    13,    14,  2581,   218,   275,  1765,    40,
    1767,  1112,  2936,    13,    14,  2665,    13,    14,  1765,   241,
    1767,  2976,   218,   151,    13,    14,   238,   469,  2644,   263,
     264,  1132,    89,  3450,   152,  3058,   373,  3454,   368,   369,
    1141,  2685,   238,   380,   172,   483,   518,   368,   369,   152,
    1807,   152,   368,   369,  1811,   368,   369,  1814,  1815,  3204,
     382,   519,  2467,  2468,   378,   379,   462,   463,   294,   152,
    2808,  3462,  3463,   295,   290,   287,  2697,   355,  3494,  3495,
    1143,  1144,   431,  2623,   296,   517,   423,   517,   425,  2623,
     517,   287,  3509,   518,   517,  1852,   421,   419,   220,   225,
     296,   300,  1848,   517,   199,   225,  2524,  2525,   225,   517,
    1867,   297,   468,    40,   451,   236,   517,  1874,  1875,     5,
       5,   199,   517,  3422,   325,   517,  1883,   222,   517,   517,
     452,   357,     5,     5,  1972,   517,     5,  3160,   517,     5,
    1978,   463,   148,  1900,   222,     9,   517,  1904,  1905,   517,
    1907,   373,   480,   302,   521,  1912,  1913,  1914,  1915,  1916,
    1917,  1918,   104,   389,  1921,  1922,  1923,  1924,  1925,  1926,
    1927,  1928,  1929,  1930,   521,   518,   389,    40,  2718,  1936,
    1937,   167,   220,  1940,  2718,  1942,   167,   315,   316,   317,
    1947,   287,  1949,   147,   285,   517,   236,   292,    59,   431,
      93,   423,   517,   425,   431,   517,    59,    59,   162,   108,
    3355,   521,  1969,   167,   292,  1972,   431,  1974,  2623,  2891,
     442,  1978,   431,   266,  1972,  1528,   448,   527,  1985,   451,
    1978,   222,  1989,  3171,   460,   447,  1993,   380,  1995,   431,
    1997,   431,   479,   152,  1972,   100,   275,   275,   517,    40,
    1978,   447,   275,  3398,   382,  2795,   275,   517,   199,   275,
     152,  2795,  1363,  2020,   218,   172,   519,    13,  1972,   518,
     518,   172,  1972,   518,  1978,  2032,  2033,   518,  1978,  2748,
     518,   476,  2903,  2904,   238,   521,   225,   518,   518,   517,
     225,   419,   282,  3030,   282,   519,   517,  2715,   517,   466,
      39,   519,  3447,   515,   521,   475,   518,   519,     9,   517,
     517,   517,   517,   429,    40,  2072,     0,   517,  1621,   515,
    2077,  2078,  2107,   519,   452,   429,   517,   516,    11,   527,
     355,  3286,   429,   287,    60,   463,    20,   521,   521,    23,
     517,   517,   296,   524,   280,  2102,  2103,   431,  2753,   181,
    2107,   479,   163,   172,    38,   521,   518,   521,   457,  3228,
     218,   266,  2902,    47,  2121,   392,   291,  2124,  2902,  2126,
      40,   227,   181,   313,   521,   503,   313,   521,  1479,   220,
     106,   518,   517,   227,   275,  2142,  2143,   227,   296,   517,
      60,   334,  2149,   288,   469,  2152,  2936,   152,   517,  3422,
     152,   152,  2936,  2872,  2152,    89,    90,    91,   517,   504,
     505,   506,  2169,   508,   509,   510,   511,   512,   513,   103,
     479,  2169,   152,    40,  2152,  2182,   504,   505,   506,   152,
     508,   509,   510,   511,   512,   513,   106,   107,     3,   275,
     517,  2169,  2199,  2200,   290,     3,    40,   117,  2152,    59,
     176,   290,  2152,  1756,   172,    11,  2874,    40,   167,  2216,
     518,  2218,   518,   518,   518,  2169,   517,   517,   181,  2169,
    2227,   167,   517,     3,     3,  3015,   202,    74,    39,   515,
     515,  3015,   431,    80,  3425,   431,  2891,   431,  2245,  2246,
    2247,  2896,   524,   447,  3138,   516,    93,   431,  2245,  2246,
    2247,     8,   500,   518,    11,   518,   176,   518,    15,    16,
     519,   518,    19,    20,    21,   518,   521,   500,  3058,   518,
     117,   500,   119,   518,  3058,   251,   518,  2284,   172,   431,
     155,   518,   202,  2290,   250,   261,    40,  2322,  2943,  2944,
     517,   517,   517,   517,   517,  3011,   476,   273,    59,   521,
     506,    13,   502,   291,   291,   521,   454,    19,   244,    59,
      59,   266,   517,   431,   275,   152,   203,  2311,  2311,    31,
     152,  2328,  2311,  1674,  2311,   152,   282,   431,   282,   305,
     431,   251,     5,    45,    46,   518,   431,    40,   431,  2346,
     355,   261,  2349,   517,   517,   521,  3014,  1900,   518,   288,
     290,   479,  2349,   273,    40,   275,  2363,  2364,   152,  1912,
     207,   280,   518,   172,  2371,   518,    59,   517,   186,   167,
    3160,   517,    80,  3254,  2371,   515,  3160,   143,  3214,     8,
    3216,   518,    11,   359,   518,   305,    15,    16,   518,  1942,
      19,    20,    21,   518,   518,   199,  1949,   109,   518,   172,
    3226,   518,  2409,   301,   361,   517,   527,    36,   384,   291,
     517,  2409,   181,   152,    37,   442,   176,    86,   517,    42,
     518,   521,    40,    40,   521,   517,  3413,   403,   275,   457,
     518,   518,  1985,   280,   518,  3229,  1989,  3231,   518,   359,
     518,  2448,   517,   519,  1997,   517,   172,   518,   521,   517,
     517,   521,  1803,   126,   127,  2409,  2463,   478,  2535,  2409,
    2475,   518,  2497,  3357,   384,  1816,  1817,  2020,   518,  3366,
     199,   518,  1039,  2480,   516,   521,   516,   463,   101,  2486,
    2487,  3347,   329,   403,   518,   405,   518,   518,   408,   518,
    2497,   290,   506,  3148,  3149,  2530,    59,   479,   518,   172,
     347,  2508,   518,   205,  2511,  3160,  2513,   518,   518,   117,
      40,   517,   227,  2520,  2521,  3341,    88,  2524,  2525,   519,
     192,   280,  2529,  2530,   280,   519,   519,   519,   519,  2536,
     431,   506,  1883,    40,   519,   292,   519,   518,  1889,   431,
     519,   519,    37,   275,  2551,   519,  2581,    42,   519,   519,
     173,   516,   519,  2549,  2561,   519,   516,     7,     8,  2555,
     107,   519,   479,    13,  2549,   518,  2549,  2549,   518,    19,
    2549,   519,  2549,    23,  2581,    25,    26,   519,  2549,   517,
      30,    31,    32,    40,   519,    35,   209,   519,    38,    39,
     519,   519,    42,   222,   519,    45,    46,   517,   519,   517,
     290,   448,   225,   519,   538,   519,   101,   519,   519,   519,
     457,   519,   235,  2620,   519,   519,  2623,  2624,   517,  2626,
       9,   354,   517,  2620,   517,   521,   336,  2624,    98,  2626,
     521,  2638,  3422,  2640,   518,    59,   516,   518,  3422,    89,
      90,   199,   315,   316,   317,   521,   269,   192,   462,    91,
    1217,   347,   518,   103,   517,    40,   126,   127,   108,   109,
     110,   111,   112,   292,  2660,   152,   519,   290,   518,   124,
    2664,  2664,     8,   152,    40,  2664,  3395,  2664,   173,    15,
      16,   369,   518,    19,    20,    21,   369,    40,   518,   517,
      40,  2687,   315,   517,  2690,   521,   517,   310,   517,   322,
     280,   249,   172,   191,   457,  2740,   457,   442,  2715,   382,
     517,  2718,    74,    74,   209,   293,    80,     9,   518,   371,
     393,   518,   517,   516,    59,  1039,   518,  2815,  2735,  2736,
     225,   516,   133,  2740,    37,    93,  2743,   273,  1305,    42,
     235,   364,   415,   506,   290,   442,   419,   504,   505,   506,
      40,   508,   509,   510,   511,   512,   513,   462,   293,   517,
     383,   293,   517,  2770,   205,   290,   518,  3422,   290,   389,
     518,   518,   518,   122,   269,  2328,   454,  2784,   368,   452,
     148,    25,  2789,  2790,    36,   368,   298,  2794,  2795,  2896,
     463,  2607,  2799,  1773,  2829,  2802,  2803,  2240,   101,   873,
    2807,  2808,  1684,  1241,  2811,  3320,   479,  2620,  2815,  2283,
    1817,   788,  2310,  2371,  3011,  2822,  2656,  2815,   752,   753,
     315,  3372,  3131,  3477,  3426,  3435,  3470,   322,  3189,   452,
     503,  1204,  2233,  2246,   457,   151,  3424,  2815,  2676,  2599,
    3433,  2230,  3421,   555,   517,   315,   316,   317,   178,  1301,
    2560,  2352,  2626,  1874,  1329,  3318,   172,  3256,  1347,  2866,
     794,  2815,  2559,  3398,  3351,  2815,  3499,  2874,  2216,   364,
     173,   805,   982,   203,  1367,   504,   505,   506,   181,   508,
     509,   510,   511,   512,   513,  2549,  2893,  2182,   383,  1745,
    1162,  2430,  2199,  3407,  1186,  2902,  1187,  1709,  3329,  3218,
    1744,  2252,  1189,  1217,    23,  2169,   209,  2743,  1983,  3053,
    2463,   241,   382,  2409,  2408,   805,   794,  2455,  3152,   853,
    2000,   986,   225,   393,   988,  1010,   986,  1010,   986,  2936,
    1039,   986,   235,   986,   986,   986,  1883,   986,   986,   873,
    3333,  1883,  3332,  2079,  2183,   415,  2487,    37,  2125,   419,
    2034,  2122,    42,  2304,  1683,  1449,   292,   452,  2822,  2081,
    2504,  1528,  1039,   103,  1993,   295,   269,  2520,    -1,   439,
      -1,  2322,    -1,    -1,    -1,  2982,  2983,    -1,    -1,    -1,
      -1,    -1,   452,    -1,   314,    -1,  2983,   290,    -1,    -1,
      -1,  1305,    -1,   463,    -1,  3030,  2992,    -1,    -1,   315,
     316,   317,    -1,    -1,  3011,    -1,    -1,  3014,  3015,   479,
      -1,   101,   315,  2364,    -1,    -1,    -1,    -1,    -1,   322,
      -1,    -1,  2373,  3030,  2375,    -1,    -1,    -1,  2379,    -1,
    2381,    -1,    -1,   503,    -1,   747,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   373,   978,    -1,    -1,   517,    -1,    -1,
     380,  3058,    -1,    -1,  1621,    -1,  3063,    -1,    -1,    -1,
      -1,   364,    -1,    -1,    -1,    -1,   382,  3074,  3075,    -1,
    2623,  3078,    -1,  3080,    -1,    -1,    -1,  1011,   172,     8,
     383,    -1,    11,   173,  1018,    -1,    15,    16,    -1,   539,
      19,    20,    21,   423,   544,   425,    -1,   547,  3105,    -1,
      -1,    -1,    -1,   419,    -1,   555,    -1,    -1,  1217,    -1,
      -1,    -1,   442,    -1,    -1,    -1,    -1,    46,   448,   209,
    1054,   451,  3129,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1066,    -1,    -1,   225,   452,    -1,    -1,    -1,
    1217,    -1,    -1,    -1,    -1,   235,    -1,   463,    55,   452,
      -1,    80,   864,  3160,   457,    -1,    -1,    -1,    -1,  1093,
      -1,    -1,    -1,   479,    -1,  2718,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,   269,
    3176,  3177,    -1,    -1,    -1,    -1,    -1,   503,    -1,  1756,
      -1,    -1,  3199,  3200,    -1,   102,  1305,  3204,    -1,    -1,
     290,   517,    -1,  3200,    -1,    -1,  3204,  3214,    -1,  3216,
     304,  3218,    -1,    -1,  1528,  3222,   123,  3224,    -1,  3226,
      -1,   315,   316,   317,    -1,   315,    -1,    -1,  1305,    -1,
    3237,    -1,   322,    -1,   141,  3242,    -1,  3244,   145,    -1,
      -1,    -1,  2795,  1177,  1178,  3252,  1180,    -1,   177,    -1,
    3204,    -1,    -1,    -1,  3204,    -1,    -1,  3253,  3265,  3255,
      -1,   168,    -1,  3270,   171,   194,    -1,    -1,  3265,    -1,
     199,    -1,  2623,    -1,   364,    -1,    -1,    -1,    -1,    -1,
     187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,    -1,
      -1,    -1,    -1,   383,    -1,   745,   746,   747,    -1,  3295,
      -1,    -1,    -1,    -1,    -1,  2656,    -1,  1621,   237,    -1,
      -1,    -1,  3319,    -1,    -1,  3311,    -1,    -1,    -1,  3315,
      -1,    -1,  3329,    -1,    -1,   419,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1900,  3341,    -1,    -1,   787,   788,   789,
      -1,    -1,    -1,    -1,   794,  1912,   796,    -1,  3355,  2902,
      -1,    -1,    -1,    -1,    -1,   805,    -1,  3355,   452,   809,
     810,    -1,   452,   292,   814,   815,  3373,    -1,    -1,   463,
      -1,    -1,    -1,   280,    -1,  1942,    -1,    -1,   828,   829,
     830,   288,  1949,  2936,    -1,   479,    -1,    -1,    -1,    -1,
      -1,  3398,   842,   843,    -1,   845,    -1,    -1,    -1,    -1,
    3398,  3355,    -1,   310,    -1,  3355,  3413,    -1,   858,   503,
      -1,    -1,  1346,    -1,   864,  3422,    -1,  3424,  1985,  1528,
      -1,    -1,  1989,   517,    -1,   875,     8,  3424,   878,    11,
    1997,    -1,   339,    15,    16,    -1,    -1,    -1,    -1,    -1,
    3447,    -1,  1756,  3439,  3398,    -1,    -1,    -1,  3398,  3447,
    1162,  1528,    -1,  2020,  3461,  3462,  3463,    -1,    -1,    -1,
      -1,    -1,  3015,    -1,    46,   394,    -1,    -1,  2819,  3465,
      -1,    53,   922,   923,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3488,    -1,    -1,    -1,    -1,    -1,   937,   938,   939,
     940,   941,    -1,  3447,    -1,    -1,    -1,  3447,    80,    -1,
     126,   127,    -1,    -1,   954,  3058,    -1,    -1,    -1,    -1,
      -1,    -1,  1621,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1454,    -1,  3529,  1457,    -1,    -1,    -1,    -1,  1462,    -1,
      -1,  1465,    -1,    -1,    -1,    -1,  1470,   987,   988,    -1,
     990,    -1,    -1,   993,  1621,    -1,   172,    -1,    -1,   999,
    1000,    -1,    -1,    -1,    -1,  1005,    -1,    -1,    -1,    -1,
      -1,  1011,    -1,   145,    42,    -1,    -1,    -1,  1018,    -1,
      -1,    -1,   501,    -1,    -1,   504,   505,   506,  1028,   508,
     509,   510,   511,   512,   513,  1035,  1900,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   172,   177,  1046,     8,  1912,    -1,
      11,    -1,    -1,    -1,    15,    16,    -1,  3160,    19,    20,
      21,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,  1557,    -1,  1337,    -1,  1339,  1942,    -1,
     108,    -1,   110,    -1,   112,  1949,    -1,  2988,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1095,    -1,  1756,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,
    3011,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1985,    -1,    -1,    -1,  1989,    -1,    -1,    -1,  1756,
      -1,    -1,    -1,  1997,    -1,     0,    -1,    -1,    -1,   315,
     316,   317,    -1,    -1,    -1,  1145,    -1,    -1,  1148,    -1,
      -1,    -1,  1636,    -1,    -1,    -1,  2020,    -1,    -1,    -1,
     292,    -1,  1162,  1163,    -1,    -1,    -1,    -1,    -1,    -1,
    1170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   315,   316,   317,
    3091,    -1,   993,  1193,    40,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1203,  1204,    -1,   382,    -1,    -1,    -1,
      -1,  2328,    -1,    13,    60,    -1,  1216,   393,    -1,    19,
      -1,    -1,  1706,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,  1233,    -1,   100,    -1,  1237,    -1,   415,
      -1,  1900,  1242,   419,     8,    45,    46,    11,    -1,    -1,
      -1,    15,    16,  1912,   382,    19,    20,    21,    -1,  3160,
     106,   222,   394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,  1900,    -1,    -1,   452,    -1,    -1,    -1,
      -1,    -1,   147,  1942,    -1,  1912,    -1,   463,    -1,    -1,
    1949,   419,    -1,    -1,    -1,    -1,    -1,   162,  1298,    -1,
    1300,    -1,   167,   479,    -1,    -1,  1306,   172,    -1,   109,
      -1,    -1,    -1,    -1,    -1,  1942,   181,    -1,    -1,  3422,
    1320,   186,  1949,    -1,   452,    -1,  1985,   503,    -1,  1329,
    1989,   292,    -1,    -1,  1334,   463,  1336,  1337,  1997,  1339,
    1340,   517,    -1,    -1,    -1,    -1,  2463,    -1,    -1,    -1,
      -1,   479,    -1,   218,    -1,  1839,   202,    -1,  1985,    -1,
      -1,  2020,  1989,    -1,  1848,    -1,    -1,    -1,    -1,   501,
    1997,    -1,    -1,   238,    -1,   503,   508,   509,   510,   511,
     512,   513,    -1,  1184,    -1,    -1,  3287,    -1,    -1,   517,
      -1,    -1,  1193,  2020,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2520,    -1,   251,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   261,    -1,    -1,    -1,    -1,
    1420,  1421,   287,    -1,    -1,   290,  1426,   273,  1428,    -1,
      -1,   296,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1441,    -1,  1443,  1444,    -1,    -1,    -1,    -1,    -1,
      -1,  1451,    -1,    -1,  1454,    -1,    -1,  1457,   222,   305,
      -1,    -1,  1462,    -1,  2328,  1465,    -1,    -1,    -1,    -1,
    1470,   336,  1472,    -1,  1474,    -1,    -1,    -1,    -1,  1479,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1972,  1751,
      -1,    -1,    -1,    -1,  1978,    -1,   361,    -1,    -1,  1761,
      -1,  1763,    -1,    -1,  1766,    -1,  2623,    -1,    -1,    -1,
    1772,   539,  1774,   359,    -1,    -1,   544,    -1,    -1,   547,
      -1,  3422,    -1,    -1,    -1,  1787,    -1,    -1,   292,    -1,
    1792,    -1,    -1,    -1,  1796,  1797,  1798,  1799,   384,  1801,
    1802,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,   419,    -1,    -1,   403,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   447,  1583,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   457,    -1,  1594,    -1,    -1,    -1,    -1,  2463,
      -1,  2718,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   476,    -1,   478,   479,    -1,    -1,    -1,    -1,  1420,
    1421,    -1,    -1,  2107,    -1,  1426,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1633,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     515,    -1,    -1,   518,   519,   520,  2520,  2141,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2152,  2328,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2795,    -1,
    1680,    -1,  1682,    -1,  1684,  2169,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1695,    -1,  1697,    -1,    -1,
      -1,  2328,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1709,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1734,    -1,  1736,    -1,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,   511,   512,   513,
    1750,  1751,    -1,    -1,    -1,   555,    -1,    -1,    -1,  2623,
      -1,  1761,  1762,  1763,  1764,    -1,  1766,    -1,   796,    -1,
      -1,    -1,  1772,    -1,  1774,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2902,  1786,  1787,    -1,    -1,
      -1,  1791,  1792,    -1,    -1,    -1,  1796,  1797,  1798,  1799,
      -1,  1801,  1802,    -1,  2463,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1818,  2936,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1827,  1828,  1829,
    1830,  1831,  1832,    -1,    -1,    -1,  2463,    -1,  2322,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1846,   875,    -1,    -1,
      -1,    -1,    -1,    -1,  2718,    -1,    -1,    -1,    -1,    -1,
      -1,  2520,  1862,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2520,   922,    -1,    -1,    -1,  3015,    -1,
      -1,    -1,  2164,    -1,    -1,    -1,    -1,    -1,  1709,   937,
     938,   939,   940,  1913,  1914,  1915,  1916,  1917,  1918,    -1,
      -1,  1921,  1922,  1923,  1924,  1925,  1926,  1927,  1928,  1929,
    1930,  2795,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3058,    -1,    -1,    -1,    -1,   746,   747,    -1,    -1,
      -1,  1951,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   990,  1963,  2623,    -1,    -1,    -1,     8,    -1,
      -1,    11,  1972,    -1,    -1,    15,    16,    -1,  1978,    19,
      20,    21,    -1,  1983,    -1,    -1,    -1,    -1,  1988,    -1,
       8,    -1,    -1,    11,    -1,    -1,  2623,    15,    16,  1999,
    2000,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2497,    -1,    -1,     8,    -1,    36,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2902,    -1,
      -1,    -1,    -1,  3160,    36,    -1,  2530,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,  2718,
      -1,    53,    -1,    -1,   864,  2549,    -1,    -1,    -1,    -1,
    2070,  2555,  2936,    -1,  2074,    -1,  2338,    -1,    -1,  2079,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,  2718,    -1,    -1,    -1,    -1,    -1,  2581,    -1,    -1,
      -1,    -1,  2102,  2103,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1913,  1914,  1915,  1916,  1917,  1918,    -1,  2119,
    1921,  1922,  1923,  1924,  1925,  1926,  1927,  1928,  1929,  1930,
      -1,    -1,    -1,    -1,   993,    -1,  2795,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3015,  2152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2164,    -1,    -1,    -1,  2795,  2169,
      -1,    -1,    -1,  2173,    -1,  1203,  2660,    -1,    -1,    -1,
      -1,    -1,   222,    -1,    -1,   177,    -1,    -1,  1216,    -1,
      -1,    -1,    -1,    -1,  3058,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   194,  2687,   222,  1005,  2690,   199,    -1,  1237,
      -1,    -1,    -1,  2213,    -1,    -1,  2216,    -1,    -1,  2219,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1028,    -1,
     222,   223,    -1,    -1,    -1,  2235,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2902,    -1,   237,    -1,    -1,    -1,    -1,
      -1,    -1,   292,    -1,    -1,    -1,  2740,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1300,    -1,   292,  2902,    -1,  2936,  1306,    -1,
      -1,    -1,    -1,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1095,  3160,    -1,    -1,    -1,
     292,  2102,  2103,   295,    -1,  3422,  2306,    -1,    -1,  2936,
      -1,    -1,  2312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2584,  2585,  2324,  2325,  2326,  2327,    -1,    -1,
      -1,  2815,    -1,    -1,  1193,    -1,    -1,    -1,  2338,    -1,
    2340,     8,    -1,  2343,    11,  2829,    -1,  2347,    15,    16,
    2612,  2351,    -1,    -1,    -1,    -1,  3015,  2357,    -1,    -1,
      -1,    -1,  1162,  1163,    -1,  2627,  2628,  2629,  2630,  2631,
    2632,  2633,  2634,  2635,  2636,    -1,    -1,  2377,  2378,    46,
    2380,    -1,    -1,    -1,    -1,    -1,    53,    -1,  3015,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3058,
      -1,    -1,   394,    -1,    -1,    -1,    -1,    -1,    -1,  2409,
      -1,    -1,    -1,    80,    -1,  2216,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1451,    -1,    -1,    -1,    -1,    -1,  2429,
      -1,  3058,    -1,    -1,    -1,    -1,    -1,  2437,  2438,  2439,
      -1,    -1,    -1,    -1,    -1,    -1,  2446,    -1,  2448,  2449,
      -1,    -1,    -1,    -1,    -1,  2455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,  2475,    -1,    -1,   145,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,  2489,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,  3160,    -1,    -1,    -1,    -1,    -1,    -1,  2992,   501,
     177,    -1,   504,   505,   506,    -1,   508,   509,   510,   511,
     512,   513,    -1,    -1,  2524,  2525,    -1,   194,    -1,    -1,
      -1,    -1,   199,  3160,    -1,   527,  1336,  1337,    -1,  1339,
      -1,    -1,    -1,    -1,    -1,    -1,  3030,    -1,    -1,    -1,
      -1,    -1,    -1,  2553,    -1,    -1,    -1,    -1,  3422,  2559,
      -1,  1420,  1421,    -1,    -1,    -1,    -1,  1426,    -1,    -1,
     237,    -1,    -1,    -1,    -1,  2575,    -1,    -1,    -1,  2579,
      -1,    -1,    -1,  2583,  2584,  2585,    -1,    -1,    -1,  2589,
    2590,  2591,    -1,  2593,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,
      -1,  2873,  2612,    -1,  2614,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,    -1,  2627,  2628,  2629,
    2630,  2631,  2632,  2633,  2634,  2635,  2636,    46,    -1,    -1,
      -1,    -1,    -1,  1443,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1682,    -1,  1684,    -1,    -1,  2659,
      -1,    -1,    -1,    -1,    -1,    -1,  2666,  1695,    -1,    -1,
      -1,    80,  1472,    26,  1474,    -1,  2676,    -1,    -1,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,  3176,  3177,  2694,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2704,    -1,  1734,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2715,    -1,    -1,    -1,    -1,
      -1,  2721,    -1,  2524,  2525,    -1,    -1,   394,  2728,  2729,
    2730,  2731,    -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,
    2740,    -1,    -1,  2743,    -1,    -1,    -1,  2747,  2748,    -1,
      -1,    -1,    -1,   106,    -1,    -1,  2756,    -1,    -1,    -1,
      -1,    -1,    -1,  3422,    -1,    -1,    -1,    -1,   177,  3253,
      -1,  3255,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2783,   137,   194,    -1,    -1,    -1,    -1,
     199,    -1,    -1,    -1,    -1,  3422,    -1,    -1,    -1,  1827,
    1828,  1829,  1830,  1662,  1832,    -1,    -1,    -1,    -1,    -1,
      -1,  3295,    -1,  2813,    -1,  2815,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3311,   237,  2829,
      -1,  3315,    -1,  2833,   501,    -1,    -1,    -1,    -1,  2839,
      -1,   508,   509,   510,   511,   512,   513,    -1,    -1,   202,
    1709,    -1,    -1,  2853,    -1,    -1,     0,    -1,    -1,  2859,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2872,  2873,  2874,    -1,    -1,    -1,  3140,    -1,
    2880,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2897,   251,  3161,
    3162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   261,    -1,
      -1,    -1,    -1,    -1,  2715,    -1,    -1,    -1,    -1,    -1,
     273,    -1,    -1,    -1,  3186,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1963,  1736,    -1,    -1,  2740,
      -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,  1751,   305,    11,    -1,  3439,   100,    15,    16,    -1,
      -1,  1761,    -1,  1763,    -1,    -1,  1766,    -1,    -1,    -1,
      -1,    -1,  1772,    -1,  1774,  2975,    -1,    -1,  2978,    -1,
      -1,  3465,     0,  2784,    -1,   394,    -1,  1787,    46,    -1,
      -1,  2991,  1792,    -1,    -1,    53,  1796,  1797,  1798,  1799,
     353,  1801,  1802,   147,   357,    -1,   359,  3007,    -1,    -1,
      -1,    -1,    -1,    -1,  3014,    -1,    -1,    -1,   162,    -1,
      -1,    -1,    80,   167,    -1,    -1,    -1,    -1,   172,    -1,
      -1,   384,    -1,    -1,    -1,    -1,   389,   181,    -1,    -1,
    3040,    -1,   186,    -1,    -1,    -1,  3046,    -1,    -1,    -1,
     403,    -1,    -1,  3053,  1913,  1914,  1915,  1916,  1917,  1918,
      -1,    -1,  1921,  1922,  1923,  1924,  1925,  1926,  1927,  1928,
    1929,  1930,    -1,  2874,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,  3087,    -1,    -1,
      -1,    -1,   501,    -1,   238,    -1,    -1,    -1,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,   460,    -1,  3109,
      -1,    -1,    -1,    -1,  3114,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,
      -1,   840,   841,    -1,    -1,    -1,   194,    -1,    -1,    -1,
    3140,   199,    -1,   287,   162,    -1,   290,    -1,    -1,   167,
      -1,  1951,   296,    -1,   172,    -1,  3418,    -1,    -1,    -1,
      -1,  3161,  3162,   181,    -1,    -1,    -1,    -1,   186,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,
    3180,    -1,  3182,  1983,    -1,    -1,  3186,    -1,  1988,    -1,
      -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,   907,    -1,
     218,  3201,   911,   912,  3204,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3014,    -1,    -1,    -1,   361,    -1,    -1,
     238,    -1,    -1,    -1,  3224,    -1,    -1,    -1,  3228,  3229,
      -1,  3231,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2102,  2103,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   964,  3256,    -1,    -1,    -1,
      -1,    -1,    -1,  3263,    -1,    -1,    -1,    -1,    -1,   287,
    2070,    -1,   290,    -1,   983,   419,    -1,    -1,   296,  2079,
     989,    -1,    -1,   992,  2312,    -1,   995,   996,   997,   998,
      -1,    -1,    -1,    -1,  3294,    -1,    -1,  2325,  2326,  2327,
      -1,    -1,    -1,   447,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2340,   457,    -1,  2343,    -1,    -1,   336,    -1,
      -1,    -1,    -1,  2351,    -1,    -1,    -1,    -1,  1037,  1038,
      -1,    -1,   476,  3333,   478,   479,   394,    -1,    -1,    -1,
      -1,    -1,    -1,   361,    -1,    -1,    -1,    -1,    -1,  1058,
      -1,    -1,    -1,    -1,    -1,  3355,    -1,  2216,    -1,    -1,
      -1,    -1,    -1,    -1,  2164,    -1,    -1,    -1,  1077,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,    -1,    -1,  1088,
    1089,  1090,  3382,  1092,  1093,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3395,  3396,    -1,  3398,  3399,
      -1,   419,    -1,    -1,    -1,    -1,    -1,  3407,    -1,  2437,
    2438,  2439,    -1,  2213,    -1,    -1,    -1,  1126,  3418,  2219,
      -1,    -1,    -1,  3224,    -1,    -1,    -1,    -1,    -1,   447,
      -1,    -1,    -1,    -1,  1143,  1144,    -1,    -1,    -1,   457,
    3440,    -1,    -1,   501,    -1,    -1,    -1,  3447,    -1,    -1,
     508,   509,   510,   511,   512,   513,    -1,    -1,   476,    -1,
     478,   479,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
    1179,    -1,    15,    16,  1183,  1184,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,  3484,  1194,  1195,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,   515,    -1,  3499,
     518,   519,   520,    46,     8,    -1,    -1,    11,    -1,    -1,
      53,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    80,  2338,    -1,
      -1,  1250,    46,    -1,    -1,    -1,    -1,  2575,    -1,    53,
    1259,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    -1,    -1,     3,  1283,    -1,    80,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,   993,    -1,    53,    36,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,   177,    -1,    -1,    -1,  2666,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2446,    -1,    -1,  2449,
      80,   194,    -1,    -1,    -1,  2455,   199,    -1,    -1,    -1,
      -1,  1370,    -1,    -1,    -1,  2524,  2525,    -1,    -1,    -1,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     194,    -1,    -1,    -1,   237,   199,    -1,   145,    -1,    -1,
    2728,  2729,  2730,  2731,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,  1113,  1433,    -1,  1435,  1436,    -1,   177,
      -1,    -1,   275,   237,    -1,   278,    -1,    -1,    -1,  1448,
    1449,    -1,    -1,    -1,    -1,    -1,   194,   177,    -1,   292,
      -1,   199,   295,    -1,    -1,  1464,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,  1158,   199,
      -1,   275,    -1,    -1,   278,    -1,    -1,    -1,    -1,  2579,
      -1,    -1,    -1,  2583,  2584,  2585,    -1,    -1,   292,   237,
      -1,   295,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1193,    -1,    -1,    -1,   237,    -1,    -1,
      -1,    -1,  2612,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2627,  2628,  2629,
    2630,  2631,  2632,  2633,  2634,  2635,  2636,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,   275,    -1,    -1,   278,    -1,
      -1,   394,  2880,    -1,  1244,    -1,  2715,    -1,    -1,    -1,
    1569,    -1,   292,    -1,    -1,   295,    -1,    -1,  1577,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2740,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1288,    -1,
      -1,    -1,    -1,  1293,    -1,    -1,    -1,  1616,    -1,    -1,
      -1,    -1,    -1,  1622,  1623,  1624,  1625,  1626,  1627,  1628,
    1629,  2721,    -1,    -1,    -1,  1634,  1635,    -1,    -1,    -1,
    1639,    -1,    -1,    -1,  1643,    -1,    -1,  1646,  1647,  1648,
    1649,  1650,  1651,  1652,  1653,  1654,   394,  2747,  1657,    -1,
      -1,    -1,    -1,  1343,    -1,  1664,    -1,  1666,   501,    -1,
      -1,   504,   505,   506,   394,   508,   509,   510,   511,   512,
     513,    -1,    -1,    -1,    -1,    -1,  1685,    -1,  1368,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,   511,   512,   513,
      -1,  1720,  1721,    -1,    -1,  2874,    -1,   521,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1416,    -1,  1418,    -1,
    1420,  1421,    -1,  1423,    -1,    -1,  1426,    -1,    -1,  1429,
      -1,    -1,  1432,    -1,    -1,    -1,    -1,  1437,    -1,    -1,
    1440,    -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,   501,    -1,  2873,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,     8,
      -1,  1481,    11,    -1,    -1,    -1,    15,    16,  1807,    -1,
      -1,    -1,  1811,    -1,    -1,  1814,  1815,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,  1852,    40,    -1,    -1,    -1,    -1,    -1,
      46,    -1,  3180,    -1,    -1,  3014,    -1,    53,    -1,    -1,
      -1,    80,    -1,    -1,    -1,  1874,  1875,    -1,    -1,    -1,
      -1,    -1,    -1,  3201,    -1,  1565,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    80,    -1,    -1,    15,    16,    -1,
      -1,  1581,    -1,    -1,    -1,  1904,  1905,    -1,  1907,    -1,
      -1,  1591,  1592,  1593,    -1,    -1,    -1,  1597,    -1,    -1,
      -1,  1601,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,   145,  1936,  1937,    -1,
      -1,  1940,    -1,    -1,    -1,  3263,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3046,    -1,    -1,    -1,
      -1,    -1,    80,  3053,    -1,    -1,    -1,    -1,   177,    -1,
    1969,    -1,    -1,    -1,    -1,  1974,  3294,    -1,    -1,    -1,
      -1,    -1,    -1,  1663,    -1,   194,    -1,    -1,    -1,    -1,
     199,   177,    -1,    -1,  1993,    -1,  1995,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
      -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,  3109,
      -1,    -1,    -1,  1703,  3114,    -1,    -1,   145,   237,    -1,
      -1,    -1,    -1,    -1,  2033,    -1,   222,   223,    -1,  1719,
      -1,    -1,    -1,    -1,  1724,    -1,    -1,    -1,    -1,    -1,
    3140,   237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,
      -1,  1741,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3161,  3162,  2072,    -1,  3224,   194,    -1,  2077,  2078,
      -1,   199,    -1,   292,    -1,    -1,    -1,    -1,    -1,   275,
      -1,    -1,   278,    -1,    -1,    -1,  3186,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,
      -1,    -1,  2121,    -1,    -1,  2124,    -1,  2126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3228,    -1,
      -1,    -1,    -1,  2142,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2182,    -1,   394,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2199,  2200,    -1,    -1,    -1,    -1,    -1,    -1,   394,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2218,
      -1,    -1,  1902,    -1,    -1,    -1,    -1,    -1,  2227,    -1,
    1910,  1911,    -1,  1913,  1914,  1915,  1916,  1917,  1918,    -1,
      -1,  1921,  1922,  1923,  1924,  1925,  1926,  1927,  1928,  1929,
    1930,  1931,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2284,    -1,    -1,    -1,    -1,
      -1,  2290,   501,    -1,    -1,    -1,    -1,    -1,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,  3418,    -1,
      -1,    -1,   518,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2346,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2036,    -1,    -1,  2039,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2085,    -1,    -1,    -1,  2089,
    2090,  2091,  2092,  2093,  2094,  2095,  2096,    -1,    -1,    -1,
      -1,    -1,  2102,  2103,    -1,  2105,  2106,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    -1,    -1,  2117,    -1,    -1,
    2120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2128,  2129,
    2130,  2131,  2132,  2133,  2134,  2135,  2136,  2137,     0,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   109,   110,    -1,    -1,   113,   114,
      22,  2480,    -1,  2163,    -1,    -1,    -1,  2486,  2487,    -1,
      32,    -1,    34,    35,    -1,    -1,    -1,    -1,  2497,    -1,
      -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,  2508,
      52,    -1,  2511,    -1,  2513,    -1,    -1,    -1,    -1,    61,
      -1,    -1,  2521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2529,  2530,    -1,    75,    -1,    -1,  2216,  2536,    -1,    -1,
      -1,    -1,    84,    -1,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2551,    -1,   189,   190,    98,    -1,   100,    -1,
      -1,    -1,  2561,    -1,    -1,     8,    -1,    -1,    11,   111,
      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,
      -1,    -1,  2581,    -1,   126,   127,   128,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,   137,    -1,    -1,    -1,    -1,
      -1,   143,    -1,    46,    -1,  2285,    -1,    -1,    -1,   151,
      53,   153,   154,    -1,    -1,  2295,  2296,    -1,   253,   254,
     255,   256,   257,   258,   259,   260,   168,    -1,   263,   264,
     172,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,  2638,
      -1,  2640,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   214,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2360,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   337,   338,  2384,  2385,  2386,    -1,    -1,  2389,
    2390,  2391,  2392,  2393,  2394,    -1,    -1,    -1,  2398,  2399,
    2400,  2401,  2402,  2403,  2404,  2405,  2406,  2407,    -1,    -1,
      -1,    -1,  2412,  2413,   177,    -1,  2735,  2736,    -1,    -1,
      -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
    2440,    -1,    -1,    -1,    -1,  2445,    -1,    -1,    -1,    -1,
      -1,  2770,    -1,   315,   316,   317,    -1,    -1,    -1,   222,
     223,   323,    -1,    -1,   326,  2784,    -1,    -1,    -1,    -1,
    2789,  2790,    -1,    -1,   237,  2794,    -1,    -1,    -1,  2479,
    2799,    -1,    -1,  2802,  2803,    -1,    -1,    -1,  2807,  2808,
      -1,    -1,  2811,    -1,    -1,   357,    -1,    -1,  2498,    -1,
      -1,  2501,  2502,  2822,   366,    -1,    -1,    -1,    -1,  2509,
    2510,    -1,   275,    -1,    -1,   278,    -1,    -1,   473,   474,
     382,    -1,    -1,  2523,  2524,  2525,  2526,   389,  2528,   292,
      -1,   393,  2532,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   403,   497,   498,    -1,    -1,    -1,  2866,    -1,    -1,
      -1,    -1,    -1,   415,    -1,    -1,    -1,   419,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2893,    -1,    -1,   439,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2586,    -1,    -1,    -1,
     452,    -1,    -1,   455,    -1,    -1,   458,    -1,    -1,     8,
      -1,   463,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,   479,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,   394,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,   503,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,   520,    -1,
      -1,    -1,    -1,  2982,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,  2691,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3030,    -1,    -1,    36,  2715,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,
      -1,   504,   505,   506,  3063,   508,   509,   510,   511,   512,
     513,    -1,    -1,    -1,    -1,  3074,  3075,    -1,    80,  3078,
      -1,  3080,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,
      -1,  2771,    -1,  2773,    -1,    -1,    -1,    -1,    -1,  2779,
      -1,    -1,    -1,    -1,    -1,   194,  3105,    -1,  2788,    -1,
     199,  2791,    -1,  2793,    -1,    -1,    -1,  2797,    -1,    -1,
    2800,  2801,    -1,    -1,  2804,  2805,    -1,    -1,    -1,    -1,
    3129,    -1,  2812,   222,   223,    -1,    -1,    -1,    -1,    -1,
      -1,  2821,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2836,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,   177,    15,    16,    -1,    -1,
      19,    20,    21,    -1,    -1,    -1,   275,    -1,    -1,   278,
      -1,    -1,   194,    -1,  2874,    -1,    -1,   199,    -1,    -1,
    3199,    -1,    -1,   292,    -1,    -1,   295,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,  3218,
     222,   223,    -1,  3222,    -1,    -1,    -1,  3226,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,  3237,    -1,
      -1,    80,    -1,  3242,    -1,  3244,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3252,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,
      -1,  3270,    32,   275,    -1,    -1,   278,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,
      60,    -1,    -1,    -1,    -1,   394,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3319,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3329,    -1,    -1,  3013,  3014,    -1,    -1,    -1,   177,    -1,
      -1,    -1,  3341,    -1,    -1,    -1,   106,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,  3038,  3039,
     199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3373,    -1,    -1,   137,    -1,    -1,
      -1,    -1,  3062,   222,   223,    -1,  3066,    -1,  3068,  3069,
    3070,    -1,   394,  3073,    -1,    -1,  3076,  3077,   237,    -1,
      -1,    -1,    -1,    -1,    -1,  3085,    -1,    -1,    -1,    -1,
      -1,    -1,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,   518,
      -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,   278,
      -1,    -1,   202,    -1,    -1,    -1,  3126,    -1,    -1,    -1,
      -1,    -1,  3132,   292,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3461,  3462,  3463,  3145,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3488,
      -1,   251,    -1,    -1,    -1,    -1,    -1,    -1,  3178,   501,
      -1,   261,   504,   505,   506,    -1,   508,   509,   510,   511,
     512,   513,    -1,   273,    -1,    -1,   518,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3206,    -1,    -1,    -1,
    3529,    -1,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,    -1,  3239,
    3240,  3241,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3259,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3271,    -1,   353,    -1,    -1,    -1,   357,    -1,   359,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,    -1,    -1,    -1,    -1,   389,
      -1,    -1,    -1,    -1,    -1,    -1,  3316,    -1,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3334,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   501,  3343,    -1,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3368,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     460,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3394,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3437,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,  3491,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,    -1,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,    -1,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,    -1,    -1,   508,   509,   510,    -1,    -1,
      -1,    -1,   515,    -1,   517,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,   526,   527,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,   396,   397,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,    -1,    -1,   417,
     418,    -1,   420,   421,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,   449,   450,   451,    -1,   453,   454,   455,   456,    -1,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,    -1,
     508,   509,   510,    -1,    -1,    -1,    -1,   515,    -1,   517,
      -1,    -1,    -1,    -1,   522,   523,    -1,   525,   526,   527,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,   452,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,    -1,
     503,    -1,    -1,    -1,    -1,   508,   509,   510,    -1,    -1,
      -1,    -1,   515,    -1,   517,   518,    -1,    -1,    -1,   522,
     523,    -1,   525,   526,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,    -1,    -1,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
     449,   450,   451,   452,   453,   454,   455,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,    -1,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,   503,    -1,    -1,    -1,    -1,   508,
     509,   510,    -1,    -1,    -1,    -1,   515,    -1,   517,    -1,
      -1,    -1,    -1,   522,   523,    -1,   525,   526,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,   172,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    -1,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
      -1,    -1,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,    -1,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,   449,   450,   451,   452,   453,   454,
     455,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
      -1,    -1,   477,    -1,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,   503,    -1,
      -1,    -1,    -1,   508,   509,   510,    -1,    -1,    -1,    -1,
     515,    -1,   517,    -1,    -1,    -1,    -1,   522,   523,    -1,
     525,   526,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,   132,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,    -1,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,   449,   450,
     451,    -1,   453,   454,   455,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,    -1,   508,   509,   510,
      -1,    -1,    -1,    -1,   515,    -1,   517,   518,    -1,    -1,
      -1,   522,   523,    -1,   525,   526,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,    -1,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,    -1,    -1,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
      -1,    -1,   449,   450,   451,   452,   453,   454,   455,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,    -1,
     477,    -1,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,    -1,    -1,   503,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,
     517,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,   526,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,    -1,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,    -1,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,    -1,    -1,   508,   509,   510,    -1,    -1,
      -1,    -1,   515,    -1,   517,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,   526,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    -1,    -1,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,    -1,    -1,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
     449,   450,   451,    -1,   453,   454,   455,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,    -1,    -1,    -1,    -1,    -1,   508,
     509,   510,    -1,    -1,    -1,    -1,   515,    -1,   517,    -1,
      -1,    -1,    -1,   522,   523,    -1,   525,   526,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    -1,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
      -1,    -1,   417,   418,    -1,   420,   421,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,    -1,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,   449,   450,   451,    -1,   453,   454,
     455,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,    -1,
      -1,    -1,    -1,   508,   509,   510,    -1,    -1,    -1,    -1,
     515,    -1,   517,   518,    -1,    -1,    -1,   522,   523,    -1,
     525,   526,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,    -1,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,   449,   450,
     451,    -1,   453,   454,   455,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,    -1,   508,   509,   510,
      -1,    -1,    -1,    -1,   515,    -1,   517,    -1,    -1,    -1,
      -1,   522,   523,    -1,   525,   526,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,    -1,
     417,   418,    -1,   420,   421,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,    -1,    -1,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
      -1,    -1,   449,   450,   451,    -1,   453,   454,   455,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,
      -1,   508,   509,   510,    -1,    -1,    -1,    -1,   515,    -1,
     517,   518,    -1,    -1,    -1,   522,   523,    -1,   525,   526,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,    -1,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,    -1,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,    -1,    -1,   508,   509,   510,    -1,    -1,
      -1,    -1,   515,    -1,   517,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,   526,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    -1,    -1,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,    -1,    -1,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
     449,   450,   451,    -1,   453,   454,   455,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,    -1,    -1,    -1,    -1,    -1,   508,
     509,   510,    -1,    -1,    -1,    -1,   515,    -1,   517,    -1,
      -1,    -1,    -1,   522,   523,    -1,   525,   526,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    -1,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
      -1,    -1,   417,   418,    -1,   420,   421,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,    -1,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,   449,   450,   451,    -1,   453,   454,
     455,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,    -1,
      -1,    -1,    -1,   508,   509,   510,    -1,    -1,    -1,    -1,
     515,    -1,   517,    -1,    -1,    -1,    -1,   522,   523,    -1,
     525,   526,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,   172,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,    -1,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,   449,   450,
     451,    -1,   453,   454,   455,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,    -1,   508,   509,   510,
      -1,    -1,    -1,    -1,   515,    -1,   517,    -1,    -1,    -1,
      -1,   522,   523,    -1,   525,   526,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,    -1,
     417,   418,    -1,   420,   421,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,    -1,    -1,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
      -1,    -1,   449,   450,   451,    -1,   453,   454,   455,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,
      -1,   508,   509,   510,    -1,    -1,    -1,    -1,   515,    -1,
     517,   518,    -1,    -1,    -1,   522,   523,    -1,   525,   526,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,    -1,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,    -1,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,    -1,    -1,   508,   509,   510,    -1,    -1,
      -1,    -1,   515,    -1,   517,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,   526,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    -1,    -1,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,    -1,    -1,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
     449,   450,   451,    -1,   453,   454,   455,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,   476,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,    -1,    -1,    -1,    -1,    -1,   508,
     509,   510,    -1,    -1,    -1,    -1,   515,    -1,   517,    -1,
      -1,    -1,    -1,   522,   523,    -1,   525,   526,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    -1,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
      -1,    -1,   417,   418,    -1,   420,   421,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,    -1,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,   449,   450,   451,    -1,   453,   454,
     455,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,    -1,
      -1,    -1,    -1,   508,   509,   510,    -1,    -1,    -1,    -1,
     515,    -1,   517,    -1,    -1,    -1,    -1,   522,   523,    -1,
     525,   526,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,    -1,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,   449,   450,
     451,    -1,   453,   454,   455,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,    -1,   508,   509,   510,
      -1,    -1,    -1,    -1,   515,    -1,   517,    -1,    -1,    -1,
      -1,   522,   523,    -1,   525,   526,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,    -1,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,    -1,    -1,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
      -1,    -1,   449,   450,   451,    -1,   453,   454,   455,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,
      -1,   508,   509,   510,    -1,    -1,    -1,    -1,   515,    -1,
     517,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,   526,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,    -1,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,    -1,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,    -1,    -1,   508,   509,   510,    -1,    -1,
      -1,    -1,   515,    -1,   517,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,   526,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    -1,    -1,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,    -1,    -1,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
     449,   450,   451,    -1,   453,   454,   455,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,    -1,    -1,    -1,    -1,    -1,   508,
     509,   510,    -1,    -1,    -1,    -1,   515,    -1,   517,    -1,
      -1,    -1,    -1,   522,   523,    -1,   525,   526,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    -1,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
      -1,    -1,   417,   418,    -1,   420,   421,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,    -1,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,   449,   450,   451,    -1,   453,   454,
     455,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,    -1,
      -1,    -1,    -1,   508,   509,   510,    -1,    -1,    -1,    -1,
     515,    -1,   517,    -1,    -1,    -1,    -1,   522,   523,    -1,
     525,   526,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,    -1,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,   449,   450,
     451,    -1,   453,   454,   455,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,    -1,   508,   509,   510,
      -1,    -1,    -1,    -1,   515,    -1,   517,    -1,    -1,    -1,
      -1,   522,   523,    -1,   525,   526,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,    -1,
     417,   418,    -1,   420,   421,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,    -1,    -1,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
      -1,    -1,   449,   450,   451,    -1,   453,   454,   455,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,
      -1,   508,   509,   510,    -1,    -1,    -1,    -1,   515,    -1,
     517,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,   526,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,    -1,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,    -1,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,    -1,    -1,   508,   509,   510,    -1,    -1,
      -1,    -1,   515,    -1,   517,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,   526,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    -1,    -1,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,    -1,    -1,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
     449,   450,   451,    -1,   453,   454,   455,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,    -1,    -1,    -1,    -1,    -1,   508,
     509,   510,    -1,    -1,    -1,    -1,   515,    -1,   517,    -1,
      -1,    -1,    -1,   522,   523,    -1,   525,   526,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    -1,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
      -1,    -1,   417,   418,    -1,   420,   421,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,    -1,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,   449,   450,   451,    -1,   453,   454,
     455,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,    -1,
      -1,    -1,    -1,   508,   509,   510,    -1,    -1,    -1,    -1,
     515,    -1,   517,    -1,    -1,    -1,    -1,   522,   523,    -1,
     525,   526,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,    -1,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,   449,   450,
     451,    -1,   453,   454,   455,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,    -1,   508,   509,   510,
      -1,    -1,    -1,    -1,   515,    -1,   517,    -1,    -1,    -1,
      -1,   522,   523,    -1,   525,   526,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,    -1,
     417,   418,    -1,   420,   421,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,    -1,    -1,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
      -1,    -1,   449,   450,   451,    -1,   453,   454,   455,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   508,   509,    -1,    -1,    -1,    -1,    -1,   515,    -1,
     517,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,   526,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,    -1,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,    -1,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,    -1,    -1,   508,   509,   510,    -1,    -1,
      -1,    -1,   515,    -1,   517,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,   526,     3,     4,     5,     6,     7,    -1,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    -1,    -1,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,    -1,    -1,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
     449,   450,   451,    -1,   453,   454,   455,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   508,
     509,    -1,    -1,    -1,    -1,    -1,   515,    -1,   517,    -1,
      -1,    -1,    -1,   522,   523,    -1,   525,   526,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    -1,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
      -1,    -1,   417,   418,    -1,   420,   421,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,    -1,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,   449,   450,   451,    -1,   453,   454,
     455,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   508,   509,    -1,    -1,    -1,    -1,    -1,
     515,    -1,   517,    -1,    -1,    -1,    -1,   522,   523,    -1,
     525,   526,     3,     4,     5,     6,     7,    -1,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,    -1,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,   449,   450,
     451,    -1,   453,   454,   455,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   515,    -1,   517,    -1,    -1,    -1,
      -1,   522,   523,    -1,   525,   526,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,    -1,
     417,   418,    -1,   420,   421,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,    -1,    -1,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
      -1,    -1,   449,   450,   451,    -1,   453,   454,   455,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,
     517,    -1,    -1,    -1,    -1,   522,   523,    -1,   525,   526,
       3,     4,     5,     6,     7,    -1,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,    -1,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,    -1,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   515,    -1,   517,    -1,    -1,    -1,    -1,   522,
     523,    -1,   525,   526,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,    -1,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    -1,    -1,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,    -1,    -1,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
     449,   450,   451,    -1,   453,   454,   455,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   508,
     509,   510,    -1,     3,     4,     5,   515,    -1,   517,     9,
      -1,    -1,    -1,   522,   523,    -1,   525,   526,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,   394,   395,   396,   397,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    -1,    -1,   417,   418,    -1,
     420,   421,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,   449,
     450,   451,    -1,   453,   454,   455,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,    -1,    -1,    -1,    -1,     3,    -1,    -1,   508,   509,
     510,    -1,    -1,    -1,    -1,   515,    -1,   517,    -1,    -1,
      -1,    -1,    -1,   523,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,   162,   163,   164,   165,   166,   167,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,   287,
     288,   289,    -1,    -1,   292,   293,   294,    -1,   296,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,    -1,    -1,   417,
     418,    -1,   420,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,   451,    -1,   453,   454,   455,   456,    -1,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     518,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    -1,    -1,   417,   418,    -1,
     420,    -1,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,   449,
     450,   451,    -1,   453,   454,   455,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,   518,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,    -1,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,    -1,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,   449,   450,   451,
     452,   453,   454,   455,   456,    -1,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,    -1,    -1,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,    -1,
       3,   503,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,   291,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,    -1,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,   452,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,    -1,     3,
     503,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   517,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,   291,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,   396,   397,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,    -1,    -1,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,   449,   450,   451,    -1,   453,
     454,   455,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   517,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,   394,   395,
     396,   397,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,    -1,
      -1,   417,   418,    -1,   420,   421,   422,   423,   424,   425,
     426,    -1,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,   449,   450,   451,    -1,   453,   454,   455,
     456,    -1,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   517,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,   396,   397,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,    -1,    -1,   417,
     418,    -1,   420,   421,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,   449,   450,   451,    -1,   453,   454,   455,   456,    -1,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,   172,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,   397,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,    -1,   417,   418,   419,
     420,    -1,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,   449,
     450,   451,   452,   453,   454,   455,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,    -1,    -1,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,     3,    -1,   503,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
     172,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,    -1,    -1,   417,   418,   419,   420,    -1,
     422,   423,   424,   425,   426,    -1,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,   449,   450,   451,
     452,   453,   454,   455,   456,    -1,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,    -1,    -1,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,     3,
      -1,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,   172,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,    -1,    -1,   417,   418,   419,   420,    -1,   422,   423,
     424,   425,   426,    -1,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,   449,   450,   451,   452,   453,
     454,   455,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,    -1,    -1,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,    -1,     3,   503,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   517,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    -1,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
      -1,    -1,   417,   418,    -1,   420,    -1,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,    -1,    -1,   433,   434,
     435,   436,   437,    -1,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,   449,   450,   451,    -1,   453,   454,
     455,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   517,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,    -1,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,    -1,
     417,   418,    -1,   420,    -1,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,    -1,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,   442,   443,   444,   445,   446,
      -1,    -1,   449,   450,   451,    -1,   453,   454,   455,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     517,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    -1,    -1,   417,   418,
      -1,   420,    -1,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,    -1,    -1,   433,   434,   435,   436,   437,    -1,
     439,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
     449,   450,   451,    -1,   453,   454,   455,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
      -1,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,    -1,   417,   418,    -1,   420,
      -1,   422,   423,   424,   425,   426,    -1,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,    -1,   439,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,   449,   450,
     451,    -1,   453,   454,   455,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,    -1,   417,   418,    -1,   420,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,    -1,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,    -1,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   517,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    -1,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
      -1,    -1,   417,   418,    -1,   420,    -1,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,    -1,    -1,   433,   434,
     435,   436,   437,    -1,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,   449,   450,   451,    -1,   453,   454,
     455,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   517,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,    -1,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,    -1,
     417,   418,    -1,   420,    -1,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,    -1,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,   442,   443,   444,   445,   446,
      -1,    -1,   449,   450,   451,    -1,   453,   454,   455,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     517,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    -1,    -1,   417,   418,
      -1,   420,    -1,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,    -1,    -1,   433,   434,   435,   436,   437,    -1,
     439,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
     449,   450,   451,    -1,   453,   454,   455,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
      -1,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,    -1,   417,   418,    -1,   420,
      -1,   422,   423,   424,   425,   426,    -1,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,    -1,   439,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,   449,   450,
     451,    -1,   453,   454,   455,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
      -1,     3,     4,     5,    -1,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    15,    16,    -1,   517,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,    -1,   300,   301,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,    -1,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   497,   498,   499,   500,    -1,
       3,    -1,   504,   505,   506,     8,   508,   509,   510,   511,
     512,   513,    15,    16,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,    -1,   417,   418,    -1,   420,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,    -1,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,    -1,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,   510,   511,   512,
     513,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
       8,    -1,    -1,    11,    -1,    -1,    53,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    80,    24,    -1,    -1,    -1,    46,     8,
      -1,    -1,    11,    -1,    -1,    53,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,     8,    -1,    -1,    11,
      -1,    81,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    97,    -1,    -1,
      -1,    80,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,    -1,
     177,    53,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,   199,    36,    -1,    -1,   146,    -1,    80,    -1,
      -1,    -1,    -1,    46,    -1,    -1,   156,    -1,    -1,   177,
      53,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,   169,
      -1,    -1,    -1,    -1,   174,    -1,   194,    -1,    -1,    -1,
     237,   199,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    -1,    -1,   203,   222,   223,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,   275,   237,
     199,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,
      -1,    -1,    -1,   222,   223,   177,   246,    -1,    -1,    -1,
     250,    -1,    -1,    -1,    -1,    -1,    -1,   275,   237,    -1,
     278,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,    -1,   275,    -1,    -1,   278,
      -1,   194,    -1,    -1,    -1,   237,   199,    -1,    -1,    -1,
      -1,    -1,    -1,   292,   314,    -1,   295,    -1,    -1,    -1,
     320,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,    -1,   335,    -1,   394,    -1,    -1,
      -1,    -1,    -1,   275,   237,    -1,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,
     370,    -1,    -1,   373,    -1,    -1,   394,    -1,    -1,    -1,
      -1,    -1,   275,    -1,   384,   278,    -1,   387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,
      -1,    -1,   295,    -1,    -1,   405,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,    -1,   419,
      -1,    -1,    -1,    -1,    -1,   425,   426,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   436,    -1,    -1,    -1,
      -1,    -1,   442,    -1,   501,    -1,    -1,   504,   505,   506,
      -1,   508,   509,   510,   511,   512,   513,    -1,    -1,    -1,
      -1,   518,   394,    -1,    -1,    -1,    -1,    -1,     8,   469,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,   501,    -1,    -1,   504,   505,   506,    -1,
     508,   509,   510,   511,   512,   513,    36,    -1,    -1,    -1,
     518,   394,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,   518,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   501,
      -1,    -1,   504,   505,   506,    -1,   508,   509,   510,   511,
     512,   513,    36,    -1,    -1,    -1,   518,    -1,    -1,    -1,
      -1,    -1,    46,     8,    -1,    -1,    11,    -1,    -1,    53,
      15,    16,    17,    18,    19,    20,    21,    -1,   501,    -1,
      -1,   504,   505,   506,    -1,   508,   509,   510,   511,   512,
     513,    36,    -1,    -1,    -1,   518,    80,    -1,    -1,    -1,
      -1,    46,     8,    -1,    -1,    11,    -1,   177,    53,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,   199,
      36,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,   177,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,   275,    -1,    -1,   278,    -1,
     194,    -1,    -1,    -1,    -1,   199,    36,    -1,    -1,    -1,
      -1,    -1,   292,    -1,    -1,   295,    46,    -1,    -1,    -1,
      -1,    -1,   177,    53,    -1,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,
      -1,    -1,    -1,   237,   199,    -1,    -1,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   177,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
      -1,   275,   237,   199,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,
      -1,   295,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,    -1,    -1,   394,    -1,    -1,    -1,    -1,    -1,
     275,   237,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,
     295,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,
      -1,    -1,   278,    -1,   194,    -1,    -1,    -1,    -1,   199,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,
     394,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,   518,   394,
      -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,   518,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    36,
      -1,    -1,    -1,   518,   394,    -1,    -1,    -1,    -1,    46,
       8,    -1,    -1,    11,    -1,    -1,    53,    15,    16,    17,
      18,    19,    20,    21,    -1,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    36,    -1,
      -1,    -1,   518,    80,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,
      -1,    -1,    53,    15,    16,    17,    18,    19,    20,    21,
      -1,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    36,    -1,    -1,    -1,   518,    80,
      -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,    -1,
     177,    53,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,   199,    36,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   177,
      53,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
     237,   199,    -1,    -1,    -1,    -1,    -1,    80,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,
      19,    20,    21,    -1,   222,   223,   177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,   237,
      -1,   278,    -1,   194,    -1,    -1,    -1,    46,   199,    -1,
      -1,    -1,    -1,    -1,    53,   292,    -1,    -1,   295,    -1,
      -1,    -1,    -1,    -1,    -1,   177,    -1,    68,    69,    -1,
      -1,   222,   223,    -1,    -1,    -1,    -1,   275,    -1,    -1,
     278,    80,   194,    -1,    -1,    -1,   237,   199,    -1,    -1,
      -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,   109,   110,
     222,   223,   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   194,    -1,    -1,   275,   237,   199,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,
      -1,    -1,    -1,   275,   237,    -1,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,
     292,    -1,    -1,   295,    -1,    -1,    -1,    -1,   189,   190,
      -1,    -1,    -1,    -1,    -1,   194,   394,    -1,    -1,    -1,
     199,    -1,   275,    -1,    -1,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,
      -1,    -1,   295,   222,   223,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   394,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,    -1,   263,   264,   501,    -1,    -1,   504,   505,   506,
      -1,   508,   509,   510,   511,   512,   513,    -1,    -1,   278,
      -1,   518,   394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   501,    -1,    -1,   504,   505,   506,    -1,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,   394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
      -1,    -1,    -1,    -1,    -1,     8,   337,   338,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    36,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,   378,   379,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,   501,
      -1,    -1,   504,   505,   506,   394,   508,   509,   510,   511,
     512,   513,    97,    -1,   516,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,
      -1,   504,   505,   506,    -1,   508,   509,   510,   511,   512,
     513,    -1,    -1,   516,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   156,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   473,   474,   169,    -1,    -1,    -1,    -1,   174,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,    -1,
      -1,    -1,   501,    -1,   177,   504,   505,   506,   203,   508,
     509,   510,   511,   512,   513,    -1,   517,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,
     223,   246,    -1,    -1,    -1,   250,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,    -1,    -1,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,
      -1,    -1,   295,    -1,    -1,   320,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     335,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,   373,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
      -1,    -1,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     405,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,    -1,    -1,   419,    -1,    -1,    -1,    -1,    -1,
      -1,   426,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   436,    -1,    -1,    -1,    -1,    -1,   442,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   469,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   501,    -1,
      -1,   504,   505,   506,    -1,   508,   509,   510,   511,   512,
     513,    -1,    -1,   516,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   510,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    -1,    -1,   417,   418,    -1,
     420,    -1,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,   449,
     450,   451,    -1,   453,   454,   455,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     510,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,    -1,    -1,   417,   418,    -1,   420,    -1,
     422,   423,   424,   425,   426,    -1,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,   449,   450,   451,
      -1,   453,   454,   455,   456,    -1,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,     3,
       4,     5,    -1,    -1,    -1,     9,    -1,    -1,   510,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,   396,   397,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,    -1,    -1,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,   449,   450,   451,    -1,   453,
     454,   455,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,    -1,    -1,     8,
      -1,    -1,    11,    -1,   508,   509,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    -1,    -1,    46,     8,    -1,
      -1,    11,    -1,    -1,    53,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    46,     8,    -1,    -1,
      11,    -1,    -1,    53,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    46,    -1,   126,    -1,    -1,
      -1,    -1,    53,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   177,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
     199,    -1,    -1,    -1,    -1,    -1,    80,   167,    -1,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   237,   199,
      -1,    -1,    -1,    -1,    -1,   166,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,
      -1,    -1,   222,   223,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   194,    -1,    -1,   275,   237,   199,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,
      -1,   222,   223,   177,    -1,   109,   110,    -1,    -1,   113,
     114,    -1,    -1,    -1,    -1,   275,   237,    -1,   278,    -1,
     194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,
      -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,    -1,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,   190,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,    -1,    -1,
      -1,   275,    -1,   324,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,
      -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,   394,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,   253,
     254,   255,   256,   257,   258,   259,   260,    36,   457,   263,
     264,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,   394,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
     394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   337,   338,    -1,    -1,    -1,    -1,    -1,
      -1,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
     199,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,   237,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,   473,
     474,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      -1,    46,    -1,   497,   498,    -1,   275,    -1,    53,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    80,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,   318,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    -1,    46,    -1,   394,    -1,    -1,    -1,    -1,
      53,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,
      -1,    -1,     8,    -1,   199,    11,    -1,    80,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,
      36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,   237,    -1,    -1,   172,    -1,    53,    -1,    -1,
     177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,   199,    -1,    80,    -1,    -1,    -1,    -1,    -1,
     275,    -1,   501,   278,    -1,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,   222,   223,   292,    -1,    -1,
     295,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
     237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,   275,   222,
     223,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   167,    36,    -1,   237,   292,    -1,    -1,   295,    -1,
      -1,   177,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
      -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,   394,
      -1,     8,   275,    -1,    11,   278,    80,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   222,   223,    -1,   292,
      -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,   237,    -1,    40,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,    -1,   275,
      -1,    -1,   278,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   177,    -1,    -1,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
     194,   394,    -1,     8,    -1,   199,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   223,
      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,   237,    -1,    -1,    -1,    -1,    53,    -1,
     177,    -1,    -1,    -1,   501,    -1,    -1,   504,   505,   506,
      -1,   508,   509,   510,   511,   512,   513,   194,   394,    -1,
      -1,    -1,   199,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,   275,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   222,   223,    -1,   292,    -1,
      -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,
     237,   504,   505,   506,    -1,   508,   509,   510,   511,   512,
     513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,
      -1,    -1,   177,    -1,    -1,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,   194,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
     394,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,   222,   223,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,   237,   427,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,   394,    -1,    -1,
     275,    -1,    -1,   278,    80,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    46,    -1,
     295,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,   511,   512,   513,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   177,    -1,    -1,   501,    -1,    -1,   504,   505,   506,
      -1,   508,   509,   510,   511,   512,   513,    -1,   194,   394,
      -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,
      -1,    -1,    -1,   501,    -1,    -1,   504,   505,   506,    -1,
     508,   509,   510,   511,   512,   513,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,   394,   395,
     396,   397,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,    -1,
      -1,   417,   418,    -1,   420,   421,   422,   423,   424,   425,
     426,    -1,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,   449,   450,   451,    -1,   453,   454,   455,
     456,    -1,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    34,    35,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,   396,   397,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,    -1,    -1,   417,
     418,    -1,   420,   421,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,   449,   450,   451,    -1,   453,   454,   455,   456,    -1,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,   394,   395,   396,   397,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    -1,    -1,   417,   418,    -1,
     420,   421,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,   449,
     450,   451,    -1,   453,   454,   455,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,   394,   395,   396,   397,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,    -1,    -1,   417,   418,    -1,   420,   421,
     422,   423,   424,   425,   426,    -1,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,   449,   450,   451,
      -1,   453,   454,   455,   456,    -1,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    -1,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,   169,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,    -1,    -1,   417,   418,    -1,   420,    -1,   422,   423,
     424,   425,   426,    -1,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,   442,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,    -1,   453,
     454,   455,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,    -1,
      -1,   417,   418,    -1,   420,    -1,   422,   423,   424,   425,
     426,    -1,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,   442,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,    -1,   453,   454,   455,
     456,    -1,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,    -1,    -1,   417,
     418,    -1,   420,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,   449,   450,   451,    -1,   453,   454,   455,   456,    -1,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    -1,    -1,   417,   418,    -1,
     420,    -1,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,   449,
     450,   451,    -1,   453,   454,   455,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,   291,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,    -1,    -1,   417,   418,    -1,   420,    -1,
     422,   423,   424,   425,   426,    -1,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,   449,   450,   451,
      -1,   453,   454,   455,   456,    -1,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,   291,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,    -1,    -1,   417,   418,    -1,   420,    -1,   422,   423,
     424,   425,   426,    -1,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,   449,   450,   451,    -1,   453,
     454,   455,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,    -1,
      -1,   417,   418,    -1,   420,    -1,   422,   423,   424,   425,
     426,    -1,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,   449,   450,   451,    -1,   453,   454,   455,
     456,    -1,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,   291,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,    -1,    -1,   417,
     418,    -1,   420,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,   449,   450,   451,    -1,   453,   454,   455,   456,    -1,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,     3,     4,    -1,    -1,    -1,    -1,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    -1,    -1,   417,   418,    -1,
     420,    -1,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,   449,
     450,   451,    -1,   453,   454,   455,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,    -1,    -1,   417,   418,   419,   420,    -1,
     422,   423,   424,   425,   426,    -1,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,   449,   450,   451,
      -1,   453,   454,   455,   456,    -1,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,    -1,    -1,   417,   418,    -1,   420,    -1,   422,   423,
     424,   425,   426,    -1,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,   449,   450,   451,    -1,   453,
     454,   455,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,    -1,
      -1,   417,   418,    -1,   420,    -1,   422,   423,   424,   425,
     426,    -1,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,   449,   450,   451,    -1,   453,   454,   455,
     456,    -1,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,    -1,    -1,   417,
     418,    -1,   420,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,   449,   450,   451,    -1,   453,   454,   455,   456,    -1,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    -1,    -1,   417,   418,    -1,
     420,    -1,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,   449,
     450,   451,    -1,   453,   454,   455,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,    -1,    -1,   417,   418,    -1,   420,    -1,
     422,   423,   424,   425,   426,    -1,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,   449,   450,   451,
      -1,   453,   454,   455,   456,    -1,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,    -1,    -1,   417,   418,    -1,   420,    -1,   422,   423,
     424,   425,   426,    -1,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,   449,   450,   451,    -1,   453,
     454,   455,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,    -1,
      -1,   417,   418,    -1,   420,    -1,   422,   423,   424,   425,
     426,    -1,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,   449,   450,   451,    -1,   453,   454,   455,
     456,    -1,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,    -1,    -1,   417,
     418,    -1,   420,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,   449,   450,   451,    -1,   453,   454,   455,   456,    -1,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    -1,    -1,   417,   418,    -1,
     420,    -1,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,   449,
     450,   451,    -1,   453,   454,   455,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,    -1,    -1,   417,   418,    -1,   420,    -1,
     422,   423,   424,   425,   426,    -1,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,   449,   450,   451,
      -1,   453,   454,   455,   456,    -1,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,    -1,    -1,   417,   418,    -1,   420,    -1,   422,   423,
     424,   425,   426,    -1,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,   449,   450,   451,    -1,   453,
     454,   455,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,    -1,
      -1,   417,   418,    -1,   420,    -1,   422,   423,   424,   425,
     426,    -1,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,   449,   450,   451,    -1,   453,   454,   455,
     456,    -1,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,    -1,    -1,   417,
     418,    -1,   420,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,   449,   450,   451,    -1,   453,   454,   455,   456,    -1,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    -1,    -1,   417,   418,    -1,
     420,    -1,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,   449,
     450,   451,    -1,   453,   454,   455,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,    -1,    -1,   417,   418,    -1,   420,    -1,
     422,   423,   424,   425,   426,    -1,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,   449,   450,   451,
      -1,   453,   454,   455,   456,    -1,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,    -1,    -1,   417,   418,    -1,   420,    -1,   422,   423,
     424,   425,   426,    -1,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,   442,   443,
     444,   445,   446,    -1,    -1,   449,   450,   451,    -1,   453,
     454,   455,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,    -1,
      -1,   417,   418,    -1,   420,    -1,   422,   423,   424,   425,
     426,    -1,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,   442,   443,   444,   445,
     446,    -1,    -1,   449,   450,   451,    -1,   453,   454,   455,
     456,    -1,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,    -1,    -1,    -1,
      -1,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,    -1,    -1,   417,
     418,    -1,   420,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,   442,   443,   444,   445,   446,    -1,
      -1,   449,   450,   451,    -1,   453,   454,   455,   456,    -1,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,
      40,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    -1,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,    -1,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,    -1,   276,   277,   278,   279,
      -1,    -1,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,    -1,
     300,   301,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,    -1,   322,   323,   324,    -1,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,   394,   395,   396,   397,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,    -1,    -1,    -1,   417,   418,    -1,
     420,   421,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,    -1,   439,
     440,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,   451,    -1,   453,   454,   455,   456,    -1,   458,   459,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,
     500,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,    -1,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,    -1,
     417,   418,    -1,   420,    -1,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,    -1,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,   442,   443,   444,   445,   446,
      -1,    -1,   449,   450,   451,    -1,   453,   454,   455,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    -1,    -1,   417,   418,
      -1,   420,    -1,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,    -1,    -1,   433,   434,   435,   436,   437,    -1,
     439,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
     449,   450,   451,    -1,   453,   454,   455,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
      -1,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,    -1,   417,   418,    -1,   420,
      -1,   422,   423,   424,   425,   426,    -1,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,    -1,   439,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,   449,   450,
     451,    -1,   453,   454,   455,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,    -1,   417,   418,    -1,   420,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,    -1,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,    -1,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    -1,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
      -1,    -1,   417,   418,    -1,   420,    -1,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,    -1,    -1,   433,   434,
     435,   436,   437,    -1,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,   449,   450,   451,    -1,   453,   454,
     455,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,    -1,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,    -1,
     417,   418,    -1,   420,    -1,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,    -1,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,   442,   443,   444,   445,   446,
      -1,    -1,   449,   450,   451,    -1,   453,   454,   455,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,    -1,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    -1,    -1,   417,   418,
      -1,   420,    -1,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,    -1,    -1,   433,   434,   435,   436,   437,    -1,
     439,   440,   441,   442,   443,   444,   445,   446,    -1,    -1,
     449,   450,   451,    -1,   453,   454,   455,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
      -1,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,    -1,   417,   418,    -1,   420,
      -1,   422,   423,   424,   425,   426,    -1,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,    -1,   439,   440,
     441,   442,   443,   444,   445,   446,    -1,    -1,   449,   450,
     451,    -1,   453,   454,   455,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,    -1,   417,   418,    -1,   420,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,    -1,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,    -1,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
      -1,    -1,    -1,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    -1,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,    -1,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
      -1,    -1,   417,   418,    -1,   420,    -1,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,    -1,    -1,   433,   434,
     435,   436,   437,    -1,   439,   440,   441,   442,   443,   444,
     445,   446,    -1,    -1,   449,   450,   451,    -1,   453,   454,
     455,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,    -1,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,    -1,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,    -1,
     417,   418,    -1,   420,    -1,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,    -1,    -1,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,   442,   443,   444,   445,   446,
      -1,    -1,   449,   450,   451,    -1,   453,   454,   455,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      -1,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,   158,
      -1,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,    -1,   177,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,    -1,   276,   277,   278,
     279,    -1,    -1,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
      -1,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,    -1,
     319,   320,    -1,   322,   323,   324,    -1,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,    -1,    -1,    -1,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,    -1,
     439,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,   451,    -1,   453,   454,   455,   456,    -1,   458,
     459,   460,   461,   462,    -1,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
     499,   500,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    -1,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,    -1,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
      -1,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,    -1,    -1,
     276,   277,   278,   279,    -1,    -1,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,    -1,   300,   301,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,    -1,
      -1,    -1,    -1,   319,   320,    -1,   322,   323,   324,    -1,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,   394,   395,
     396,   397,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,    -1,    -1,
      -1,   417,   418,    -1,   420,   421,   422,   423,   424,   425,
     426,    -1,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,    -1,    -1,   439,   440,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,   451,    -1,   453,   454,   455,
     456,    -1,   458,   459,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   497,   498,   499,   500,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    -1,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,    -1,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,    -1,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,    -1,   276,   277,   278,   279,    -1,    -1,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,    -1,   300,   301,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,    -1,    -1,    -1,    -1,   319,   320,    -1,   322,
     323,   324,    -1,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
      -1,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,    -1,    -1,    -1,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,    -1,    -1,   439,   440,   441,   442,
     443,   444,   445,   446,    -1,    -1,   449,   450,   451,    -1,
     453,   454,   455,   456,    -1,   458,   459,   460,   461,   462,
      -1,   464,    -1,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
     483,   484,   485,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,   499,   500,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,    -1,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,    -1,    -1,    -1,    -1,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,    -1,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    -1,    -1,   417,   418,    -1,
     420,    -1,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,    -1,   449,
     450,   451,    -1,   453,   454,   455,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    -1,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,   158,    -1,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,    -1,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,    -1,   276,   277,   278,   279,    -1,    -1,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,    -1,   300,   301,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,    -1,    -1,    -1,    -1,   319,   320,    -1,
     322,   323,   324,    -1,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,    -1,   394,   395,   396,   397,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,   413,    -1,    -1,    -1,   417,   418,    -1,   420,   421,
     422,   423,   424,   425,   426,    -1,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,    -1,   439,   440,   441,
     442,   443,   444,   445,   446,    -1,    -1,   449,   450,   451,
      -1,   453,   454,   455,   456,    -1,   458,   459,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,    -1,    22,   477,    -1,    -1,   480,   481,
     482,   483,   484,   485,    32,    -1,    34,    35,    -1,    -1,
      -1,    -1,    22,    -1,    -1,   497,   498,   499,   500,    -1,
      -1,    -1,    32,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    -1,    -1,    -1,    -1,    75,    -1,    -1,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,    -1,    -1,    86,    -1,    -1,    -1,
      -1,    -1,    -1,   111,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,   127,
      -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,
      -1,    -1,    -1,    -1,    -1,   143,   126,   127,    -1,    -1,
      -1,    -1,    -1,   151,    -1,    -1,    -1,   137,    -1,    -1,
      -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,    -1,    -1,
     168,   151,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   168,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   214,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   214,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   315,   316,   317,
      -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,   315,   316,   317,    -1,    -1,
      -1,    -1,    -1,   323,    -1,    -1,   326,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,    -1,
      -1,    -1,    -1,    -1,   382,    -1,   366,    -1,    -1,    -1,
      -1,   389,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,    -1,   382,    -1,    -1,   403,    -1,    -1,    -1,   389,
      -1,    -1,    -1,   393,    -1,    -1,    -1,   415,    -1,    -1,
      -1,   419,    -1,   403,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   415,    -1,    -1,    -1,   419,
      -1,   439,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   452,    -1,    -1,    -1,    -1,   439,
     458,    -1,    -1,    -1,    -1,   463,    -1,    -1,    -1,   467,
      -1,    -1,   452,    -1,    -1,    -1,    -1,    -1,   458,    -1,
      -1,   479,    -1,   463,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   479,
      -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   503,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   517
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    75,    84,
      86,    98,   100,   111,   126,   127,   128,   137,   143,   151,
     153,   154,   168,   172,   198,   214,   240,   315,   316,   317,
     323,   326,   357,   366,   382,   389,   393,   403,   415,   419,
     439,   452,   455,   458,   463,   479,   503,   517,   529,   530,
     531,   532,   533,   540,   551,   552,   553,   556,   557,   559,
     570,   588,   636,   646,   649,   652,   656,   658,   661,   662,
     666,   672,   674,   678,   685,   689,   690,   691,   698,   703,
     719,   723,   724,   727,   729,   730,   731,   732,   734,   736,
     737,   741,   794,   795,   964,   966,   967,   968,   969,   974,
     977,   983,   984,   985,   989,   433,   482,   965,   203,   373,
     384,   419,   469,   108,   192,   554,   965,     3,    22,    23,
      24,    25,    26,    27,    28,    29,    31,    32,    33,    42,
      43,    44,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    59,    60,    61,    62,    63,    64,
      67,    68,    69,    70,    71,    72,    73,    75,    76,    77,
      78,    79,    81,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    94,    95,    96,    97,    98,    99,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   118,   120,   121,   122,   123,
     124,   125,   128,   129,   130,   131,   134,   135,   136,   137,
     138,   140,   141,   142,   144,   145,   146,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   161,
     163,   164,   165,   166,   168,   170,   171,   173,   174,   175,
     176,   177,   178,   180,   182,   183,   184,   185,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     200,   201,   202,   203,   204,   205,   206,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   219,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   234,
     235,   236,   237,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   276,
     277,   278,   279,   281,   282,   283,   284,   285,   286,   288,
     289,   292,   293,   294,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   330,   331,   332,   333,   334,   335,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     394,   395,   396,   397,   398,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     417,   418,   420,   421,   422,   423,   424,   425,   426,   428,
     429,   430,   433,   434,   435,   436,   437,   439,   440,   441,
     442,   443,   444,   445,   446,   449,   450,   451,   453,   454,
     455,   456,   458,   459,   460,   461,   462,   463,   464,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   477,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     563,   639,   640,   641,   873,   953,   957,     3,   176,   247,
     412,   558,   563,   639,   290,   965,    55,   172,   517,   583,
     178,   241,   295,   314,   373,   423,   425,   442,   448,   451,
     634,   654,   697,     5,    30,   326,   563,   564,   952,     3,
      30,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      45,    49,    53,    54,    55,    56,    57,    58,    65,    66,
      71,    72,    74,    79,    80,    81,    82,    83,    89,    93,
     100,   101,   108,   112,   115,   117,   119,   126,   127,   132,
     133,   139,   143,   147,   152,   159,   160,   162,   165,   167,
     169,   171,   172,   173,   176,   177,   179,   181,   182,   183,
     186,   194,   199,   207,   209,   210,   216,   217,   218,   219,
     220,   222,   223,   225,   232,   233,   235,   237,   238,   247,
     268,   269,   270,   274,   275,   278,   280,   281,   283,   287,
     290,   291,   295,   296,   299,   300,   302,   303,   315,   316,
     317,   318,   321,   322,   325,   329,   336,   342,   347,   361,
     364,   368,   382,   383,   390,   393,   394,   397,   399,   412,
     414,   415,   416,   419,   421,   427,   429,   430,   431,   432,
     435,   437,   438,   441,   447,   448,   452,   457,   463,   464,
     465,   467,   475,   476,   478,   479,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   569,   639,   643,
     645,    24,    81,    97,   146,   156,   169,   174,   203,   246,
     250,   320,   335,   370,   373,   384,   387,   405,   419,   425,
     426,   436,   442,   469,   654,   667,   668,   671,   965,   952,
     100,   137,   467,   517,   532,   533,   540,   556,   557,   570,
     588,   636,   646,   649,   656,   658,   661,   662,   666,   674,
     681,   685,   691,   698,   719,   723,   724,   727,   729,   964,
     966,   967,   969,   974,   977,   983,   989,   108,    75,   214,
      66,    79,    81,   159,   232,   281,   291,   303,   321,   369,
     414,   435,   437,   441,   463,   517,   562,   563,   564,   730,
     795,   797,   799,   809,   816,   817,   873,   875,   876,   108,
       5,   563,   565,   720,   720,   563,   952,    30,   178,   241,
     388,   429,   433,   563,   975,   976,   987,   965,    30,   132,
     750,   751,   178,   241,   373,   388,   429,   978,   979,   987,
     965,   563,   729,   741,   988,   563,   816,   419,   747,   562,
     173,   517,   971,   517,   345,   742,   743,   952,   742,   730,
     731,   983,     0,   520,   467,   679,   122,   213,   454,   147,
     218,   296,   447,   753,   754,   799,   799,   730,   732,   734,
     521,    30,   429,   433,   729,   988,   192,   562,   952,   192,
     562,   192,   816,   192,   562,   275,   565,   515,   519,   566,
     567,   517,    82,   108,   174,   203,   246,   373,   384,   419,
     442,   469,   561,   108,   729,   562,   423,   425,   423,   425,
     355,   192,   562,   562,   174,   246,   345,   384,   419,   469,
     647,   380,   203,    30,   952,   192,   569,   252,   436,   107,
     419,   419,   469,   377,   380,   192,   563,   669,   959,   192,
     949,   952,   192,   952,   517,   677,   295,   425,   681,     3,
     463,   639,   643,   682,   684,   685,   687,   688,   679,   563,
     565,   558,   720,   517,   517,   167,   517,   730,   817,   517,
     517,   562,   517,   517,   172,   517,   517,   517,   517,   730,
     795,   799,   809,   510,   566,    40,   563,   810,   811,   810,
     382,   521,   733,    37,    42,   101,   173,   209,   225,   235,
     269,   315,   322,   364,   383,   452,   813,   811,    40,   563,
     810,   812,   503,   821,   565,   172,   721,   506,   517,   517,
     725,   976,   976,   976,   500,   224,   519,   290,     4,     6,
       7,     8,     9,    10,    39,    54,    56,    57,    65,    71,
      72,    83,   112,   115,   117,   136,   152,   160,   165,   182,
     183,   216,   217,   219,   247,   268,   270,   275,   280,   283,
     292,   342,   368,   397,   429,   430,   438,   464,   501,   508,
     509,   510,   515,   517,   522,   523,   525,   526,   563,   565,
     730,   784,   833,   836,   839,   840,   841,   843,   844,   845,
     846,   848,   849,   865,   867,   868,   869,   870,   871,   872,
     873,   874,   876,   877,   892,   893,   904,   926,   931,   939,
     940,   941,   953,   954,   955,   938,   940,   978,   978,   565,
     978,   500,   172,   431,   506,   519,   566,   663,   816,     3,
     171,   173,   467,   685,   970,   972,   171,   973,   865,   910,
     911,   742,   521,   517,   961,   518,   518,   518,   531,   562,
     172,   295,   706,   157,   663,    30,   132,   748,   748,    59,
     748,   162,   167,   238,   287,   759,   761,   762,   787,   789,
     790,   791,   181,   290,   457,   290,   753,   754,   517,   420,
     986,   500,   224,   152,    26,    32,   137,   294,   353,   357,
     389,   460,   545,   548,   549,   353,   152,    40,    60,   106,
     202,   251,   261,   273,   305,   353,   359,   384,   389,   403,
     534,   537,   548,   152,   353,   389,   548,   152,   353,   389,
     548,   152,    40,   555,   865,   932,   568,   569,   567,     3,
      30,    37,    42,    49,    55,    81,    83,    89,   101,   132,
     171,   173,   176,   177,   194,   209,   222,   223,   225,   235,
     237,   247,   269,   278,   300,   302,   322,   364,   383,   394,
     412,   421,   441,   465,   467,   518,   639,   644,   865,   913,
     914,   956,   962,   865,   419,   562,   563,   518,   517,   623,
     373,   634,   654,   275,   650,    40,   469,   192,   562,   192,
     562,   638,   192,   562,   192,   562,   192,   563,   653,    89,
     694,   152,   483,    90,   129,   308,   424,   192,   563,   152,
     519,   960,    63,   360,   521,   670,   152,   521,   670,   152,
     290,   675,   676,   865,   962,   355,   518,   521,     4,   160,
     290,   438,   508,   509,   536,   539,   565,   680,   682,   683,
     686,   955,   681,   431,   517,   578,   582,   721,   865,   911,
     517,     3,    68,    69,   109,   110,   113,   114,   189,   190,
     253,   254,   255,   256,   257,   258,   259,   260,   263,   264,
     337,   338,   378,   379,   473,   474,   497,   498,   565,   851,
     852,   853,   854,   855,   856,   857,   858,   859,   860,   861,
     862,   863,   916,   917,   811,   812,   865,   562,   865,   918,
     508,   509,   563,   866,   867,   893,   904,   920,   517,   865,
     910,   921,   865,    58,   172,   233,   432,   865,   911,   924,
     865,   518,   564,   517,   421,   767,   768,   768,   750,   751,
     799,   220,   745,    37,   225,   383,   813,   225,   300,   814,
     799,   814,   225,   813,   517,   225,   814,   148,   200,   801,
     225,   768,   517,   564,   517,   768,   297,   563,   565,   468,
     722,   865,   980,   982,   913,     3,    37,    42,    49,    54,
      55,    56,    57,    71,    72,    81,    83,    89,   101,   112,
     115,   165,   171,   173,   177,   194,   209,   216,   217,   219,
     222,   223,   225,   235,   237,   247,   268,   269,   270,   278,
     283,   300,   302,   322,   342,   364,   368,   383,   390,   394,
     397,   412,   421,   429,   430,   441,   447,   464,   467,   639,
     642,   827,   829,   830,   832,   834,   836,   838,   840,   841,
     842,   844,   845,   848,   849,   915,   958,    40,   236,   563,
     517,   515,   730,   466,   847,   865,   930,   847,   847,   517,
     517,   835,   835,   325,   730,   517,   837,   523,    71,    72,
     847,   865,   835,   517,   517,   481,   503,   517,   850,   517,
     850,   865,   865,   865,   148,   942,   943,   865,   911,   912,
     730,   865,   910,   564,   894,   895,   896,     9,   569,   519,
     566,   933,   566,   517,   565,   517,   517,   565,   955,     3,
       8,    11,    15,    16,    17,    18,    19,    20,    21,    36,
      40,    46,    53,    80,   177,   194,   199,   222,   223,   237,
     275,   278,   292,   295,   394,   501,   504,   505,   506,   508,
     509,   510,   511,   512,   513,   902,   903,   904,   906,   936,
     480,   878,   302,   865,   521,   745,   517,   565,   745,     3,
     117,   241,   536,   565,   849,   981,   104,   982,   982,   563,
      40,   563,   518,   521,   679,   521,   518,   743,   949,   950,
      40,   961,   663,   193,   355,   220,   623,   389,   732,   732,
      30,   755,   756,   865,    59,   732,   749,   164,   272,   775,
     227,   273,   341,   392,   454,     4,     9,    30,   770,   865,
     508,   509,   771,   772,   865,   867,   787,   788,   762,   761,
     759,   760,   167,   790,   285,   792,    59,   738,   739,   740,
     802,   866,   940,   940,   759,   787,   911,   236,   562,    74,
      82,    93,   169,   192,   329,   448,   563,   605,   615,   630,
      82,    93,   728,    93,   728,   517,   431,   517,   603,   245,
     451,   603,    93,   521,   431,   562,     3,   832,   536,    59,
     538,   536,   536,   106,   251,   261,    59,   431,   479,   503,
     535,   266,   373,   535,   537,   816,    93,   431,   728,   373,
     562,   431,   373,   554,   563,   578,   516,   527,   913,   913,
     914,   521,   753,   754,    13,    14,   222,   222,   431,   431,
     563,   622,   627,   479,   581,   562,   345,   384,   419,   469,
     647,   380,   152,   100,   588,   651,   656,   691,   989,   144,
     829,   562,   275,   534,   657,   275,   517,   623,    40,   275,
     623,   275,   517,   648,   275,   199,   655,   192,   563,   617,
     695,   569,   152,   172,   673,   669,   568,   519,   959,   949,
     952,   952,   959,   518,   521,    13,   681,   687,     4,   955,
       4,   955,   565,   569,   580,   587,    55,   102,   123,   141,
     145,   168,   171,   187,   280,   288,   310,   339,   584,   722,
      40,   518,   865,   518,   172,   521,   518,   318,   919,   518,
     866,   866,    11,    15,    16,    19,    20,    21,   199,   222,
     292,   504,   505,   506,   508,   509,   510,   511,   512,   513,
     904,   866,   518,   818,   819,   875,   167,   172,   922,   923,
     521,   518,    40,   924,   911,   924,   924,   172,   518,    40,
     810,   517,   950,     4,     9,   563,   763,   765,   766,   940,
     938,   178,   241,   419,   423,   425,   451,   562,   746,   476,
     822,   799,   225,   799,   290,   457,   815,   799,   225,   940,
     799,   282,   282,   517,   799,   564,   823,   824,   517,   564,
     823,   563,   565,   521,   518,   521,   519,   517,   832,   517,
     517,   519,    39,   831,   517,   851,   852,   853,   854,   855,
     856,   857,   858,   859,   860,   861,   862,   863,   864,   518,
     521,   835,   570,   662,   698,   703,   726,   729,   966,   983,
     911,   912,   517,   475,   927,   928,   865,   912,   955,   865,
     897,   898,   899,   900,   847,   847,     8,    15,    16,    19,
      20,    21,   504,   505,   506,   508,   509,   510,   511,   512,
     513,   563,   902,   907,   518,   911,   429,   429,   955,   955,
     517,   563,   355,   947,   167,   516,   518,   521,   527,   521,
     524,   510,   567,   911,   955,   865,   864,   864,   829,   865,
     865,   865,   865,   865,   865,   865,   865,     5,   569,   963,
     429,    45,   416,   937,   959,   865,   865,   517,   730,   925,
     132,   160,   275,   280,   285,   438,   449,   865,   280,   517,
     865,   431,    53,   177,   194,   199,   237,   394,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   865,    30,    38,
     399,   901,   515,   519,   935,   181,   163,   879,   368,   517,
     893,   941,   172,   796,   913,   796,   517,   565,   563,   562,
     970,   551,   562,   865,   521,   518,   250,   275,   744,   457,
     665,   562,   700,   517,   563,   705,   715,   716,   718,    41,
     126,   757,   521,   457,   757,   266,   732,   368,   369,   508,
     509,   772,   774,   867,   392,   227,   291,   313,   313,   521,
     512,     4,   773,   955,   773,   368,   369,   774,   562,   948,
     279,   396,   793,   517,   950,   951,   521,   181,   457,   199,
     181,   220,   788,   760,   518,   353,   548,   517,   192,   615,
     952,   227,   275,   227,   457,   517,   608,   828,   829,   952,
     563,   192,   952,   192,   563,    26,   137,   389,   544,   547,
     569,   599,   613,   952,   569,   607,   626,   952,   545,   952,
     353,   389,   534,   548,   536,   959,   952,   536,   959,   952,
     536,   353,   389,   548,   952,   952,   952,   952,   353,   389,
     548,   952,   952,   565,   509,   865,   932,   753,   753,   753,
     465,   914,   193,   358,   752,   865,   865,   280,   560,   565,
     280,   560,   563,   334,   577,   518,   521,   288,   172,   431,
     572,   650,   469,   562,   562,   638,   562,   562,   653,   562,
     295,   634,   517,   730,   517,   152,   152,   237,   563,   605,
     615,   618,   621,   631,   633,   479,   481,   610,   151,   729,
     152,   479,   696,   152,   518,   913,    40,   152,     3,   517,
     275,   290,   563,     3,   670,   568,   670,   290,   670,   675,
     865,   578,   510,   515,   517,   536,   579,   686,   871,   872,
     518,   521,    40,   576,   565,   576,   275,   280,   339,   576,
      59,   576,   829,   518,   865,   865,   865,   922,   829,   866,
     866,   866,   866,   866,   866,   132,   275,   285,   866,   866,
     866,   866,   866,   866,   866,   866,   866,   866,   518,   521,
      40,   820,   865,   865,   923,   922,   829,   518,   518,   518,
     911,   829,   950,   518,   313,   512,   313,   369,   512,   517,
     517,   745,   423,   425,   423,   425,   562,   747,   747,   747,
     865,   181,   776,   815,   799,   865,   517,   799,   167,   517,
     564,   806,   815,   829,   518,   521,   823,   518,   980,     3,
     915,    39,   831,   563,   826,   826,     3,   515,   515,   955,
     431,   431,   431,   431,   829,   454,   518,   516,   911,   865,
     139,   928,   929,   518,   518,   518,   527,   521,   524,   519,
     518,   518,   500,   500,   518,   518,   950,   517,   865,   944,
     563,   865,   865,   894,   943,   518,   518,   518,   500,   866,
     866,   145,   911,   172,   132,   160,   280,   285,   438,   449,
     517,   145,   907,   865,   416,   937,   865,   925,   865,   431,
     517,   730,   865,   932,   568,   517,   517,   155,   880,   797,
     798,   822,   753,   822,   955,   864,   961,   961,   250,   517,
     798,   476,   664,    40,    59,   701,   711,   718,   933,   521,
     796,   506,   502,   758,   756,   292,   902,   905,   758,     4,
     955,   774,   291,   454,   771,   521,   244,   950,   738,    59,
     940,   517,   564,    59,   266,   431,   865,   275,   630,   517,
     152,   517,   608,   203,   627,   628,   589,    40,   176,   598,
     624,   589,    26,   137,   357,   359,   389,   541,   542,   543,
     549,   550,   152,   670,   152,   670,   599,   613,   599,   518,
     521,   565,   592,   506,   519,   518,   521,   431,   373,    93,
     431,   728,   373,   431,   431,   431,   373,   555,   527,   516,
     527,   752,   752,   752,   914,   282,   282,   518,   517,   571,
       3,   406,   407,   565,   586,   622,   577,   562,   657,   517,
      40,   623,   648,   655,   650,   355,   419,   565,   659,   660,
     627,   562,   562,   638,   562,   518,   521,   288,   603,   288,
     290,   602,   952,   479,   637,   562,   603,    40,   562,   518,
     419,   865,   653,   587,   152,   562,   673,   959,   574,   585,
     686,   580,   565,   565,   280,   627,   510,   627,   565,   510,
     627,   565,   518,   518,   923,   172,   132,   285,   517,   821,
     818,   517,   518,   518,   518,   563,   763,   822,   747,   747,
     747,   747,   562,   562,   562,    59,   186,   785,   815,   950,
     517,   803,   804,   805,   868,   870,   950,   167,    80,   825,
     824,   518,   518,   515,   829,   518,   521,   518,   955,   516,
     955,   518,   852,   854,   855,   856,   855,   856,   856,   518,
     427,   865,   143,   865,   897,   907,   850,   850,   518,   865,
     944,   945,   946,    40,   199,   518,   947,   864,   865,    36,
      36,   865,   518,   865,   172,   517,   915,   865,   518,   145,
     866,   866,   145,   145,   865,   865,   516,   527,   517,   934,
     754,   476,   865,   301,   884,   521,   776,   752,   776,   518,
     726,   865,   361,   709,   563,   266,   321,   117,   304,   517,
     699,   729,   518,   521,   705,   664,   865,   164,   231,   517,
     758,   291,   562,   518,   951,   181,   730,   731,   940,   951,
     952,   952,   518,   152,   628,   615,   628,   589,   617,   521,
     518,   119,   207,   273,   275,   614,   517,    33,    59,   635,
     624,    74,    80,    93,   117,   119,   207,   275,   280,   329,
     347,   448,   457,   594,   595,   609,   176,   117,   191,   275,
     603,   535,   107,   117,   176,   275,   405,   408,   537,   603,
     389,   543,   442,   952,   563,   547,     3,    37,    42,    49,
      55,    81,    83,    89,   101,   171,   173,   176,   177,   194,
     209,   222,   223,   225,   235,   237,   247,   269,   274,   278,
     292,   300,   302,   322,   364,   383,   390,   394,   412,   421,
     441,   447,   467,   508,   509,   536,   565,   590,   629,   639,
     645,   829,   905,   956,   569,   626,   952,   952,   952,   952,
     952,   952,   952,   952,   952,   952,   578,   932,   932,   518,
     518,   518,   753,   107,   373,   519,   535,   586,   517,   621,
     729,   696,    40,   517,   634,   192,   562,   518,   521,   518,
     657,   517,    40,   612,   610,   618,    86,   677,   107,   273,
     623,   729,   648,   729,   655,   518,   617,   457,   693,   670,
     518,   521,   627,   866,   172,   517,   915,   823,   518,   521,
     518,   776,   562,   562,   562,   562,    30,   103,   182,   367,
     517,   777,   778,   779,   780,   781,   782,   783,   865,   865,
     478,   881,   518,   867,   908,   909,   199,   181,   800,   804,
     518,   806,   807,   808,   959,   831,   955,   831,   563,   831,
     516,   516,   865,   521,   518,   563,   865,   867,   865,   865,
     865,   915,   518,   865,    36,    36,   865,   865,   145,   518,
     509,   932,   518,   913,   518,   865,   518,   517,   563,   885,
     785,   518,   785,   565,   518,   939,   463,   418,   456,   710,
     563,   704,   714,   290,   707,   506,   718,   709,   907,    59,
     518,   518,   462,   463,   735,   589,   615,   518,   518,   479,
     620,   120,   195,   205,   119,   459,   865,   117,    40,   517,
     959,   952,   866,   120,   195,   119,   280,   227,   562,   620,
      88,   635,   192,   280,   536,   865,   635,   280,   508,   509,
     539,   563,   829,   670,   670,     3,   247,   412,   956,   960,
     506,   431,   431,   516,   516,   752,   518,   518,   563,   578,
     457,   573,   575,   627,   518,   637,    40,   419,   865,   587,
     419,   275,   517,   565,   696,   621,   151,   729,   149,   201,
     602,   122,   137,   328,   637,   107,   696,   479,   990,    40,
     517,   290,   563,   692,   517,   585,   866,   915,   518,   518,
       9,   354,   769,   785,   517,   391,   517,   518,   521,   563,
     882,   883,   336,   786,   521,   518,   517,   564,    59,   518,
     199,   518,   807,   516,   829,   944,   516,   192,   518,   865,
     865,   865,   527,   516,   527,   518,   518,   563,   886,   881,
     565,   881,   521,   462,   933,   518,   521,    91,   709,   865,
     518,   951,   951,   347,   620,   517,   611,   589,   518,   191,
     517,   865,   275,   595,   620,   623,   952,    40,   152,   825,
     960,   512,   590,   952,   952,   518,   535,   124,   518,   610,
     729,   729,   518,   562,   152,    40,   518,   952,   637,    30,
      85,    94,   118,   191,   204,   405,   408,   606,   606,   369,
     369,    40,    64,    74,   241,   419,   865,   587,   562,   517,
     563,   708,   717,   875,   518,   518,   517,   881,   911,   517,
     911,   779,    40,   521,   865,   457,   764,   867,   940,   950,
     811,   517,   811,   865,   932,   932,   310,   887,   786,   786,
     729,   304,   729,   704,   290,   517,   702,   562,   589,   569,
     616,   619,   409,   471,   596,   597,   517,   591,   865,   518,
     249,   632,   191,   457,   546,   512,   442,   578,   565,   696,
     602,   990,   517,   562,   729,   610,   677,   729,    74,   293,
      74,   729,   518,   693,   865,    80,   712,   518,   521,   712,
       9,   786,   518,   778,   518,   885,   883,   371,   518,   940,
     516,   516,   516,    59,   753,   764,   764,   710,    93,   717,
     133,   623,   506,   518,   521,   534,   518,   273,   604,   173,
     309,   395,   290,   600,   601,   625,   591,   865,   442,    40,
     517,   990,   602,   637,   990,   293,   293,   517,   518,   959,
     713,   959,   696,   708,   713,   518,   764,   518,   766,   518,
     910,   184,   340,   369,   888,   462,   952,   518,   276,   454,
     632,   590,   619,   518,   597,   205,   122,   454,   290,   625,
     290,   600,   729,   717,   712,   757,   822,   757,    53,   104,
     444,   865,   889,   890,   889,   889,   518,   729,   822,   389,
     601,    63,   273,   360,   389,   593,   593,   990,   518,   713,
     758,   758,   890,   368,   166,   324,   166,   324,   148,   891,
     891,   891,   716,   589,    25,   117,   280,   696,   757,    36,
     104,   181,   273,   428,   822,   822,   758,   890,   368,   298
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   528,   529,   530,   530,   531,   531,   531,   531,   531,
     531,   531,   531,   531,   531,   531,   531,   531,   531,   531,
     531,   531,   531,   531,   531,   531,   531,   531,   531,   531,
     531,   531,   531,   531,   531,   531,   531,   531,   531,   531,
     531,   531,   531,   531,   531,   531,   531,   540,   540,   540,
     540,   540,   540,   540,   540,   541,   541,   542,   542,   543,
     543,   543,   543,   544,   544,   545,   545,   545,   545,   545,
     545,   545,   545,   545,   545,   545,   545,   545,   545,   545,
     545,   545,   545,   545,   545,   545,   545,   545,   545,   545,
     545,   545,   545,   545,   546,   546,   547,   547,   547,   547,
     548,   548,   549,   550,   550,   550,   661,   661,   661,   661,
     562,   562,   563,   563,   563,   564,   564,   565,   566,   566,
     567,   568,   569,   569,   569,   569,   727,   727,   727,   727,
     727,   727,   727,   727,   727,   727,   727,   727,   727,   728,
     728,   698,   699,   699,   699,   699,   699,   700,   700,   701,
     701,   701,   702,   702,   702,   703,   703,   704,   705,   705,
     706,   706,   706,   707,   707,   707,   708,   708,   708,   709,
     709,   710,   710,   711,   711,   712,   712,   713,   713,   714,
     714,   715,   715,   716,   716,   717,   717,   718,   658,   658,
     658,   659,   659,   660,   660,   723,   723,   723,   656,   656,
     656,   657,   657,   652,   652,   652,   653,   653,   654,   654,
     654,   655,   655,   967,   674,   674,   674,   675,   675,   676,
     676,   677,   677,   533,   533,   534,   534,   535,   535,   535,
     536,   536,   536,   536,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   538,   538,
     539,   539,   539,   672,   672,   673,   673,   964,   964,   964,
     964,   964,   964,   965,   965,   965,   968,   588,   588,   588,
     589,   589,   590,   590,   590,   590,   590,   590,   591,   591,
     592,   593,   593,   593,   593,   593,   594,   594,   594,   594,
     595,   595,   595,   595,   595,   595,   595,   595,   596,   596,
     597,   597,   598,   598,   598,   599,   600,   601,   601,   601,
     601,   601,   602,   602,   602,   602,   603,   604,   604,   605,
     605,   606,   606,   606,   606,   606,   606,   606,   606,   607,
     607,   608,   609,   609,   609,   609,   610,   610,   610,   610,
     611,   612,   612,   612,   613,   614,   614,   614,   614,   614,
     614,   615,   615,   616,   616,   617,   618,   618,   618,   619,
     619,   620,   620,   621,   621,   621,   622,   623,   623,   624,
     624,   625,   626,   626,   626,   626,   627,   627,   628,   628,
     629,   629,   629,   630,   630,   630,   630,   630,   630,   631,
     631,   632,   632,   632,   632,   633,   634,   634,   634,   634,
     634,   634,   634,   634,   635,   635,   666,   666,   666,   666,
     666,   666,   667,   667,   667,   667,   667,   667,   667,   667,
     667,   667,   667,   667,   667,   667,   667,   667,   667,   667,
     668,   668,   668,   668,   668,   668,   669,   669,   670,   670,
     670,   671,   671,   671,   646,   646,   646,   646,   646,   646,
     647,   647,   648,   648,   966,   570,   570,   570,   571,   571,
     571,   572,   572,   573,   573,   574,   574,   575,   575,   576,
     576,   577,   577,   578,   578,   579,   579,   579,   579,   579,
     579,   579,   580,   581,   581,   582,   582,   583,   583,   584,
     584,   584,   584,   584,   584,   584,   584,   584,   584,   584,
     584,   584,   584,   584,   584,   585,   586,   586,   586,   586,
     586,   587,   587,   729,   729,   730,   730,   730,   731,   731,
     731,   731,   731,   731,   731,   731,   732,   732,   733,   733,
     734,   734,   734,   734,   734,   734,   734,   734,   734,   734,
     734,   734,   734,   734,   734,   734,   734,   734,   734,   735,
     735,   736,   736,   737,   737,   738,   738,   738,   739,   739,
     740,   740,   741,   741,   741,   742,   742,   743,   744,   744,
     744,   745,   745,   746,   746,   746,   746,   746,   746,   746,
     746,   746,   747,   747,   748,   748,   748,   749,   750,   750,
     751,   751,   752,   752,   752,   753,   753,   754,   754,   755,
     755,   756,   756,   757,   757,   757,   758,   758,   758,   759,
     759,   759,   759,   760,   760,   761,   761,   761,   761,   762,
     762,   763,   763,   763,   763,   763,   763,   764,   764,   765,
     765,   766,   766,   766,   766,   767,   768,   768,   769,   769,
     770,   770,   770,   770,   770,   771,   772,   772,   772,   773,
     773,   774,   774,   775,   775,   776,   776,   776,   777,   777,
     778,   778,   779,   779,   779,   779,   779,   780,   781,   782,
     783,   784,   784,   785,   785,   786,   786,   787,   787,   788,
     788,   789,   789,   790,   791,   791,   791,   791,   792,   792,
     793,   793,   793,   794,   794,   795,   795,   796,   796,   797,
     797,   798,   798,   799,   799,   799,   799,   799,   799,   799,
     799,   799,   799,   800,   800,   801,   801,   801,   802,   802,
     803,   803,   803,   803,   804,   804,   805,   805,   806,   806,
     807,   808,   808,   809,   809,   809,   809,   809,   809,   809,
     809,   809,   809,   809,   810,   810,   810,   810,   811,   811,
     812,   812,   812,   812,   812,   813,   813,   813,   813,   813,
     813,   814,   814,   815,   815,   816,   816,   816,   816,   817,
     817,   818,   819,   819,   820,   820,   821,   821,   822,   822,
     823,   823,   824,   825,   825,   826,   826,   827,   827,   828,
     828,   829,   829,   829,   829,   829,   829,   829,   829,   829,
     829,   830,   830,   831,   831,   831,   832,   832,   832,   832,
     832,   832,   832,   833,   833,   833,   833,   834,   835,   835,
     836,   836,   836,   836,   836,   836,   836,   836,   836,   836,
     836,   837,   837,   838,   838,   839,   839,   840,   841,   842,
     842,   843,   843,   844,   845,   846,   846,   846,   846,   846,
     846,   847,   847,   848,   848,   848,   848,   849,   850,   850,
     850,   851,   851,   852,   852,   853,   853,   854,   854,   855,
     855,   856,   856,   857,   857,   858,   858,   859,   859,   860,
     860,   861,   861,   862,   862,   863,   863,   864,   864,   864,
     864,   864,   864,   864,   864,   864,   864,   864,   864,   864,
     864,   864,   864,   864,   864,   864,   864,   864,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   865,   866,   866,
     866,   866,   866,   866,   866,   866,   866,   866,   866,   866,
     866,   866,   866,   866,   866,   866,   866,   866,   866,   866,
     866,   866,   866,   867,   867,   868,   868,   868,   868,   868,
     868,   869,   869,   869,   870,   870,   870,   870,   870,   870,
     870,   870,   870,   870,   870,   870,   871,   872,   873,   873,
     873,   873,   873,   873,   874,   874,   875,   875,   876,   876,
     876,   876,   876,   876,   876,   876,   876,   876,   876,   876,
     876,   876,   877,   877,   878,   878,   879,   879,   879,   880,
     880,   881,   881,   882,   882,   883,   884,   884,   884,   885,
     886,   886,   887,   887,   888,   888,   888,   888,   889,   889,
     890,   890,   890,   890,   890,   891,   891,   891,   891,   891,
     892,   892,   893,   893,   894,   895,   895,   896,   896,   897,
     898,   898,   899,   899,   900,   900,   901,   901,   901,   902,
     902,   903,   903,   903,   903,   903,   903,   903,   903,   903,
     903,   903,   903,   903,   903,   904,   904,   905,   905,   906,
     906,   906,   906,   906,   906,   906,   906,   907,   907,   908,
     908,   909,   909,   910,   910,   911,   911,   912,   912,   913,
     913,   914,   914,   914,   915,   915,   916,   916,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   918,   918,   919,   920,   920,   921,   921,
     921,   921,   921,   921,   922,   923,   924,   924,   924,   925,
     925,   926,   927,   927,   928,   929,   929,   930,   930,   931,
     931,   567,   567,   567,   567,   932,   932,   933,   933,   934,
     934,   934,   935,   935,   935,   935,   935,   936,   936,   937,
     937,   938,   938,   939,   939,   940,   940,   941,   941,   941,
     942,   942,   943,   943,   944,   945,   945,   946,   946,   947,
     947,   947,   948,   948,   949,   949,   950,   950,   951,   951,
     952,   953,   953,   954,   954,   954,   954,   954,   954,   954,
     954,   954,   954,   954,   954,   954,   954,   955,   956,   956,
     956,   957,   957,   957,   958,   958,   958,   959,   959,   960,
     960,   961,   961,   962,   963,   963,   724,   725,   725,   726,
     726,   726,   726,   726,   726,   649,   649,   649,   650,   650,
     651,   651,   651,   651,   691,   691,   692,   693,   693,   694,
     694,   695,   695,   696,   696,   697,   697,   532,   532,   532,
     532,   532,   532,   557,   557,   558,   558,   559,   559,   560,
     560,   561,   561,   561,   561,   561,   561,   561,   561,   561,
     561,   689,   689,   690,   678,   678,   678,   678,   679,   679,
     680,   680,   680,   681,   681,   681,   681,   681,   681,   681,
     681,   681,   681,   681,   681,   681,   681,   681,   681,   681,
     681,   681,   681,   681,   681,   681,   681,   681,   681,   681,
     681,   681,   681,   681,   682,   682,   682,   683,   683,   684,
     684,   685,   685,   686,   686,   686,   686,   687,   688,   688,
     977,   977,   977,   977,   978,   978,   978,   978,   979,   979,
     980,   981,   981,   981,   981,   981,   981,   981,   982,   982,
     719,   719,   719,   720,   720,   721,   721,   721,   722,   722,
     722,   969,   969,   969,   969,   969,   970,   970,   970,   970,
     970,   971,   971,   972,   972,   973,   973,   662,   662,   663,
     663,   663,   664,   664,   665,   665,   551,   551,   552,   552,
     553,   553,   553,   554,   554,   555,   555,   974,   974,   974,
     974,   975,   975,   976,   976,   976,   983,   983,   983,   983,
     983,   983,   983,   983,   984,   984,   985,   985,   986,   986,
     987,   987,   988,   988,   556,   989,   989,   989,   989,   989,
     990,   990,   990,   990,   636,   636,   636,   637,   637,   637,
     638,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     4,     6,     4,
       6,     4,     6,     4,     6,     1,     2,     3,     2,     1,
       3,     2,     3,     1,     3,     2,     5,     3,     6,     4,
       6,     6,     6,     5,     5,     6,     9,     4,     5,     7,
       6,     4,     8,     4,     2,     4,     3,     6,     4,     2,
       2,     2,     2,     1,     2,     0,     1,     2,     2,     2,
       1,     3,     4,     2,     1,     0,     2,     3,     2,     3,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     6,     6,     8,     6,
       8,     6,     8,     6,     8,     8,    10,     8,    10,     1,
       0,     9,     1,     4,     4,     7,     2,     1,     3,     2,
       2,     0,     4,     3,     0,     1,     0,     2,     3,     5,
       2,     2,     0,     8,     5,     0,     5,     5,     7,     2,
       0,     1,     1,     1,     3,     2,     0,     1,     0,     1,
       3,     1,     3,     1,     2,     1,     3,     2,     6,     8,
       5,     1,     0,     1,     3,     2,     4,     5,     5,     8,
       7,     1,     0,     8,    11,    10,     0,     1,     0,     1,
       1,     0,     2,     4,     3,     9,    12,     1,     3,     1,
       3,     3,     0,     4,     6,     1,     2,     1,     1,     0,
       1,     2,     2,     1,     2,     2,     1,     2,     3,     2,
       2,     2,     2,     3,     3,     3,     1,     3,     1,     0,
       1,     2,     2,     5,     7,     0,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     0,     2,     9,    12,    11,
       0,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     2,     1,     1,     2,     2,     3,     1,     1,     2,
       2,     1,     2,     3,     5,     3,     2,     5,     1,     1,
       1,     0,     5,     7,     5,     2,     3,     1,     1,     2,
       2,     0,     3,     4,     4,     0,     3,     2,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     2,     2,     2,     2,     2,     2,     0,
       3,     3,     3,     0,     1,     2,     1,     2,     2,     2,
       2,     3,     4,     1,     3,     1,     1,     1,     1,     3,
       1,     2,     0,     1,     2,     0,     1,     3,     0,     2,
       0,     3,     3,     1,     5,     3,     1,     3,     1,     2,
       1,     4,     5,     5,     6,     3,     7,     4,    11,     1,
       3,     2,     2,     2,     0,     3,     1,     1,     2,     2,
       2,     2,     1,     0,     1,     2,     6,     4,     6,     4,
       6,     8,     1,     1,     1,     1,     2,     1,     2,     1,
       2,     1,     1,     1,     1,     3,     3,     3,     3,     1,
       2,     2,     1,     3,     1,     1,     1,     3,     1,     1,
       0,     1,     1,     1,     8,    11,    10,     7,    10,     9,
       1,     1,     2,     3,     8,    11,     9,     7,     0,     3,
       3,     1,     1,     3,     0,     1,     3,     1,     0,     1,
       0,     1,     0,     1,     3,     1,     1,     1,     1,     3,
       1,     0,     2,     2,     0,     2,     0,     1,     0,     1,
       1,     1,     3,     3,     1,     1,     3,     3,     3,     3,
       3,     3,     4,     3,     2,     1,     1,     1,     1,     3,
       1,     1,     3,     1,     1,     3,     3,     3,     1,     2,
       4,     4,     2,     3,     5,     5,     1,     1,     3,     0,
      11,    11,    10,    12,     1,     2,     5,     4,     4,     4,
       4,     7,     5,     4,     7,     6,     9,     9,     4,     1,
       1,     1,     1,     1,     1,     1,     5,     1,     1,     3,
       1,     2,     2,     2,     3,     1,     3,     7,     1,     2,
       0,     2,     0,     3,     3,     4,     4,     4,     4,     3,
       2,     1,     1,     0,     1,     1,     0,     2,     1,     5,
       1,     0,     2,     2,     0,     1,     0,     3,     5,     1,
       3,     4,     3,     1,     1,     0,     2,     2,     0,     2,
       2,     1,     1,     1,     0,     2,     4,     5,     4,     2,
       3,     2,     2,     2,     2,     1,     2,     3,     0,     1,
       0,     5,     1,     4,     6,     2,     1,     0,     4,     0,
       1,     1,     2,     2,     2,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     1,     3,     3,     0,     1,     3,
       1,     2,     1,     1,     1,     1,     1,     2,     4,     4,
       5,     1,     1,     2,     0,     2,     0,     1,     3,     1,
       0,     1,     2,     3,     2,     4,     2,     3,     2,     0,
       1,     2,     0,     4,     5,     1,     2,     2,     0,     1,
       3,     1,     2,     3,     3,     3,     3,     3,     3,     1,
       4,     9,     9,     3,     0,     2,     2,     0,     5,     3,
       0,     1,     1,     3,     5,     3,     1,     2,     1,     3,
       5,     1,     2,     3,     4,     5,     4,     5,     4,     6,
       5,     4,     5,     5,     5,     2,     4,     1,     1,     0,
       1,     4,     5,     4,     0,     2,     2,     2,     1,     1,
       1,     1,     0,     4,     2,     1,     2,     2,     4,     2,
       6,     2,     1,     3,     4,     0,     2,     0,     2,     0,
       1,     3,     3,     2,     0,     2,     4,     1,     1,     1,
       0,     2,     3,     5,     6,     2,     3,     1,     5,     5,
       5,     3,     3,     3,     4,     0,     1,     1,     1,     1,
       1,     2,     4,     1,     1,     1,     1,     2,     3,     0,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       1,     3,     0,     1,     1,     1,     1,     5,     2,     1,
       1,     1,     1,     4,     1,     2,     2,     1,     3,     3,
       2,     1,     0,     5,     2,     5,     2,     1,     3,     3,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     3,     3,     3,     3,     3,     0,     1,     3,
       3,     5,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     3,     3,     2,     2,     3,     3,     5,     4,     6,
       3,     5,     4,     6,     4,     6,     5,     7,     3,     2,
       4,     3,     2,     3,     3,     3,     3,     4,     3,     4,
       3,     4,     5,     6,     6,     7,     6,     7,     6,     7,
       3,     4,     4,     6,     1,     4,     3,     5,     1,     3,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     5,
       6,     6,     7,     1,     2,     1,     1,     1,     2,     2,
       4,     3,     1,     1,     1,     1,     1,     4,     1,     1,
       1,     1,     2,     4,     2,     2,     3,     3,     3,     6,
       7,     9,     7,     7,     5,     1,     1,     1,     5,     6,
       6,     4,     4,     4,     4,     6,     5,     5,     5,     4,
       6,     4,     7,     9,     5,     0,     5,     4,     0,     1,
       0,     2,     0,     1,     3,     3,     2,     2,     0,     6,
       1,     0,     3,     0,     3,     3,     3,     0,     1,     4,
       2,     2,     2,     2,     2,     3,     2,     2,     3,     0,
       4,     3,     1,     5,     3,     1,     3,     1,     2,     3,
       1,     3,     1,     2,     1,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     1,     4,     1,
       4,     1,     2,     1,     2,     1,     2,     1,     3,     1,
       3,     1,     2,     1,     3,     1,     2,     1,     0,     1,
       3,     1,     3,     3,     1,     3,     3,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     3,     2,     3,     0,     3,     3,
       2,     2,     1,     0,     2,     2,     3,     2,     1,     1,
       3,     5,     1,     2,     4,     2,     0,     1,     0,     1,
       2,     3,     5,     7,     7,     1,     0,     0,     2,     0,
       2,     3,     3,     3,     5,     7,     7,     0,     2,     1,
       0,     1,     0,     1,     3,     1,     2,     3,     2,     1,
       4,     2,     1,     0,     3,     1,     3,     1,     2,     4,
       2,     0,     1,     3,     1,     3,     1,     2,     1,     3,
       1,     1,     2,     1,     1,     2,     1,     1,     2,     7,
       2,     5,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       3,     3,     0,     1,     1,     1,     5,     3,     0,     1,
       1,     1,     1,     1,     1,     4,     7,     6,     2,     0,
       1,     1,     1,     1,    13,    16,     1,     2,     0,     1,
       0,     1,     0,     2,     0,     1,     0,     6,     8,     6,
       8,     6,     8,     3,     2,     1,     0,     6,     6,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     4,     6,     3,     2,     4,     3,     5,     1,     0,
       1,     1,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       2,     3,     3,     3,     1,     3,     3,     2,     3,     3,
       1,     1,     1,     3,     5,     1,     1,     1,     1,     3,
       2,     4,     5,     1,     1,     0,     2,     2,     0,     2,
       2,     4,     6,     5,     4,     6,     1,     1,     1,     1,
       1,     1,     0,     1,     3,     1,     0,     7,     3,     1,
       2,     3,     2,     0,     2,     0,     2,     4,     5,     8,
       2,     3,     5,     1,     0,     2,     0,     2,     3,     3,
       3,     1,     1,     1,     2,     3,     2,     2,     2,     2,
       3,     4,     3,     1,     1,     1,     1,     1,     1,     0,
       1,     3,     1,     3,     2,     9,    12,    11,    12,    14,
       3,     4,     4,     0,     7,    10,     9,     2,     3,     0,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 506 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 19054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 522 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 19070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 534 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 19081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* stmt: %empty  */
#line 584 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 19087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 19197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 19203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 19223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 19254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 19262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 19270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 19364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 19400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 19420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 19500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 19541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 19660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 19669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 19677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 19689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 19701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 19761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 19791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 20066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 20072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 20086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 20138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 20146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 20155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 20161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 20167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 20173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 20185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 20197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 20205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 20211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 20217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 20238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 20263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 20271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 20279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 20287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 20300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 20313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 20321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 20378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 20384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 20390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 20402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 20438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 20450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 20468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 20474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 20531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 20537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 20543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 20648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-9].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 28 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* opt_secret_name: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 20696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* opt_secret_name: ColId  */
#line 41 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 20702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* opt_persist: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 20708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* opt_persist: TEMPORARY  */
#line 46 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 20714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* opt_persist: PERSISTENT  */
#line 47 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("persistent"); }
#line 20720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* opt_storage_specifier: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 20726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* opt_storage_specifier: IN_P IDENT  */
#line 52 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 20732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* UpdateExtensionsStmt: opt_with_clause UPDATE EXTENSIONS opt_column_list  */
#line 8 "third_party/libpg_query/grammar/statements/update_extensions.y"
                                {
					PGUpdateExtensionsStmt *n = makeNode(PGUpdateExtensionsStmt);
					n->extensions = (yyvsp[0].list);

					if ((yyvsp[-3].with)) {
                          ereport(ERROR,
                                  (errcode(PG_ERRCODE_SYNTAX_ERROR),
                                   errmsg("Providing a with clause with an UPDATE EXTENSIONS statement is not allowed"),
                                   parser_errposition((yylsp[-3]))));
                          break;
                    }

					(yyval.node) = (PGNode *)n;
				}
#line 20751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 20851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 20893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 20926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 20932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 20940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 20964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 20996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 21051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 21057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 21069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 21075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* DropSecretStmt: DROP opt_persist SECRET ColId opt_storage_drop_specifier  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->persist_type = (yyvsp[-3].str);
					n->secret_name = (yyvsp[-1].str);
					n->secret_storage = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* DropSecretStmt: DROP opt_persist SECRET IF_P EXISTS ColId opt_storage_drop_specifier  */
#line 17 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->persist_type = (yyvsp[-5].str);
                    n->secret_name = (yyvsp[-1].str);
                    n->secret_storage = (yyvsp[0].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 21101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* opt_storage_drop_specifier: %empty  */
#line 28 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 21107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* opt_storage_drop_specifier: FROM IDENT  */
#line 29 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 21113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 21134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 21144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 21183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 21189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 21195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 21205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 21262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 21290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 21296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 21308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 21314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 21320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 21344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 21350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 21356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 21362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 21368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 21374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 21530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 21536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 21542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 21548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 21588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 21640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 21652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 21658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 21664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 21670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 21682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 21688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 21711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 21717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 21723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 21729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 21735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 21741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 21747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 21753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 21827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 21833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 21839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 21851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 21857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 21863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 21875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 21881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 21887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 21893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 21899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 21905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 21928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 21958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 22040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 22048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 22066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 22103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 22111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 22295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 22307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 22334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 22386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 22392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 22398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 22404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* drop_type_any_name: TABLE  */
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 22494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* drop_type_any_name: SEQUENCE  */
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 22500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* drop_type_any_name: FUNCTION  */
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* drop_type_any_name: MACRO  */
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* drop_type_any_name: MACRO TABLE  */
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 22518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* drop_type_any_name: VIEW  */
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 22524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 22530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* drop_type_any_name: INDEX  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 22536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* drop_type_any_name: FOREIGN TABLE  */
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 22542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* drop_type_any_name: COLLATION  */
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 22548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* drop_type_any_name: CONVERSION_P  */
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 22554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* drop_type_any_name: SCHEMA  */
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 22560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* drop_type_any_name: STATISTICS  */
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 22566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 22572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 22578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 88 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 22584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 89 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 22590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* drop_type_any_name: TYPE_P  */
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 22596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* drop_type_name: ACCESS METHOD  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 22602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* drop_type_name: EVENT TRIGGER  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 22608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* drop_type_name: EXTENSION  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 22614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 22620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* drop_type_name: PUBLICATION  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 22626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* drop_type_name: SERVER  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 22632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* any_name_list: any_name  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* any_name_list: any_name_list ',' any_name  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* opt_drop_behavior: CASCADE  */
#line 111 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 22650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* opt_drop_behavior: RESTRICT  */
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 22656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* opt_drop_behavior: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 22662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* drop_type_name_on_any_name: POLICY  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 22668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* drop_type_name_on_any_name: RULE  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 22674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* drop_type_name_on_any_name: TRIGGER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 22680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 22695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 22742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 22757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 22772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 22780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 22788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 22803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 22835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* CopyStmt: COPY FROM DATABASE ColId TO ColId copy_database_flag  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                {
				PGCopyDatabaseStmt *n = makeNode(PGCopyDatabaseStmt);
				n->from_database = (yyvsp[-3].str);
				n->to_database = (yyvsp[-1].str);
				n->copy_database_flag = (yyvsp[0].conststr);
				(yyval.node) = (PGNode *)n;
			}
#line 22870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* copy_database_flag: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                        { (yyval.conststr) = NULL; }
#line 22876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* copy_database_flag: '(' SCHEMA ')'  */
#line 62 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "schema"; }
#line 22882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* copy_database_flag: '(' DATA_P ')'  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "data"; }
#line 22888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* copy_from: FROM  */
#line 67 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* copy_from: TO  */
#line 68 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 22900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 74 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* copy_delimiter: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 83 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 87 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* opt_using: USING  */
#line 94 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* opt_using: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* opt_as: AS  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* opt_as: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 22954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* opt_program: PROGRAM  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* opt_program: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 22966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* copy_options: copy_opt_list  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* copy_generic_opt_arg: NumericOnly  */
#line 117 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 22990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* copy_generic_opt_arg: list_expr  */
#line 118 "third_party/libpg_query/grammar/statements/copy.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 22996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* copy_generic_opt_arg: '*'  */
#line 119 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 23002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 23008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* copy_generic_opt_arg: struct_expr  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 23014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* copy_generic_opt_arg: %empty  */
#line 122 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 23020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* opt_oids: WITH OIDS  */
#line 136 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 23036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* opt_oids: %empty  */
#line 139 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* copy_opt_list: %empty  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 23054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* opt_binary: BINARY  */
#line 151 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* opt_binary: %empty  */
#line 154 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* copy_opt_item: BINARY  */
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* copy_opt_item: OIDS  */
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* copy_opt_item: FREEZE  */
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* copy_opt_item: CSV  */
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 23116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* copy_opt_item: HEADER_P  */
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* copy_opt_item: FORCE QUOTE columnList  */
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* copy_opt_item: FORCE QUOTE '*'  */
#line 200 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* copy_opt_item: PARTITION BY columnList  */
#line 204 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* copy_opt_item: PARTITION BY '*'  */
#line 208 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 212 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 23180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* copy_opt_item: FORCE NULL_P columnList  */
#line 216 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* copy_opt_item: ENCODING Sconst  */
#line 220 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 227 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* copy_file_name: Sconst  */
#line 232 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* copy_file_name: STDIN  */
#line 233 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* copy_file_name: STDOUT  */
#line 234 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* copy_file_name: IDENT '.' ColId  */
#line 235 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 23226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* copy_file_name: IDENT  */
#line 236 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 243 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 247 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 23260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* select_with_parens: '(' VariableShowStmt ')'  */
#line 55 "third_party/libpg_query/grammar/statements/select.y"
                    {
		    	(yyval.node) = (yyvsp[-1].node);
			}
#line 23268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* select_no_parens: simple_select  */
#line 72 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* select_no_parens: select_clause sort_clause  */
#line 74 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 81 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 89 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* select_no_parens: with_clause select_clause  */
#line 97 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 23321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* select_no_parens: with_clause select_clause sort_clause  */
#line 105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* select_clause: simple_select  */
#line 131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* select_clause: select_with_parens  */
#line 132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 23377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* opt_select: %empty  */
#line 164 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 23386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 225 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* simple_select: values_clause_opt_comma  */
#line 239 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* simple_select: TABLE relation_expr  */
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 23489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 23497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 276 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-3]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 316 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-5]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 350 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					n->location = (yylsp[-3]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* pivot_column_entry: b_expr  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 23671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 401 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 23682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* pivot_column_entry: single_pivot_value  */
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* pivot_column_list_internal: pivot_column_entry  */
#line 411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* pivot_column_list: pivot_column_list_internal  */
#line 416 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* pivot_column_list: pivot_column_list_internal ','  */
#line 417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* with_clause: WITH cte_list  */
#line 432 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* with_clause: WITH_LA cte_list  */
#line 439 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* with_clause: WITH RECURSIVE cte_list  */
#line 446 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 23745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* cte_list: common_table_expr  */
#line 455 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* cte_list: cte_list ',' common_table_expr  */
#line 456 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 23771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* opt_materialized: MATERIALIZED  */
#line 472 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 23777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* opt_materialized: NOT MATERIALIZED  */
#line 473 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 23783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* opt_materialized: %empty  */
#line 474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 23789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* into_clause: INTO OptTempTableName  */
#line 479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 23803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* into_clause: %empty  */
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 23809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 498 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 518 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 23878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* OptTempTableName: TABLE qualified_name  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* OptTempTableName: qualified_name  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* opt_table: TABLE  */
#line 550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 23902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* opt_table: %empty  */
#line 551 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 23908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* all_or_distinct: ALL  */
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 23914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* all_or_distinct: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* all_or_distinct: %empty  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* by_name: BY NAME_P  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 23932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* distinct_clause: DISTINCT  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 23938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* opt_all_clause: ALL  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 23950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* opt_all_clause: %empty  */
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_IGNORE_NULLS;}
#line 23962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_RESPECT_NULLS;}
#line 23968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* opt_ignore_nulls: %empty  */
#line 580 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ignorenulls) = PG_DEFAULT_NULLS; }
#line 23974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* opt_sort_clause: sort_clause  */
#line 584 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 23980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* opt_sort_clause: %empty  */
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* sort_clause: ORDER BY sortby_list  */
#line 589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 591 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 24009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* sortby_list: sortby  */
#line 606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 24015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* sortby_list: sortby_list ',' sortby  */
#line 607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 24021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 611 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 24034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 24047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* opt_asc_desc: ASC_P  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 24053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* opt_asc_desc: DESC_P  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 24059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* opt_asc_desc: %empty  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 24065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 635 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 24071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 24077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* opt_nulls_order: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 24083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* select_limit: limit_clause offset_clause  */
#line 641 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 24089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* select_limit: offset_clause limit_clause  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 24095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* select_limit: limit_clause  */
#line 643 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 24101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* select_limit: offset_clause  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 24107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* opt_select_limit: select_limit  */
#line 648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* opt_select_limit: %empty  */
#line 649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 24119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* limit_clause: LIMIT select_limit_value  */
#line 654 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 24138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 672 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 24144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 24150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* offset_clause: OFFSET select_offset_value  */
#line 679 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 24162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* sample_count: FCONST '%'  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 24170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* sample_count: ICONST '%'  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 24178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* sample_count: FCONST PERCENT  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 24186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* sample_count: ICONST PERCENT  */
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 24194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* sample_count: ICONST  */
#line 706 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 24202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* sample_count: ICONST ROWS  */
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 24210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* sample_clause: %empty  */
#line 721 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 24224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* opt_sample_func: ColId  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* opt_sample_func: %empty  */
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 24236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 24245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* tablesample_entry: sample_count  */
#line 739 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 24253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 24261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 747 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 24270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* opt_tablesample_clause: tablesample_clause  */
#line 761 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* opt_tablesample_clause: %empty  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 24290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 24296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* opt_repeatable_clause: %empty  */
#line 768 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 24302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* select_limit_value: a_expr  */
#line 772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* select_limit_value: ALL  */
#line 774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 24317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* select_limit_value: a_expr '%'  */
#line 779 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 24323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* select_limit_value: FCONST PERCENT  */
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 24329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* select_limit_value: ICONST PERCENT  */
#line 783 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 24335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* select_offset_value: a_expr  */
#line 787 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* select_fetch_first_value: c_expr  */
#line 807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* select_fetch_first_value: '+' I_or_F_const  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 24353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* select_fetch_first_value: '-' I_or_F_const  */
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 24359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* I_or_F_const: Iconst  */
#line 815 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 24365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* I_or_F_const: FCONST  */
#line 816 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 24371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* row_or_rows: ROW  */
#line 820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 24377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* row_or_rows: ROWS  */
#line 821 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* first_or_next: FIRST_P  */
#line 824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 24389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* first_or_next: NEXT  */
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* group_clause: GROUP_P BY ALL  */
#line 852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 24410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* group_clause: %empty  */
#line 856 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* group_by_list: group_by_item  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* group_by_list: group_by_list ',' group_by_item  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 24428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* group_by_list_opt_comma: group_by_list  */
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* group_by_list_opt_comma: group_by_list ','  */
#line 866 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* group_by_item: a_expr  */
#line 870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* group_by_item: empty_grouping_set  */
#line 871 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* group_by_item: cube_clause  */
#line 872 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* group_by_item: rollup_clause  */
#line 873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* group_by_item: grouping_sets_clause  */
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* empty_grouping_set: '(' ')'  */
#line 879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 24478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 892 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 24502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* grouping_or_grouping_id: GROUPING  */
#line 912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 24508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* grouping_or_grouping_id: GROUPING_ID  */
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 24514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* having_clause: HAVING a_expr  */
#line 917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* having_clause: %empty  */
#line 918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* qualify_clause: QUALIFY a_expr  */
#line 922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* qualify_clause: %empty  */
#line 923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* for_locking_clause: for_locking_items  */
#line 927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* for_locking_clause: FOR READ_P ONLY  */
#line 928 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* opt_for_locking_clause: for_locking_clause  */
#line 932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* opt_for_locking_clause: %empty  */
#line 933 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* for_locking_items: for_locking_item  */
#line 937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* for_locking_items: for_locking_items for_locking_item  */
#line 938 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 24574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 24586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* for_locking_strength: FOR UPDATE  */
#line 953 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 24592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 24598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* for_locking_strength: FOR SHARE  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 24604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* for_locking_strength: FOR KEY SHARE  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 24610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* locked_rels_list: OF qualified_name_list  */
#line 960 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* locked_rels_list: %empty  */
#line 961 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* opt_nowait_or_skip: NOWAIT  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 24628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 967 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 24634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* opt_nowait_or_skip: %empty  */
#line 968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 24640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* values_clause_opt_comma: values_clause  */
#line 992 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* values_clause_opt_comma: values_clause ','  */
#line 993 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* from_clause: FROM from_list_opt_comma  */
#line 1006 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* from_clause: %empty  */
#line 1007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* from_list: table_ref  */
#line 1011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* from_list: from_list ',' table_ref  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* from_list_opt_comma: from_list  */
#line 1016 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* from_list_opt_comma: from_list ','  */
#line 1017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 24718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1030 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1038 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1055 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 24781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* table_ref: joined_table  */
#line 1073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 24789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 24798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1082 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 24813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 24828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1106 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 24834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* opt_pivot_group_by: %empty  */
#line 1107 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 24840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 24846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1111 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* opt_include_nulls: %empty  */
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1116 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* pivot_header: d_expr  */
#line 1133 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* pivot_header: indirection_expr  */
#line 1134 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1135 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1139 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1147 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* pivot_value_list: pivot_value  */
#line 1156 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1160 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* unpivot_header: ColIdOrString  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1167 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 24948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1172 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* unpivot_value_list: unpivot_value  */
#line 1181 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1185 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* joined_table: '(' joined_table ')'  */
#line 1210 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 24983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1214 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1227 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 25018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 25053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 25088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 25106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 25142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1337 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 25162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1356 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 25172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* alias_clause: AS ColIdOrString  */
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 25181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 25191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* alias_clause: ColId  */
#line 1373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 25200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* opt_alias_clause: alias_clause  */
#line 1379 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 25206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* opt_alias_clause: %empty  */
#line 1380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 25212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* func_alias_clause: alias_clause  */
#line 1389 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 25220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 25228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* func_alias_clause: %empty  */
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 25256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* join_type: FULL join_outer  */
#line 1414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 25262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* join_type: LEFT join_outer  */
#line 1415 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 25268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* join_type: RIGHT join_outer  */
#line 1416 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 25274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* join_type: SEMI  */
#line 1417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 25280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* join_type: ANTI  */
#line 1418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 25286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* join_type: INNER_P  */
#line 1419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 25292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* join_outer: OUTER_P  */
#line 1423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 25298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* join_outer: %empty  */
#line 1424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1436 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 25310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* join_qual: ON a_expr  */
#line 1437 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* relation_expr: qualified_name  */
#line 1443 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 25327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* relation_expr: qualified_name '*'  */
#line 1450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 25338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* relation_expr: ONLY qualified_name  */
#line 1457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 25349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 25360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* func_table: func_expr_windowless opt_ordinality  */
#line 1496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 25375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 25390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1520 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 25396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* rowsfrom_list: rowsfrom_item  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 25402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1525 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 25408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1528 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* opt_col_def_list: %empty  */
#line 1529 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1532 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 25426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* opt_ordinality: %empty  */
#line 1533 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* where_clause: WHERE a_expr  */
#line 1538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* where_clause: %empty  */
#line 1539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* TableFuncElementList: TableFuncElement  */
#line 1545 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 25452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 25460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1555 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* opt_collate_clause: COLLATE any_name  */
#line 1576 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* opt_collate_clause: %empty  */
#line 1583 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 25500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* colid_type_list: ColId Typename  */
#line 1596 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 25508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1599 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 25516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* opt_Typename: Typename  */
#line 1606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* opt_Typename: %empty  */
#line 1607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 25528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* Typename: SimpleTypename opt_array_bounds  */
#line 1610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 25537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1615 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 25547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1622 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 25556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1627 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 25566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* Typename: SimpleTypename ARRAY  */
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 25575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1638 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 25585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* Typename: qualified_typename  */
#line 1644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList((yyvsp[0].list));
				}
#line 25593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1648 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("struct");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
               }
#line 25604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1655 "third_party/libpg_query/grammar/statements/select.y"
                {
				   (yyval.typnam) = SystemTypeName("map");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 25615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("union");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 25626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* qualified_typename: IDENT '.' IDENT  */
#line 1671 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 25632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* qualified_typename: qualified_typename '.' IDENT  */
#line 1672 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 25638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1677 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 25644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1679 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 25650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* opt_array_bounds: %empty  */
#line 1681 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 25656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* SimpleTypename: GenericType  */
#line 1685 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* SimpleTypename: Numeric  */
#line 1686 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* SimpleTypename: Bit  */
#line 1687 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* SimpleTypename: Character  */
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* SimpleTypename: ConstDatetime  */
#line 1689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* SimpleTypename: ConstInterval opt_interval  */
#line 1691 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 25695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1696 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 25705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* ConstTypename: Numeric  */
#line 1715 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* ConstTypename: ConstBit  */
#line 1716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* ConstTypename: ConstCharacter  */
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* ConstTypename: ConstDatetime  */
#line 1718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* GenericType: type_name_token opt_type_modifiers  */
#line 1730 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1743 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* opt_type_modifiers: %empty  */
#line 1744 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* Numeric: INT_P  */
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* Numeric: INTEGER  */
#line 1756 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* Numeric: SMALLINT  */
#line 1761 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* Numeric: BIGINT  */
#line 1766 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* Numeric: REAL  */
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* Numeric: FLOAT_P opt_float  */
#line 1776 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* Numeric: DOUBLE_P PRECISION  */
#line 1781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* Numeric: DEC opt_type_modifiers  */
#line 1792 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1798 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* Numeric: BOOLEAN_P  */
#line 1804 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* opt_float: '(' Iconst ')'  */
#line 1811 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 25878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* opt_float: %empty  */
#line 1832 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 25886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* Bit: BitWithLength  */
#line 1842 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* Bit: BitWithoutLength  */
#line 1846 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* ConstBit: BitWithLength  */
#line 1854 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* ConstBit: BitWithoutLength  */
#line 1858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1866 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* BitWithoutLength: BIT opt_varying  */
#line 1878 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* Character: CharacterWithLength  */
#line 1899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* Character: CharacterWithoutLength  */
#line 1903 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* ConstCharacter: CharacterWithLength  */
#line 1909 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* ConstCharacter: CharacterWithoutLength  */
#line 1913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* CharacterWithoutLength: character  */
#line 1934 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* character: CHARACTER opt_varying  */
#line 1944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* character: CHAR_P opt_varying  */
#line 1946 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* character: VARCHAR  */
#line 1948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 26029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* character: NATIONAL CHARACTER opt_varying  */
#line 1950 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* character: NATIONAL CHAR_P opt_varying  */
#line 1952 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* character: NCHAR opt_varying  */
#line 1954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* opt_varying: VARYING  */
#line 1958 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 26053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* opt_varying: %empty  */
#line 1959 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1967 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 26072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 26097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* ConstDatetime: TIME opt_timezone  */
#line 1993 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* ConstInterval: INTERVAL  */
#line 2004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* opt_timezone: WITH_LA TIME ZONE  */
#line 2011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 26124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* opt_timezone: WITHOUT TIME ZONE  */
#line 2012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 26130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* opt_timezone: %empty  */
#line 2013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* opt_interval: year_keyword  */
#line 2057 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 26142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* opt_interval: month_keyword  */
#line 2059 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 26148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* opt_interval: day_keyword  */
#line 2061 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 26154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* opt_interval: hour_keyword  */
#line 2063 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 26160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* opt_interval: minute_keyword  */
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 26166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* opt_interval: second_keyword  */
#line 2067 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 26172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* opt_interval: millisecond_keyword  */
#line 2069 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 26178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* opt_interval: microsecond_keyword  */
#line 2071 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 26184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* opt_interval: week_keyword  */
#line 2073 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(WEEK), (yylsp[0]))); }
#line 26190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* opt_interval: quarter_keyword  */
#line 2075 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(QUARTER), (yylsp[0]))); }
#line 26196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* opt_interval: decade_keyword  */
#line 2077 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DECADE), (yylsp[0]))); }
#line 26202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* opt_interval: century_keyword  */
#line 2079 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(CENTURY), (yylsp[0]))); }
#line 26208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* opt_interval: millennium_keyword  */
#line 2081 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLENNIUM), (yylsp[0]))); }
#line 26214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* opt_interval: year_keyword TO month_keyword  */
#line 2083 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 26223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* opt_interval: day_keyword TO hour_keyword  */
#line 2088 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 26232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* opt_interval: day_keyword TO minute_keyword  */
#line 2093 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 26242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* opt_interval: day_keyword TO second_keyword  */
#line 2099 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 26262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* opt_interval: hour_keyword TO second_keyword  */
#line 2111 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* opt_interval: minute_keyword TO second_keyword  */
#line 2117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* opt_interval: %empty  */
#line 2122 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 26287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* a_expr: c_expr  */
#line 2153 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* a_expr: a_expr TYPECAST Typename  */
#line 2156 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* a_expr: a_expr COLLATE any_name  */
#line 2158 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 26321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* a_expr: '+' a_expr  */
#line 2181 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* a_expr: '-' a_expr  */
#line 2183 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* a_expr: a_expr '+' a_expr  */
#line 2185 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* a_expr: a_expr '-' a_expr  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* a_expr: a_expr '*' a_expr  */
#line 2189 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* a_expr: a_expr '/' a_expr  */
#line 2191 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2193 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* a_expr: a_expr '%' a_expr  */
#line 2195 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* a_expr: a_expr '^' a_expr  */
#line 2197 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* a_expr: a_expr POWER_OF a_expr  */
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* a_expr: a_expr '<' a_expr  */
#line 2201 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* a_expr: a_expr '>' a_expr  */
#line 2203 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* a_expr: a_expr '=' a_expr  */
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2207 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2209 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* a_expr: a_expr qual_Op a_expr  */
#line 2214 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* a_expr: qual_Op a_expr  */
#line 2216 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* a_expr: a_expr qual_Op  */
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* a_expr: a_expr AND a_expr  */
#line 2221 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* a_expr: a_expr OR a_expr  */
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* a_expr: NOT a_expr  */
#line 2225 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 26453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* a_expr: NOT_LA a_expr  */
#line 2227 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 26459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* a_expr: a_expr GLOB a_expr  */
#line 2229 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* a_expr: a_expr LIKE a_expr  */
#line 2234 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 26488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2246 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 26497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2251 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 26508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* a_expr: a_expr ILIKE a_expr  */
#line 2258 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2263 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 26528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 26537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2275 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 26548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2283 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 26560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 26572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 26584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 26596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* a_expr: a_expr IS NULL_P  */
#line 2325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* a_expr: a_expr ISNULL  */
#line 2333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* a_expr: a_expr IS NOT NULL_P  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* a_expr: a_expr NOT NULL_P  */
#line 2349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* a_expr: a_expr NOTNULL  */
#line 2357 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2365 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 26668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2373 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 26676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* a_expr: row OVERLAPS row  */
#line 2377 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 26696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* a_expr: a_expr IS TRUE_P  */
#line 2393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* a_expr: a_expr IS FALSE_P  */
#line 2409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2417 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* a_expr: a_expr IS UNKNOWN  */
#line 2425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2433 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2441 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2445 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2465 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2473 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* a_expr: a_expr IN_P in_expr  */
#line 2489 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 26872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 26898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2531 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2542 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 26924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* a_expr: DEFAULT  */
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2563 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 26954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 26966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 26979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* b_expr: c_expr  */
#line 2599 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* b_expr: b_expr TYPECAST Typename  */
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* b_expr: '+' b_expr  */
#line 2603 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* b_expr: '-' b_expr  */
#line 2605 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 27003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* b_expr: b_expr '+' b_expr  */
#line 2607 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* b_expr: b_expr '-' b_expr  */
#line 2609 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* b_expr: b_expr '*' b_expr  */
#line 2611 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* b_expr: b_expr '/' b_expr  */
#line 2613 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2615 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* b_expr: b_expr '%' b_expr  */
#line 2617 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* b_expr: b_expr '^' b_expr  */
#line 2619 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* b_expr: b_expr POWER_OF b_expr  */
#line 2621 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* b_expr: b_expr '<' b_expr  */
#line 2623 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* b_expr: b_expr '>' b_expr  */
#line 2625 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* b_expr: b_expr '=' b_expr  */
#line 2627 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2629 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2631 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2633 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* b_expr: b_expr qual_Op b_expr  */
#line 2635 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* b_expr: qual_Op b_expr  */
#line 2637 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* b_expr: b_expr qual_Op  */
#line 2639 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 27105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2641 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 27113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2645 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 27121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2649 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2653 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 27137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* c_expr: indirection_expr_or_a_expr opt_extended_indirection  */
#line 2668 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 27153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* d_expr: columnref  */
#line 2681 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* d_expr: AexprConst  */
#line 2682 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* d_expr: select_with_parens  */
#line 2684 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* d_expr: select_with_parens indirection  */
#line 2695 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 27208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* d_expr: EXISTS select_with_parens  */
#line 2719 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2730 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 27234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* indirection_expr_or_a_expr: '(' a_expr ')'  */
#line 2740 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 27242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* indirection_expr_or_a_expr: indirection_expr  */
#line 2744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* indirection_expr_or_a_expr: row  */
#line 2747 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 27259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* indirection_expr: '?'  */
#line 2755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 27267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* indirection_expr: PARAM  */
#line 2759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 27278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* indirection_expr: struct_expr  */
#line 2766 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2770 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 27307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* indirection_expr: func_expr  */
#line 2787 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* indirection_expr: case_expr  */
#line 2791 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* indirection_expr: list_expr  */
#line 2792 "third_party/libpg_query/grammar/statements/select.y"
                                     {
                (yyval.node) = (yyvsp[0].node);
			}
#line 27329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* indirection_expr: list_comprehension  */
#line 2795 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 27337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* indirection_expr: ARRAY select_with_parens  */
#line 2799 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* indirection_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2809 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 27362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* indirection_expr: '#' ICONST  */
#line 2815 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* indirection_expr: '$' ColLabel  */
#line 2822 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 27381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* list_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2827 "third_party/libpg_query/grammar/statements/select.y"
                                            {
                PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
                (yyval.node) = (PGNode *) n;
            }
#line 27390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2834 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 27399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* func_application: func_name '(' ')'  */
#line 2843 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 27407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2847 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 27418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2854 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 27430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2862 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 27442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2870 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 27457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2881 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2901 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 27509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* func_expr: func_expr_common_subexpr  */
#line 2937 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* func_expr_windowless: func_application  */
#line 2947 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 27537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2962 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 27543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2964 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 27549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2979 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position_inverse(A, B) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("__internal_position_operator"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2991 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 27609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 3006 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 3017 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 3021 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 3025 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 27652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 3029 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 27663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 3039 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 27676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 3048 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 27695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3069 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* within_group_clause: %empty  */
#line 3070 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3074 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3075 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* filter_clause: %empty  */
#line 3076 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* export_clause: EXPORT_STATE  */
#line 3080 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 27731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* export_clause: %empty  */
#line 3081 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* window_clause: WINDOW window_definition_list  */
#line 3088 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* window_clause: %empty  */
#line 3089 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* window_definition_list: window_definition  */
#line 3093 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 27755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3095 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 27761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* window_definition: ColId AS window_specification  */
#line 3100 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 27771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* over_clause: OVER window_specification  */
#line 3108 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 27777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* over_clause: OVER ColId  */
#line 3110 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 27794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* over_clause: %empty  */
#line 3123 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 27800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3128 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 27818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* opt_existing_window_name: ColId  */
#line 3153 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* opt_existing_window_name: %empty  */
#line 3154 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 27830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3157 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* opt_partition_clause: %empty  */
#line 3158 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3167 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3183 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* opt_frame_clause: %empty  */
#line 3191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* frame_extent: frame_bound  */
#line 3202 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 27913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3220 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 27955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3275 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* frame_bound: CURRENT_P ROW  */
#line 3284 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* frame_bound: a_expr PRECEDING  */
#line 3293 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 28007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* frame_bound: a_expr FOLLOWING  */
#line 3302 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 28020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3313 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 28026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3314 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 28032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3315 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 28038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3316 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 28044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* opt_window_exclusion_clause: %empty  */
#line 3317 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 28050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* qualified_row: ROW '(' ')'  */
#line 3332 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* row: qualified_row  */
#line 3335 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 28068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* row: '(' expr_list ',' a_expr ')'  */
#line 3336 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 28074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3340 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 28087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* dict_arguments: dict_arg  */
#line 3350 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3351 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 28099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* dict_arguments_opt_comma: dict_arguments  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3356 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* map_arg: a_expr ':' a_expr  */
#line 3361 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 28119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* map_arguments: map_arg  */
#line 3367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* map_arguments: map_arguments ',' map_arg  */
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* map_arguments_opt_comma: map_arguments  */
#line 3373 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* map_arguments_opt_comma: map_arguments ','  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3379 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* opt_map_arguments_opt_comma: %empty  */
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 28155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* sub_type: ANY  */
#line 3383 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 28161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* sub_type: SOME  */
#line 3384 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 28167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* sub_type: ALL  */
#line 3385 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 28173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* all_Op: Op  */
#line 3388 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* all_Op: MathOp  */
#line 3389 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 28185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* MathOp: '+'  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 28191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* MathOp: '-'  */
#line 3393 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 28197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* MathOp: '*'  */
#line 3394 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 28203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* MathOp: '/'  */
#line 3395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 28209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* MathOp: INTEGER_DIVISION  */
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 28215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* MathOp: '%'  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 28221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* MathOp: '^'  */
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 28227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* MathOp: POWER_OF  */
#line 3399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 28233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* MathOp: '<'  */
#line 3400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 28239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* MathOp: '>'  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 28245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* MathOp: '='  */
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 28251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* MathOp: LESS_EQUALS  */
#line 3403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 28257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* MathOp: GREATER_EQUALS  */
#line 3404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 28263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* MathOp: NOT_EQUALS  */
#line 3405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 28269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* qual_Op: Op  */
#line 3409 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3411 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* qual_all_Op: all_Op  */
#line 3416 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3418 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* subquery_Op: all_Op  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3425 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* subquery_Op: LIKE  */
#line 3427 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 28311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* subquery_Op: NOT_LA LIKE  */
#line 3429 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 28317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* subquery_Op: GLOB  */
#line 3431 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 28323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* subquery_Op: NOT_LA GLOB  */
#line 3433 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 28329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* subquery_Op: ILIKE  */
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 28335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* subquery_Op: NOT_LA ILIKE  */
#line 3437 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 28341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* any_operator: all_Op  */
#line 3451 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* any_operator: ColId '.' any_operator  */
#line 3453 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 28353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* c_expr_list: c_expr  */
#line 3458 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3462 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* c_expr_list_opt_comma: c_expr_list  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3474 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 28385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* expr_list: a_expr  */
#line 3480 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* expr_list: expr_list ',' a_expr  */
#line 3484 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* expr_list_opt_comma: expr_list  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* expr_list_opt_comma: expr_list ','  */
#line 3496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 28417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* opt_expr_list_opt_comma: %empty  */
#line 3507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 28433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* func_arg_list: func_arg_expr  */
#line 3516 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* func_arg_expr: a_expr  */
#line 3526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 28470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3539 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 28483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* type_list: Typename  */
#line 3549 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 28489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* type_list: type_list ',' Typename  */
#line 3550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 28495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* extract_list: extract_arg FROM a_expr  */
#line 3555 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 28503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* extract_list: %empty  */
#line 3558 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* extract_arg: IDENT  */
#line 3565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* extract_arg: year_keyword  */
#line 3566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 28521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* extract_arg: month_keyword  */
#line 3567 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 28527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* extract_arg: day_keyword  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 28533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* extract_arg: hour_keyword  */
#line 3569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 28539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* extract_arg: minute_keyword  */
#line 3570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 28545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* extract_arg: second_keyword  */
#line 3571 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 28551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* extract_arg: millisecond_keyword  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 28557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* extract_arg: microsecond_keyword  */
#line 3573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 28563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* extract_arg: week_keyword  */
#line 3574 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "week"; }
#line 28569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* extract_arg: quarter_keyword  */
#line 3575 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "quarter"; }
#line 28575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* extract_arg: decade_keyword  */
#line 3576 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "decade"; }
#line 28581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* extract_arg: century_keyword  */
#line 3577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "century"; }
#line 28587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* extract_arg: millennium_keyword  */
#line 3578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millennium"; }
#line 28593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* extract_arg: Sconst  */
#line 3579 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3590 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3594 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* overlay_placing: PLACING a_expr  */
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* position_list: b_expr IN_P b_expr  */
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node)); }
#line 28627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* position_list: %empty  */
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* substr_list: a_expr substr_from substr_for  */
#line 3625 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* substr_list: a_expr substr_for substr_from  */
#line 3629 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 28650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* substr_list: a_expr substr_from  */
#line 3634 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* substr_list: a_expr substr_for  */
#line 3638 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 28677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* substr_list: expr_list  */
#line 3653 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* substr_list: %empty  */
#line 3657 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 28691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* substr_from: FROM a_expr  */
#line 3661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* substr_for: FOR a_expr  */
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3667 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 28709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* trim_list: FROM expr_list_opt_comma  */
#line 3668 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* trim_list: expr_list_opt_comma  */
#line 3669 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* in_expr: select_with_parens  */
#line 3673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 28732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3679 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 28738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3690 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 28752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* when_clause_list: when_clause  */
#line 3703 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* when_clause_list: when_clause_list when_clause  */
#line 3704 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3709 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 28776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* case_default: ELSE a_expr  */
#line 3719 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* case_default: %empty  */
#line 3720 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* case_arg: a_expr  */
#line 3723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* case_arg: %empty  */
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* columnref: ColId  */
#line 3728 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 28808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* columnref: ColId indirection  */
#line 3732 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 28816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* indirection_el: '[' a_expr ']'  */
#line 3739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3747 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3754 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 28853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3762 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* opt_slice_bound: a_expr  */
#line 3772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* opt_slice_bound: %empty  */
#line 3773 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* opt_indirection: %empty  */
#line 3778 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* opt_indirection: opt_indirection indirection_el  */
#line 3779 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* opt_func_arguments: %empty  */
#line 3783 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 28895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* opt_func_arguments: '(' ')'  */
#line 3784 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 28901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3785 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3790 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 28920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* extended_indirection_el: '[' a_expr ']'  */
#line 3799 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3807 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3814 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 28957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3823 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* opt_extended_indirection: %empty  */
#line 3838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 28975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3839 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3855 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* opt_target_list_opt_comma: %empty  */
#line 3856 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* target_list: target_el  */
#line 3860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 28999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* target_list: target_list ',' target_el  */
#line 3861 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 29005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* target_list_opt_comma: target_list  */
#line 3865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* target_list_opt_comma: target_list ','  */
#line 3866 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* target_el: a_expr AS ColLabelOrString  */
#line 3870 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 29029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* target_el: a_expr IDENT  */
#line 3886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 29041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* target_el: a_expr  */
#line 3894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 29053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3903 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* except_list: EXCLUDE ColId  */
#line 3904 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* opt_except_list: except_list  */
#line 3907 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* opt_except_list: %empty  */
#line 3908 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 29077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* replace_list_el: a_expr AS ColId  */
#line 3911 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 29083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* replace_list: replace_list_el  */
#line 3915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* replace_list: replace_list ',' replace_list_el  */
#line 3916 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* replace_list_opt_comma: replace_list  */
#line 3920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* replace_list_opt_comma: replace_list ','  */
#line 3921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3924 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* opt_replace_list: REPLACE replace_list_el  */
#line 3925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* opt_replace_list: %empty  */
#line 3926 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 29125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* qualified_name_list: qualified_name  */
#line 3936 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 29131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3937 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 29137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* name_list: name  */
#line 3942 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* name_list: name_list ',' name  */
#line 3944 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 29149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* name_list_opt_comma: name_list  */
#line 3949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* name_list_opt_comma: name_list ','  */
#line 3950 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3955 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* name: ColIdOrString  */
#line 3958 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* func_name: function_name_token  */
#line 3970 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* func_name: ColId indirection  */
#line 3973 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 29194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* AexprConst: Iconst  */
#line 3984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 29202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* AexprConst: FCONST  */
#line 3988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* AexprConst: Sconst opt_indirection  */
#line 3992 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 29226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* AexprConst: BCONST  */
#line 4004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* AexprConst: XCONST  */
#line 4008 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* AexprConst: func_name Sconst  */
#line 4017 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 4024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].ignorenulls) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* AexprConst: ConstTypename Sconst  */
#line 4062 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 29308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4066 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 29316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 29324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4074 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 29332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* AexprConst: TRUE_P  */
#line 4078 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 29340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* AexprConst: FALSE_P  */
#line 4082 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 29348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* AexprConst: NULL_P  */
#line 4086 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 29356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* Iconst: ICONST  */
#line 4091 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 29362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* type_function_name: IDENT  */
#line 4108 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* type_function_name: unreserved_keyword  */
#line 4109 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* type_function_name: type_func_name_keyword  */
#line 4110 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* function_name_token: IDENT  */
#line 4113 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* function_name_token: unreserved_keyword  */
#line 4114 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* function_name_token: func_name_keyword  */
#line 4115 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* type_name_token: IDENT  */
#line 4118 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* type_name_token: unreserved_keyword  */
#line 4119 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* type_name_token: type_name_keyword  */
#line 4120 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* any_name: ColId  */
#line 4123 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* any_name: ColId attrs  */
#line 4124 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 29428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* attrs: '.' attr_name  */
#line 4128 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* attrs: attrs '.' attr_name  */
#line 4130 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 29440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4134 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* opt_name_list: %empty  */
#line 4135 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* ColLabelOrString: ColLabel  */
#line 4142 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* ColLabelOrString: SCONST  */
#line 4143 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 29476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 29488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 29572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 29578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 29650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 29656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 29662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 29674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 29686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 29692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 29698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 29810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* CommentOnStmt: COMMENT ON comment_on_type_any_name qualified_name IS comment_value  */
#line 8 "third_party/libpg_query/grammar/statements/comment_on.y"
                                {
					PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
					n->object_type = (yyvsp[-3].objtype);
					n->name = (yyvsp[-2].range);
					n->value = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 29822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* CommentOnStmt: COMMENT ON COLUMN a_expr IS comment_value  */
#line 16 "third_party/libpg_query/grammar/statements/comment_on.y"
                {
                    PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
                    n->object_type = PG_OBJECT_COLUMN;
                    n->column_expr = (yyvsp[-2].node);
                    n->value = (yyvsp[0].node);
                    (yyval.node) = (PGNode *)n;
                }
#line 29834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* comment_value: Sconst  */
#line 26 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 29840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* comment_value: NULL_P  */
#line 27 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                            { (yyval.node) = makeNullAConst((yylsp[0])); }
#line 29846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* comment_on_type_any_name: TABLE  */
#line 30 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 29852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* comment_on_type_any_name: SEQUENCE  */
#line 31 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 29858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* comment_on_type_any_name: FUNCTION  */
#line 32 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 29864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* comment_on_type_any_name: MACRO  */
#line 33 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 29870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* comment_on_type_any_name: MACRO TABLE  */
#line 34 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 29876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* comment_on_type_any_name: VIEW  */
#line 35 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 29882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* comment_on_type_any_name: DATABASE  */
#line 36 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 29888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* comment_on_type_any_name: INDEX  */
#line 37 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 29894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* comment_on_type_any_name: SCHEMA  */
#line 38 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 29900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* comment_on_type_any_name: TYPE_P  */
#line 39 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 29906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 29993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 29999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 30005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 30011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 30017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 30023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* NonReservedWord: IDENT  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* NonReservedWord: unreserved_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* NonReservedWord: other_keyword  */
#line 93 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* NonReservedWord_or_Sconst: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* explain_option_list: explain_option_elem  */
#line 105 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 30061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 109 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 30069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* analyze_keyword: ANALYZE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 30075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* analyze_keyword: ANALYSE  */
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 30081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* opt_boolean_or_string: TRUE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 30087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* opt_boolean_or_string: FALSE_P  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 30093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* opt_boolean_or_string: ON  */
#line 124 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 30099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 130 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 136 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 30113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* explain_option_name: NonReservedWord  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* explain_option_name: analyze_keyword  */
#line 144 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 30125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 30135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 30145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 30155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 30165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 30171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 30182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 30197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 30209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 30221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 30233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* var_value: a_expr  */
#line 90 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 30239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* zone_value: Sconst  */
#line 96 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* zone_value: IDENT  */
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* zone_value: ConstInterval Sconst opt_interval  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 30274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 119 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* zone_value: NumericOnly  */
#line 125 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 30291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* zone_value: DEFAULT  */
#line 126 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 30297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* zone_value: LOCAL  */
#line 127 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 30303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* var_list: var_value  */
#line 131 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* var_list: var_list ',' var_value  */
#line 132 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 30315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = "";
					n->version = "";
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 30328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* LoadStmt: INSTALL file_name opt_from_repo opt_ext_version  */
#line 16 "third_party/libpg_query/grammar/statements/load.y"
                                                                                {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-2].str);
                    n->repository = (yyvsp[-1].str);
                    n->version = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 30341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* LoadStmt: FORCE INSTALL file_name opt_from_repo opt_ext_version  */
#line 24 "third_party/libpg_query/grammar/statements/load.y"
                                                                                      {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[-2].str);
                      n->repository = (yyvsp[-1].str);
                      n->version = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 30354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* file_name: Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* file_name: ColId  */
#line 35 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 30366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* opt_from_repo: %empty  */
#line 41 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = ""; }
#line 30372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* opt_from_repo: FROM Sconst  */
#line 42 "third_party/libpg_query/grammar/statements/load.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* opt_from_repo: FROM ColId  */
#line 43 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 30384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* opt_ext_version: %empty  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = ""; }
#line 30390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* opt_ext_version: VERSION_P Sconst  */
#line 47 "third_party/libpg_query/grammar/statements/load.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* opt_ext_version: VERSION_P ColId  */
#line 48 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 30402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 30420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 30454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 30466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 30480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 30486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 30492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 30498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 30504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 30518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 30542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 30568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 30582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 30590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 30601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 30612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 30624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 30636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 30650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* AttachStmt: ATTACH IF_P NOT EXISTS opt_database Sconst opt_database_alias copy_options  */
#line 17 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* DetachStmt: DETACH ColLabel  */
#line 29 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* DetachStmt: DETACH DATABASE ColLabel  */
#line 36 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* DetachStmt: DETACH DATABASE IF_P EXISTS ColLabel  */
#line 43 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* opt_database: DATABASE  */
#line 51 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 30729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* opt_database: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 30735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* opt_database_alias: AS ColId  */
#line 56 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* opt_database_alias: %empty  */
#line 57 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 30747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 30756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1471: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 30794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 30804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1473: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 30810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1474: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 30821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1475: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 30832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1476: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1477: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1478: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1479: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1480: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1481: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1482: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1483: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* var_name: ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* var_name: var_name '.' ColId  */
#line 69 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* table_id: ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 30940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* table_id: table_id '.' ColId  */
#line 74 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 30956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 31004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 31025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 31046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 31052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 31058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 31064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 31070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 31087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 31104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 31121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 31127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1508: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 31133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1509: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 31139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1510: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 31153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 31157 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	if (stmt->type != T_PGSelectStmt) {
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
						errmsg("DESCRIBE/SHOW/SUMMARIZE with CTE/ORDER BY/... not allowed - wrap the statement in a subquery instead"),
						parser_errposition(exprLocation((PGNode *) stmt))));
	}
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make1(makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
