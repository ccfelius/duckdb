/* A Bison parser, made by GNU Bison 3.5.1.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.5.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);


#line 240 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Use api.header.include to #include this header
   instead of duplicating it here.  */
#ifndef YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
# define YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int base_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    IDENT = 258,
    FCONST = 259,
    SCONST = 260,
    BCONST = 261,
    XCONST = 262,
    Op = 263,
    ICONST = 264,
    PARAM = 265,
    TYPECAST = 266,
    DOT_DOT = 267,
    COLON_EQUALS = 268,
    EQUALS_GREATER = 269,
    LAMBDA_ARROW = 270,
    LESS_EQUALS = 271,
    GREATER_EQUALS = 272,
    NOT_EQUALS = 273,
    ABORT_P = 274,
    ABSOLUTE_P = 275,
    ACCESS = 276,
    ACTION = 277,
    ADD_P = 278,
    ADMIN = 279,
    AFTER = 280,
    AGGREGATE = 281,
    ALL = 282,
    ALSO = 283,
    ALTER = 284,
    ALWAYS = 285,
    ANALYSE = 286,
    ANALYZE = 287,
    AND = 288,
    ANY = 289,
    ARRAY = 290,
    AS = 291,
    ASC_P = 292,
    ASSERTION = 293,
    ASSIGNMENT = 294,
    ASYMMETRIC = 295,
    AT = 296,
    ATTACH = 297,
    ATTRIBUTE = 298,
    AUTHORIZATION = 299,
    BACKWARD = 300,
    BEFORE = 301,
    BEGIN_P = 302,
    BETWEEN = 303,
    BIGINT = 304,
    BINARY = 305,
    BIT = 306,
    BOOLEAN_P = 307,
    BOTH = 308,
    BY = 309,
    CACHE = 310,
    CALL_P = 311,
    CALLED = 312,
    CASCADE = 313,
    CASCADED = 314,
    CASE = 315,
    CAST = 316,
    CATALOG_P = 317,
    CHAIN = 318,
    CHAR_P = 319,
    CHARACTER = 320,
    CHARACTERISTICS = 321,
    CHECK_P = 322,
    CHECKPOINT = 323,
    CLASS = 324,
    CLOSE = 325,
    CLUSTER = 326,
    COALESCE = 327,
    COLLATE = 328,
    COLLATION = 329,
    COLUMN = 330,
    COLUMNS = 331,
    COMMENT = 332,
    COMMENTS = 333,
    COMMIT = 334,
    COMMITTED = 335,
    CONCURRENTLY = 336,
    CONFIGURATION = 337,
    CONFLICT = 338,
    CONNECTION = 339,
    CONSTRAINT = 340,
    CONSTRAINTS = 341,
    CONTENT_P = 342,
    CONTINUE_P = 343,
    CONVERSION_P = 344,
    COPY = 345,
    COST = 346,
    CREATE_P = 347,
    CROSS = 348,
    CSV = 349,
    CUBE = 350,
    CURRENT_P = 351,
    CURRENT_CATALOG = 352,
    CURRENT_DATE = 353,
    CURRENT_ROLE = 354,
    CURRENT_SCHEMA = 355,
    CURRENT_TIME = 356,
    CURRENT_TIMESTAMP = 357,
    CURRENT_USER = 358,
    CURSOR = 359,
    CYCLE = 360,
    DATA_P = 361,
    DATABASE = 362,
    DAY_P = 363,
    DAYS_P = 364,
    DEALLOCATE = 365,
    DEC = 366,
    DECIMAL_P = 367,
    DECLARE = 368,
    DEFAULT = 369,
    DEFAULTS = 370,
    DEFERRABLE = 371,
    DEFERRED = 372,
    DEFINER = 373,
    DELETE_P = 374,
    DELIMITER = 375,
    DELIMITERS = 376,
    DEPENDS = 377,
    DESC_P = 378,
    DESCRIBE = 379,
    DETACH = 380,
    DICTIONARY = 381,
    DISABLE_P = 382,
    DISCARD = 383,
    DISTINCT = 384,
    DO = 385,
    DOCUMENT_P = 386,
    DOMAIN_P = 387,
    DOUBLE_P = 388,
    DROP = 389,
    EACH = 390,
    ELSE = 391,
    ENABLE_P = 392,
    ENCODING = 393,
    ENCRYPTED = 394,
    END_P = 395,
    ENUM_P = 396,
    ESCAPE = 397,
    EVENT = 398,
    EXCEPT = 399,
    EXCLUDE = 400,
    EXCLUDING = 401,
    EXCLUSIVE = 402,
    EXECUTE = 403,
    EXISTS = 404,
    EXPLAIN = 405,
    EXPORT_P = 406,
    EXTENSION = 407,
    EXTERNAL = 408,
    EXTRACT = 409,
    FALSE_P = 410,
    FAMILY = 411,
    FETCH = 412,
    FILTER = 413,
    FIRST_P = 414,
    FLOAT_P = 415,
    FOLLOWING = 416,
    FOR = 417,
    FORCE = 418,
    FOREIGN = 419,
    FORWARD = 420,
    FREEZE = 421,
    FROM = 422,
    FULL = 423,
    FUNCTION = 424,
    FUNCTIONS = 425,
    GENERATED = 426,
    GLOB = 427,
    GLOBAL = 428,
    GRANT = 429,
    GRANTED = 430,
    GROUP_P = 431,
    GROUPING = 432,
    HANDLER = 433,
    HAVING = 434,
    HEADER_P = 435,
    HOLD = 436,
    HOUR_P = 437,
    HOURS_P = 438,
    IDENTITY_P = 439,
    IF_P = 440,
    ILIKE = 441,
    IMMEDIATE = 442,
    IMMUTABLE = 443,
    IMPLICIT_P = 444,
    IMPORT_P = 445,
    IN_P = 446,
    INCLUDING = 447,
    INCREMENT = 448,
    INDEX = 449,
    INDEXES = 450,
    INHERIT = 451,
    INHERITS = 452,
    INITIALLY = 453,
    INLINE_P = 454,
    INNER_P = 455,
    INOUT = 456,
    INPUT_P = 457,
    INSENSITIVE = 458,
    INSERT = 459,
    INSTEAD = 460,
    INT_P = 461,
    INTEGER = 462,
    INTERSECT = 463,
    INTERVAL = 464,
    INTO = 465,
    INVOKER = 466,
    IS = 467,
    ISNULL = 468,
    ISOLATION = 469,
    JOIN = 470,
    KEY = 471,
    LABEL = 472,
    LANGUAGE = 473,
    LARGE_P = 474,
    LAST_P = 475,
    LATERAL_P = 476,
    LEADING = 477,
    LEAKPROOF = 478,
    LEFT = 479,
    LEVEL = 480,
    LIKE = 481,
    LIMIT = 482,
    LISTEN = 483,
    LOAD = 484,
    LOCAL = 485,
    LOCALTIME = 486,
    LOCALTIMESTAMP = 487,
    LOCATION = 488,
    LOCK_P = 489,
    LOCKED = 490,
    LOGGED = 491,
    MACRO = 492,
    MAP = 493,
    MAPPING = 494,
    MATCH = 495,
    MATERIALIZED = 496,
    MAXVALUE = 497,
    METHOD = 498,
    MICROSECOND_P = 499,
    MICROSECONDS_P = 500,
    MILLISECOND_P = 501,
    MILLISECONDS_P = 502,
    MINUTE_P = 503,
    MINUTES_P = 504,
    MINVALUE = 505,
    MODE = 506,
    MONTH_P = 507,
    MONTHS_P = 508,
    MOVE = 509,
    NAME_P = 510,
    NAMES = 511,
    NATIONAL = 512,
    NATURAL = 513,
    NCHAR = 514,
    NEW = 515,
    NEXT = 516,
    NO = 517,
    NONE = 518,
    NOT = 519,
    NOTHING = 520,
    NOTIFY = 521,
    NOTNULL = 522,
    NOWAIT = 523,
    NULL_P = 524,
    NULLIF = 525,
    NULLS_P = 526,
    NUMERIC = 527,
    OBJECT_P = 528,
    OF = 529,
    OFF = 530,
    OFFSET = 531,
    OIDS = 532,
    OLD = 533,
    ON = 534,
    ONLY = 535,
    OPERATOR = 536,
    OPTION = 537,
    OPTIONS = 538,
    OR = 539,
    ORDER = 540,
    ORDINALITY = 541,
    OUT_P = 542,
    OUTER_P = 543,
    OVER = 544,
    OVERLAPS = 545,
    OVERLAY = 546,
    OVERRIDING = 547,
    OWNED = 548,
    OWNER = 549,
    PARALLEL = 550,
    PARSER = 551,
    PARTIAL = 552,
    PARTITION = 553,
    PASSING = 554,
    PASSWORD = 555,
    PERCENT = 556,
    PLACING = 557,
    PLANS = 558,
    POLICY = 559,
    POSITION = 560,
    PRAGMA_P = 561,
    PRECEDING = 562,
    PRECISION = 563,
    PREPARE = 564,
    PREPARED = 565,
    PRESERVE = 566,
    PRIMARY = 567,
    PRIOR = 568,
    PRIVILEGES = 569,
    PROCEDURAL = 570,
    PROCEDURE = 571,
    PROGRAM = 572,
    PUBLICATION = 573,
    QUOTE = 574,
    RANGE = 575,
    READ_P = 576,
    REAL = 577,
    REASSIGN = 578,
    RECHECK = 579,
    RECURSIVE = 580,
    REF = 581,
    REFERENCES = 582,
    REFERENCING = 583,
    REFRESH = 584,
    REINDEX = 585,
    RELATIVE_P = 586,
    RELEASE = 587,
    RENAME = 588,
    REPEATABLE = 589,
    REPLACE = 590,
    REPLICA = 591,
    RESET = 592,
    RESTART = 593,
    RESTRICT = 594,
    RETURNING = 595,
    RETURNS = 596,
    REVOKE = 597,
    RIGHT = 598,
    ROLE = 599,
    ROLLBACK = 600,
    ROLLUP = 601,
    ROW = 602,
    ROWS = 603,
    RULE = 604,
    SAMPLE = 605,
    SAVEPOINT = 606,
    SCHEMA = 607,
    SCHEMAS = 608,
    SCROLL = 609,
    SEARCH = 610,
    SECOND_P = 611,
    SECONDS_P = 612,
    SECURITY = 613,
    SELECT = 614,
    SEQUENCE = 615,
    SEQUENCES = 616,
    SERIALIZABLE = 617,
    SERVER = 618,
    SESSION = 619,
    SESSION_USER = 620,
    SET = 621,
    SETOF = 622,
    SETS = 623,
    SHARE = 624,
    SHOW = 625,
    SIMILAR = 626,
    SIMPLE = 627,
    SKIP = 628,
    SMALLINT = 629,
    SNAPSHOT = 630,
    SOME = 631,
    SQL_P = 632,
    STABLE = 633,
    STANDALONE_P = 634,
    START = 635,
    STATEMENT = 636,
    STATISTICS = 637,
    STDIN = 638,
    STDOUT = 639,
    STORAGE = 640,
    STRICT_P = 641,
    STRIP_P = 642,
    STRUCT = 643,
    SUBSCRIPTION = 644,
    SUBSTRING = 645,
    SUMMARIZE = 646,
    SYMMETRIC = 647,
    SYSID = 648,
    SYSTEM_P = 649,
    TABLE = 650,
    TABLES = 651,
    TABLESAMPLE = 652,
    TABLESPACE = 653,
    TEMP = 654,
    TEMPLATE = 655,
    TEMPORARY = 656,
    TEXT_P = 657,
    THEN = 658,
    TIME = 659,
    TIMESTAMP = 660,
    TO = 661,
    TRAILING = 662,
    TRANSACTION = 663,
    TRANSFORM = 664,
    TREAT = 665,
    TRIGGER = 666,
    TRIM = 667,
    TRUE_P = 668,
    TRUNCATE = 669,
    TRUSTED = 670,
    TRY_CAST = 671,
    TYPE_P = 672,
    TYPES_P = 673,
    UNBOUNDED = 674,
    UNCOMMITTED = 675,
    UNENCRYPTED = 676,
    UNION = 677,
    UNIQUE = 678,
    UNKNOWN = 679,
    UNLISTEN = 680,
    UNLOGGED = 681,
    UNTIL = 682,
    UPDATE = 683,
    USER = 684,
    USING = 685,
    VACUUM = 686,
    VALID = 687,
    VALIDATE = 688,
    VALIDATOR = 689,
    VALUE_P = 690,
    VALUES = 691,
    VARCHAR = 692,
    VARIADIC = 693,
    VARYING = 694,
    VERBOSE = 695,
    VERSION_P = 696,
    VIEW = 697,
    VIEWS = 698,
    VOLATILE = 699,
    WHEN = 700,
    WHERE = 701,
    WHITESPACE_P = 702,
    WINDOW = 703,
    WITH = 704,
    WITHIN = 705,
    WITHOUT = 706,
    WORK = 707,
    WRAPPER = 708,
    WRITE_P = 709,
    XML_P = 710,
    XMLATTRIBUTES = 711,
    XMLCONCAT = 712,
    XMLELEMENT = 713,
    XMLEXISTS = 714,
    XMLFOREST = 715,
    XMLNAMESPACES = 716,
    XMLPARSE = 717,
    XMLPI = 718,
    XMLROOT = 719,
    XMLSERIALIZE = 720,
    XMLTABLE = 721,
    YEAR_P = 722,
    YEARS_P = 723,
    YES_P = 724,
    ZONE = 725,
    NOT_LA = 726,
    NULLS_LA = 727,
    WITH_LA = 728,
    POSTFIXOP = 729,
    UMINUS = 730
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 14 "third_party/libpg_query/grammar/grammar.y"

	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;

#line 811 "third_party/libpg_query/grammar/grammar_out.cpp"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int base_yyparse (core_yyscan_t yyscanner);

#endif /* !YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED  */



#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))

/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  584
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   49693

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  497
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  369
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1755
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  2874

#define YYUNDEFTOK  2
#define YYMAXUTOK   730


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   494,     2,   482,     2,     2,
     487,   488,   480,   478,   491,   479,   489,   481,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   496,   490,
     474,   476,   475,   495,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   485,     2,   486,   483,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   492,     2,   493,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   477,
     484
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   459,   459,   475,   487,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   530,     7,
      20,     8,    22,    36,    48,    56,    70,    71,    72,    73,
      74,    87,    88,    93,    94,    98,    99,     6,    15,    25,
      35,    45,    55,    65,    75,    85,    95,   106,   117,   127,
     140,   141,     9,    17,    29,    30,    34,    35,    36,    41,
      42,    43,    48,    52,    56,    60,    64,    68,    72,    76,
      80,    84,    88,    92,    97,   101,   105,   112,   113,   117,
     118,   119,     8,    21,    27,    34,    40,    47,    57,    61,
      70,    79,    88,    95,    96,   101,   113,   118,   143,   153,
     163,   169,   180,   191,   206,   207,   213,   214,   219,   220,
     226,   227,   231,   232,   237,   239,   245,   246,   250,   251,
     256,     8,    33,    62,    66,    67,    72,    73,    78,    79,
      83,    84,    89,    90,     7,    16,    34,    41,    46,    47,
      48,    49,     7,    18,    19,    23,    24,    25,    26,     9,
      19,    32,    33,     9,    16,    26,    33,    44,    45,    50,
      51,    52,    57,    58,    59,    60,    61,    65,    66,    67,
      72,    73,    78,    82,    90,    91,    96,    97,    98,   104,
     109,   117,   118,     7,    14,    31,    51,    52,     2,     9,
      15,    21,    28,    35,    45,    46,    47,    10,    16,    22,
      28,    38,    39,    47,    58,    70,    78,    86,    93,   103,
     105,   111,   115,   119,   134,   141,   142,   143,   147,   148,
       9,    18,    27,    36,    45,    54,    63,    72,    85,    87,
      93,    94,    99,   103,   107,   118,   126,   130,   139,   148,
     157,   166,   175,   184,   192,   200,   209,   218,   227,   236,
     253,   262,   271,   280,   290,   303,   318,   327,   335,   350,
     358,   368,   378,   385,   392,   400,   407,   418,   419,   424,
     428,   433,   438,   446,   447,   452,   456,   457,   458,     7,
      13,    19,    25,     9,    19,    29,    39,    49,    59,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    92,    93,    94,    95,    96,    97,
      98,   103,   104,   109,   110,   111,   116,   117,   118,     7,
      16,    47,    48,    52,    53,    68,    69,    76,    84,    92,
     100,   108,   116,   127,   128,   155,   170,   186,   187,   206,
     210,   214,   231,   238,   245,   255,   256,   259,   271,   282,
     290,   295,   300,   305,   310,   318,   326,   331,   336,   343,
     344,   348,   349,   350,   357,   358,   362,   363,   367,   368,
     372,   376,   377,   380,   389,   400,   401,   402,   405,   406,
     407,   411,   412,   413,   414,   418,   419,   423,   425,   441,
     443,   448,   451,   459,   463,   467,   471,   475,   479,   486,
     491,   498,   499,   503,   507,   511,   515,   522,   529,   530,
     535,   536,   540,   541,   549,   569,   570,   572,   577,   578,
     582,   583,   586,   587,   612,   613,   617,   618,   622,   623,
     627,   640,   641,   645,   646,   650,   651,   655,   656,   660,
     671,   672,   673,   674,   678,   679,   684,   685,   686,   695,
     701,   719,   720,   724,   725,   731,   737,   745,   753,   762,
     771,   775,   801,   805,   818,   832,   847,   859,   875,   881,
     886,   892,   899,   900,   908,   912,   916,   922,   929,   934,
     935,   936,   937,   941,   942,   954,   955,   960,   967,   974,
     981,  1013,  1024,  1037,  1042,  1043,  1046,  1047,  1050,  1051,
    1056,  1057,  1062,  1066,  1072,  1093,  1101,  1114,  1117,  1121,
    1121,  1123,  1128,  1135,  1140,  1146,  1151,  1157,  1163,  1172,
    1174,  1177,  1181,  1182,  1183,  1184,  1185,  1186,  1191,  1211,
    1212,  1213,  1214,  1225,  1239,  1240,  1246,  1251,  1256,  1261,
    1266,  1271,  1276,  1281,  1287,  1293,  1299,  1306,  1328,  1337,
    1341,  1349,  1353,  1361,  1373,  1394,  1398,  1404,  1408,  1421,
    1429,  1439,  1441,  1443,  1445,  1447,  1449,  1454,  1455,  1462,
    1471,  1479,  1488,  1499,  1507,  1508,  1509,  1513,  1513,  1516,
    1516,  1519,  1519,  1522,  1522,  1525,  1525,  1528,  1528,  1531,
    1531,  1534,  1534,  1537,  1539,  1541,  1543,  1545,  1547,  1549,
    1551,  1553,  1558,  1563,  1569,  1576,  1581,  1587,  1593,  1624,
    1626,  1628,  1636,  1651,  1653,  1655,  1657,  1659,  1661,  1663,
    1665,  1667,  1669,  1671,  1673,  1675,  1677,  1680,  1682,  1684,
    1687,  1689,  1691,  1693,  1696,  1701,  1706,  1713,  1718,  1725,
    1730,  1738,  1743,  1752,  1760,  1768,  1776,  1794,  1802,  1810,
    1818,  1826,  1834,  1838,  1842,  1846,  1854,  1862,  1878,  1886,
    1894,  1902,  1910,  1918,  1926,  1930,  1934,  1938,  1942,  1950,
    1958,  1966,  1974,  1994,  2016,  2027,  2034,  2048,  2064,  2066,
    2068,  2070,  2072,  2074,  2076,  2078,  2080,  2082,  2084,  2086,
    2088,  2090,  2092,  2094,  2096,  2098,  2100,  2102,  2106,  2110,
    2114,  2128,  2129,  2130,  2137,  2149,  2164,  2176,  2178,  2190,
    2201,  2225,  2238,  2242,  2248,  2255,  2262,  2272,  2279,  2307,
    2342,  2353,  2354,  2361,  2367,  2371,  2375,  2379,  2383,  2387,
    2391,  2395,  2399,  2403,  2407,  2411,  2415,  2419,  2423,  2427,
    2429,  2431,  2435,  2444,  2449,  2456,  2471,  2478,  2482,  2486,
    2490,  2494,  2508,  2509,  2513,  2514,  2522,  2523,  2527,  2528,
    2533,  2541,  2543,  2557,  2560,  2587,  2588,  2591,  2592,  2603,
    2609,  2616,  2625,  2642,  2687,  2695,  2703,  2711,  2719,  2740,
    2741,  2744,  2745,  2749,  2759,  2760,  2762,  2763,  2764,  2767,
    2768,  2771,  2772,  2773,  2774,  2775,  2776,  2777,  2778,  2779,
    2780,  2781,  2782,  2785,  2787,  2792,  2794,  2799,  2801,  2803,
    2805,  2807,  2809,  2811,  2813,  2827,  2829,  2833,  2837,  2844,
    2849,  2856,  2860,  2866,  2870,  2879,  2890,  2891,  2895,  2899,
    2906,  2907,  2908,  2909,  2910,  2911,  2912,  2913,  2914,  2915,
    2925,  2929,  2936,  2943,  2944,  2960,  2964,  2969,  2973,  2988,
    2993,  2997,  3000,  3003,  3004,  3005,  3008,  3015,  3025,  3039,
    3040,  3044,  3055,  3056,  3059,  3060,  3063,  3067,  3074,  3078,
    3082,  3090,  3101,  3102,  3106,  3107,  3111,  3112,  3115,  3116,
    3126,  3127,  3131,  3132,  3135,  3151,  3159,  3167,  3189,  3190,
    3201,  3205,  3232,  3234,  3239,  3241,  3251,  3254,  3265,  3269,
    3273,  3285,  3289,  3298,  3305,  3337,  3341,  3345,  3349,  3353,
    3357,  3361,  3367,  3368,  3384,  3385,  3386,  3389,  3390,  3396,
    3397,  3398,  3401,  3402,  3403,  3406,  3407,  3408,  3411,  3412,
    3415,  3417,  3422,  3423,  3426,  3434,  3435,  3436,  3437,  3440,
    3441,     8,    21,    34,    52,    74,    75,    76,    77,    11,
      24,    41,    42,    43,    48,     7,    14,    22,     7,    21,
      41,    42,    69,    70,    71,    72,    73,    74,    78,    79,
      84,    89,    90,    91,    92,    93,    98,   105,   106,   107,
     124,   131,   138,   148,   158,   170,   179,   188,   207,   214,
     219,   221,   223,   225,   228,   233,   234,   238,   239,   240,
     241,   246,   250,   251,   256,   263,   268,   269,   270,   271,
     272,   273,   274,   275,   281,   282,   286,   291,   298,   305,
     312,   324,   325,   326,   327,   331,   336,   337,   338,   343,
     348,   349,   350,   351,   352,   353,   358,   381,   385,   392,
     393,   397,   401,   402,   403,   407,   411,   419,   420,   425,
     426,   430,   438,   439,   444,   445,   449,   454,   458,   462,
     467,   475,   476,   480,   481,   487,   498,   511,   525,   539,
     553,   567,   590,   594,   601,   605,   613,   618,   625,   635,
     636,   637,   638,   639,   646,   653,   654,   659,   660,     7,
      16,    25,    34,    43,    52,     7,     9,    19,     3,    10,
      17,    24,    31,    38,    45,    55,    55,    57,    58,     6,
       1,    30,    53,    54,    59,    63,    68,    72,    80,    81,
      85,    86,    91,    92,    96,    97,   102,   103,   104,   105,
     106,   111,   119,   123,   128,   129,   134,   138,   143,   147,
     151,   155,   159,   163,   167,   171,   175,   179,   183,   187,
     191,   195,   203,   209,   210,   211,   216,   220,     5,    11,
       2,     7,    14,    24,    25,    32,     7,    18,    19,    23,
      27,     7,    21,    25,    32,    43,    44,    50,    51,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
      55,    55,    55,    55,    55,    55,    55,    55,    55,    56,
      56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
      56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
      56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
      56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
      56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
      57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
      57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
      57,    57,    57,    57,    57,    57,    58,    58,    58,    58,
      58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
      58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
      58,    59,    59,    59,    59,    59,    59,    59,    59,    59,
      59,    59,    59,    59,    59,    59,    59,    59,    59,    59,
      59,    59,    59,    59,    59,    59,    59,    59,    59,    59,
      59,    59,    59,    59,    59,    59,    59,    59,    59,    59,
      59,    59,    59,    59,    59,    59,    59,    59,    59,    59,
      59,    59,    60,    60,    60,    60,    60,    60,    60,    60,
      60,    60,    60,    60,    60,    60,    60,    60,    60,    60,
      60,    60,    60,    60,    60,    60,    60,    60,    60,    61,
      61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
      61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
      61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
      61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
      61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
      61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
      61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
      61,    61,    61,    61,    61,    61
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
  "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
  "EQUALS_GREATER", "LAMBDA_ARROW", "LESS_EQUALS", "GREATER_EQUALS",
  "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P",
  "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS",
  "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P", "ASSERTION",
  "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION",
  "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT",
  "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE",
  "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY", "CONFIGURATION",
  "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
  "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
  "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE",
  "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXTENSION", "EXTERNAL", "EXTRACT",
  "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "HANDLER", "HAVING", "HEADER_P",
  "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P", "ILIKE", "IMMEDIATE",
  "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT",
  "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
  "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTEAD",
  "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS",
  "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
  "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
  "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP",
  "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING",
  "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P",
  "MICROSECONDS_P", "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P",
  "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P",
  "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE",
  "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF",
  "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD",
  "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER",
  "ORDINALITY", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY",
  "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", "PARTIAL",
  "PARTITION", "PASSING", "PASSWORD", "PERCENT", "PLACING", "PLANS",
  "POLICY", "POSITION", "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE",
  "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL",
  "PROCEDURE", "PROGRAM", "PUBLICATION", "QUOTE", "RANGE", "READ_P",
  "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCES",
  "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P", "RELEASE", "RENAME",
  "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT",
  "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP",
  "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS",
  "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION",
  "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR",
  "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNTIL", "UPDATE", "USER", "USING", "VACUUM", "VALID", "VALIDATE",
  "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR", "VARIADIC", "VARYING",
  "VERBOSE", "VERSION_P", "VIEW", "VIEWS", "VOLATILE", "WHEN", "WHERE",
  "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER",
  "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT",
  "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI",
  "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P",
  "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'{'", "'}'", "'#'", "'?'",
  "':'", "$accept", "stmtblock", "stmtmulti", "stmt", "ExportStmt",
  "ImportStmt", "VacuumStmt", "vacuum_option_elem", "opt_full",
  "vacuum_option_list", "opt_freeze", "RenameStmt", "opt_column",
  "AlterSeqStmt", "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem",
  "opt_by", "SignedIconst", "InsertStmt", "insert_rest", "insert_target",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_on_conflict", "index_elem", "returning_clause", "override_kind",
  "set_target_list", "opt_collate", "opt_class", "insert_column_list",
  "set_clause_list", "index_params", "set_target", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "PrepareStmt", "prep_type_clause",
  "PreparableStmt", "CreateSeqStmt", "OptSeqOptList", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExecuteStmt", "execute_param_clause",
  "TransactionStmt", "opt_transaction", "VariableSetStmt", "set_rest",
  "generic_set", "var_value", "zone_value", "var_list", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "DeallocateStmt", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "LoadStmt", "file_name", "SelectStmt", "select_with_parens",
  "select_no_parens", "select_clause", "simple_select", "with_clause",
  "cte_list", "common_table_expr", "into_clause", "OptTempTableName",
  "opt_table", "all_or_distinct", "distinct_clause", "opt_all_clause",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_item", "empty_grouping_set", "having_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "from_clause", "from_list",
  "table_ref", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "Typename", "opt_array_bounds",
  "SimpleTypename", "ConstTypename", "GenericType", "opt_type_modifiers",
  "Numeric", "opt_float", "Bit", "ConstBit", "BitWithLength",
  "BitWithoutLength", "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
  "b_expr", "c_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "within_group_clause", "filter_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "sub_type", "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "expr_list", "opt_expr_list", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "indirection_el", "opt_slice_bound", "indirection",
  "opt_indirection", "opt_asymmetric", "opt_target_list", "target_list",
  "target_el", "qualified_name_list", "qualified_name", "name_list",
  "name", "attr_name", "func_name", "AexprConst", "Iconst", "Sconst",
  "ColId", "ColIdOrString", "type_function_name", "function_name_token",
  "type_name_token", "any_name", "attrs", "opt_name_list", "param_name",
  "ColLabel", "ColLabelOrString", "ViewStmt", "opt_check_option",
  "CreateAsStmt", "opt_with_data", "create_as_target", "PragmaStmt",
  "CreateStmt", "ConstraintAttributeSpec", "def_arg",
  "OptParenthesizedSeqOptList", "generic_option_arg", "key_action",
  "ColConstraint", "ColConstraintElem", "generic_option_elem",
  "key_update", "key_actions", "create_generic_options", "OnCommitOption",
  "reloptions", "opt_no_inherit", "TableConstraint", "TableLikeOption",
  "reloption_list", "ExistingIndex", "ConstraintAttr", "OptWith",
  "definition", "TableLikeOptionList", "generic_option_name",
  "ConstraintAttributeElem", "columnDef", "generic_option_list",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "func_type",
  "ConstraintElem", "TableElementList", "key_match", "TableLikeClause",
  "OptTemp", "generated_when", "AlterObjectSchemaStmt", "UpdateStmt",
  "AnalyzeStmt", "VariableShowStmt", "show_or_describe", "var_name",
  "CallStmt", "CopyStmt", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CheckPointStmt", "VariableResetStmt",
  "generic_reset", "reset_rest", "CreateFunctionStmt", "macro_alias",
  "param_list", "DeleteStmt", "relation_expr_opt_alias",
  "where_or_current_clause", "using_clause", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,    60,    62,    61,   729,    43,    45,
      42,    47,    37,    94,   730,    91,    93,    40,    41,    46,
      59,    44,   123,   125,    35,    63,    58
};
# endif

#define YYPACT_NINF (-2481)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1679)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    4546,  -123,   595, -2481, -2481,  -123, 30658, -2481,  -123,    45,
    2147, 35338, -2481, 49251,  -123, 41422,   975,   200,   302,   326,
     460, 41422, 41422, 35806,  -123,   217, 41890, -2481,  -123, 21111,
   32998,   -17,    61, 42358, 41422,  1164,   562,   136, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481,    22, -2481, -2481, -2481, -2481,
   -2481,   268, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
     117, -2481,   560,   140,  -118,   192, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, 20642, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, 36274, 41422, 36742, 33466, 37210, -2481,
     145, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481,   151, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,   152, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481,   232,   209, -2481,
     164, -2481, -2481, -2481, -2481,  1164, 37678, -2481,   452,   520,
   -2481,   393, 42826, -2481, -2481, -2481, -2481,   550,   -80, 37678,
   -2481, -2481, -2481, 38146, -2481, -2481, -2481, -2481,   517, -2481,
   -2481,   409, -2481,    59, -2481, -2481, -2481,   398, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481,   505, -2481, -2481, 43294,
   43762, 44230, -2481,   388,    19,    54, 20173, -2481, -2481,   268,
   -2481, -2481, -2481, -2481,   460, -2481,   460, -2481, -2481, -2481,
    -127,   421, -2481,   483,   716, -2481,   473, -2481, -2481, -2481,
   -2481,   696,  8514,  8514, 44698, 44698,   460, 44698,   540, -2481,
   -2481,    -3, -2481,    61, -2481,  -118,   473, -2481, 21580, -2481,
     537,   209, -2481, -2481,   234,   872, 11472, 41422,   557, -2481,
     574,   557,   590,   600, -2481,  4546,   935,   909, 32998, -2481,
   37678,   219,   219,  1072,   219,   628,   732, -2481,  1793, -2481,
     645, -2481,   668,   929, -2481,   473,  1001,   887,   828,  1039,
    3042,  1043,  1022,  1049,  1199,  6542, 11472, 25255, -2481,   209,
   -2481,   727, -2481, -2481, -2481,   738, -2481, -2481, -2481, -2481,
      19,   988, -2481,  1167,   834, 38614, 39082, 37678,   803, -2481,
   -2481, -2481, -2481,   847, -2481, -2481,   165,  1122,    39,   835,
   -2481,  1213,   124, -2481,  1215,  1087, 11472, -2481,   976, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,    61,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481,  -213, -2481, -2481, 27127, -2481, -2481,    54,
     886, -2481, 27127, 11965, 47506,  1339, -2481,  1154, 41422,   908,
   -2481, -2481, -2481, -2481, -2481, -2481,   915,  1407,    85,  1409,
   11472,   936,    85,    85,   940,  1277, -2481, -2481, -2481,   168,
     957,   964, -2481,   169,   169, -2481,  1155,   998,  1006, -2481,
     172,  1490,  1492,   100,  1019,  1031,   978,    85, 11472, -2481,
    1035,   169,  1037,  1061,  1069,  1553,  1073, -2481,  1561,  1083,
      80,   109,  1095,  1098, -2481,  1107, -2481,   173, 11472, 11472,
   11472, -2481, 11472,  7528, 37678,  1578, -2481,   209,   460, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481,  1114, -2481,   144,  4797,
   -2481,  1160, -2481, -2481, -2481,   139, 11472, -2481,  1597,   -47,
   -2481,   174, -2481, -2481, -2481,   209,  1404,  1124, -2481, -2481,
   -2481, -2481,   197,  1520, 26191, 26659, 37678, -2481, -2481,   209,
   -2481, -2481, -2481, -2481, -2481,   404, -2481, -2481,   268, 28274,
     424,   557, 41422, 41422,  1583, -2481, -2481, -2481, 32998, 37678,
   45166,  1257,   574, -2481, -2481,  -118,  -118, 11472,  -118,   112,
     784,  9007, 12458,  1462,  1349,    94,    81,  1464, -2481,  1353,
     628,   732, 11472, -2481,  1403, 37678, 31126,   279,   470,  1144,
    1224,  1146,   -21,  1555, -2481,  1151, -2481,  1237, 37678, 48880,
     186, -2481,  1596,   186,   186,   184,  1605,  1254,   254,  1410,
     -50,   102,  1622, -2481,  1151, 32998,    50,     6,  1151, 37678,
    1261,   355,  1151,    98, 11965,  1041,  1056,   255,  1309,  1330,
     105, 11965,  1343,  1380,  1421,  1466,  1488,  1491,  1495,  1500,
    1503,  1507,   115,  1514,  1516,  1521,  1524,  1526,  1532,   119,
    1537,    87, 11965,  1539,  1181, -2481, 28274,   -61, -2481, -2481,
    1541,   147, -2481, 24786,  1174, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481,  1270, 41422,  1231,   -90,  1530,  1589, -2481, 45634, 37678,
    1418,  1622,  1419,  1200,  1650,   738,  9500,  1654, -2481, -2481,
   -2481, -2481, -2481, 41422, -2481, -2481, 41422, -2481, 29254,  1204,
   41422, 41422, -2481, 41422, 41422,   527, 39550,    54, 33934, -2481,
   -2481, -2481, -2481,   873,   974, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, 29254, -2481,  2253, -2481, -2481, -2481,
    1201,   544, -2481, -2481, -2481, -2481,  1259, -2481,  1259,  1259,
   -2481, -2481, -2481, -2481,  1212,  1212,  1214, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
    1216,   978, -2481,  1259, -2481,  1212, -2481, -2481, -2481, -2481,
   -2481, 48880, -2481, -2481, -2481, -2481,   362,   427, -2481, -2481,
   -2481,  1217, -2481,  1665, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481,  2884,   559,  1212, -2481, -2481,  1164, -2481,
   -2481, 11472,   209, 11472, -2481,  1219, 28274,  1267, 11472, -2481,
   -2481, 11472,  1232,  1712,  1712, 11472, -2481, -2481, -2481, -2481,
    2727,  1712, -2481,  1712,  1712,  1259,  1259, -2481, 28321, 11472,
   -2481, 23928, 11472, 15416,  9993, 11472,  1319,  1325,  1712, -2481,
    1712, -2481, 11472,  8021, 11472, 28321,  1719,  1719,  1241,  1247,
    2004,  5124,  1243, -2481,   502, -2481,  1240, -2481,   209,   209,
   -2481,  1712, 11472,  3702,  3702, -2481,   153, 47506, 11472, 11472,
   11472, 11472, 28786,  1336,   107, 41422, 11472, 11472,  1255,   703,
   -2481, 11472,  1472, -2481,  1256, 11472,  1338,   256, 11472, 11472,
   11472, 11472, 11472, 11472, 11472, 11472, 11472, -2481, -2481, 16881,
     162,  1569,  1590,   209, 11472,   -44,   324, 11472, 34402,  8514,
    1582,  6542, -2481,   209,   101,  1582, -2481, -2481, -2481, -2481,
   -2481,   176, -2481, -2481, -2481,  1201, -2481,  1201,  1263, 37678,
     234, 32530, -2481, 11472, -2481,   568,  1268,  1326,   414,  1721,
   41422, -2481, 22518, -2481,  1550, -2481,  1272, -2481, 27591,  1550,
   -2481, -2481, 15895,  1390,  1554,  1494, -2481, -2481, -2481,  1280,
   28274, 12951, 12951, -2481,  1143, 28274,  1221, -2481, -2481, -2481,
   -2481, -2481, -2481,   576, -2481, 37678,   -28,  1462,    81,   580,
   -2481,  1381,  1285, 46102, 41422,  1559,  1513,  1562,  -171, 47506,
   -2481, -2481, -2481, -2481, 41422, 41422, 46570, 47038, 29722, 41422,
   29254, -2481, -2481, -2481, -2481, 41422,  1100, 41422,  3489, -2481,
   -2481, -2481,   186, -2481, -2481, -2481, -2481, -2481, 41422, 41422,
   -2481, -2481,   186, 41422, 41422,   186, -2481,  1413, 41422, 41422,
   41422, 41422,  1454, 41422, 41422,   -60,   -60,  1499, -2481, 10486,
    1297, -2481, 11472, 11472, -2481, 11472,  1471, -2481, -2481,   605,
    1512,    53,  1348, 37678, 41422,   800, -2481, -2481, -2481, -2481,
   -2481,  1528,  1515, -2481, -2481,  1308,  1647,  1622, -2481,  1648,
   31594,   720,   838,  1352, -2481,   613, 11472,    39, -2481, -2481,
   29254,   124, -2481,  1519,   130, -2481,  1535,   738,  1764, -2481,
   -2481, -2481, -2481, -2481, -2481, 19704, -2481,   619, -2481, -2481,
    1766,   460,  1766,   583, -2481, -2481,  1766, -2481,  1766, -2481,
   27127, -2481, 11965, 47506,  1768, 41422,  1320,  1321, -2481, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481,  1712,  1398, -2481,  1401,  1402,  1405,
   -2481, -2481, -2481, -2481, -2481, 47506, -2481, -2481,   620, -2481,
    1323, 11472, 11472,    26, -2481, 27655,   621, 11472,  1322,  1324,
     627, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
    1328,  1646, -2481,  1333,  1334,  1335, -2481, -2481,  4270, -2481,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481,  1337,  1340, 27775,  1342, 15416, 15416,  7528,
     276, -2481, 15416,  1344, -2481, -2481,   649, 27609,  1241,  1345,
    1361,  1364,  1347,  1355, 27927, 10979, 11472, 10979, 10979, 27956,
    1241,  1356, 28002, -2481, -2481, 11472, 37678, -2481, 11472,  1357,
    5650, -2481, -2481, -2481,  2675,  2675,  2675, 28321, -2481, -2481,
   -2481,  1366, -2481, 15416, 15416, -2481,   950,  2276,  7528, -2481,
   -2481,  1670, -2481,   767, -2481,  1354, -2481, -2481,  3305, -2481,
   23928, 28303, 11472,   131, -2481, 11472,  1255, 11472,  1432,  2675,
    2675,  2675,   336,   336,    93,    93,    93,   299,   324, -2481,
   -2481, -2481,  1372,  1373,  1376,  1551, 28274,  1073, 11472, -2481,
   28274,   678,   785, 37678,  1877,  2936,  3441, -2481, -2481, -2481,
   18297,  1415,   -61,  1415,  1712,  3702, -2481,   574, -2481, -2481,
   -2481, 28274, -2481,  1164, 18297,  1422,  1429,   291, 21111,  1572,
   -2481, 41422, -2481, 41422, -2481,   -29,  1393, -2481, 11472, -2481,
   -2481,   684,  1399,  1593,  1594,   983,   983,  1143,  1599, -2481,
   -2481,  1442, -2481, 11472,  1227, -2481,  1230, -2481, -2481, -2481,
   -2481,  1385, -2481, -2481,  1645, -2481, -2481, -2481, -2481,  1475,
    1151, 11472,  1619, -2481,   103,  1406,  1737,  -170,  1694, 41422,
   -2481,  1607, -2481,   665,  1742,   130,  1745,   130, 29254, 29254,
   29254,   651, -2481, -2481, -2481,   460, -2481,   319,   656, -2481,
   -2481, -2481, -2481,  1489,   494,  1622,  1151, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481,   133,   637,  1151,  1497, -2481,  1498,
   -2481,  1510,   661,  1151, -2481, -2481,  1408,  1433,  1435, 11965,
   -2481, -2481, 28274, 28274, 28274,  1411, -2481,   132, -2481, 41422,
   -2481, -2481, -2481,  1471, 37678,   738, -2481,   352,  1775, 37678,
   41422, 37678, 37678, 37678, 47506, -2481, -2481, -2481,  1440,  1426,
   -2481,   -65,  1652,  1651, 41422,  1482,  1146,  1897, -2481, 28274,
   -2481, -2481, -2481, 41422, -2481,  1786,  1164, -2481, 32062, -2481,
   -2481, -2481, -2481, 29254, -2481,   460, -2481,   460,  1669, 41422,
   25723,   460,   460, -2481,   664,  1455,  1321,   666, 47506,  1712,
      78,  1457,  1351,  1012,   466,  1250, -2481, -2481, -2481,   739,
   28159, 11472, -2481,  1802, 47506, -2481,  5703, -2481, -2481, -2481,
   -2481, 11472, -2481, -2481, -2481, 11472, -2481, 23928, 11472,  1776,
   -2481,  1936,  1936,  5124, 47506, 15416, 15416, 15416, 15416,   415,
    1037, 15416, 15416, 15416, 15416, 15416, 15416, 15416, 15416, 15416,
   16388,   188, -2481, -2481, 11472, 11472,  1787,  1776, -2481, -2481,
   -2481,   280,   280, 47506,  1460,  1241,  1463,  1473, 11472, -2481,
   47506,   209,  5887, -2481, 28274, -2481,  3702, 11472,  1286,  1374,
   11472,   741, 11472,  1785, -2481, -2481,  1478, -2481, -2481, 47506,
   11472,  1476,  3791, 15416, 15416,  4722, -2481,  5140, 11472,  7528,
   -2481,  1499,  1522, 22987, -2481,  1564,  1564,  1564,  1564, -2481,
   -2481, 37678, 37678, 37678, 18766,  1799, 17828, 40018,  1480,  1396,
   -2481, 40018, 40486, -2481,  1502, -2481,   209, 11472,  1791,  1484,
    1791,  1485, -2481, -2481,  1496,  1480, 11472,  1636, -2481, -2481,
   -2481,  1548, -2481,   747, -2481,  1902,  1636, -2481,   749, -2481,
   22518,  1422, 11472,   209, -2481,  1506, -2481,  1399,   123, -2481,
   -2481, -2481,  1709, -2481, -2481, -2481, 37678, -2481, 41422, 24404,
    1841, -2481, 41422, 41422, 41422, -2481, 41422,   766,   758,  1508,
   -2481,   758,  1823,    99,  1146,   254,  3259,   -33, -2481, -2481,
   -2481,  1579, 41422, -2481, 41422, -2481, -2481, -2481, -2481, -2481,
   29722, -2481, -2481, 23459, 29254, -2481, 29254, 41422, 41422, 41422,
   41422, 41422, 41422, 41422, 41422, 41422, 41422, -2481, -2481, -2481,
    1499, -2481, -2481, -2481, -2481,   102, -2481,   132,  1517,  1352,
    1589, 40954, 41422,  1567,   789,  1622,  1518,  1963, -2481,   720,
   31594, -2481, -2481, -2481,  1924, -2481,   388,   137, -2481, -2481,
    1164,   130, 37678, -2481,   798, -2481, -2481, -2481, -2481, 41422,
    1523, -2481,  1523, -2481, -2481, -2481,  1712, -2481, 41422, -2481,
    1525, -2481,  1527, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, 11472, 28274, -2481,  1529, -2481, 28274, 24422, -2481,
   28274,  1787, -2481,  1765,  1765,  1765,  1655,  1840,   190,  1531,
    1765,  1765,  1765,   243,   243,   111,   111,   111,  1936,   188,
   28274, 28274, -2481, -2481, -2481, -2481,  1534, -2481, -2481, -2481,
    1241,  1536, -2481, -2481,   253, 11472, 11472,   950, -2481,  5284,
   11472, 47506,   804,   950,   183, 11472,  2337,  2791, 11472, 11472,
    5950, 24440,  1538, 11472, 47959, -2481, -2481, 37678, 37678, 37678,
   37678, -2481, -2481, -2481, 40018, 40486,  1540, 17358,  1396,  1545,
   37678, -2481,  1612,  1542, 18297,  1797,  1727, -2481, 18297,  1727,
     829,  1727,  1804,  1612, 22049, -2481,  1612,  1549,  1739, -2481,
     539, 28274,  1969,  1856,   460,  1856,   460, -2481, 28274,  8514,
   -2481,  1164,  1148, 41422,   209,   -86, -2481,  1566, 41422, -2481,
    1636, 28274, 23928, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   41422,   808, -2481,   810,   758, -2481,  1588, -2481,   135,  1842,
      23, -2481, 29254,  2141,   691, -2481,  1855,  1774, -2481,   186,
   -2481, 11472,   691,  1778,   122, 41422, -2481, -2481,  2285, -2481,
   47506,   130,   130, -2481,  1556,  1560,  1563,  1568,  1570,  1573,
    1574,  1576,  1586,  1587,  1591,  1592,  1595,  1598,  1601,  1602,
    1603,  1216,  1606, -2481,  1608,  1506,  1611,  1618,  1620, 48427,
    1621,  1624,  1625,  1626,  1628,   873,   974, -2481, -2481, -2481,
   -2481,   835, -2481, -2481,  1629, -2481,  1575, -2481, -2481, -2481,
    1644, -2481,  1666, -2481, -2481, -2481, -2481, -2481,  1600,   886,
      38, 41422,  2022,  1807,  1614,  1782, 41422,  1633,  1352, -2481,
   31594,  1108,   163,  1651, -2481,   225,  1482, -2481,  1971,  1630,
   -2481,  2046, -2481, 32062,  1523,  1321,  1635,  1321, 47506, -2481,
   -2481, 28274, -2481, -2481, -2481, 15416,  1916,  1637, 47506, -2481,
   -2481,   950,   950,  5284,   818, -2481,   950, 11472, 11472,   950,
     950, 11472, -2481, -2481, 24468,  1788, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, 30190, 40018,  1638, -2481, 34870, -2481, -2481,
   41422,  1396, 18297, -2481, -2481,    55, -2481, 18297,  1879, -2481,
   18297, -2481, 41422,  1639, -2481, 41422, -2481, 13444, 11472,  1663,
   -2481,  1663, -2481,  1124, -2481,   291, -2481, -2481,  2037, 19235,
    1993, 11472, -2481, -2481,  1653,   758, -2481,  1812,  1588,  1658,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481,   822,  1660, 41422,
   41422, 15416, -2481,   691,   497,   106, -2481,  1933, 37678,  1588,
   -2481, -2481, -2481, -2481,  2026,  2114,  2002, -2481, -2481, 28274,
   -2481, -2481,  1712,  1712, -2481, -2481,  2079, -2481, -2481, -2481,
   -2481,   835,   289, 23459, 41422, 41422, -2481, -2481, -2481,   102,
    2033,   827,  1164,  2006, 31594, 37678, -2481, -2481, 19235,  2121,
    1671, 41422,  1482,   890,   890, -2481,  1810, -2481,  1815, -2481,
   -2481,   676, -2481,  1164, -2481, -2481, -2481,  3093, 15416, 47506,
     841, -2481,   950,   950,   950, -2481,  2106,  1499, -2481,   870,
    2128, -2481, 41422,   -68,   -74,  1678,  1680, -2481, -2481,   889,
   -2481, 11472,  1683, -2481, -2481, 18297,    55,   896, -2481, 47506,
   41422,   898, 47506,  7035,  1681, -2481, -2481, 28274, 28274, 41422,
    1743,  1743,  1740, 41422, 11472, -2481,   911,  2101,    29,   -12,
   28274, -2481, 37678, -2481, 29254, -2481,   758, -2481, 29254, 11472,
   -2481,   856,  1655,  2140, -2481, -2481, -2481, -2481,  1588,   738,
   -2481, -2481,  1995, -2481, 41422,  1751,   342,  1767, -2481, -2481,
   -2481,   886,   460,  1352,  1630, 37678,  1567,   917,  1164,   720,
     388, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,
   -2481, -2481, -2481, -2481,  2115,  1901,  2118,  3093,   918, -2481,
   11472,   640,  1502, 30190,  1699, -2481,   934, -2481, -2481, -2481,
   -2481, -2481, 41422,  1005, -2481, 28274, 41422, -2481, -2481, -2481,
   41422,  2079,   955, -2481, -2481, 13444,  1697, -2481,  2157,  1846,
   -2481, -2481,  1164, -2481, 24486,  1415, 19235, 41422, 41422, 41422,
   -2481,  1831,   738,   758,  1722,   961, -2481, -2481, 24556,  1932,
   -2481,  2020, -2481,  1965,  1723, -2481, 11472, -2481,  1789, -2481,
   -2481, -2481,  2173, -2481,  1729,  1731,  1352,  1630,  1651,  1482,
    1937, -2481,  1938, -2481,  1241, 13937, 13937,  1733, -2481, -2481,
   41422, -2481,   968,  1746,   970, -2481, -2481, -2481, -2481, 41422,
    1748, 34870, -2481,  2101, -2481, -2481, -2481,   202, -2481,   202,
   22518,  1965, 23459, -2481, 29254,  1968,  1723,   182,  1948,  1622,
   -2481, 28274, -2481,  1164, 31594, 19235,  1415, -2481, -2481, -2481,
   -2481, -2481, 14923,  1890,   134, 27627, -2481, -2481, -2481, -2481,
     984, -2481,  2229,  1908, -2481, -2481, -2481, -2481, 41422,  1399,
    1399,  -149,  1948, -2481, -2481,  2055, -2481, -2481, -2481, -2481,
   -2481,    24,  1973, -2481,  1977,  1203,  1630,   990, -2481,  2228,
   -2481, -2481, -2481, -2481, -2481, -2481,  1777,  1779, -2481,   202,
   -2481, -2481, -2481, -2481, -2481,   425,   425,  2143, -2481,  1835,
   -2481, -2481, -2481,  1352, 14430, -2481,  2255,  1399,   758, -2481,
    2245, -2481,   142, -2481, -2481,  1415, -2481,  1780, -2481, -2481,
   -2481, -2481, -2481, -2481
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     114,   216,     0,   195,   194,   216,     0,  1179,   216,  1157,
    1106,     0,  1126,     0,   216,     0,   114,     0,     0,     0,
       0,     0,     0,     0,   216,   387,     0,  1125,   216,     0,
       0,    52,     0,     0,     0,     0,     0,     2,     4,    22,
      23,    33,    29,     6,    25,     0,    24,    14,    28,    15,
      21,   178,    20,    31,    35,     7,    17,    19,    26,    30,
     354,   341,   389,   353,   113,   357,    37,    12,    27,    16,
       5,    32,     8,    36,     0,     9,    11,    10,    34,    13,
      18,   215,   214,   208,     0,     0,     0,     0,     0,   209,
     934,  1199,  1200,  1201,  1202,  1203,  1204,  1205,  1206,  1207,
    1208,  1209,  1210,  1211,  1212,  1213,  1214,  1550,  1215,  1216,
    1217,  1499,  1500,  1551,  1501,  1502,  1218,  1219,  1220,  1221,
    1222,  1223,  1224,  1225,  1503,  1504,  1226,  1227,  1228,  1229,
    1230,  1505,  1552,  1231,  1232,  1233,  1234,  1235,  1553,  1236,
    1237,  1238,  1239,  1240,  1241,  1242,  1243,  1244,  1554,  1245,
    1246,  1247,  1555,  1248,  1249,  1250,  1251,  1252,  1253,  1254,
    1506,  1507,  1255,  1256,  1257,  1258,  1259,  1260,  1261,  1262,
    1263,  1264,  1265,  1266,  1267,  1268,  1269,  1270,  1271,  1272,
    1273,  1274,  1275,  1276,  1277,  1278,  1279,  1280,  1281,  1282,
    1508,  1283,  1284,  1285,  1286,  1509,  1287,  1288,  1289,  1510,
    1290,  1291,  1292,  1556,  1557,  1293,  1294,  1295,  1558,  1296,
    1297,  1511,  1298,  1299,  1300,  1301,  1302,  1303,  1304,  1559,
    1305,  1306,  1307,  1308,  1309,  1310,  1311,  1312,  1313,  1314,
    1315,  1560,  1512,  1316,  1317,  1318,  1319,  1513,  1514,  1515,
    1320,  1561,  1562,  1321,  1563,  1322,  1323,  1324,  1325,  1326,
    1327,  1564,  1328,  1565,  1329,  1330,  1331,  1332,  1333,  1334,
    1335,  1336,  1516,  1337,  1338,  1339,  1340,  1341,  1342,  1343,
    1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,  1352,  1353,
    1354,  1517,  1567,  1518,  1355,  1356,  1357,  1519,  1358,  1359,
    1568,  1360,  1520,  1361,  1521,  1362,  1363,  1364,  1365,  1366,
    1367,  1368,  1369,  1370,  1522,  1569,  1371,  1570,  1523,  1372,
    1373,  1374,  1375,  1376,  1377,  1378,  1379,  1380,  1381,  1382,
    1383,  1524,  1384,  1385,  1525,  1386,  1387,  1388,  1389,  1390,
    1391,  1392,  1393,  1394,  1395,  1396,  1397,  1526,  1398,  1399,
    1400,  1401,  1402,  1403,  1404,  1405,  1406,  1407,  1408,  1409,
    1410,  1411,  1412,  1413,  1414,  1415,  1571,  1416,  1417,  1418,
    1527,  1419,  1420,  1421,  1422,  1423,  1424,  1425,  1426,  1427,
    1428,  1429,  1430,  1431,  1432,  1433,  1434,  1435,  1528,  1436,
    1437,  1438,  1572,  1439,  1440,  1529,  1441,  1442,  1443,  1444,
    1445,  1446,  1447,  1448,  1449,  1450,  1451,  1452,  1530,  1453,
    1531,  1454,  1455,  1456,  1457,  1574,  1458,  1459,  1460,  1461,
    1462,  1532,  1533,  1463,  1464,  1534,  1465,  1535,  1466,  1467,
    1536,  1468,  1469,  1470,  1471,  1472,  1473,  1474,  1475,  1476,
    1477,  1478,  1479,  1480,  1481,  1482,  1537,  1538,  1483,  1575,
    1484,  1485,  1486,  1487,  1488,  1489,  1490,  1491,  1492,  1493,
    1494,  1539,  1540,  1541,  1542,  1543,  1544,  1545,  1546,  1547,
    1548,  1549,  1495,  1496,  1497,  1498,  1129,     0,     0,   916,
     935,   936,   944,   211,  1156,   114,     0,  1187,     0,     0,
    1188,     0,     0,  1100,  1099,   152,  1105,     0,     0,     0,
     934,   301,  1516,  1386,  1530,   299,   914,   935,     0,   317,
     318,     0,   326,     0,   311,   315,   312,     0,   336,   328,
     337,   329,   310,   330,   319,   309,     0,   338,   313,     0,
       0,     0,   212,   207,  1106,   114,     0,   183,   173,   178,
     182,   186,   184,   185,     0,  1178,     0,   933,   339,   340,
     975,   164,  1182,  1532,  1463,  1127,  1181,  1183,  1180,   213,
     386,   384,     0,   901,  1296,  1331,  1423,  1434,  1532,   217,
     221,     0,   210,  1537,  1119,     0,  1120,   938,     0,   358,
     507,   937,   910,    51,     0,    56,     0,  1400,   362,   365,
     953,   363,   354,     0,     1,   114,     0,     0,     0,   177,
    1116,   383,   383,     0,   383,     0,   346,   354,   349,   353,
       0,  1124,  1532,  1463,  1118,  1121,  1304,     0,     0,  1304,
       0,  1304,     0,  1304,     0,     0,   893,     0,   894,   917,
     166,     0,   165,   167,   168,  1073,  1104,  1103,  1102,  1101,
    1106,  1304,   157,   147,     0,     0,     0,     0,     0,   302,
     300,   324,   325,     0,   316,   314,     0,  1304,   335,   948,
     331,  1304,   335,   912,  1304,     0,     0,   203,     0,   175,
     187,  1601,  1602,  1603,  1604,  1606,  1605,  1607,  1608,  1609,
    1610,  1611,  1612,  1613,  1614,  1617,  1615,  1616,  1618,  1619,
    1620,  1621,  1622,  1623,  1624,  1625,  1626,  1627,  1628,  1629,
    1630,  1631,  1632,  1633,  1634,  1635,  1636,  1637,  1638,  1639,
    1640,  1641,  1642,  1643,  1644,  1645,  1646,  1647,  1648,  1649,
    1650,  1651,   201,     0,   202,   192,   181,   188,   189,   114,
    1155,    40,     0,     0,     0,     0,  1184,     0,     0,     0,
     919,   921,   922,   823,   932,   896,     0,  1500,  1501,  1502,
     885,     0,  1503,  1504,  1505,  1552,   757,   744,   753,   758,
     745,   747,   754,  1506,  1507,   696,  1270,  1508,  1509,   930,
    1510,  1513,  1514,  1515,   749,   751,  1517,  1518,     0,   931,
    1520,  1521,  1367,  1523,  1524,  1526,  1527,   755,  1529,  1531,
    1532,  1533,  1534,  1535,   929,  1536,   756,  1538,     0,     0,
       0,   907,   840,     0,     0,     0,   896,   729,     0,   549,
     550,   571,   572,   551,   577,   578,   580,   552,     0,   906,
     629,   773,   896,   740,   801,   672,     0,   727,   721,   369,
     902,     0,   722,   918,   896,   886,   369,   900,   220,   218,
     224,   219,     0,     0,     0,     0,     0,   509,   508,   911,
      50,    48,    49,    47,    53,     0,    46,    55,   178,   837,
       0,   364,     0,     0,     0,   344,   343,     3,     0,     0,
    1192,     0,   953,   381,   382,     0,     0,     0,     0,     0,
       0,     0,     0,   456,   403,   404,   406,   453,   457,   465,
       0,   350,     0,  1122,     0,     0,     0,    71,    71,     0,
       0,     0,     0,     0,   293,   242,   286,     0,     0,     0,
       0,    85,    98,     0,     0,     0,     0,     0,    95,     0,
       0,    78,    72,    74,   244,     0,    71,     0,   240,     0,
       0,     0,   246,   934,     0,  1550,  1551,  1552,  1553,  1554,
     758,     0,  1556,  1557,  1558,  1559,  1560,  1561,  1562,  1563,
    1564,  1565,  1516,  1567,  1568,  1569,  1570,  1571,  1572,  1530,
    1574,  1536,     0,  1575,     0,   732,   843,   389,   841,   954,
       0,   935,   941,   892,     0,   955,  1679,  1680,  1681,  1682,
    1683,  1684,  1685,  1686,  1687,  1688,  1689,  1690,  1691,  1692,
    1693,  1694,  1695,  1696,  1697,  1698,  1699,  1700,  1701,  1702,
    1703,  1704,  1705,  1706,  1707,  1708,  1709,  1710,  1711,  1712,
    1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,
    1723,  1724,  1725,  1726,  1727,  1728,  1729,  1730,  1731,  1732,
    1733,  1734,  1735,  1736,  1737,  1738,  1739,  1740,  1741,  1742,
    1743,  1744,  1745,  1746,  1747,  1748,  1749,  1750,  1639,  1751,
    1752,  1753,  1754,  1755,   889,   888,   915,   957,   956,   958,
     895,     0,     0,  1153,     0,     0,   154,   146,   149,     0,
    1304,   172,  1304,  1073,     0,  1073,     0,     0,   327,   323,
     321,   320,   322,     0,   333,   334,     0,   304,     0,   949,
       0,     0,   306,     0,     0,     0,     0,   114,     0,    79,
     197,   198,   196,     0,     0,   180,    82,   200,   190,   199,
     179,    99,   191,   174,     0,    39,  1144,   230,   229,   238,
     976,     0,   945,  1576,   559,  1577,   588,   566,   588,   588,
    1578,  1579,  1580,  1581,   555,   555,   568,  1582,  1583,  1584,
    1585,  1586,   556,   557,   593,  1587,  1588,  1589,  1590,  1591,
       0,     0,  1592,   588,  1593,   555,  1594,  1595,   560,  1596,
     529,     0,  1597,   558,   530,  1598,   596,   596,  1599,   583,
    1600,     0,   846,   541,   542,   543,   544,   569,   570,   545,
     575,   576,   546,   628,     0,   555,   946,   947,   114,  1185,
    1128,     0,   725,   840,   587,   574,   884,     0,     0,   582,
     581,     0,     0,     0,     0,     0,   564,   563,   562,   731,
     849,     0,   561,     0,     0,   588,   588,   586,   652,     0,
     565,     0,     0,   864,     0,   870,     0,     0,     0,   592,
       0,   590,     0,     0,     0,   653,   633,   634,   839,     0,
     729,   837,     0,   804,     0,   937,     0,   723,   724,   730,
     925,     0,     0,   628,   628,   905,   823,     0,   820,   821,
     822,     0,     0,     0,   899,     0,   831,   833,     0,     0,
     668,   829,     0,   671,     0,     0,     0,     0,   817,   818,
     819,   811,   812,   813,   814,   815,   816,   827,   810,   649,
       0,     0,   775,   728,     0,     0,   648,     0,     0,     0,
     472,     0,   923,   920,   887,   472,   232,   236,   237,   235,
     223,     0,   231,   222,   227,   225,   228,   226,     0,    44,
       0,    41,   469,     0,   366,     0,     0,  1198,     0,   108,
       0,  1193,     0,  1117,   361,   360,   390,   391,   397,   359,
     442,   443,     0,     0,     0,     0,   462,   460,   433,   407,
     432,     0,     0,   411,     0,   434,   629,   455,   348,   401,
     402,   405,   347,     0,   458,     0,   468,   456,   406,     0,
    1123,     0,     0,     0,     0,     0,  1304,     0,     0,     0,
     277,   258,  1025,    70,     0,     0,     0,     0,     0,     0,
       0,   285,   282,   283,   284,     0,     0,     0,     0,    83,
      84,    97,     0,    88,    89,    86,    90,    91,     0,     0,
      76,    77,     0,     0,     0,     0,    75,     0,     0,     0,
       0,     0,     0,     0,     0,   389,   389,   389,   738,     0,
       0,   388,     0,     0,   890,   893,  1143,  1071,  1081,     0,
       0,     0,     0,     0,     0,  1106,   159,   156,   160,   161,
     158,  1304,     0,  1061,   148,     0,     0,   171,   169,     0,
    1070,  1044,     0,   151,  1189,     0,     0,   335,   332,   950,
       0,   335,   913,     0,   335,   206,  1304,  1073,     0,   176,
     193,    80,   100,    81,   101,  1150,  1176,     0,  1158,  1163,
    1141,     0,  1141,     0,  1160,  1164,  1141,  1159,  1141,  1154,
       0,   977,     0,     0,   541,     0,   535,   531,   601,   602,
     603,   604,   611,   612,   609,   610,   605,   606,   599,   600,
     607,   608,   597,   598,     0,   613,   614,   615,   616,   617,
     618,   619,   620,   547,   163,     0,   553,   162,     0,   897,
       0,     0,     0,   883,   879,     0,     0,     0,     0,     0,
       0,   850,   851,   852,   853,   854,   855,   856,   857,   858,
       0,     0,   859,     0,     0,     0,   585,   584,     0,   809,
     820,   821,   822,   817,   818,   819,   811,   812,   813,   814,
     815,   816,   835,     0,     0,     0,     0,     0,     0,     0,
       0,   698,     0,     0,   721,   800,     0,   837,   869,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   837,
     875,     0,     0,   674,   896,     0,     0,   673,     0,     0,
       0,   927,   928,   630,   644,   645,   646,   650,   960,   959,
     904,     0,   898,     0,     0,   631,   654,   659,     0,   876,
     692,     0,   680,     0,   667,     0,   678,   682,   655,   670,
       0,   651,     0,   899,   832,   834,     0,   830,     0,   641,
     642,   643,   635,   636,   637,   638,   639,   640,   647,   808,
     806,   807,     0,     0,     0,   783,   675,     0,     0,   677,
     676,  1296,  1331,     0,   380,   380,   380,   368,   378,   903,
       0,   521,   389,   521,     0,   628,   510,   953,    54,    42,
      43,   838,   952,   114,     0,  1196,     0,     0,     0,   120,
     103,     0,  1194,     0,   136,   472,     0,   896,     0,   395,
     396,     0,   400,  1527,  1419,     0,     0,     0,     0,   435,
     463,     0,   454,     0,   919,   436,   918,   437,   440,   441,
     412,   464,   908,   466,     0,   459,   352,   351,   470,     0,
     243,     0,  1304,   260,     0,     0,     0,     0,     0,     0,
     980,  1016,   980,   298,  1304,   335,  1304,   335,  1203,  1271,
    1435,     0,   256,  1049,   289,     0,    64,  1078,     0,  1034,
     279,   294,    57,     0,     0,    73,   245,    87,    92,    60,
      96,    93,  1111,    94,    71,     0,   241,     0,    58,     0,
    1109,     0,     0,   247,    62,  1113,     0,     0,     0,     0,
     842,   733,   844,   845,   892,     0,  1142,     0,  1072,     0,
    1152,  1132,  1133,  1143,     0,  1073,   157,     0,     0,     0,
       0,     0,     0,     0,  1071,  1064,  1062,  1092,     0,  1069,
    1063,     0,     0,  1020,     0,   973,     0,     0,  1190,  1186,
     303,   951,   305,     0,   307,     0,     0,  1148,     0,  1147,
    1146,  1151,  1145,     0,  1140,     0,  1171,     0,     0,     0,
       0,     0,     0,   239,     0,   536,   532,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   847,   385,   697,     0,
       0,     0,   880,     0,     0,   771,     0,   746,   748,   554,
     761,     0,   567,   750,   752,     0,   824,     0,     0,     0,
     762,   700,   701,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     716,   715,   763,   799,     0,     0,   867,   868,   764,   595,
     594,   596,   596,     0,     0,   874,     0,     0,     0,   769,
       0,   726,   838,   805,   803,   579,   628,     0,     0,     0,
       0,     0,     0,     0,   681,   669,     0,   679,   683,     0,
       0,     0,   663,     0,     0,   661,   693,   657,     0,     0,
     694,     0,     0,     0,   739,   380,   380,   380,   380,   377,
     379,     0,     0,     0,     0,  1419,     0,   493,   471,   473,
     480,   493,   498,   741,   519,   742,   937,     0,   445,     0,
     445,     0,   233,    45,     0,  1197,     0,   125,   107,   127,
     126,     0,   134,     0,   896,     0,   125,   109,     0,   128,
       0,  1196,     0,   140,   392,     0,   825,   400,     0,   394,
     439,   438,     0,   410,   461,   408,     0,   467,     0,     0,
       0,  1024,     0,     0,     0,   980,     0,     0,  1088,     0,
    1075,   278,     0,     0,     0,   252,   297,   270,   262,   248,
     276,     0,     0,   281,     0,   274,   291,   292,   290,   295,
       0,   990,  1008,     0,     0,  1021,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   736,   737,   734,
     389,   891,  1174,  1175,  1173,    78,  1082,     0,     0,   151,
     155,     0,     0,   145,     0,   172,  1073,     0,  1048,  1044,
       0,  1042,  1041,  1043,     0,   974,   207,     0,   969,   150,
       0,   335,     0,  1172,     0,  1136,  1177,  1161,  1166,     0,
    1170,  1168,  1167,  1162,  1165,   541,     0,   541,     0,   527,
       0,   539,     0,   548,   621,   622,   623,   624,   625,   626,
     627,   573,     0,   882,   878,     0,   743,   848,     0,   836,
     862,   861,   699,   711,   712,   713,   863,     0,     0,     0,
     708,   709,   710,   702,   703,   704,   705,   706,   707,   714,
     872,   871,   865,   866,   591,   589,     0,   766,   767,   768,
     873,     0,   802,   926,   632,     0,     0,   660,   877,   684,
       0,     0,     0,   656,   824,     0,     0,     0,     0,     0,
     665,     0,     0,     0,   786,   781,   782,     0,     0,     0,
       0,   371,   370,   376,   493,   498,     0,   354,     0,   480,
       0,   492,   429,   491,     0,     0,   504,   502,     0,   504,
       0,   504,     0,   429,     0,   494,   429,   491,     0,   511,
     911,   520,     0,   452,   733,   452,     0,   367,  1195,     0,
    1191,     0,     0,     0,   115,   112,   102,     0,     0,   137,
     125,   116,     0,   393,   398,   399,   409,   909,    65,   980,
       0,     0,   259,     0,  1090,  1036,  1068,  1051,     0,     0,
       0,   981,     0,  1056,     0,   251,   271,     0,   267,     0,
     296,     0,     0,     0,     0,     0,   254,   266,     0,   249,
       0,   335,   335,   257,   945,  1576,  1577,  1578,  1579,  1580,
    1581,  1582,  1583,  1584,  1585,  1586,  1587,  1588,  1589,  1590,
    1591,  1668,  1592,   987,  1593,  1367,  1594,  1595,  1596,     0,
    1597,   530,  1598,  1599,  1600,   811,   812,   985,  1083,   984,
     986,     0,  1077,   982,   946,   983,  1080,  1035,    61,  1112,
       0,    59,     0,  1110,    68,    66,    63,  1114,     0,  1155,
    1135,     0,     0,  1304,     0,     0,     0,     0,   151,   170,
    1070,     0,  1098,  1020,  1093,     0,   973,   971,     0,   968,
     308,     0,  1149,     0,  1169,   538,     0,   537,     0,   533,
     540,   881,   759,   770,   860,     0,     0,     0,     0,   765,
     760,   690,   688,   685,     0,   686,   664,     0,     0,   662,
     658,     0,   695,   772,     0,   788,   785,   375,   374,   373,
     372,   479,   477,     0,   482,   937,   489,   422,   428,   478,
       0,   474,     0,   503,   499,     0,   500,     0,     0,   501,
       0,   475,     0,   937,   476,     0,   518,     0,     0,   777,
     924,   777,   234,   124,   104,     0,   105,   135,     0,     0,
       0,     0,   129,  1115,     0,  1086,   261,     0,  1068,     0,
     980,  1053,  1052,  1055,  1050,  1054,  1057,     0,     0,     0,
       0,     0,  1037,     0,     0,     0,  1001,     0,     0,  1068,
    1074,   997,   998,  1107,     0,     0,     0,   263,   253,   250,
     255,   264,     0,     0,   265,   268,   526,   280,   273,  1668,
    1675,     0,     0,     0,     0,     0,   735,  1131,  1138,    78,
       0,     0,     0,     0,  1070,     0,   144,   143,     0,     0,
       0,     0,   973,     0,     0,   978,     0,  1017,     0,   204,
     972,     0,   961,     0,  1137,   534,   528,   717,     0,     0,
       0,   687,   691,   689,   666,   774,     0,   389,   514,     0,
     517,   481,     0,     0,   417,   424,     0,   427,   421,     0,
     483,     0,     0,   485,   487,     0,     0,     0,   522,     0,
       0,     0,   914,     0,   444,   446,   449,   448,   451,     0,
     420,   420,     0,     0,     0,   138,     0,   131,   131,     0,
     117,   826,     0,   980,     0,  1067,  1087,  1015,     0,     0,
     999,     0,  1005,     0,  1039,  1040,  1038,  1000,  1068,  1073,
    1002,  1108,     0,   272,     0,   288,     0,     0,  1079,    69,
      67,  1155,     0,   151,   968,     0,   145,     0,     0,  1044,
     207,   970,  1033,  1026,  1027,  1028,  1029,  1030,  1031,  1032,
    1047,  1046,  1018,  1019,     0,     0,     0,   718,     0,   719,
       0,   791,   519,     0,     0,   513,     0,   415,   413,   416,
     418,   414,     0,     0,   490,   506,     0,   486,   484,   495,
       0,   526,     0,   497,   450,     0,   776,   778,     0,     0,
     356,   355,     0,   111,     0,   521,     0,     0,   133,   133,
     119,     0,  1073,  1089,  1066,     0,  1059,  1058,     0,     0,
     996,     0,  1003,  1097,   989,   525,     0,   275,     0,  1084,
    1130,  1134,     0,   962,     0,     0,   151,   968,  1020,   973,
       0,   965,     0,   720,   787,     0,     0,     0,   512,   515,
       0,   488,     0,     0,     0,   523,   524,   496,   447,     0,
       0,   422,   106,   131,   110,   139,   130,   397,   132,   397,
       0,  1097,     0,  1045,     0,  1023,   989,     0,  1014,     0,
     269,   287,  1085,     0,  1070,     0,   521,   963,   979,   205,
     966,   967,  1499,  1247,  1470,     0,   789,   792,   790,   784,
       0,   425,     0,   431,   505,   779,   780,   419,   133,   400,
     400,   521,  1014,  1065,  1060,     0,  1004,  1006,  1094,  1095,
    1096,     0,  1010,  1007,  1011,     0,   968,     0,   141,     0,
     796,   795,   794,   798,   797,   516,     0,     0,   423,   397,
     122,   121,   118,   980,  1022,     0,     0,     0,  1012,     0,
    1013,   988,   964,   151,     0,   426,     0,   400,  1091,   993,
       0,   992,     0,  1076,  1009,   521,   793,     0,   123,   991,
     995,   994,   142,   430
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2481, -2481, -2481,  1684, -2481, -2481, -2481,   965, -2481, -2481,
   -2481, -2481,  -840, -2481,  -608,  -881,  -706,  -905, -2481,   -27,
      32, -2481, -2481, -2481, -2481,     8,   259, -2481,  -425, -1849,
    -189, -2481, -2351, -2447, -2481,  -487, -2334, -1619, -1019, -2481,
    -361, -2481, -2481, -2039, -2481, -2481,   474, -2481, -2481, -2481,
   -1100, -1014,   187, -2481,  -374, -2481,  -433,  -430, -2481, -2481,
       7,  -699,  1205, -2481, -2481, -2028, -2481,  1089, -2481,   397,
   -2481,   801, -2481,   774, -2481, -2481, -2481,   237, -2481,   910,
   -2481,   227,  -540,   545, -2481, -2481, -2481, -2481, -2481,  1235,
    -627, -2481, -2481, -2481,    12,   608,   -30,    -9,     3,    27,
      48,  1448,  1479, -2481, -1500,   610, -2481, -2481,  -590,   -49,
   -2481,   601, -2468, -1966,  -388,   952,  1436,  1439,  -368,  -283,
   -2481,  -442, -2481,  -955, -2481, -2481,   599,   995, -1219, -1228,
   -2481,   328, -2481,  -365, -2481,    76,  -367,   977, -2481,  1458,
   -2481, -2481, -2481, -2481, -1188,   638, -1907,   350, -1884, -1800,
     118,    97,  -957,  -244,    28,   360,  -327, -2481, -2481,  -322,
   -1665, -2239,  -338,  -335, -2481, -2481, -1211, -1426,  -879, -2481,
   -2481,  -641,  1350, -2481, -2481, -2481,  2242,  2287, -2481, -2481,
    2381,  2395, -2481,  -307,  2591,   881,  -753,  1157, -1131,  1158,
   -1134, -1125, -1137,  1159,  1161, -1179,  3176, -1525,  -566,    -5,
   -2481, -2248, -1654, -2481, -2481,  -101, -2481,  -396, -2481,  -392,
   -2481, -2481, -2481,  -382, -2480, -2481,  1084,   765, -2481, -2481,
   -1192, -2481,  3891,   667, -2481, -1559,  -562,  1189,  -643,  -914,
   -1459, -2481, -2481, -2481, -2481, -2481, -2481,  -928, -1754,  -797,
     729, -2481, -2481,   843, -2481, -2481,  -979,  -603,   954,  -549,
    -765,   737, -2481,  -544,  1092, -2481,     5,  -517,  1477,  -951,
      44, -2481,  1996,   241,  1623,  -773, -2011, -2481, -2481,  -515,
   -2137,  -808, -2481,  -606, -2481, -1011, -2441,    77, -2244, -1057,
   -2481, -1010, -1708, -2250,  -394, -2481,  -463, -2481,  -236, -1709,
    -438,  -424, -2481, -2247,  -835, -2481,  1511,  -155, -2481,   647,
   -2481, -2026, -2481, -2481,   639, -2481,  -862, -2481, -2481, -1746,
     286,  -373, -2249, -2259,   591,  -619, -2481,  -419,   331, -1676,
   -2481,   660, -2481,  -363, -2481,  -485, -2083, -2481,    33,  1102,
   -2481, -2481,   951, -2481, -2481, -2481, -2481, -2481, -2481,  -575,
     596, -2201, -2481,   561, -2481, -2481, -2481, -2481,    30,   323,
   -2481, -2481, -2481, -2481, -2481, -2481, -2481, -2481,    35,  1571,
     400, -2481,    -6, -2481, -2481, -2481,  -511, -2481, -2002
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    36,    37,    38,    39,    40,    41,   844,   575,   845,
     848,    42,  1375,    43,  1447,  1402,  1107,   913,  1392,  1096,
     527,  1699,  1318,  2470,    45,  2012,  1704,  2016,  2605,  2260,
    2011,  2018,  2708,  2767,  2013,  1705,  2606,  1706,    46,  2536,
    2377,  1058,  1442,  1837,   487,    47,  1056,  1437,    48,   725,
     621,    49,  1448,    50,   590,  1097,   528,  1098,  1099,   713,
      51,  1108,   715,   716,    52,   657,    53,    83,    54,   559,
     560,  1109,  1300,  1110,    55,  2057,  2058,  2059,  1761,   894,
    2727,  1762,   895,   896,  2061,    56,    57,   519,   520,   648,
    1077,   521,    58,   538,   530,   797,    61,    62,    63,   565,
     578,   579,  1290,  1677,  1981,   865,   552,   553,   595,  1421,
    1326,  1327,  1712,  2029,  1351,  1352,   874,   875,  2575,  2700,
    2576,  2577,  2438,  2439,  2838,  1339,  1343,  1344,  1725,  1718,
    1332,  2253,  2594,  2595,  2596,  2459,  1347,  1348,   877,   878,
     879,  1356,  1735,    65,  1681,  1988,  1989,  1990,  2231,  2232,
    2246,  2242,  2444,  2583,  1991,  1992,  2568,  2569,  2675,  2249,
    1998,  2587,  2588,  2635,  1867,  1161,  1162,  1497,  1163,   798,
    1164,  1196,   799,  1202,  1166,   800,   801,   802,  1169,   803,
     804,   805,   806,  1185,   807,   808,  1219,  1515,  1516,  1517,
    1518,  1519,  1520,  1521,  1522,  1523,   849,  1580,   810,   811,
     812,  1994,   813,  1282,  1665,  2600,  2696,  2697,  1974,  2215,
    2425,  2567,  2747,  2796,  2797,   814,   815,  1233,  1234,  1662,
    1277,  1278,   816,  2349,  1280,  1573,  1600,  1229,   957,   958,
    1174,  1550,  1551,  1576,  1899,  1583,  1589,  1926,  1927,  1601,
    1630,   817,  1533,  1534,  1883,  1187,   818,   618,   964,   619,
    1182,  1624,   826,   819,   820,  1731,   570,  2579,   653,  1045,
     821,   822,   823,   824,   825,   572,   959,   469,  1175,  2768,
    1079,   854,   960,  1763,  1620,    66,  2552,   531,  2118,  1064,
      68,    69,  2048,  2352,  2780,  2072,  2863,  2500,  2501,  1764,
    2822,  2823,  2050,  2115,  1384,  2816,  1825,  2660,  1768,  1750,
    2502,  1833,  2615,  2382,  1765,  2291,  1826,  2487,  2715,  1444,
    1827,  2716,  2480,  1828,  1428,  1451,  2293,  2824,  1769,  1429,
    2353,  1372,  1829,  2778,  1830,   488,  2505,    70,   532,    72,
      73,    74,   561,    75,    76,  1813,  2529,  2124,  2530,  1855,
    1807,  1105,  1851,  1476,  1431,  1106,   476,  1489,  2125,  2095,
    1477,    77,    78,   547,   548,    79,   489,  1067,   533,   861,
    2007,  1695,   497,   471,   472,  1177,  1048,   962,  1049
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     470,   466,   912,   652,   650,   583,  1053,  1406,   880,   827,
    1095,  1046,    59,   596,   850,   718,  1050,  1100,  2000,  1572,
    1389,  1236,   839,   529,  1371,  1082,  1995,    64,  1221,  1468,
    1405,  1238,    44,    71,  1864,    80,  1613,  1436,  1417,   658,
    1995,   564,  1438,    64,  2051,  1439,  1440,  1283,  1377,  2066,
     467,  2068,  1901,  1902,  1323,   598,  1381,  1921,   569,  1293,
    2372,  2273,  2351,  1547,  1611,  1612,  1545,   599,  1866,  1543,
     914,  2355,   918,  2047,   922,  1546,  1410,    67,  1527,  2228,
    1111,  1961,   581,  2383,  2019,  -596,   604,   734,  2386,   607,
    -588,   610,   659,   614,  1085,   474,   712,  1074,  1948,  1949,
   -1677, -1677,  2707,  -942,  1247,  -593,  -917,  1683,  2245,  -593,
   -1555,  -939,  -939,  1197,  -596,   612,  1730,  -342, -1657, -1657,
   -1566,  2540,  1904,  1727, -1573,  1373,  1299,  1459, -1668, -1668,
    1210,   734, -1675, -1675,  1253,  1408,  2545,   537,  1680,  2484,
    -345,   586,  2549,  2845,  2104,  1054,   524,  1622,  2235,   537,
    -942,   573,  -943,   734,  1284,   719, -1566, -1573,  1751, -1139,
    -940,  -940,  1881,  1288,   833,   643,  1255,  2266,  2527,  -943,
    1362,  1622,  2182, -1555,  -555,  1982,  1983,  -568,  -583,   537,
    -809,   537,  1074,  2130,  2132,  2570,  1382,  -809,  1074,  1659,
    1089,  2243,   478,  2468,  1390,   734,  1660,  1393,  1394,  1904,
    1296,  1089,   537,  2733,  2647,   718,   734,   873,  1373,  -342,
    -828,   718,  2111,  2295,  2522,  1382,  2591,  -828,  2079,  2510,
    1811,  2607,  2626,  2236,   593,   593,   587,  2679,   876,  2613,
    1228,  1232,  -345,  2677,  1584,  1432,  1050,   840,   869,  1709,
    1733,    25,  1382,  2387,   550,   634,   863,  1069,  1239,   479,
    2630,   869,  2481,  2710,  1904,  2237,  2870,  2709,   -78,  1748,
    1748,   539,  2769,   -78,  1247,     3,     4,  1365, -1654, -1654,
    2238,  1330,  1494,  2638,  2680,  1087,  1294,    30,  1088,  2239,
     635,  1415,  2274,  2296,   733,    81,  1103,  1904,  1416,  1395,
    2607,  1070,  1905,  1906,  1907,  2831,  2787,  1997,  2651,  2809,
    2285,  2810,  1404,  1667,  1643,  2055,  1346,   534,   871,  2543,
    1247,  1297,  2829,  2240,  1876,   636,  1749,  2044,    32,  2406,
    1359,   871,  2482,   718,   718,  1710,  1255,  2441,  2521,    82,
    1995,  2445,  1995,  2308,  2581,  1247,  1315,  2284,  2159,  2539,
    1253,  2245,  2020,  2275,  2546,  1734,   551,  1247,   864,   722,
    2818,  2692,  1433,  1584,  1373,  2544,  2375,   872,  1411,  2547,
     723,  2839,   637,  2297,  1374,  1253,  2281,  1420,  2283,    35,
     535,  2857,  1255,  1331,  2866,  2627,  1383,  1253,  1075,  2722,
    2163,  2164,  2165,  2166,  2636,  2852,  2170,  2171,  2172,  2173,
    2174,  2175,  2176,  2177,  2178,  2179,  -342,  1255,  2241,  2388,
     841,  2469,   842,   834,  1221,  1383,  1134,  2404,  2681,  1255,
    2623,  2871,  2808,    25,  2678,  1367,  2711,  1192,   483,  -345,
     484,  2473,  1380,  1455,  2431,  2570,  1396,  1298,  1644,  1285,
    1419,  1492,  1383,   536,  1397,  1189,  1190,  1380,  2206,  2207,
    2730,  2832,  1645,  1668,  1289,   486,  1453,  1646,  1572,    30,
     588,  2827,  2846,  2394,   644,  2485,  1409,  -342,  2607,  1812,
    1207,  1071,  2020,  1075,  2407,   537,  1380,  1908,  2528,  1075,
     574,  1532,  1046,   835,  1311,  2217,  2218,  2219,  2220,  2819,
    -345,   625,  1647,  2859,  1197,  2582,   728,   622,  1909,  2032,
      32,  2788,  1357,  1380,   638,  2789,   583,  1727,  1475,  1623,
    2202,  1743,    64,    33,  1210,  1800,  2002,   620,   623,  1841,
     624,  2800,  2351,  1358,   616,  2092,  2093,  2021,   617,  2026,
     717,  2355,  2813,  1963,  1184,  2540,  1368,    34,  1696,  -809,
    1076,  1216,   475,   714,  1526,  2580,  2548,  2607,  1661,  2080,
    2584,    35,  1406,  2586,  2167,  1373,   470,   470,   576,   881,
    2571,  1400,    64,  1217,  2820,  1376,   598,  1910,   650,  -828,
    1216,  1458,   584,  1461,  2141,  1072,  -342,  1218,   599,  1464,
     470,  2475,  -588,   837,  1224,  1401,  1276,   718,  1800,  1529,
    1995,   846,  1217,  2486,  1995,  -942,   616,  -593,  -917,  -345,
     617,  1382, -1555,  2004,  1919,   862,  1220,    59,  1584,  1584,
    2512,  2513, -1566,  1584,  2732,  -342, -1573,  -342,    60,   961,
     470,  1047,    64,  1751,  2624,  1081,   860,    44,    71,  1528,
      80,  1228,  2739,  2738,    60,   851,   585,  1648,  -345,  1536,
    -345,  1242,  -942,  1540,  -943,  1529,  1050,    60, -1566, -1573,
    1061,  1063,  1065,   582,  1584,  1584,  1619,  1581,  1682,  2472,
     470,  -943,  1586,  1588,  1469, -1555,  1195,  2139,   712,  1201,
    -583,  1291,    67,  1684,  1093,  1094,  1914,  1915,  1916,  1917,
    1918,  1919,   597,  2155,   843,  1093,  1094,   634,  2687,  2168,
    1529,  1239,    60,   600,  2625,  2009,  1777,  2860,  2052,  2169,
    1529,  1050,  1559,  2162,   616,  2531,  1780,  2786,   617,  1783,
    1560,  1561,  1562,  1400,   591,  1572,  1697,  1414,   589,  2395,
     717,  2397,   635,  2474,  1506,  1507,   717,   961,  1176,   615,
    2010,  2503,  2186,  1916,  1917,  1918,  1919,  1401,   630,  2191,
    1382,  1216,   -78,   -78,   470,  2664,  2147,  2149,  2150,  2145,
    1625,  2144,  2414,  2665,   633,  2504,    64,  2101,  2146,  2148,
    1911,  1912,  1913,  1217,  1914,  1915,  1916,  1917,  1918,  1919,
     641,  2351,   470,   583,  2861,  2107,  1719,  2193,   592,  1849,
    2355,  2637,  2616,    25,  1767,   720,  1850,   721,  1460,  1995,
    1775,  1383,   470,   470,   470,   869,   470,   470,  1995,    84,
     870,  2862,  1333,  1995,   637,  2073,  1995,   830,  1934,  2053,
    1936,  1937,  1271,  1272,  1273,  1274,  1275,  1276,  2074,    30,
     470,  1189,  1190,  1216,  2865,  1995,  1273,  1274,  1275,  1276,
     642,  1740,  1510,  1511,  2728,  1796,  1797,  1798,   717,   717,
    1840,  1460,  1631,  1236,  1842,  1217,  1207,  1844,  1334,  1941,
     645,  1308,  1380,  2840,  2841,   593,  2078,  1858,  1776,  1218,
      32,   626,  1859,   627,  1046,   871,  1324,  1325,  1632,  1329,
     646,   470,  2348,    33,  1319,   470,   470,  1786,   599,   599,
    1406,   599,  1793,  1382,  2287,   656,   470,  1471,  1216,  2003,
    2557,  2026,   734,  1778,  1995,  2090,   860,    34,  1781,  -388,
    1361,  2868,  1309,  1176,  -388,  1310,  1953,  1382,  1556,  1557,
    1217,  1698,  1860,  1388,   872,  2713,  2666,  1857,   724,  2717,
     886,  1861,  1312,  1862,  1220,  1313,   887,  2652,   961,   628,
    1383,   629,  1954,  2488,  1412,   961,  1584,  1584,  1584,  1584,
     727,  1995,  1584,  1584,  1584,  1584,  1584,  1584,  1584,  1584,
    1584,  1584,  2023,  1407,  2081,  1336,   961,    85,   889,  2560,
    1817,   828,   829,   726,   831,    86,  2288,  1102,  1246,  -388,
    2745,  1247,   728,  1102,   718,  2025,  2622,  1633,  2653,  1879,
    2491,  2161,  1634,   478,   546,   729,  2654,  1635,  1473,   718,
     566,  1380,   594,   734,  1584,  1584,  1834,  2030,  2746,  2082,
      87,  1253,   734,  1606,  -153,  1607,  2112,  2236, -1679,  2183,
    1333,  2119,  2054,  2055,  1337,  2655,     3,     4,  -388,  2573,
     832,  1581,  1581,  2086,  2574,  1465,  1581,   838,  1313,  1995,
    2289,   888,  2290,  1255,   616,   605,  -917,  2493,   617,  2237,
     479,  2056,  1491,  2667,  1935,  1492,  1955,    88,   847,  1240,
    2764,  1956,  1205,  1206,  2447,   886,  1334,  1524,   852,  1244,
    1525,   887,  1995,  2239, -1652, -1652,  1692,  1581,  1581,  1081,
     961,   853,  1292,  1383,  1445,  2391,  1951,   524,  1738, -1653,
   -1653,  1313,  1047,  1302,  2656,  1102,  1102,  1975,   855,  1976,
    1572,  1436,   717,    60,   481,  2657,  1438,  1383,   856,  1439,
    1440,  1467,  1999,  1808,    89,   714,  1809,   473,  1047,  2516,
    2668,  1838,   858,   522,  1492,  1335,  1232,  1852,  1877,  1885,
    1853,  1313,  1313,   549,    64,  1889,  1636,   562,  1313,   859,
    2719,  2828, -1679,   886,  1380,  2496,   867,  1637,  2063,   887,
    2065,  1995,   882,    60,   582,  2858, -1679,  1923,   883,  2069,
    1313, -1679,  2070,   884,  2075,  1176,  2842,  2076,  1380,  2123,
     885,  2306,  2135,  1336,  2137,  1525,   888,  2138,  1563,  1564,
    1565,   897,  1566,  1567,  1568,  1569,  1570,  1571,  2497,  1831,
     889,  1832,  2241,   597,  2299,   470, -1679,   470,  2184,  2185,
    1957,  2282,   470,  2498,  1977,   470,  1978,  2556,   898,   470,
     622,  1958,   915,    60,  1500,  1501,  2099,    25,   919,   483,
    2872,   484,   866,   470,   868,    64,   470,   470,   470,   470,
     620,   623,  1337,   624,  2369,  1051,   470,   470,   470,  2298,
     890,  2307,   886,   485,   891,  1052,   486,  2151,   887,  2198,
    1313,  1264,  1313,    30,   888,  2262,   470,  2267,  2263,   899,
    2268,  1176,   470,   470,   470,   470,  1047,  1475,  1057,  2264,
     470,   470,  1055,   892,  2286,   470,  2541,  1809,   900,   470,
    1506,  1507,   470,   470,   470,   470,   470,   470,   470,   470,
     470,  1073,  2658,   470,    32,  2659,  1059,  2378,   470,  2499,
    1809,   470,  2446,   470,  2449,   961,  2392,    33,  2451,  2393,
    1066,  2454,  2415,  1678,   733,  1525,  2477,  1904,  2478,  1809,
    1068,  1809,  1905,  1906,  1907,   889,  2561,   470,   901,  1525,
    2617,    34,  2348,  2618,  1687,  2643,  1689,   846,  1809,  2195,
     893, -1679, -1655, -1655,  1078,    35,   470,    60,  2121,  2669,
    1700,  2026,  1525,   888,    25,   470,   470,   718,  1529,  1581,
    1581,  1581,  1581, -1656, -1656,  1581,  1581,  1581,  1581,  1581,
    1581,  1581,  1581,  1581,  1581,   916, -1658, -1658,  2672,   891,
    1732,  2673,  1080,  1176,  1083,  1199,  1084,  2347,  1510,  1511,
      30,  1086,  1047,  1104,  1047,  1178,  2190,  2684,  2691,  1179,
    1081,  2691,   733,   889,  2689,  1904,  2693,  2690,   917,  2690,
    1905,  1906,  1907, -1659, -1659,  1181,   902,  1581,  1581,  2705,
    1183,  1230,  2706,  2306,   886,  2736,  2743,  2196,  2706,  1525,
     887,    32,  -559,   961,  -566,   525,   470,   470,  2476,   470,
    1529, -1679,  2751,  1188,    33,  1081,  1584,  1191,  1271,  1272,
    1273,  1274,  1275,  1276, -1660, -1660,   886,   891,  1815,  1192,
    2465,  1552,   887,  2757,  1193,   903,  2690,  2250,    34,  2773,
     470,  1194,  2774,   904,  1047,   893,  2801,  2436,  2804,  2802,
    1494,  1081,   526,  1198,  1835,   905,   892,    25,  2356,   717,
    1767,  2436,  2835,   597,   597,  2690,   597,   886,  2853, -1661,
   -1661,  2706,   889,   887,   717,    35,   961,  1176,   495,  2235,
    1728,  1729,   523,  1200,  2390,  -556,   906,  -557,  1909,   541,
    2368, -1662, -1662,    30, -1663, -1663,  1203,    25, -1664, -1664,
     580,   580,  1584, -1665, -1665,   888, -1666, -1666,  1204,  1176,
   -1667, -1667,  1209,    25,  1211,   470,   470, -1669, -1669, -1670,
   -1670,   470,   920,   893, -1671, -1671,   891, -1672, -1672, -1673,
   -1673,   908,  1685,    30,    32, -1674, -1674,   888,  1212,   583,
   -1676, -1676, -1678, -1678,  1422,  1423,  1213,    33,  -560,    30,
    1214,  2348,   608,   909,  2236,   921,  -558,  1910,  -435,  -435,
    1215,   470,   470,   470,  -439,  -439,   470,  -438,  -438,  1584,
    2026,    34,  1222,   911,    32,  1223,  1909,  1237,   888,   470,
     470,   470,   470,  2508,  1224,    35,  2237,    33,   583,   470,
      32,  1241,   470,  1508,  1509,  1173,  1510,  1511,  1305,  1307,
    1281,  2238,  1287,    33,  1288,  1289,  1303,   470,   470,  1316,
    2239,    34,   470,  1322,   870,   872,  1353,  1355,  1360,   468,
    1379,  1378,   893,  1380,   496,    35,   470,    34,   496,   470,
    1385,   470,  1386,  1387,   540,   496,   545,  1050,  2641,   545,
    1391,    35,   545,   571,  2240,  1910,   496,   496,   899,  1398,
    1399,  1529,   470,   733,   889,  1403,  1904,  1413,   583,  1418,
    1425,  1905,  1906,  1907,   470,  1993,  1426,   900,  1979,  1434,
    1430,  1435,  1446,  1449,  2517,  2518,  1452,  1450,   470,  1993,
    1456,  2851,  1490,  1460,  2123,    60,   889,   545,  1184,  1195,
    1496,  1201,   470,  1493,  1495,   622,  1531,   571,   496,   571,
     571,   571,  1532,  1301,  1739,  2463,  1102,   470,   891,  1537,
      64,   734,  1856,  1590,   467,   620,   623,   901,   624,  1591,
    1247,  1102,  1313,  1603,  1605,   470,  1608,   889,   467,  2241,
    1621,  1639,  1628,  1640,  1642,  1663,  1784,   892,  1664,  1680,
     891,  1686,  1047,  1047,  1047,  1693,  1694,  1701,   592,  1720,
    1911,  1912,  1913,  1708,  1914,  1915,  1916,  1917,  1918,  1919,
    1721,  1723,  1741,   733,  1722,  1745,  1904,  1746,  1747,  1785,
    1173, -1679, -1679, -1679,   593,  1801,    60,  1791,  1806,  1810,
    1814,   891,  1818,   961,  1819,  1820,  1821,  1822,  1843,  1845,
    1846,  1836,  1854,  1865,  1872,  1869,  1870,  1873,  1874,  1878,
    1887,  1875,  1888,  1891,   893,   902,  1890,  2347,  1176,  2098,
    1792,  1892,  1893,  1894,  2103,  1896,  2105,  2106,  2108,  1897,
    1900,  1929,  1922,  1928,  1930,  1931,  1947,  1952,  1968,  1581,
    1973,  1959,   717,  1932,  1939,  1945,   893,  1047,  1911,  1912,
    1913,  2015,  1914,  1915,  1916,  1917,  1918,  1919,  1835,  1969,
    1971,  1997,  1176,  1972,   903,  2008,  1629,  1909,  2006,  2022,
    2034,  2028,   904,  -440,  -441,   470,  2036, -1459,  1176,  2033,
    2037,  2038,   718,  2040,   905,   470,  2043,   893,  2046,   470,
    2049,  2062,   470,  2042,  2064,  2077,  2087,  2091,  1176,   470,
     470,   470,   470,  2083,  2084,   470,   470,   470,   470,   470,
     470,   470,   470,   470,   470,   906,  2085,  2110,   470,   470,
    1406,  2088,  2212,  2089,  2102,  1581,    60,  1176,  2109,  2113,
    2114,  2117,   470,  2120,  1176,  2122,  1910,   591,  2129,   583,
    2136,   470,  2154,  1925,   470,  2143,   470,  1904,  2187,  1924,
    -389,  2188,  2200,  1176,   470,  -389,   583,   470,   470,  1980,
     908,  2189,   470,   470,  2204,  2201,  2226,  2252,  2213, -1459,
     640,  2234,  2254,  2256,  2620,  2248,  2259,  2671,   470,  1993,
     470,  1993,   909,  2261,  2257,  2265,  2221,  2222,  2223,  2276,
    2280,   470,  1581,  2272,  2294,  2292,  2310,  2376,   655,  2381,
     470,   592,   911,  2385,  2371,  2380,  2071,  2405,  2714,  2437,
    2723,  2399,  2442,  2400,  1809,  2443,   470,  2402,  2408,  2450,
    -389, -1459,  2409,  2457,  2410,  2456,  2423,  2433,   467,  2440,
     467,  1232,  1173,  2434, -1459,  2458,  2455,  2479,  2483, -1459,
    2506,  2277,  2471,  2507, -1459,  -939,  1910,  2511,  2094, -1652,
    2524,  2523, -1653, -1459,   580,  2676, -1459, -1654,  2532, -1655,
      60,  2535, -1656, -1657,  1047, -1658,  2347,  2354,  1047,  -389,
    1047,  2533,  2525,  2676,  1165, -1659, -1660,  2550,   593,  2551,
   -1661, -1662,  2553,  2558, -1663, -1459,  2566, -1664,  2526,  1102,
   -1665, -1666, -1667,  2771,  2585, -1669,  2127, -1670,  2128,   571,
   -1671,  2534,  2133,  2134, -1459,   632,  2374, -1672,  2744, -1673,
   -1674,  2599,   571, -1675, -1676, -1677,   496, -1678,  -940,  2725,
    2538,  2555,  2603,  2609,  2559,  2572,  2590,  1467,  1173,  1911,
    1912,  1913,  2389,  1914,  1915,  1916,  1917,  1918,  1919,  2612,
    2631,  2611,   649,   496,   496,  2614,   470,  2619,  -354,  2628,
    2632,  2633,  2634, -1459,  2642,  2645, -1459,  2648,  2662,  2649,
    2670,  -354, -1459,  2663,  2674,  2682,  -354,  2683,  2714,  2754,
    2686,  2825,  2695,  2699,  2707,  2702,  2721,   545,   545,  2724,
     545,  2726,  2740,  2741,  2729,  2742,  2750,  1230,  2759,   470,
     470,   571,  2766,  2760,   470,  1176,  2761,  2770,  2772,   470,
     496,  2627,   470,   470,  2776,  2777,  2782,   470,  2488,  2783,
    2779,   571,  -354,   571,  2489,   594,  2784, -1459,  2785,  2790,
    2791,  2799,  2427,  2428,  2429,  2430,  2490,  2821,   470,  1993,
    2815,  -354,   470,  1993,  2803,  2214,  1230,  2830,  2836, -1679,
   -1679, -1679,  2837,  1914,  1915,  1916,  1917,  1918,  1919,  1165,
    1173,  2844,  2847,   470,  1629,  2491,  2849,  2492,   571,   571,
     571,  2854,  2845,  2846,  2867,  2855,  2856,  2869,  2873,   857,
    1970,  2467,  1980,  2464,  2466,  1688,  2602,  2514,   467,  2269,
    -354,  2765,   467,  2811,  1246,  2735,  1047,  1247,  1987,  -354,
    2100,  1863,  2379,  1470,  2309,   470,  1771,  2313,  2060, -1459,
    1314,    60,  1987,  1478,  1176,  1295,   582, -1459,  1457,  2024,
    1737,  1350,  2493,  1349,  2350,  2753,   477,  1253,  2701,  2807,
     478,   899,  2035, -1459, -1679, -1459, -1459,  1717,  2255,   580,
    2758,  2461,  2005,  2354,  1736,  1354,  2229,  2448,  2094,  2494,
     900,  -153,  2688,  2432,  2225,   733,  2749,  1479,  1904,  1255,
    2748,  1180,  2755,  1905,  1906,  1907,  2756,  1542,  1544,  1548,
    2601,  1549, -1459,  2805,  2798, -1459, -1459, -1459,  2806,  1669,
    2417,  1943,  1530,  1480,  1173,  1966,  1882,   479,  2027,  1805,
    1964,  1679,  2817,  2864,   480,  2720,  2850,   717,  2843,  2661,
     901,  1481,  1176,  2542,  2045,  1482,  2384,  1370,  2067,   470,
    2096,  2814,  1176,  2848,  2041,  2495,  1173,  2357,  2812,  2097,
    2496,   470,   470,  1690,  2126,   470,  1483,  1235,  1950,  1484,
    2370,  2270,     0,  2554,     0,     0,  -354,   470,  1993,  1317,
       0,   481,     0,  1485,     0,     0,   470,  1993,     0,     0,
       0,   470,  1993,     0,   470,  1993,     0,     0, -1679,     0,
       0,   470,   470,  2497,    60,     0,  2302,     0,     0,   571,
       0,     0, -1679,   470,  1993,   470,     0, -1679,  2498,     0,
       0,     0,     0,     0,     0,   496,   496,   467,   902,     0,
       0,   571,   571,  1321,     0,   470,   467,     0,     0,   616,
       0,   467,   855,   617,   467,  2460,     0,  2462,     0,   482,
       0,  1165, -1679,  2629,     0,     0,     0,     0,   571,  1369,
       0,     0,     0,   467,     0,     0,     0,  2354,     0,     0,
       0,   571,  1486,     0,     0,     0,     0,   903,     0,     0,
    1487,     0,   470,  1993,     0,   904,     0,     0,   571,     0,
    2646,     0,   571,     0,  2644,     0,   483,   905,   484,  1909,
       0,     0,   470,  1176,     0,     0,     0,  1264,  1462,     0,
    1463,     0,     0,   583,  2499,  2542,     0,     0,     0,     0,
     485,     0,  1488,   486,     0,   470,     0,  1230,   906,   470,
    1993,     0,   467,  1176,     0,     0,  1176,   470,     0,     0,
       0,     0,  2224,     0,  2227,     0,     0,  1165,   470,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1047,     0,
       0,     0,  1047,   470,     0,     0,     0,  2712,  1910,     0,
       0,     0,     0,   908,     0,     0,     0,     0,     0,   467,
       0,     0,     0,     0,  1102,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   909,     0, -1679,     0,     0,
    2734,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2737,     0,     0,     0,   470,   911,     0,   470,  1993,     0,
       0,     0,     0,     0,     0,  1427,     0,     0,     0,     0,
       0,  1443,   571,  1246,     0,     0,  1247,     0,     0,   470,
       0, -1679, -1679, -1679,     0,     0,   649,     0,     0,   649,
     470,  1993,     0,   496,   496,  1173,   496,   649,     0,   571,
       0,     0,  1101,     0,  2762,     0,  1253,   467,  1101,  1165,
     470,     0,     0,  1254,     0,     0,     0,     0,    60,     0,
    1541,     0,   537,     0,     0,     0,     0,     0,     0,   470,
     470,     0,     0,     0,     0,     0,     0, -1679,  1255,  1173,
     467,     0,     0,     0,  1271,  1272,  1273,  1274,  1275,  1276,
       0,     0,     0,     0,  2350,  1173,  2354,     0,  1047,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   470,
    1993,     0,     0,     0,     0,  1173,   470,     0,     0,     0,
       0,     0,     0,     0,     0,  2826,     0,     0,     0,   733,
       0,     0,  1904,     0,  1243,     0,     0,  1905,  1906,  1907,
       0,  1911,  1912,  1913,  1173,  1914,  1915,  1916,  1917,  1918,
    1919,  1173,     0,     0,  2418,     0,     0,     0,  1101,   467,
    1101,  1101,     0,     0,  1574,  1498,  1499,     0,     0,     0,
    1173,  1744,  1987,  1165,     0,     0,  1987,  1256,   470,     0,
       0,  1752,     0,  1755,     0,     0,  1766,     0,     0,     0,
       0,  1257,  1770,     0,  1772,     0,  1258,     0,     0,    60,
      60,     0,     0,     0,     0,  1165,  1779,     0,   649,     0,
       0,  1782,     0,  2731,     0,  1787,  1788,  1789,  1790,     0,
    1794,  1795,     0,     0,     0,     0,  1101,     0,     0,  1101,
    1101,  1261,     0,     0,     0,     0,     0,     0,     0,  1500,
    1501,   571,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   571,     0,   571,     0, -1461,     0,     0,     0,
       0,     0,     0,  1702,     0,  1707,     0,     0,     0,     0,
       0,     0,     0,     0,  1173,     0,  1264,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1167,     0,     0,     0,
       0,  1502,  1503,  1504,  1505,  1506,  1507,     0,   571,  1508,
    1509,     0,     0,     0,     0,     0,  1369,   496,     0,    60,
       0,     0,  1498,  1499,     0,     0,     0,   496,  1753,   496,
    1757,     0,   496,  1909,     0,     0,     0,     0,   496,     0,
     496,  1168,     0,  2350,     0,     0,     0,     0,     0,     0,
       0,   649,   496,     0,     0,     0,   649,   496, -1461,     0,
       0,   496,   496,   496,   496,     0,   496,   496,     0,     0,
       0,     0,     0,     0,     0,     0,  1266,     0,     0,     0,
    1987,     0,     0,     0,     0,  1987,   571,  1816,  1987,     0,
       0,     0,     0,     0,     0,   886,  1500,  1501,     0,     0,
       0,   887,  1910,  1824,     0,     0,     0,     0,   899,     0,
   -1461,     0,  1173,  1510,  1511,     0,     0,     0,     0,  1472,
    1474,     0,     0, -1461,     0,     0,     0,   900, -1461,     0,
       0,   733,     0, -1461,  1904,  1170,     0,     0,     0,  1905,
    1906,  1907, -1461,     0,     0, -1461,     0,     0,  1868,  1171,
       0,     0,     0,     0,     0,     0,     0,     0,  1502,  1503,
    1504,  1505,  1506,  1507,     0,     0,  1508,  1509,     0,     0,
      60,  1167,     0,     0, -1461,     0,  1267,   901,     0, -1679,
   -1679, -1679,     0,  1271,  1272,  1273,  1274,  1275,  1276,     0,
       0,    60,     0, -1461,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1165,     0,   888,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1168,     0,     0,  1538,
    1539,  1173,     0,  1987,  1512,  1513,     0,  1553,     0,  1554,
    1555,  1230,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1461,     0,  1592, -1461,  1593,     0,  1165,     0,
    1173, -1461,     0,     0,     0,     0,     0,     0,     0,  1235,
       0,     0,     0,     0,  1165,   902,     0,  1609,     0,     0,
    1510,  1511,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1165,     0,    60,     0,     0,     0,
       0,     0,     0,  1574,     0,  1911,  1912,  1913,     0,  1914,
    1915,  1916,  1917,  1918,  1919,     0, -1461,     0,     0,  1173,
    1170,     0,     0,  1165,   903,     0,     0,     0,     0,  1173,
    1165,     0,   904,     0,  1171,   899,   571,     0,     0,     0,
       0,     0,     0,  1996,   905, -1679,     0,     0,     0,  1165,
      60,  2116,     0,  1246,   900,  1172,  1247,  1996,     0,     0,
       0,  2014,     0,     0,  2017,   889,  1707,     0,     0,     0,
       0,  1980,     0,     0,     0,   906,     0,  1726,  1726,     0,
       0,     0,     0,     0,     0,     0,  1253,     0,     0,     0,
       0,  1512,  1513, -1679,     0,     0,     0,     0, -1461,     0,
       0,     0,     0,     0,   901,  2300, -1461,     0,     0,     0,
       0,  1514,  1427,  2301,  1910,   907,     0,     0,  1255,   891,
     908,     0, -1461,     0, -1461, -1461,     0,     0,  1101,     0,
       0,    60,     0,  1167,     0,     0,     0,     0,  1101,     0,
       0,  1101,   909,     0,  1173,     0,     0,     0,   910,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1461,   911,  1165, -1461, -1461, -1461,     0,     0,     0,
    2302,     0,  1427,     0,     0,     0,     0,   571,  1168,     0,
    1173, -1475,   571,  1427,   571,   571,   571,  1960,     0,     0,
       0,     0,   902,     0,     0,     0,     0,   496,     0,     0,
       0,     0,     0,     0,     0,     0,   649,     0,     0,     0,
    1173,  1101,     0,  1173,     0,   893,     0, -1679,     0,     0,
       0,     0,  1427,  1427,     0,     0,  1101,     0,     0,  1167,
    1172, -1679,     0,     0,     0,     0, -1679,     0,     0,     0,
       0,   903,     0,     0,     0,     0,     0,     0,     0,   904,
    1871,     0,   886,     0,     0,  2278,     0,     0,   887,     0,
    1574,   905,     0,  2303,     0,   899,     0,     0,     0,     0,
       0, -1679,  1170, -1475,  1168,     0,     0,     0,     0,  2311,
       0,     0,     0,     0,   900,     0,  1171,     0,     0,     0,
       0,  1165,   906,     0,  2358,  2359,  2360,  2361,  2362,  2363,
    2364,  2365,  2366,  2367,     0,     0,     0,  1911,  1912,  1913,
       0,  1914,  1915,  1916,  1917,  1918,  1919,     0,     0,     0,
       0,     0,     0,     0,     0, -1475,  1264,     0,     0,     0,
       0,     0,     0,     0,   901,     0,  2216,   908, -1475,     0,
       0,     0,     0, -1475,   571,   571,   571,   468, -1475,  1996,
    2233,  1167,     0,     0,  2233,  2247,     0, -1475,     0,   909,
   -1475,     0,     0,   888,     0,     0,     0,     0,  1170,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   911,
       0,  2304,  1171,  1707,  2305,     0,     0,     0,     0, -1475,
       0,     0,     0,  1173,     0,     0,  1168,     0,     0,   571,
    1165,   496,     0,     0,     0,  1427,  1369,  1427, -1475,  1443,
       0,     0,     0,     0,     0,     0, -1679,     0,     0,     0,
    2001,     0,   902,     0,     0,   496,     0,  2312,     0,  1165,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     496,   496,   496,   496,   496,   496,   496,   496,   496,   496,
       0,  2031,  2031,     0,     0,     0,     0, -1475,     0,     0,
   -1475,     0,     0,     0,   571,  1443, -1475,     0,   809,   809,
       0,   903,     0,  1369,     0,  1167,     0,     0,     0,   904,
       0,     0,  1172,     0,     0,   571,  1380,     0,  1165,     0,
    1170,   905,  1427,     0,     0,     0,     0,     0,  1165,     0,
       0,  2398,     0,     0,  1171,     0,     0,  1167,     0,     0,
       0,     0,   889,     0,     0,     0, -1679,     0,     0,     0,
    1168, -1475,   906,  1271,  1272,  1273,  1274,  1275,  1276,     0,
       0,   956,   963,     0,     0,     0,     0,     0,     0,  1246,
       0,     0,  1247,     0,     0,     0,     0,     0,     0,     0,
    1498,  1499,  1168,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1773,     0,     0,     0,   891,   908,     0,     0,
       0,     0,  1253,     0,     0,     0,  1980,  2426,  1172, -1679,
     571,   571,   571,   571,     0,     0,     0,  2233,  2247,   909,
    2233,     0,     0,  2435,     0,  1774,     0,  1996,     0,     0,
       0,  1996,     0, -1475,  1255,  2140,  2142,  2453,     0,   911,
       0, -1475,     0,  1165,  1170,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1500,  1501,  2014, -1475,  1171, -1475,
   -1475,  1707,     0,     0,     0,  1574,     0,     0,     0,   956,
       0,     0,     0,  1369,     0,     0,  1170,     0,     0,  1165,
       0,     0,     0,     0,     0,     0,  1186,     0,     0,     0,
    1171,     0,   893,     0,     0,     0, -1475,     0,  2515, -1475,
   -1475, -1475,     0,  2205,     0,     0,     0,     0,     0,  1165,
       0,     0,  1165,     0,  1208,     0,  1502,  1503,  1504,  1505,
    1506,  1507,     0,     0,  1508,  1509,     0,     0,     0,     0,
    1172,     0,     0, -1679,  1225,  1226,  1227,  2621,     0,  1231,
       0,     0,     0,     0,     0,     0,     0, -1679,     0,     0,
       0,     0, -1679,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1286,     0,  1427,     0,     0,     0,     0,  2537,
       0,  2639,  2640,  1824,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1679,  2650,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1328,     0,     0,     0,  1340,  1345,     0,
       0,     0,     0,     0,     0,     0,   468,  2233,  1510,  1511,
    2578,     0,     0,   496,     0,  1996,  1167,     0,     0,  1101,
    1996,     0,  1264,  1996,     0,  2589,     0,     0,  2592,     0,
    2703,     0,     0,     0,  1172,     0,     0,     0,     0,     0,
       0,     0,  2608,     0,     0,     0,     0,     0,     0,     0,
     956,     0,     0,     0,     0,     0,     0,   956,     0,     0,
    1167,  1168,   649,   496,     0,     0,  1172,     0,     0,     0,
       0,   571,  1165,     0,     0,     0,  1167,     0,   956,     0,
       0,     0,  2396,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1167,   496,   496,     0,
       0,     0,     0,     0,     0,  1168,     0,  1369,   571,     0,
       0,  2608, -1679,     0,   496,     0,     0,     0,     0,  1512,
    1513,  1168,     0,     0,     0,  1167,     0,     0,     0,     0,
       0,     0,  1167,     0,     0,     0,     0,     0,     0,     0,
       0,  1168,     0,     0,     0,   496,     0,     0,     0,     0,
       0,  1167,     0,     0,     0,  1170,     0,     0,  1996,     0,
       0,     0,     0,  2592,     0,     0,     0,     0,     0,  1171,
    1168,     0,  2698,     0,     0,     0,   496,  1168,     0,     0,
       0,     0,     0,     0,     0,   571,     0,     0,     0,     0,
       0,     0,   956,     0,     0,     0,  1168,     0,     0,  1170,
       0,     0,     0,     0,     0,     0,     0,   649,     0,     0,
       0,     0, -1679,  1171,     0,  1170,     0,     0,   571,  1271,
    1272,  1273,  1274,  1275,  1276,     0,     0,     0,  1246,  1171,
       0,  1247,     0,     0,     0,  1170,  1248,  1249,  1250,     0,
       0,     0,     0,     0,     0,  1101,   468,     0,     0,  1171,
    1101,     0,     0,  1251,     0,  2752,     0,     0,     0,   496,
       0,  1253,     0,  2589,  1170,  1167,     0,     0,  1254,     0,
       0,  1170,     0,     0,     0,     0,     0,     0,  1171,  2608,
     649,   649,   649,     0,     0,  1171,     0,     0,     0,     0,
    1170,  1472,  1474,  1255,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1171,     0,     0,     0,     0,     0,
    1168,     0,     0,     0,  1535,     0,     0,     0,     0,     0,
       0,     0,     0,  2589,     0,     0,     0,     0,     0,     0,
       0,     0,  2698,     0,  2578,  1558,     0,     0,  1575,     0,
       0,  1587,     0,  1707,     0,     0,     0,     0,  1594,  1599,
    1602,     0,     0,     0,     0,     0,     0,  1369,  2608,     0,
       0,     0,     0,     0,     0,  1172,     0,     0,  1610,     0,
       0,     0,     0,     0,  1614,  1615,  1616,  1617,     0,     0,
       0,   649,  1626,  1627,     0,     0,     0,  1638,     0,     0,
       0,  1641,  1256,  1167,  1649,  1650,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,     0,  1170,  1658,  1257,     0,     0,  1172,
    1666,  1258,     0,  1670,     0,   809,     0,   956,  1171,     0,
       0,     0,     0,     0,     0,  1172,     0,     0,     0,     0,
       0,     0,  1259,  1260,     0,     0,     0,     0,  1168,  1691,
       0,     0,     0,     0,     0,  1172,  1261,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1472,  1474,
       0,     0,     0,     0,     0,     0,     0,  1226,  1227,  1101,
       0,     0,     0,     0,  1172,     0,     0,     0,     0,     0,
       0,  1172,     0,     0,  1262,     0,     0,  1263,     0,     0,
       0,     0,     0,     0,     0,     0,   -38,     0,     0,     0,
    1172,  1264,  1167,     0,  1265,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     3,     4,     0,
       0,  1167,  1170,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     5,     0,   956,  1171,  1168,  1802,  1803,
       0,  1804,     6,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     8,  1168,     0,     0,     0,
       0,     0,  1839,     0,     0,     0,     9,     0,    10,     0,
    1167,  1266,     0,     0,     0,     0,     0,     0,     0,     0,
    1167,     0,     0,     0,     0,     0,    11,     0,     0,     0,
       0,     0,     0,     0,  1172,     0,     0,     0,   956,     0,
      12,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      13,     0,     0,     0,     0,  1168,    14,     0,     0,     0,
       0,  1170,     0,     0,    15,  1168,    16,    17,     0,     0,
    1279,     0,     0,     0,     0,  1171,     0,     0,  1880,    18,
       0,     0,     0,  1886,     0,     0,     0,     0,     0,     0,
    1170,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1246,     0,     0,  1247,  1171,     0,    19,     0,     0,     0,
    1279,  1267,     0,     0,  1268,  1269,  1270,     0,  1271,  1272,
    1273,  1274,  1275,  1276,     0,  1903,     0,     0,     0,     0,
       0,  1895,     0,  1253,     0,  1167,     0,     0,  1101,     0,
   -1679,  1599,     0,  1599,  1599,    20,     0,     0,     0,  1170,
       0,  1942,     0,     0,  1944,     0,     0,     0,     0,  1170,
       0,     0,  1172,  1171,     0,  1255,     0,     0,     0,     0,
    1245,  1167,     0,  1171,     0,  1246,     0,     0,  1247,     0,
    1168,     0,     0,  1248,  1249,  1250,     0,     0,  1962,     0,
       0,  1965,     0,  1967,     0,     0,     0,     0,     0,     0,
    1251,  1167,     0,  1252,  1167,     0,     0,     0,  1253,     0,
       0,     0,     0,     0,     0,  1254,  1168,  1279,     0,     0,
       0,     0,    21,     0,  1279,    22,     0,     0,     0,     0,
       0,     0,     0,     0,  2208,     0,     0,     0,     0,     0,
    1255,     0,     0,     0,     0,     0,  1168,     0,     0,  1168,
       0,     0,     0,    23,  1328,     0,     0,     0,     0,     0,
       0,    24,     0,     0, -1679,     0,     0,     0,     0,  1345,
       0,  1172,     0,     0,  1170,    25,     0,     0, -1679,     0,
       0,     0,    26, -1679,     0,     0,    27,  2039,  1171,     0,
       0,     0,     0,     0,     0,     0,    28,     0,     0,     0,
    1172,     0,     0,     0,     0,     0,     0,    29,     0,     0,
    1170,    30,     0,     0,     0,     0,     0,     0, -1679,     0,
       0,     0,     0,     0,  1171,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1256,
    1170,     0,     0,  1170,     0,   956,     0,    31,     0,     0,
       0,     0,    32,  1257,  1171,     0,     0,  1171,  1258,  1172,
       0,     0,     0,     0,     0,    33,     0,     0,     0,  1172,
       0,     0,     0,  1264,     0,     0,     0,     0,     0,  1259,
    1260,     0,     0,     0,  1167,     0,     0,     0,     0,    34,
       0,     0,     0,  1261,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0,     0,   -38,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2153,     0,  1168,
       0,  1262,     0,     0,  1263,     0,     0,  2157,     0,     0,
       0,  2158,     0,     0,  2160,     0,     0,  1279,  1264,     0,
       0,  1265,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1679,     0,     0,     0,     0,     0,  1279,
    2180,  2181,     0,     0,  1582,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1172,     0,  1279,  1279,  1279,     0,
       0,     0,  1279,  2194,     0,     0,  2197,     0,  2199,     0,
       0,     0,  1246,     0,     0,  1247,  2203,     0,     0,     0,
    1248,  1249,  1250,     0,  2210,  2211,     0,     0,  1246,     0,
    1172,  1247,     0,  1170,     0,     0,     0,  1251,     0,     0,
       0,     0,     0,     0,     0,  1253,     0,  1171,  1266,     0,
       0,     0,  1254,  2251,     0,     0,     0,  1279,     0,     0,
    1172,  1253,  2258,  1172,     0,     0,     0,     0, -1679,     0,
       0,     0,     0, -1679,     0,     0,     0,  1255,  2271,     0,
    1271,  1272,  1273,  1274,  1275,  1276,     0,     0,     0,     0,
       0,     0,     0,  1255,     0,     0,     0,     0,     0,  1279,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1279,     0,     0,     0,     0,  1279,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1267,     0,
       0,  1268,  1269,  1270,     0,  1271,  1272,  1273,  1274,  1275,
    1276,     0,  2209,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1246,     0,     0,  1247,  1256,     0,     0,     0,
    1248,  1249,  1250,     0,     0,     0,     0,     0,     0,     0,
    1257,     0, -1679,     0,     0,  1258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1253, -1679,     0,  2401,     0,
       0, -1679,  1254,     0,     0,     0,  1259,  1260,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1261,     0,     0,     0,     0,     0,     0,  1255,     0,     0,
       0,     0,     0,  1172,     0,     0, -1679,     0,     0,     0,
       0,  2411,  2412,     0,     0,     0,  2413,     0,     0,     0,
       0,  2416,     0,     0,  2419,  2420,     0,     0,  1262,  2424,
       0,  1263,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1264,     0,     0,  1265,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1264,     0,     0,     0,     0,  1279,     0,     0,     0,
       0,     0,     0,     0,     0,   809,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1279,
       0,     0,     0,     0,     0,     0,  1256,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1279,     0,  1582,  1582,
    1257,  1920,     0,  1582,     0,  1258,     0,  2509,  1279,     0,
       0,     0,     0,     0,     0,  1279,     0,     0,     0,     0,
    1279,     0,     0,  1279,     0,  1266, -1679, -1679,     0,     0,
       0,  1279,     0,     0,     0,  1279,  1279,  1279,  1279,     0,
    1261, -1679,     0,     0,  1582,  1582,     0,  1279,  1279,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1279,
       0,     0,  1279,     0,     0,     0,     0,     0,     0,     0,
    1279,  1279,  1279,  1279,  1279,  1279,  1279,  1279,  1279,  1279,
       0, -1679,     0,     0,     0,     0,     0,  1279,     0,     0,
       0,  1279,     0,     0,     0,  1264,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1279,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2562,  2563,  1267,     0,  2564,  1268,  1269,
    1270,     0,  1271,  1272,  1273,  1274,  1275,  1276,     0,     0,
       0, -1679,  1604,     0,     0,     0,     0,     0,  1271,  1272,
    1273,  1274,  1275,  1276,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2597,  2598,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2610,     0,     0,
       0,     0,     0,     0,     0,  1266,     0,     0,  1246,     0,
       0,  1247,     0,     0,     0,     0,  1248,  1249,  1250,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1251,     0,     0,     0,     0,     0,     0,
       0,  1253,     0,  1279,  1279,  1279,     0,     0,  1254,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1246,     0,     0,  1247,     0,     0,     0,     0,  1248,
    1249,  1250,     0,  1255,     0,     0,     0,     0,     0,     0,
    1279,     0,     0,     0,     0,     0,  1251,     0,     0,     0,
       0,     0,     0,     0,  1253,     0,     0,     0,     0,     0,
       0,  1254,     0,     0,     0,  1267,     0,  2685,  1268,  1269,
    1270,     0,  1271,  1272,  1273,  1274,  1275,  1276,     0,  1231,
       0,  1279,     0,     0,     0,     0,  1255,  1279,     0,     0,
    2704,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1920,  1920,  1279,  2718,  1582,  1582,  1582,  1582,
       0,     0,  1582,  1582,  1582,  1582,  1582,  1582,  1582,  1582,
    1582,  1582,  1920,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1256,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1279,     0,  1279,  1257,     0,     0,  1920,
    1920,  1258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1279,  1582,  1582,  1279,     0,  1279,     0,
       0,     0,  1259,  1260,     0,     0,     0,     0,     0,     0,
       0,  2597,     0,     0,     0,  1256,  1261,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1257,
       0,     0,     0,     0,  1258,  1246,     0,     0,  1247,     0,
       0,     0,  2781,  1248,  1249,  1250,     0,     0,     0,     0,
       0,     0,     0,     0,  1262,  1259,  1260,  1263,     0,     0,
    1251,  2795,  2795,     0,     0,     0,     0,     0,  1253,  1261,
    1279,  1264,     0,     0,  1265,  1254,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1246,     0,
    1255,  1247,     0,     0,     0,     0,     0,  1262,  2795,     0,
    1263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1264,     0,     0,  1265,     0,     0,
       0,  1253,     0,     0,     0,     0,     0,     0, -1679,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1266,     0,  1255,     0,     0,     0,     0,     0,     0,
    2795,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1279,     0,     0,     0,  1279,  1279,
       0,  1279,     0,     0,  1920,  1920,  1920,  1920,     0,  1256,
       0,  1920,  1920,  1920,  1920,  1920,  1920,  1920,  1920,  1920,
    1920,  1279,  1279,  1257,  1266,     0,     0,     0,  1258,     0,
       0,     0,     0,     0,     0,  1279,     0,     0,  1279,     0,
    1279,     0,  2421,     0,  1279,     0,     0,  1920,  1920,  1259,
    1260,  1279,  1279,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1261,     0,     0,     0,     0,     0,     0,
       0,  1267, -1679,     0,  1268,  1269,  1270,     0,  1271,  1272,
    1273,  1274,  1275,  1276,     0,     0, -1679,     0,  1946,     0,
       0, -1679,  1279,     0,     0,     0,     0,     0,     0,  1279,
       0,  1262,     0,     0,  1263,     0,     0,     0,     0,     0,
       0,     0,  1279,     0,     0,     0,     0,     0,  1264,     0,
       0,  1265,     0,     0,  1267,     0, -1679,  1268,  1269,  1270,
       0,  1271,  1272,  1273,  1274,  1275,  1276,     0,     0,     0,
       0,  2156,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1264,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1266,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1279,     0,     0,     0,  1582,     0,     0,     0,
       0,     0,  1279,  1279,  1279,     0,     0,  1279,     0,     0,
    1279,  1279,     0,     0,     0,  1279,     0,     0,     0,     0,
       0, -1679,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1267,     0,
       0,  1268,  1269,  1270,     0,  1271,  1272,  1273,  1274,  1275,
    1276,     0,     0,     0,     0,  2192,     0,     0,     0,     0,
       0,     0,  1582,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1279,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1679,     0,     0,     0,     0,     0,     0,  1271,  1272,
    1273,  1274,  1275,  1276,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1920,  1582,
       0,     0,     0,  1279,  1279,  1279,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1279,  1279,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1279,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1920,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   923,   730,   537,   731,   732,
     733,   734,   735,     0,     0,     0,     0,     0,  1920,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,   924,
      99,   100,   101,     0,     0,     0,  1279,   736,     0,     0,
     102,   103,     0,   104,   105,   106,   925,   108,   109,   110,
     111,   737,   926,   738,   739,  1279,   116,   117,   118,   119,
     120,   121,   740,   741,   122,   123,   742,   743,   126,  1279,
     127,   128,   129,   130,   744,     0,   927,     0,   133,   134,
     135,   136,   137,   928,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,   929,   149,   150,   151,   746,
     747,   748,   930,   750,   751,   752,   153,   154,   155,   156,
     157,   158,   159,   753,   754,   162,   755,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,   931,  1279,   175,   176,   756,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,  1279,   186,   187,   188,
     189,   757,   191,   192,   193,   194,   758,   759,   196,     0,
     197,   198,   760,   200,     0,   201,     0,   202,   932,     0,
     933,   205,   206,   207,   934,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   935,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,   936,   232,   233,   234,   235,   236,   761,   762,
       0,   763,     0,   240,   937,   938,   243,   939,   245,   246,
     247,   248,   249,     0,     0,   250,   940,   252,   941,     0,
     254,   255,   256,   764,   765,   257,   258,   259,   260,   261,
     942,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   766,
     943,   767,   284,   285,   286,   287,   768,   288,   289,   944,
     291,   769,   770,   293,   771,   295,   296,   297,     0,   298,
     299,     0,     0,   772,   301,   302,     0,     0,   303,   304,
     945,   306,   946,   773,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   774,   322,   323,
     324,   325,   326,   327,     0,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   775,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,   354,   355,   947,   357,   358,   359,   776,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   777,   377,   378,
     379,   380,   381,   948,   383,   384,   778,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     949,   399,   779,   401,     0,   402,   403,     0,   404,   950,
     406,   407,   408,   409,   410,     0,   780,   781,     0,     0,
     413,   414,   782,   416,   783,   784,   418,   419,   951,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,   786,     0,   431,   432,   433,   434,   435,   436,   787,
     952,   438,   953,   440,   441,   442,   443,     0,     0,   444,
       0,     0,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   788,     0,     0,     0,     0,     0,     0,
     789,   790,   954,     0,     0,     0,     0,   792,     0,   793,
     955,     0,     0,     0,   794,     0,   795,   796,    90,   730,
     537,   731,   732,   733,   734,   735,     0,     0,     0,     0,
       0,     0,     0,     0,    91,    92,    93,    94,    95,    96,
      97,    98,     0,    99,   100,   101,     0,     0,     0,     0,
     736,     0,     0,   102,   103,     0,   104,   105,   106,   107,
     108,   109,   110,   111,   737,   113,   738,   739,     0,   116,
     117,   118,   119,   120,   121,   740,   741,   122,   123,   742,
     743,   126,     0,   127,   128,   129,   130,   744,     0,   745,
       0,   133,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   746,   747,   748,   749,   750,   751,   752,   153,
     154,   155,   156,   157,   158,   159,   753,   754,   162,   755,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,   173,   174,     0,     0,   175,   176,   756,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   757,   191,   192,   193,   194,   758,
     759,   196,     0,   197,   198,   760,   200,     0,   201,     0,
     202,   203,     0,   204,   205,   206,   207,   208,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   761,   762,     0,   763,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,     0,   250,   251,
     252,   253,     0,   254,   255,   256,   764,   765,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   766,   282,   767,   284,   285,   286,   287,   768,
     288,   289,   290,   291,   769,   770,   293,   771,   295,   296,
     297,     0,   298,   299,     0,     0,   772,   301,   302,     0,
       0,   303,   304,   305,   306,   307,   773,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   319,   320,
     774,   322,   323,   324,   325,   326,   327,     0,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   775,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,     0,   354,   355,   356,   357,
     358,   359,   776,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,    25,   372,   373,   374,   375,   376,
     777,   377,   378,   379,   380,   381,   382,   383,   384,   778,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   779,   401,     0,   402,   403,
      30,   404,   405,   406,   407,   408,   409,   410,     0,   780,
     781,     0,     0,   413,   414,   782,   416,   783,   784,   418,
     419,   785,   421,   422,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,   786,     0,   431,   432,   433,   434,
     435,   563,   787,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,     0,    33,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   788,     0,    34,     0,
       0,     0,     0,   789,   790,     0,     0,     0,     0,     0,
     792,     0,   793,  2694,     0,     0,     0,   794,     0,   795,
     796,    90,   730,   537,   731,   732,   733,   734,   735,     0,
       0,     0,     0,     0,     0,     0,     0,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,   736,     0,     0,   102,   103,     0,   104,
     105,   106,   107,   108,   109,   110,   111,   737,   113,   738,
     739,     0,   116,   117,   118,   119,   120,   121,   740,   741,
     122,   123,   742,   743,   126,     0,   127,   128,   129,   130,
     744,     0,   745,     0,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   746,   747,   748,   749,   750,
     751,   752,   153,   154,   155,   156,   157,   158,   159,   753,
     754,   162,   755,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   756,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   757,   191,   192,
     193,   194,   758,   759,   196,     0,   197,   198,   760,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   236,   761,   762,     0,   763,     0,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
       0,   250,   251,   252,   253,     0,   254,   255,   256,   764,
     765,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   766,   282,   767,   284,   285,
     286,   287,   768,   288,   289,   290,   291,   769,   770,   293,
     771,   295,   296,   297,     0,   298,   299,     0,     0,   772,
     301,   302,     0,     0,   303,   304,   305,   306,   307,   773,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   774,   322,   323,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     775,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,   356,   357,   358,   359,   776,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    25,   372,   373,
     374,   375,   376,   777,   377,   378,   379,   380,   381,   382,
     383,   384,   778,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   779,   401,
       0,   402,   403,    30,   404,   405,   406,   407,   408,   409,
     410,     0,   780,   781,     0,     0,   413,   414,   782,   416,
     783,   784,   418,   419,   785,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,   786,     0,   431,
     432,   433,   434,   435,   563,   787,     0,   438,   439,   440,
     441,   442,   443,     0,     0,   444,     0,    33,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   788,
       0,    34,     0,     0,     0,     0,   789,   790,     0,     0,
       0,     0,     0,   792,     0,   793,     0,     0,     0,     0,
     794,     0,   795,   796,    90,   730,   537,   731,   732,   733,
     734,   735,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,   736,     0,     0,   102,
     103,     0,   104,   105,   106,   107,   108,   109,   110,   111,
     737,   113,   738,   739,  1595,   116,   117,   118,   119,   120,
     121,   740,   741,   122,   123,   742,   743,   126,     0,   127,
     128,   129,   130,   744,     0,   745,     0,   133,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   746,   747,
     748,   749,   750,   751,   752,   153,   154,   155,   156,   157,
     158,   159,   753,   754,   162,   755,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
       0,     0,   175,   176,   756,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     757,   191,   192,   193,   194,   758,   759,   196,     0,   197,
     198,   760,   200,     0,   201,     0,   202,   203,  1596,   204,
     205,   206,   207,   208,   209,     0,   210,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   761,   762,     0,
     763,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,  1597,   250,   251,   252,   253,     0,   254,
     255,   256,   764,   765,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   766,   282,
     767,   284,   285,   286,   287,   768,   288,   289,   290,   291,
     769,   770,   293,   771,   295,   296,   297,     0,   298,   299,
       0,     0,   772,   301,   302,     0,     0,   303,   304,   305,
     306,   307,   773,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   319,   320,   774,   322,   323,   324,
     325,   326,   327,     0,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   775,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,     0,   354,   355,   356,   357,   358,   359,   776,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   777,   377,   378,   379,
     380,   381,   382,   383,   384,   778,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   779,   401,     0,   402,   403,     0,   404,   405,   406,
     407,   408,   409,   410,     0,   780,   781,     0,  1598,   413,
     414,   782,   416,   783,   784,   418,   419,   785,   421,   422,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
     786,     0,   431,   432,   433,   434,   435,   436,   787,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,     0,
       0,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   788,     0,     0,     0,     0,     0,     0,   789,
     790,     0,     0,     0,     0,     0,   792,     0,   793,     0,
       0,     0,     0,   794,     0,   795,   796,    90,   730,   537,
     731,   732,   733,   734,   735,     0,     0,     0,     0,     0,
       0,     0,     0,    91,    92,    93,    94,    95,    96,    97,
      98,     0,    99,   100,   101,     0,     0,     0,     0,   736,
       0,     0,   102,   103,     0,   104,   105,   106,   107,   108,
     109,   110,   111,   737,   113,   738,   739,     0,   116,   117,
     118,   119,   120,   121,   740,   741,   122,   123,   742,   743,
     126,     0,   127,   128,   129,   130,   744,     0,   745,     0,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   746,   747,   748,   749,   750,   751,   752,   153,   154,
     155,   156,   157,   158,   159,   753,   754,   162,   755,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,     0,     0,   175,   176,   756,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   757,   191,   192,   193,   194,   758,   759,
     196,     0,   197,   198,   760,   200,     0,   201,     0,   202,
     203,     0,   204,   205,   206,   207,   208,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   236,
     761,   762,     0,   763,     0,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,     0,   250,   251,   252,
     253,     0,   254,   255,   256,   764,   765,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   766,   282,   767,   284,   285,   286,   287,   768,   288,
     289,   290,   291,   769,   770,   293,   771,   295,   296,   297,
       0,   298,   299,     0,     0,   772,   301,   302,     0,     0,
     303,   304,   305,   306,   307,   773,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   774,
     322,   323,   324,   325,   326,   327,     0,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   775,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,     0,   354,   355,   356,   357,   358,
     359,   776,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   777,
     377,   378,   379,   380,   381,   382,   383,   384,   778,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   779,   401,     0,   402,   403,     0,
     404,   405,   406,   407,   408,   409,   410,     0,   780,   781,
       0,     0,   413,   414,   782,   416,   783,   784,   418,   419,
     785,   421,   422,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,   786,     0,   431,   432,   433,   434,   435,
     436,   787,     0,   438,   439,   440,   441,   442,   443,     0,
       0,   444,     0,     0,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   788,     0,     0,     0,     0,
       0,     0,   789,   790,   791,     0,     0,     0,     0,   792,
       0,   793,     0,     0,     0,     0,   794,     0,   795,   796,
      90,   730,   537,   731,   732,   733,   734,   735,     0,     0,
       0,     0,     0,     0,     0,     0,    91,    92,    93,    94,
      95,    96,    97,    98,  1338,    99,   100,   101,     0,     0,
       0,     0,   736,     0,     0,   102,   103,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   737,   113,   738,   739,
       0,   116,   117,   118,   119,   120,   121,   740,   741,   122,
     123,   742,   743,   126,     0,   127,   128,   129,   130,   744,
       0,   745,     0,   133,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   746,   747,   748,   749,   750,   751,
     752,   153,   154,   155,   156,   157,   158,   159,   753,   754,
     162,   755,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,     0,     0,   175,   176,
     756,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   757,   191,   192,   193,
     194,   758,   759,   196,     0,   197,   198,   760,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   236,   761,   762,     0,   763,     0,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,     0,
     250,   251,   252,   253,     0,   254,   255,   256,   764,   765,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   766,   282,   767,   284,   285,   286,
     287,   768,   288,   289,   290,   291,   769,   770,   293,   771,
     295,   296,   297,     0,   298,   299,     0,     0,   772,   301,
     302,     0,     0,   303,   304,   305,   306,   307,   773,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     319,   320,   774,   322,   323,   324,   325,   326,   327,     0,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   775,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,     0,   354,   355,
     356,   357,   358,   359,   776,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   777,   377,   378,   379,   380,   381,   382,   383,
     384,   778,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   779,   401,     0,
     402,   403,     0,   404,   405,   406,   407,   408,   409,   410,
       0,   780,   781,     0,     0,   413,   414,   782,   416,   783,
     784,   418,   419,   785,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,   786,     0,   431,   432,
     433,   434,   435,   436,   787,     0,   438,   439,   440,   441,
     442,   443,     0,     0,   444,     0,     0,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   788,     0,
       0,     0,     0,     0,     0,   789,   790,     0,     0,     0,
       0,     0,   792,     0,   793,     0,     0,     0,     0,   794,
       0,   795,   796,   923,   730,   537,   731,   732,   733,   734,
     735,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     0,     0,     0,     0,   736,     0,     0,   102,   103,
       0,   104,   105,   106,   925,   108,   109,   110,   111,   737,
     926,   738,   739,     0,   116,   117,   118,   119,   120,   121,
     740,   741,   122,   123,   742,   743,   126,     0,   127,   128,
     129,   130,   744,     0,   927,     0,   133,   134,   135,   136,
     137,   928,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,   929,   149,   150,   151,   746,   747,   748,
     930,   750,   751,   752,   153,   154,   155,   156,   157,   158,
     159,   753,   754,   162,   755,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,     0,
       0,   175,   176,   756,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   757,
     191,   192,   193,   194,   758,   759,   196,     0,   197,   198,
     760,   200,     0,   201,     0,   202,   932,     0,   933,   205,
     206,   207,   934,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   935,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     936,   232,   233,   234,   235,   236,   761,   762,     0,   763,
       0,   240,   937,   938,   243,   939,   245,   246,   247,   248,
     249,     0,     0,   250,   940,   252,   941,     0,   254,   255,
     256,   764,   765,   257,   258,   259,   260,   261,   942,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   766,   943,   767,
     284,   285,   286,   287,   768,   288,   289,   944,   291,   769,
     770,   293,   771,   295,   296,   297,     0,   298,   299,     0,
       0,   772,   301,   302,     0,     0,   303,   304,   945,   306,
     946,   773,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   774,   322,   323,   324,   325,
     326,   327,     0,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   775,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,   354,   355,   947,   357,   358,   359,   776,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   777,   377,   378,   379,   380,
     381,   948,   383,   384,   778,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   949,   399,
     779,   401,     0,   402,   403,     0,   404,   950,   406,   407,
     408,   409,   410,     0,   780,   781,     0,     0,   413,   414,
     782,   416,   783,   784,   418,   419,   951,   421,   422,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,   786,
       0,   431,   432,   433,   434,   435,   436,   787,     0,   438,
     953,   440,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   788,     0,     0,     0,     0,     0,     0,   789,   790,
       0,     0,     0,     0,     0,   792,     0,   793,  1454,     0,
       0,     0,   794,     0,   795,   796,    90,   730,   537,   731,
     732,   733,   734,   735,     0,     0,     0,     0,     0,     0,
       0,     0,    91,    92,    93,    94,    95,    96,    97,    98,
       0,    99,   100,   101,     0,     0,     0,     0,   736,     0,
       0,   102,   103,     0,   104,   105,   106,   107,   108,   109,
     110,   111,   737,   113,   738,   739,     0,   116,   117,   118,
     119,   120,   121,   740,   741,   122,   123,   742,   743,   126,
       0,   127,   128,   129,   130,   744,     0,   745,     0,   133,
     134,   135,   136,   137,   138,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     746,   747,   748,   749,   750,   751,   752,   153,   154,   155,
     156,   157,   158,   159,   753,   754,   162,   755,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
     173,   174,     0,     0,   175,   176,   756,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   757,   191,   192,   193,   194,   758,   759,   196,
       0,   197,   198,   760,   200,     0,   201,     0,   202,   203,
       0,   204,   205,   206,   207,   208,   209,     0,   210,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   236,   761,
     762,     0,   763,     0,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,     0,     0,   250,   251,   252,   253,
       0,   254,   255,   256,   764,   765,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     766,   282,   767,   284,   285,   286,   287,   768,   288,   289,
     290,   291,   769,   770,   293,   771,   295,   296,   297,     0,
     298,   299,     0,     0,   772,   301,   302,     0,     0,   303,
     304,   305,   306,   307,   773,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   319,   320,   774,   322,
     323,   324,   325,   326,   327,     0,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   775,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,     0,   354,   355,   356,   357,   358,   359,
     776,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   777,   377,
     378,   379,   380,   381,   382,   383,   384,   778,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   779,   401,     0,   402,   403,     0,   404,
     405,   406,   407,   408,   409,   410,     0,   780,   781,     0,
       0,   413,   414,   782,   416,   783,   784,   418,   419,   785,
     421,   422,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,   786,     0,   431,   432,   433,   434,   435,   436,
     787,     0,   438,   439,   440,   441,   442,   443,     0,     0,
     444,     0,     0,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   788,     0,     0,     0,     0,     0,
       0,   789,   790,     0,     0,     0,     0,     0,   792,     0,
     793,  1585,     0,     0,     0,   794,     0,   795,   796,   923,
     730,   537,   731,   732,   733,   734,   735,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,   736,     0,     0,   102,   103,     0,   104,   105,   106,
     925,   108,   109,   110,   111,   737,   926,   738,   739,     0,
     116,   117,   118,   119,   120,   121,   740,   741,   122,   123,
     742,   743,   126,     0,   127,   128,   129,   130,   744,     0,
     927,     0,   133,   134,   135,   136,   137,   928,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   929,
     149,   150,   151,   746,   747,   748,   930,   750,   751,   752,
     153,   154,   155,   156,   157,   158,   159,   753,   754,   162,
     755,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,     0,     0,   175,   176,   756,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   757,   191,   192,   193,   194,
     758,   759,   196,     0,   197,   198,   760,   200,     0,   201,
       0,   202,   932,     0,   933,   205,   206,   207,   934,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   935,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,   936,   232,   233,   234,
     235,   236,   761,   762,     0,   763,     0,   240,   937,   938,
     243,   939,   245,   246,   247,   248,   249,     0,     0,   250,
     940,   252,   941,     0,   254,   255,   256,   764,   765,   257,
     258,   259,   260,   261,   942,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   766,   943,   767,   284,   285,   286,   287,
     768,   288,   289,   944,   291,   769,   770,   293,   771,   295,
     296,   297,     0,   298,   299,     0,     0,   772,   301,   302,
       0,     0,   303,   304,   945,   306,   946,   773,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   774,   322,   323,   324,   325,   326,   327,     0,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   775,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,   354,   355,   947,
     357,   358,   359,   776,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   777,   377,   378,   379,   380,   381,   948,   383,   384,
     778,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   949,   399,   779,   401,     0,   402,
     403,     0,   404,   950,   406,   407,   408,   409,   410,     0,
     780,   781,     0,     0,   413,   414,   782,   416,   783,   784,
     418,   419,   951,   421,   422,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,   786,     0,   431,   432,   433,
     434,   435,   436,   787,  1799,   438,   953,   440,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   788,     0,     0,
       0,     0,     0,     0,   789,   790,     0,     0,     0,     0,
       0,   792,     0,   793,     0,     0,     0,     0,   794,     0,
     795,   796,    90,   730,   537,   731,   732,   733,   734,   735,
       0,     0,     0,     0,     0,     0,     0,     0,    91,    92,
      93,    94,    95,    96,    97,    98,     0,    99,   100,   101,
       0,     0,     0,     0,   736,     0,     0,   102,   103,     0,
     104,   105,   106,   107,   108,   109,   110,   111,   737,   113,
     738,   739,     0,   116,   117,   118,   119,   120,   121,   740,
     741,   122,   123,   742,   743,   126,     0,   127,   128,   129,
     130,   744,     0,   745,     0,   133,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   746,   747,   748,   749,
     750,   751,   752,   153,   154,   155,   156,   157,   158,   159,
     753,   754,   162,   755,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,   171,   172,   173,   174,     0,     0,
     175,   176,   756,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   757,   191,
     192,   193,   194,   758,   759,   196,     0,   197,   198,   760,
     200,     0,   201,     0,   202,   203,  1596,   204,   205,   206,
     207,   208,   209,     0,   210,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   236,   761,   762,     0,   763,     0,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
       0,     0,   250,   251,   252,   253,     0,   254,   255,   256,
     764,   765,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   766,   282,   767,   284,
     285,   286,   287,   768,   288,   289,   290,   291,   769,   770,
     293,   771,   295,   296,   297,     0,   298,   299,     0,     0,
     772,   301,   302,     0,     0,   303,   304,   305,   306,   307,
     773,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   319,   320,   774,   322,   323,   324,   325,   326,
     327,     0,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   775,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,     0,
     354,   355,   356,   357,   358,   359,   776,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   777,   377,   378,   379,   380,   381,
     382,   383,   384,   778,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   779,
     401,     0,   402,   403,     0,   404,   405,   406,   407,   408,
     409,   410,     0,   780,   781,     0,     0,   413,   414,   782,
     416,   783,   784,   418,   419,   785,   421,   422,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,   786,     0,
     431,   432,   433,   434,   435,   436,   787,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,     0,     0,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     788,     0,     0,     0,     0,     0,     0,   789,   790,     0,
       0,     0,     0,     0,   792,     0,   793,     0,     0,     0,
       0,   794,     0,   795,   796,    90,   730,   537,   731,   732,
     733,   734,   735,     0,     0,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,     0,
      99,   100,   101,     0,     0,     0,     0,   736,     0,     0,
     102,   103,     0,   104,   105,   106,   107,   108,   109,   110,
     111,   737,   113,   738,   739,     0,   116,   117,   118,   119,
     120,   121,   740,   741,   122,   123,   742,   743,   126,     0,
     127,   128,   129,   130,   744,     0,   745,     0,   133,   134,
     135,   136,   137,   138,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   746,
     747,   748,   749,   750,   751,   752,   153,   154,   155,   156,
     157,   158,   159,   753,   754,   162,   755,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,     0,     0,   175,   176,   756,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   757,   191,   192,   193,   194,   758,   759,   196,     0,
     197,   198,   760,   200,     0,   201,     0,   202,   203,     0,
     204,   205,   206,   207,   208,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   236,   761,   762,
       0,   763,     0,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,     0,     0,   250,   251,   252,   253,     0,
     254,   255,   256,   764,   765,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   766,
     282,   767,   284,   285,   286,   287,   768,   288,   289,   290,
     291,   769,   770,   293,   771,   295,   296,   297,     0,   298,
     299,     0,     0,   772,   301,   302,     0,     0,   303,   304,
     305,   306,   307,   773,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   774,   322,   323,
     324,   325,   326,   327,     0,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   775,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,   354,   355,   356,   357,   358,   359,   776,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   777,   377,   378,
     379,   380,   381,   382,   383,   384,   778,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   779,   401,     0,   402,   403,     0,   404,   405,
     406,   407,   408,   409,   410,     0,   780,   781,     0,     0,
     413,   414,   782,   416,   783,   784,   418,   419,   785,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,   786,     0,   431,   432,   433,   434,   435,   436,   787,
       0,   438,   439,   440,   441,   442,   443,     0,     0,   444,
       0,     0,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   788,     0,     0,     0,     0,     0,     0,
     789,   790,     0,     0,     0,     0,     0,   792,     0,   793,
       0,     0,     0,     0,   794,     0,   795,   796,   923,   730,
     537,   731,   732,   733,   734,   735,     0,     0,     0,     0,
       0,     0,     0,     0,    91,    92,    93,    94,    95,    96,
      97,    98,     0,    99,   100,   101,     0,     0,     0,     0,
     736,     0,     0,   102,   103,     0,   104,   105,   106,   925,
     108,   109,   110,   111,   737,   926,   738,   739,     0,   116,
     117,   118,   119,   120,   121,   740,   741,   122,   123,   742,
     743,   126,     0,   127,   128,   129,   130,   744,     0,   927,
       0,   133,   134,   135,   136,   137,   928,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   929,   149,
     150,   151,   746,   747,   748,   930,   750,   751,   752,   153,
     154,   155,   156,   157,   158,   159,   753,   754,   162,   755,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,   173,   174,     0,     0,   175,   176,   756,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   757,   191,   192,   193,   194,   758,
     759,   196,     0,   197,   198,   760,   200,     0,   201,     0,
     202,   932,     0,   933,   205,   206,   207,   934,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   935,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   936,   232,   233,   234,   235,
     236,   761,   762,     0,   763,     0,   240,   937,   938,   243,
     939,   245,   246,   247,   248,   249,     0,     0,   250,   940,
     252,   941,     0,   254,   255,   256,   764,   765,   257,   258,
     259,   260,   261,   942,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   766,   943,   767,   284,   285,   286,   287,   768,
     288,   289,   944,   291,   769,   770,   293,   771,   295,   296,
     297,     0,   298,   299,     0,     0,   772,   301,   302,     0,
       0,   303,   304,   945,   306,   946,   773,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   319,   320,
     774,   322,   323,   324,   325,   326,   327,     0,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   775,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,     0,   354,   355,   947,   357,
     358,   359,   776,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     777,   377,   378,   379,   380,   381,   948,   383,   384,   778,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   949,   399,   779,   401,     0,   402,   403,
       0,   404,   950,   406,   407,   408,   409,   410,     0,   780,
     781,     0,     0,   413,   414,   782,   416,   783,   784,   418,
     419,   951,   421,   422,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,   786,     0,   431,   432,   433,   434,
     435,   436,   787,     0,   438,   953,   440,   441,   442,   443,
       0,     0,   444,     0,     0,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   788,     0,     0,     0,
       0,     0,     0,   789,   790,     0,     0,     0,     0,     0,
     792,     0,   793,     0,     0,     0,     0,   794,     0,   795,
     796,    90,   730,   537,   731,   732,   733,   734,   735,     0,
       0,     0,     0,     0,     0,     0,     0,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,   736,     0,     0,   102,   103,     0,   104,
     105,   106,   107,   108,   109,   110,   111,   737,   113,   738,
     739,     0,   116,   117,   118,   119,   120,   121,   740,   741,
     122,   123,   742,   743,   126,     0,   127,   128,   129,   130,
     744,     0,   745,     0,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   746,   747,   748,   749,   750,
     751,   752,   153,   154,   155,   156,   157,   158,   159,   753,
     754,   162,   755,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   756,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   757,   191,   192,
     193,   194,   758,   759,   196,     0,   197,   198,   760,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   236,   761,   762,     0,   763,     0,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
       0,   250,   251,   252,   253,     0,   254,   255,   256,   764,
     765,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   766,   282,   767,   284,   285,
     286,   287,   768,   288,   289,   290,   291,   769,   770,   293,
     771,   295,   296,   297,     0,   298,   299,     0,     0,   772,
     301,   302,     0,     0,   303,   304,   305,   306,   307,   773,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   774,   322,   323,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     775,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,   356,   357,   358,   359,   776,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   777,   377,   378,   379,   380,   381,   382,
     383,   384,   778,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   779,   401,
       0,   402,   403,     0,   404,   405,   406,   407,   408,   409,
     410,     0,   780,   781,     0,     0,   413,   414,   782,   416,
     783,   784,   418,   419,   785,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,   786,     0,   431,
     432,   433,   434,   435,   436,   787,     0,   438,   439,   440,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   788,
       0,     0,     0,     0,     0,     0,  1341,  1342,     0,     0,
       0,     0,     0,   792,     0,   793,     0,     0,     0,     0,
     794,     0,   795,   796,    90,  1724,   537,   731,   732,   733,
     734,   735,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,   736,     0,     0,   102,
     103,     0,   104,   105,   106,   107,   108,   109,   110,   111,
     737,   113,   738,   739,     0,   116,   117,   118,   119,   120,
     121,   740,   741,   122,   123,   742,   743,   126,     0,   127,
     128,   129,   130,   744,     0,   745,     0,   133,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   746,   747,
     748,   749,   750,   751,   752,   153,   154,   155,   156,   157,
     158,   159,   753,   754,   162,   755,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
       0,     0,   175,   176,   756,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     757,   191,   192,   193,   194,   758,   759,   196,     0,   197,
     198,   760,   200,     0,   201,     0,   202,   203,     0,   204,
     205,   206,   207,   208,   209,     0,   210,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   761,   762,     0,
     763,     0,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,     0,     0,   250,   251,   252,   253,     0,   254,
     255,   256,   764,   765,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   766,   282,
     767,   284,   285,   286,   287,   768,   288,   289,   290,   291,
     769,   770,   293,   771,   295,   296,   297,     0,   298,   299,
       0,     0,   772,   301,   302,     0,     0,   303,   304,   305,
     306,   307,   773,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   319,   320,   774,   322,   323,   324,
     325,   326,   327,     0,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   775,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,     0,   354,   355,   356,   357,   358,   359,   776,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   777,   377,   378,   379,
     380,   381,   382,   383,   384,   778,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   779,   401,     0,   402,   403,     0,   404,   405,   406,
     407,   408,   409,   410,     0,   780,   781,     0,     0,   413,
     414,   782,   416,   783,   784,   418,   419,   785,   421,   422,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
     786,     0,   431,   432,   433,   434,   435,   436,   787,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,     0,
       0,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   788,     0,     0,     0,     0,     0,     0,   789,
     790,     0,     0,     0,     0,     0,   792,     0,   793,     0,
       0,     0,     0,   794,     0,   795,   796,    90,   730,   537,
     731,   732,   733,   734,   735,     0,     0,     0,     0,     0,
       0,     0,     0,    91,    92,    93,    94,    95,    96,    97,
      98,     0,    99,   100,   101,     0,     0,     0,     0,   736,
       0,     0,   102,   103,     0,   104,   105,   106,   107,   108,
     109,   110,   111,   737,   113,   738,   739,     0,   116,   117,
     118,   119,   120,   121,   740,   741,   122,   123,   742,   743,
     126,     0,   127,   128,   129,   130,   744,     0,   745,     0,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   746,   747,   748,   749,   750,   751,   752,   153,   154,
     155,   156,   157,   158,   159,   753,   754,   162,   755,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,     0,     0,   175,   176,   756,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   757,   191,   192,   193,   194,   758,   759,
     196,     0,   197,   198,   760,   200,     0,   201,     0,   202,
     203,     0,   204,   205,   206,   207,   208,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   236,
     761,   762,     0,   763,     0,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,     0,     0,   250,   251,   252,
     253,     0,   254,   255,   256,   764,   765,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   766,   282,   767,   284,   285,   286,   287,   768,   288,
     289,   290,   291,   769,   770,   293,   771,   295,   296,   297,
       0,   298,   299,     0,     0,   772,   301,   302,     0,     0,
     303,   304,   305,   306,   307,   773,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   774,
     322,   323,   324,   325,   326,   327,     0,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   775,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,     0,   354,   355,   356,   357,   358,
     359,   776,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   777,
     377,   378,   379,   380,   381,   382,   383,   384,   778,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   779,   401,     0,   402,   403,     0,
     404,   405,   406,   407,   408,   409,   410,     0,   780,   781,
       0,     0,   413,   414,   782,   416,   783,   784,   418,   419,
     785,   421,   422,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,   786,     0,   431,   432,   433,   434,   435,
     436,   787,     0,   438,   439,   440,   441,   442,   443,     0,
       0,   444,     0,     0,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   788,     0,     0,     0,     0,
       0,     0,   789,   790,     0,     0,     0,     0,     0,   792,
       0,  2593,     0,     0,     0,     0,   794,     0,   795,   796,
      90,   730,   537,   731,   732,   733,   734,   735,     0,     0,
       0,     0,     0,     0,     0,     0,    91,    92,    93,    94,
      95,    96,    97,    98,     0,    99,   100,   101,     0,     0,
       0,     0,   736,     0,     0,   102,   103,     0,   104,   105,
     106,   107,   108,   109,   110,  2792,   737,   113,   738,   739,
       0,   116,   117,   118,   119,   120,   121,   740,   741,   122,
     123,   742,   743,   126,     0,   127,   128,   129,   130,   744,
       0,   745,     0,   133,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,  2793,   746,   747,   748,   749,   750,   751,
     752,   153,   154,   155,   156,   157,   158,   159,   753,   754,
     162,   755,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,     0,     0,   175,   176,
     756,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   757,   191,   192,   193,
     194,   758,   759,   196,     0,   197,   198,   760,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   236,   761,   762,     0,   763,     0,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,     0,     0,
     250,   251,   252,   253,     0,   254,   255,   256,   764,   765,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   766,   282,   767,   284,   285,   286,
     287,   768,   288,   289,   290,   291,   769,   770,   293,   771,
     295,   296,   297,     0,   298,   299,     0,     0,   772,   301,
     302,     0,     0,   303,   304,   305,   306,   307,   773,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     319,   320,   774,   322,   323,   324,   325,   326,   327,     0,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   775,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,     0,   354,   355,
     356,   357,   358,   359,   776,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   777,   377,   378,   379,   380,   381,   382,   383,
     384,   778,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   779,   401,     0,
     402,   403,     0,   404,   405,   406,   407,   408,   409,   410,
       0,   780,   781,     0,     0,   413,   414,   782,   416,   783,
     784,   418,   419,   785,   421,   422,  2794,   424,   425,     0,
       0,   426,   427,   428,   429,   430,   786,     0,   431,   432,
     433,   434,   435,   436,   787,     0,   438,   439,   440,   441,
     442,   443,     0,     0,   444,     0,     0,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   788,     0,
       0,     0,     0,     0,     0,   789,   790,     0,     0,     0,
       0,     0,   792,     0,   793,     0,     0,     0,     0,   794,
       0,   795,   796,    90,   730,   537,   731,   732,   733,   734,
     735,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     0,     0,     0,     0,   736,     0,     0,   102,   103,
       0,   104,   105,   106,   107,   108,   109,   110,   111,   737,
     113,   738,   739,     0,   116,   117,   118,   119,   120,   121,
     740,   741,   122,   123,   742,   743,   126,     0,   127,   128,
     129,   130,   744,     0,   745,     0,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,   148,   149,   150,  2793,   746,   747,   748,
     749,   750,   751,   752,   153,   154,   155,   156,   157,   158,
     159,   753,   754,   162,   755,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,     0,
       0,   175,   176,   756,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   757,
     191,   192,   193,   194,   758,   759,   196,     0,   197,   198,
     760,   200,     0,   201,     0,   202,   203,     0,   204,   205,
     206,   207,   208,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   761,   762,     0,   763,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,   764,   765,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   766,   282,   767,
     284,   285,   286,   287,   768,   288,   289,   290,   291,   769,
     770,   293,   771,   295,   296,   297,     0,   298,   299,     0,
       0,   772,   301,   302,     0,     0,   303,   304,   305,   306,
     307,   773,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   774,   322,   323,   324,   325,
     326,   327,     0,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   775,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,   354,   355,   356,   357,   358,   359,   776,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   777,   377,   378,   379,   380,
     381,   382,   383,   384,   778,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     779,   401,     0,   402,   403,     0,   404,   405,   406,   407,
     408,   409,   410,     0,   780,   781,     0,     0,   413,   414,
     782,   416,   783,   784,   418,   419,   785,   421,   422,  2794,
     424,   425,     0,     0,   426,   427,   428,   429,   430,   786,
       0,   431,   432,   433,   434,   435,   436,   787,     0,   438,
     439,   440,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   788,     0,     0,     0,     0,     0,     0,   789,   790,
       0,     0,     0,     0,     0,   792,     0,   793,     0,     0,
       0,     0,   794,     0,   795,   796,    90,   730,   537,   731,
     732,   733,   734,   735,     0,     0,     0,     0,     0,     0,
       0,     0,    91,    92,    93,    94,    95,    96,    97,    98,
       0,    99,   100,   101,     0,     0,     0,     0,   736,     0,
       0,   102,   103,     0,   104,   105,   106,   107,   108,   109,
     110, -1679,   737,   113,   738,   739,     0,   116,   117,   118,
     119,   120,   121,   740,   741,   122,   123,   742,   743,   126,
       0,   127,   128,   129,   130,   744,     0,   745,     0,   133,
     134,   135,   136,   137,   138,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,  2793,
     746,   747,   748,   749,   750,   751,   752,   153,   154,   155,
     156,   157,   158,   159,   753,   754,   162,   755,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
     173,   174,     0,     0,   175,   176,   756,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   757,   191,   192,   193,   194,   758,   759,   196,
       0,   197,   198,   760,   200,     0,   201,     0,   202,   203,
       0,   204,   205,   206,   207, -1679,   209,     0,   210,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218, -1679,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   236,   761,
     762,     0,   763,     0,   240,     0,     0,   243,   244,   245,
     246,   247,   248,   249,     0,     0,   250,   251,   252, -1679,
       0,   254,   255,   256,   764,   765,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     766,   282,   767,   284,   285,   286,   287,     0,   288,   289,
       0,   291,   769,   770,   293,   771,   295,   296,   297,     0,
     298,   299,     0,     0,   772,   301,   302,     0,     0,   303,
     304,   305,   306,   307,   773,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   319,   320,   774,   322,
     323,   324,   325,   326,   327,     0,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   775,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,     0,   354,   355,   356,   357,   358,   359,
     776,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   777,   377,
     378,   379,   380,   381, -1679,   383,   384,   778,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   779,   401,     0,   402,   403,     0,   404,
     405,   406,   407,   408,   409,   410,     0,   780,   781,     0,
       0,   413,   414,   782,   416,   783,   784,   418,   419,   785,
     421,   422,  2794,   424,   425,     0,     0,   426,   427,   428,
     429,   430,   786,     0,   431,   432,   433,   434,   435,   436,
     787,     0,   438,   439,   440,   441,   442,   443,     0,     0,
     444,     0,     0,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465, -1679,     0,     0,     0,     0,     0,
       0,   789,   790,     0,     0,     0,     0,     0,   792,     0,
     793,     0,     0,     0,     0,   794,     0,   795,   796,    90,
     730,   537,   731,   732,   733,   734,   735,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
     107,   108,   109,   110,   111,   737,   113,   738,   739,     0,
     116,   117,   118,   119,   120,   121,   740,   741,   122,   123,
     742,   743,   126,     0,   127,   128,   129,   130,   744,     0,
     745,     0,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   746,   747,   748,   749,   750,   751,   752,
     153,   154,   155,   156,   157,   158,   159,   753,   754,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,     0,     0,   175,   176,   756,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   757,   191,   192,   193,   194,
     758,   759,   196,     0,   197,   198,   760,   200,     0,   201,
       0,   202,   203,     0,   204,   205,   206,   207,   208,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   236,   761,   762,     0,   763,     0,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,     0,   250,
     251,   252,   253,     0,   254,   255,   256,   764,   765,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   766,   282,   767,   284,   285,   286,   287,
       0,   288,   289,   290,   291,   769,   770,   293,   771,   295,
     296,   297,     0,   298,   299,     0,     0,   772,   301,   302,
       0,     0,   303,   304,   305,   306,   307,   773,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   774,   322,   323,   324,   325,   326,   327,     0,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   775,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   777,   377,   378,   379,   380,   381,   382,   383,   384,
     778,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   779,   401,     0,   402,
     403,     0,   404,   405,   406,   407,   408,   409,   410,     0,
     780,   781,     0,     0,   413,   414,   782,   416,   783,   784,
     418,   419,   785,   421,   422,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,   786,     0,   431,   432,   433,
     434,   435,   436,   787,     0,   438,   439,   440,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,     0,     0,     0,
       0,     0,     0,     0,  1577,  1578,     0,     0,    90,   730,
     537,   731,   732,  1579,   734,   735,     0,     0,     0,     0,
     795,   796,     0,     0,    91,    92,    93,    94,    95,    96,
      97,    98,     0,    99,   100,   101,     0,     0,     0,     0,
       0,     0,     0,   102,   103,     0,   104,   105,   106,   107,
     108,   109,   110,   111,   737,   113,   738,   739,     0,   116,
     117,   118,   119,   120,   121,   740,   741,   122,   123,   742,
     743,   126,     0,   127,   128,   129,   130,   744,     0,   745,
       0,   133,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   746,   747,   748,   749,   750,   751,   752,   153,
     154,   155,   156,   157,   158,   159,   753,   754,   162,     0,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,   173,   174,     0,     0,   175,   176,   756,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   757,   191,   192,   193,   194,   758,
     759,   196,     0,   197,   198,   760,   200,     0,   201,     0,
     202,   203,     0,   204,   205,   206,   207,   208,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   761,   762,     0,   763,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,     0,   250,   251,
     252,   253,     0,   254,   255,   256,   764,   765,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   766,   282,   767,   284,   285,   286,   287,     0,
     288,   289,   290,   291,   769,   770,   293,   771,   295,   296,
     297,     0,   298,   299,     0,     0,   300,   301,   302,     0,
       0,   303,   304,   305,   306,   307,   773,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   319,   320,
     774,   322,   323,   324,   325,   326,   327,     0,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   775,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,     0,   354,   355,   356,   357,
     358,   359,  1713,  1714,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     777,   377,   378,   379,   380,   381,   382,   383,   384,   778,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   779,   401,     0,   402,   403,
       0,   404,   405,   406,   407,   408,   409,   410,     0,   780,
     781,     0,     0,   413,   414,   782,   416,   783,   784,   418,
     419,   785,   421,   422,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,   786,     0,   431,   432,   433,   434,
     435,   436,   787,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,     0,     0,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,     0,     0,     0,     0,
       0,     0,     0,  1715,  1716,     0,     0,     0,     0,     0,
       0,     0,  1579,     0,     0,     0,     0,     0,     0,   795,
     796,    90,   730,   537,   731,   732,   733,   734,   735,     0,
       0,     0,     0,     0,     0,     0,     0,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,     0,     0,     0,   102,   103,     0,   104,
     105,   106,   107,   108,   109,   110,   111,   737,   113,   738,
     739,     0,   116,   117,   118,   119,   120,   121,   740,   741,
     122,   123,   742,   743,   126,     0,   127,   128,   129,   130,
     744,     0,   745,     0,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   746,   747,   748,   749,   750,
     751,   752,   153,   154,   155,   156,   157,   158,   159,   753,
     754,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   756,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   757,   191,   192,
     193,   194,   758,   759,   196,     0,   197,   198,   760,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   236,   761,   762,     0,   763,     0,   240,
       0,   242,   243,   244,   245,   246,   247,   248,   249,     0,
       0,   250,   251,   252,   253,     0,   254,   255,   256,   764,
     765,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   766,   282,   767,   284,   285,
     286,   287,     0,   288,   289,   290,   291,   769,   770,   293,
     771,   295,   296,   297,     0,   298,   299,     0,     0,   772,
     301,   302,     0,     0,   303,   304,   305,   306,   307,   773,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   774,   322,   323,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     775,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   777,   377,   378,   379,   380,   381,   382,
     383,   384,   778,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   779,   401,
       0,   402,   403,     0,   404,   405,   406,   407,   408,   409,
     410,     0,   780,   781,     0,     0,   413,   414,   782,   416,
     783,   784,   418,   419,   785,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,   786,     0,   431,
     432,   433,   434,   435,   436,   787,     0,   438,   439,   440,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,     0,
       0,     0,     0,     0,     0,     0,  1577,  1578,     0,     0,
       0,     0,     0,     0,     0,  1579,     0,     0,     0,     0,
       0,     0,   795,   796,    90,   730,   537,   731,   732,   733,
     734,   735,     0,     0,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,   736,     0,     0,   102,
     103,     0,   104,   105,   106,   107,   108,   109,   110,     0,
     737,   113,   738,   739,     0,   116,   117,   118,   119,   120,
     121,   740,   741,   122,   123,   742,   743,   126,     0,   127,
     128,   129,   130,   744,     0,   745,     0,   133,   134,   135,
     136,   137,   138,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   746,   747,
     748,   749,   750,   751,   752,   153,   154,   155,   156,   157,
     158,   159,   753,   754,   162,   755,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
       0,     0,   175,   176,   756,   178,   179,     0,   180,   181,
     182,     0,   183,     0,   185,     0,   186,   187,   188,   189,
     757,   191,   192,   193,   194,   758,   759,   196,     0,   197,
     198,   760,   200,     0,   201,     0,   202,   203,     0,   204,
     205,   206,   207,     0,   209,     0,   210,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   236,   761,   762,     0,
     763,     0,   240,     0,     0,   243,   244,   245,   246,   247,
     248,   249,     0,     0,   250,   251,   252,     0,     0,   254,
     255,   256,   764,   765,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   766,   282,
     767,   284,   285,   286,   287,     0,   288,   289,     0,   291,
     769,   770,   293,   771,   295,   296,   297,     0,   298,   299,
       0,     0,   772,   301,   302,     0,     0,   303,   304,   305,
     306,   307,   773,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   319,   320,   774,   322,   323,   324,
     325,   326,   327,     0,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   775,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,     0,   354,   355,   356,   357,   358,   359,   776,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   777,   377,   378,   379,
     380,   381,     0,   383,   384,   778,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   779,   401,     0,   402,   403,     0,   404,   405,   406,
     407,   408,   409,   410,     0,   780,   781,     0,     0,   413,
     414,   782,   416,   783,   784,   418,   419,   785,   421,   422,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
     786,     0,   431,   432,   433,   434,   435,   436,   787,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,     0,
       0,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,     0,     0,     0,     0,     0,     0,     0,   789,
     790,   490,     0,     0,     0,     0,   792,     0,   793,     0,
       0,     0,     0,   794,     0,   795,   796,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,     0,  2230,     0,   102,   103,     0,   104,
     105,   106,     0,   108,   109,   110,   111,   112,     0,   114,
     115,     0,   116,   117,   118,   119,   120,   121,     0,     0,
     122,   123,   124,   125,   126,     0,   127,   128,   129,   130,
     131,     0,     0,     0,   133,   134,   135,   136,   137,     0,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,  -493,   149,   150,   151,     0,     0,     0,     0,     0,
       0,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,  -493,   205,   206,   207,
       0,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,  -493,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,  -493,   245,   246,   247,   248,   249,     0,
       0,   250,  -493,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   492,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,  -493,   283,   284,   285,
     286,   287,     0,   288,   289,     0,   291,     0,   292,   293,
     294,   295,   296,   297,     0,   298,   299,     0,     0,   300,
     301,   302,     0,     0,   303,   304,     0,   306,     0,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,  -493,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   494,   399,   400,   401,
       0,   402,   403,     0,   404,  -493,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,   416,
     417,     0,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,   436,   437,     0,   438,     0,   440,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,     0,
       0,    90,     0,   567,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   855,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,     0,     0,     0,   102,   103,     0,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,     0,   116,   117,   118,   119,   120,   121,     0,   741,
     122,   123,   124,   125,   126,     0,   127,   128,   129,   130,
     744,     0,   745,     0,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   746,   747,   748,   749,   750,
     751,   752,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   758,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,  1984,
       0,   250,   251,   252,   253,     0,   254,   255,   256,   764,
     765,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,     0,   288,   289,   290,   291,     0,   770,   293,
     294,   295,   296,   297,     0,   298,   299,     0,   568,   300,
     301,   302,     0,     0,   303,   304,   305,   306,   307,   773,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   774,   322,   323,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,   356,   357,   358,   359,   360,  1985,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    25,   372,   373,
     374,   375,   376,   777,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   779,   401,
       0,   402,   403,    30,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   782,   416,
     783,     0,   418,   419,   785,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,   786,     0,   431,
     432,   433,   434,   435,   563,   437,     0,   438,   439,   440,
     441,   442,   443,     0,     0,   444,     0,    33,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,     0,
      90,    34,   567,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1986,    91,    92,    93,    94,
      95,    96,    97,    98,     0,    99,   100,   101,     0,     0,
       0,     0,     0,     0,     0,   102,   103,     0,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,   120,   121,     0,   741,   122,
     123,   124,   125,   126,     0,   127,   128,   129,   130,   744,
       0,   745,     0,   133,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   746,   747,   748,   749,   750,   751,
     752,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   758,     0,   196,     0,   197,   198,   199,   200,     0,
     201,     0,   202,   203,     0,   204,   205,   206,   207,   208,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   236,   237,   238,     0,   239,     0,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,  1984,     0,
     250,   251,   252,   253,     0,   254,   255,   256,   764,   765,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,   291,     0,   770,   293,   294,
     295,   296,   297,     0,   298,   299,     0,   568,   300,   301,
     302,     0,     0,   303,   304,   305,   306,   307,   773,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     319,   320,   774,   322,   323,   324,   325,   326,   327,     0,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,     0,   354,   355,
     356,   357,   358,   359,   360,  1985,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   777,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   779,   401,     0,
     402,   403,     0,   404,   405,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   782,   416,   783,
       0,   418,   419,   785,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,   786,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,     0,     0,   444,     0,     0,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,     0,    90,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1986,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,   741,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   744,     0,
     745,     0,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   746,   747,   748,   749,   750,   751,   752,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     758,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,   203,     0,   204,   205,   206,   207,   208,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   236,   237,   238,     0,   239,     0,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,     0,     0,   250,
     251,   252,   253,     0,   254,   255,   256,   764,   765,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,   291,     0,   770,   293,   294,   295,
     296,   297,     0,   298,   299,     0,     0,   300,   301,   302,
       0,     0,   303,   304,   305,   306,   307,   773,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   774,   322,   323,   324,   325,   326,   327,     0,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,   354,   355,   356,
     357,   358,   359,   360,  1985,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   777,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   779,   401,     0,   402,
     403,     0,   404,   405,   406,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   782,   416,   783,     0,
     418,   419,   785,   421,   422,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,   786,     0,   431,   432,   433,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,     0,    90,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,    91,    92,    93,    94,    95,    96,
      97,    98,     0,    99,   100,   101,     0,     0,     0,     0,
       0,     0,     0,   102,   103,     0,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,     0,   116,
     117,   118,   119,   120,   121,     0,   741,   122,   123,   124,
     125,   126,     0,   127,   128,   129,   130,   744,     0,   745,
       0,   133,   134,   135,   136,   137,   138,   139,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   746,   747,   748,   749,   750,   751,   752,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,   173,   174,     0,     0,   175,   176,   177,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   758,
       0,   196,     0,   197,   198,   199,   200,     0,   201,     0,
     202,   203,     0,   204,   205,   206,   207,   208,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     236,   237,   238,     0,   239,     0,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,     0,     0,   250,   251,
     252,   253,     0,   254,   255,   256,   764,   765,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
     288,   289,   290,   291,     0,   770,   293,   294,   295,   296,
     297,     0,   298,   299,     0,     0,   300,   301,   302,     0,
       0,   303,   304,   305,   306,   307,   773,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,     0,   319,   320,
     774,   322,   323,   324,   325,   326,   327,     0,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,     0,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     777,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   779,   401,     0,   402,   403,
       0,   404,   405,   406,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   782,   416,   783,     0,   418,
     419,   785,   421,   422,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,   786,     0,   431,   432,   433,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,     0,     0,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,     0,   660,  1089,   537,
       0,     0,     0,   734,     0,     0,     0,     0,     0,     0,
       0,     0,  2604,    91,    92,    93,    94,    95,    96,    97,
      98,     0,    99,   100,   101,     0,     0,     0,     0,     0,
       0,     0,   102,   103,     0,   104,   105,   106,     0,   108,
     109,   110,   661,   662,     0,   663,   664,     0,   116,   117,
     118,   119,   120,   121,     0,     0,   122,   123,   665,   666,
     126,     0,   127,   128,   129,   130,   667,     0,     0,     0,
     133,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   668,   669,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   670,   191,   192,   193,   194,   671,  1090,
     196,     0,   197,   198,   672,   200,     0,   201,     0,   202,
       0,     0,     0,   205,   206,   207,     0,   209,     0,   210,
       0,   673,   212,     0,   213,   214,   215,   216,   217,   218,
       0,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   674,   233,   234,   235,   236,
     675,   676,     0,   677,     0,   240,     0,     0,   243,     0,
     245,   246,   247,   248,   249,     0,     0,   250,     0,   252,
       0,     0,   254,   255,   256,     0,     0,   257,   258,   259,
     260,   261,   678,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   679,     0,   680,   284,   285,   286,   681,     0,   288,
     289,     0,   291,     0,   682,   293,   683,   295,   296,   297,
       0,   298,   299,  1091,     0,   300,   301,   302,     0,     0,
     303,   684,     0,   306,     0,   685,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   686,
     322,   323,   687,   325,   326,   327,     0,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   688,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,     0,   354,   355,     0,   357,   358,
     359,   689,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   690,   379,   380,   381,     0,   383,   384,   691,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   692,   399,   693,   401,     0,   402,   403,     0,
     404,     0,   406,   407,   408,   409,   410,     0,   694,   695,
       0,     0,   413,   414,   696,   416,   697,  1092,   418,   419,
     698,   421,   422,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,     0,   431,   432,   433,   434,   435,
    1038,   700,     0,   438,     0,   440,   441,   442,   443,     0,
       0,   444,     0,     0,   445,   446,   447,   448,   449,   450,
     701,   702,   703,   704,   705,   706,   707,   708,   709,   710,
     711,   462,   463,   464,   465,     0,   660,     0,     0,     0,
       0,     0,  1093,  1094,  1847,     0,     0,     0,     0,     0,
       0,  1848,    91,    92,    93,    94,    95,    96,    97,    98,
       0,    99,   100,   101,     3,     4,     0,     0,     0,     0,
       0,   102,   103,     0,   104,   105,   106,     0,   108,   109,
     110,   661,   662,     0,   663,   664,     0,   116,   117,   118,
     119,   120,   121,     0,     0,   122,   123,   665,   666,   126,
       0,   127,   128,   129,   130,   667,     0,     0,     0,   133,
     134,   135,   136,   137,     0,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,     0,   149,   150,   151,
       0,     0,     0,     0,     0,     0,     0,   153,   154,   155,
     156,   157,   158,   159,   668,   669,   162,     0,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
     173,   174,     0,     0,   175,   176,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   670,   191,   192,   193,   194,   671,     0,   196,
       0,   197,   198,   672,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
     673,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   674,   233,   234,   235,   236,   675,
     676,     0,   677,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   678,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     679,     0,   680,   284,   285,   286,   681,     0,   288,   289,
       0,   291,     0,   682,   293,   683,   295,   296,   297,     0,
     298,   299,     0,     0,   300,   301,   302,     0,     0,   303,
     684,     0,   306,     0,   685,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   319,   320,   686,   322,
     323,   687,   325,   326,   327,     0,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   688,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,     0,   354,   355,     0,   357,   358,   359,
     689,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    25,   372,   373,   374,   375,   376,     0,   377,
     690,   379,   380,   381,     0,   383,   384,   691,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   692,   399,   693,   401,     0,   402,   403,    30,   404,
       0,   406,   407,   408,   409,   410,     0,   694,   695,     0,
       0,   413,   414,   696,   416,   697,     0,   418,   419,   698,
     421,   422,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,     0,   431,   432,   433,   434,   435,   699,
     700,     0,   438,     0,   440,   441,   442,   443,     0,     0,
     444,     0,    33,   445,   446,   447,   448,   449,   450,   701,
     702,   703,   704,   705,   706,   707,   708,   709,   710,   711,
     462,   463,   464,   465,     0,   490,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      35,    91,    92,    93,    94,    95,    96,    97,    98,   601,
      99,   100,   101,     0,     0,     0,     0,     0,     0,     0,
     102,   103,     0,   104,   105,   106,     0,   108,   109,   110,
     111,   112,     0,   114,   115,     0,   116,   117,   118,   119,
     120,   121,     0,     0,   122,   123,   124,   125,   126,     0,
     127,   128,   129,   130,   131,     0,     0,     0,   133,   134,
     135,   136,   137,     0,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   149,   150,   151,     0,
       0,     0,     0,     0,     0,     0,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,     0,   201,     0,   202,     0,     0,
       0,   205,   206,   207,     0,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   232,   233,   234,   235,   236,   237,   238,
       0,   239,     0,   240,     0,     0,   243,     0,   245,   246,
     247,   248,   249,     0,     0,   250,     0,   252,     0,     0,
     254,   255,   256,     0,     0,   257,   258,   259,   260,   261,
     492,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
       0,   283,   284,   285,   286,   287,     0,   288,   289,     0,
     291,     0,   292,   293,   294,   295,   296,   297,     0,   298,
     299,     0,     0,   300,   301,   302,     0,     0,   303,   304,
       0,   306,     0,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,     0,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    25,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     494,   399,   400,   401,     0,   402,   403,    30,   404,     0,
     406,   407,   408,   409,   410,     0,   602,   412,     0,     0,
     603,   414,   415,   416,   417,     0,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,   563,   437,
       0,   438,     0,   440,   441,   442,   443,     0,     0,   444,
       0,    33,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,     0,   490,    34,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   111,
     112,     0,   114,   115,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   124,   125,   126,     0,   127,
     128,   129,   130,   131,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,     0,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
       0,     0,   175,   176,   177,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,     0,   232,   233,   234,   235,   236,   237,   238,     0,
     239,     0,   240,     0,     0,   243,     0,   245,   246,   247,
     248,   249,     0,     0,   250,     0,   252,     0,     0,   254,
     255,   256,     0,     0,   257,   258,   259,   260,   261,   492,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     283,   284,   285,   286,   287,     0,   288,   289,     0,   291,
       0,   292,   293,   294,   295,   296,   297,     0,   298,   299,
       0,     0,   300,   301,   302,     0,     0,   303,   304,     0,
     306,     0,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   319,   320,   321,   322,   323,   324,
     325,   326,   327,     0,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,     0,   354,   355,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
      25,   372,   373,   374,   375,   376,     0,   377,   378,   379,
     380,   381,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   494,
     399,   400,   401,     0,   402,   403,    30,   404,     0,   406,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,   416,   417,     0,   418,   419,   420,   421,   422,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,     0,   431,   432,   433,   434,   435,   563,   437,     0,
     438,     0,   440,   441,   442,   443,     0,     0,   444,     0,
      33,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,     0,   490,    34,   567,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    35,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     0,     0,     0,     0,     0,     0,     0,   102,   103,
       0,   104,   105,   106,     0,   108,   109,   110,   111,   112,
       0,   114,   115,     0,   116,   117,   118,   119,   120,   121,
       0,     0,   122,   123,   124,   125,   126,     0,   127,   128,
     129,   130,   131,     0,     0,     0,   133,   134,   135,   136,
     137,     0,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   149,   150,   151,     0,     0,     0,
       0,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,     0,   201,     0,   202,     0,     0,     0,   205,
     206,   207,     0,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   492,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,     0,   283,
     284,   285,   286,   287,     0,   288,   289,     0,   291,     0,
     292,   293,   294,   295,   296,   297,     0,   298,   299,     0,
       0,   300,   301,   302,     0,     0,   303,   304,     0,   306,
       0,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   494,   399,
     400,   401,     0,   402,   403,     0,   404,     0,   406,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,   416,   417,     0,   418,   419,   420,   421,   422,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   437,     0,   438,
       0,   440,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,     0,   490,     0,   567,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   836,    91,    92,
      93,    94,    95,    96,    97,    98,     0,    99,   100,   101,
       0,     0,     0,     0,     0,     0,     0,   102,   103,     0,
     104,   105,   106,     0,   108,   109,   110,   111,   112,     0,
     114,   115,     0,   116,   117,   118,   119,   120,   121,     0,
       0,   122,   123,   124,   125,   126,     0,   127,   128,   129,
     130,   131,     0,     0,     0,   133,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,   171,   172,   173,   174,     0,     0,
     175,   176,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,     0,   201,     0,   202,     0,     0,     0,   205,   206,
     207,     0,   209,     0,   210,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,     0,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,     0,
     232,   233,   234,   235,   236,   237,   238,     0,   239,     0,
     240,     0,     0,   243,     0,   245,   246,   247,   248,   249,
       0,     0,   250,     0,   252,     0,     0,   254,   255,   256,
       0,     0,   257,   258,   259,   260,   261,   492,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,     0,   283,   284,
     285,   286,   287,     0,   288,   289,     0,   291,     0,   292,
     293,   294,   295,   296,   297,     0,   298,   299,     0,     0,
     300,   301,   302,     0,     0,   303,   304,     0,   306,     0,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   319,   320,   321,   322,   323,   324,   325,   326,
     327,     0,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,     0,
     354,   355,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   380,   381,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   494,   399,   400,
     401,     0,   402,   403,     0,   404,     0,   406,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
     416,   417,     0,   418,   419,   420,   421,   422,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,     0,
     431,   432,   433,   434,   435,   436,   437,     0,   438,     0,
     440,   441,   442,   443,     0,     0,   444,     0,     0,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
       0,   490,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2452,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,     0,     0,     0,   102,   103,     0,   104,
     105,   106,     0,   108,   109,   110,   111,   112,     0,   114,
     115,     0,   116,   117,   118,   119,   120,   121,     0,     0,
     122,   123,   124,   125,   126,     0,   127,   128,   129,   130,
     131,     0,     0,     0,   133,   134,   135,   136,   137,     0,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   149,   150,   151,     0,     0,     0,     0,     0,
       0,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   492,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   283,   284,   285,
     286,   287,     0,   288,   289,     0,   291,     0,   292,   293,
     294,   295,   296,   297,     0,   298,   299,     0,     0,   300,
     301,   302,     0,     0,   303,   304,     0,   306,     0,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   494,   399,   400,   401,
       0,   402,   403,     0,   404,     0,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,   416,
     417,     0,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,   436,   437,     0,   438,     0,   440,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,     0,
     490,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1703,    91,    92,    93,    94,
      95,    96,    97,    98,     0,    99,   100,   101,     0,     0,
       0,     0,     0,     0,     0,   102,   103,     0,   104,   105,
     106,     0,   108,   109,   110,   111,   112,     0,   114,   115,
       0,   116,   117,   118,   119,   120,   121,     0,     0,   122,
     123,   124,   125,   126,     0,   127,   128,   129,   130,   131,
       0,     0,     0,   133,   134,   135,   136,   137,     0,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   149,   150,   151,     0,     0,     0,     0,     0,     0,
       0,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,     0,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,     0,
     201,     0,   202,     0,     0,     0,   205,   206,   207,     0,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,     0,   232,   233,
     234,   235,   236,   237,   238,     0,   239,     0,   240,     0,
       0,   243,     0,   245,   246,   247,   248,   249,     0,     0,
     250,     0,   252,     0,     0,   254,   255,   256,     0,     0,
     257,   258,   259,   260,   261,   492,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,     0,   283,   284,   285,   286,
     287,     0,   288,   289,     0,   291,     0,   292,   293,   294,
     295,   296,   297,     0,   298,   299,     0,     0,   300,   301,
     302,     0,     0,   303,   304,     0,   306,     0,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     319,   320,   321,   322,   323,   324,   325,   326,   327,     0,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,     0,   354,   355,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,     0,   377,   378,   379,   380,   381,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   494,   399,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,   441,
     442,   443,     0,     0,   444,     0,     0,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,     0,     0,
       0,     0,  2314,  1089,   537,     0,     0,  1559,   734,     0,
       0,     0,     0,     0,  2214,  1560,  1561,  1562,    91,    92,
      93,    94,    95,    96,    97,    98,   966,    99,   100,   101,
     967,   968,   969,   970,   971,   972,   973,   102,   103,   974,
     104,   105,   106,  2315,   108,   109,   110,     0,  1114,  2316,
    1116,  1117,   975,   116,   117,   118,   119,   120,   121,   976,
     977,   122,   123,  1118,  1119,   126,   978,   127,   128,   129,
     130,     0,   979,  2317,   980,   133,   134,   135,   136,   137,
    2318,   139,   140,   141,   981,   142,   143,   144,   145,   146,
     147,   982,  2319,   149,   150,   151,   983,   984,   985,  2320,
     986,   987,   988,   153,   154,   155,   156,   157,   158,   159,
    1124,  1125,   162,   989,   163,   990,   164,   165,   166,   167,
     168,   169,   991,   170,   171,   172,   173,   174,   992,   993,
     175,   176,   756,   178,   179,   994,   180,   181,   182,   995,
     183,   184,   185,   996,   186,   187,   188,   189,     0,   191,
     192,   193,   194,     0,   997,   196,   998,   197,   198,  1126,
     200,   999,   201,  1000,   202,  2321,  1001,  2322,   205,   206,
     207,  2323,   209,  1002,   210,  1003,     0,   212,  1004,   213,
     214,   215,   216,   217,   218,  2324,   220,   221,   222,   223,
    1005,   224,   225,   226,   227,   228,   229,  1006,   230,  2325,
       0,   233,   234,   235,   236,  1132,  1133,  1007,  1134,  1008,
     240,  2326,  2327,   243,  2328,   245,   246,   247,   248,   249,
    1009,  1010,   250,  2329,   252,  2330,  1011,   254,   255,   256,
    1012,  1013,   257,   258,   259,   260,   261,  2331,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,  1141,  2332,  1143,   284,
     285,   286,  2333,  1014,   288,   289,  2334,   291,  1015,     0,
     293,  1145,   295,   296,   297,  1016,   298,   299,  1017,  1018,
    2335,   301,   302,  1019,  1020,   303,     0,  2336,   306,  2337,
       0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,  1021,   319,   320,     0,   322,   323,     0,   325,   326,
     327,  1022,   328,   329,   330,   331,   332,   333,   334,   335,
     336,  1148,   338,   339,   340,   341,  1023,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,  1024,
     354,   355,  2338,   357,   358,   359,  1150,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,  1025,   372,
     373,   374,   375,   376,  1026,   377,  2339,   379,   380,   381,
    2340,   383,   384,  1153,   386,  1027,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,  2341,   399,     0,
     401,  1028,   402,   403,  1029,   404,  2342,   406,   407,   408,
     409,   410,  1030,  1156,  1157,  1031,  1032,   413,   414,     0,
     416,     0,  1033,   418,   419,  2343,   421,   422,   423,   424,
     425,  1034,  1035,   426,   427,   428,   429,   430,  1036,  1037,
     431,   432,   433,   434,   435,     0,  1159,  1039,   438,  2344,
     440,   441,   442,   443,  1040,  1041,   444,  1042,  1043,   445,
     446,   447,   448,   449,   450,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   462,   463,   464,   465,
       0,   490,     0,  1563,  1564,  1565,  1559,  2345,  2346,  1568,
    1569,  1570,  1571,     0,  1560,  1561,  1562,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,     0,     0,     0,   102,   103,     0,   104,
     105,   106,     0,   108,   109,   110,   111,   112,     0,   114,
     115,     0,   116,   117,   118,   119,   120,   121,     0,     0,
     122,   123,   124,   125,   126,     0,   127,   128,   129,   130,
     131,     0,     0,     0,   133,   134,   135,   136,   137,     0,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   149,   150,   151,     0,     0,     0,     0,     0,
       0,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   492,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   283,   284,   285,
     286,   287,     0,   288,   289,     0,   291,     0,   292,   293,
     294,   295,   296,   297,     0,   298,   299,     0,     0,   300,
     301,   302,     0,     0,   303,   304,     0,   306,     0,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   494,   399,   400,   401,
       0,   402,   403,     0,   404,     0,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,   416,
     417,     0,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,   436,   437,     0,   438,     0,   440,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,     0,
       0,     0,  1563,  1564,  1565,     0,  1566,  1567,  1568,  1569,
    1570,  1571,  1246,     0,     0,  1247,     0,     0,     0,     0,
    1248,  1249,  1250,     0,     0,     0,     0,     0,     0,     0,
    1246,     0,     0,  1247,     0,     0,     0,  1251,  1248,  1249,
    1250,     0,     0,     0,     0,  1253,     0,     0,  1246,     0,
       0,  1247,  1254,     0,     0,  1251,  1248,  1249,  1250,     0,
       0,     0,     0,  1253,     0,     0,     0,     0,     0,     0,
    1254,     0,     0,  1251,     0,     0,  1246,  1255,     0,  1247,
       0,  1253,     0,     0,  1248,  1249,  1250,     0,  1254,     0,
       0,     0,     0,     0,  1246,  1255,     0,  1247,     0,     0,
       0,  1251,  1248,  1249,  1250,     0,     0,     0,     0,  1253,
       0,     0,     0,  1255,     0,     0,  1254,     0,     0,  1251,
       0,     0,     0,     0,     0,     0,     0,  1253,     0,     0,
       0,     0,     0,     0,  1254,     0,     0,     0,     0,     0,
       0,  1255,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1255,
       0,     0,     0,     0,  1246,     0,     0,  1247,     0,     0,
       0,     0,  1248,  1249,  1250,     0,  1256,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1251,
    1257,     0,     0,     0,  1256,  1258,     0,  1253,     0,     0,
       0,     0,     0,     0,  1254,     0,     0,     0,  1257,     0,
       0,     0,  1256,  1258,     0,     0,  1259,  1260,     0,     0,
       0,     0,     0,     0,     0,     0,  1257,     0,     0,  1255,
    1261,  1258,     0,     0,  1259,  1260,     0,     0,     0,     0,
    1256,     0,     0,     0,     0,     0,     0,     0,  1261,     0,
       0,     0,  1259,  1260,  1257,     0,     0,     0,  1256,  1258,
       0,     0,     0,     0,     0,     0,  1261,     0,  1262,     0,
       0,  1263,  1257,     0,     0,     0,     0,  1258,     0,     0,
    1259,  1260,     0,     0,     0,  1264,  1262,     0,  1265,  1263,
       0,     0,     0,     0,  1261,     0,     0,     0,  1259,  1260,
       0,     0,     0,  1264,  1262,     0,  1265,  1263,     0,     0,
       0,     0,  1261,     0,     0,     0,     0,     0,     0,     0,
       0,  1264,     0,     0,  1265,     0,     0,     0,  1256,     0,
       0,     0,  1262,     0,     0,  1263,     0,     0,     0,     0,
       0,     0,  1257,     0,     0,     0,     0,  1258,     0,  1264,
    1262,     0,  1265,  1263,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1264,  1259,  1260,
    1265,     0,     0,     0,     0,  1266,     0,     0,     0,     0,
       0,     0,  1261,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1266,  1246,     0,     0,  1247,     0,     0,
       0,     0,  1248,  1249,  1250,     0,     0,     0,     0,     0,
       0,  1266,     0,     0,     0,     0,     0,     0,     0,  1251,
    1262,     0,     0,  1263,     0,     0,     0,  1253,     0,     0,
       0,     0,     0,     0,  1254,     0,     0,  1264,     0,  1266,
    1265,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1266,     0,  1255,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1267,     0,     0,  1268,  1269,
    1270,     0,  1271,  1272,  1273,  1274,  1275,  1276,     0,     0,
       0,     0,  2279,  1267,     0,     0,  1268,  1269,  1270,     0,
    1271,  1272,  1273,  1274,  1275,  1276,     0,     0,     0,     0,
    2403,  1267,     0,     0,  1268,  1269,  1270,     0,  1271,  1272,
    1273,  1274,  1275,  1276,     0,     0,     0,  1266,  2422,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1267,
       0,     0,  1268,  1269,  1270,     0,  1271,  1272,  1273,  1274,
    1275,  1276,     0,     0,     0,     0,  2565,  1267,  1256,     0,
    1268,  1269,  1270,     0,  1271,  1272,  1273,  1274,  1275,  1276,
       0,     0,  1257,     0,  2763,     0,     0,  1258,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1259,  1260,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1261,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1267,     0,     0,
    1268,  1269,  1270,     0,  1271,  1272,  1273,  1274,  1275,  1276,
       0,     0,     0,     0,  2775,     0,     0,     0,     0,     0,
    1262,     0,     0,  1263,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1264,     0,     0,
    1265,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1266,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1267,   965,     0,
    1268,  1269,  1270,     0,  1271,  1272,  1273,  1274,  1275,  1276,
       0,     0,  1424,     0,    91,    92,    93,    94,    95,    96,
      97,    98,   966,    99,   100,   101,   967,   968,   969,   970,
     971,   972,   973,   102,   103,   974,   104,   105,   106,     0,
     108,   109,   110,   661,   662,     0,   663,   664,   975,   116,
     117,   118,   119,   120,   121,   976,   977,   122,   123,   665,
     666,   126,   978,   127,   128,   129,   130,   667,   979,     0,
     980,   133,   134,   135,   136,   137,     0,   139,   140,   141,
     981,   142,   143,   144,   145,   146,   147,   982,     0,   149,
     150,   151,   983,   984,   985,     0,   986,   987,   988,   153,
     154,   155,   156,   157,   158,   159,   668,   669,   162,   989,
     163,   990,   164,   165,   166,   167,   168,   169,   991,   170,
     171,   172,   173,   174,   992,   993,   175,   176,   177,   178,
     179,   994,   180,   181,   182,   995,   183,   184,   185,   996,
     186,   187,   188,   189,   670,   191,   192,   193,   194,   671,
     997,   196,   998,   197,   198,   672,   200,   999,   201,  1000,
     202,     0,  1001,     0,   205,   206,   207,     0,   209,  1002,
     210,  1003,   673,   212,  1004,   213,   214,   215,   216,   217,
     218,     0,   220,   221,   222,   223,  1005,   224,   225,   226,
     227,   228,   229,  1006,   230,     0,   674,   233,   234,   235,
     236,   675,   676,  1007,   677,  1008,   240,     0,     0,   243,
       0,   245,   246,   247,   248,   249,  1009,  1010,   250,     0,
     252,     0,  1011,   254,   255,   256,  1012,  1013,   257,   258,
     259,   260,   261,   678,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   679,     0,   680,   284,   285,   286,   681,  1014,
     288,   289,     0,   291,  1015,   682,   293,   683,   295,   296,
     297,  1016,   298,   299,  1017,  1018,   300,   301,   302,  1019,
    1020,   303,   684,     0,   306,     0,   685,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,  1021,   319,   320,
     686,   322,   323,   687,   325,   326,   327,  1022,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   688,   338,   339,
     340,   341,  1023,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,  1024,   354,   355,     0,   357,
     358,   359,   689,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,  1025,   372,   373,   374,   375,   376,
    1026,   377,   690,   379,   380,   381,     0,   383,   384,   691,
     386,  1027,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   692,   399,   693,   401,  1028,   402,   403,
    1029,   404,     0,   406,   407,   408,   409,   410,  1030,   694,
     695,  1031,  1032,   413,   414,   696,   416,   697,  1033,   418,
     419,   698,   421,   422,   423,   424,   425,  1034,  1035,   426,
     427,   428,   429,   430,  1036,  1037,   431,   432,   433,   434,
     435,  1038,   700,  1039,   438,     0,   440,   441,   442,   443,
    1040,  1041,   444,  1042,  1043,   445,   446,   447,   448,   449,
     450,   701,   702,   703,   704,   705,   706,   707,   708,   709,
     710,   711,   462,   463,   464,   465,   490,     0,     0,     0,
       0,     0,     0,     0,     0,  1044,     0,     0,     0,     0,
       0,     0,    91,    92,    93,    94,    95,    96,    97,    98,
       0,    99,   100,   101,     0,     0,     0,     0,     0,     0,
       0,   102,   103,     0,   104,   105,   106,     0,   108,   109,
     110,   111,   112,     0,   114,   115,     0,   116,   117,   118,
     119,   120,   121,     0,     0,   122,   123,   124,   125,   126,
       0,   127,   128,   129,   130,   131,     0,     0,     0,   133,
     134,   135,   136,   137,     0,   139,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,     0,   149,   150,   151,
       0,     0,     0,     0,     0,     0,     0,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
     173,   174,     0,     0,   175,   176,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,     0,   201,     0,   202,     0,
       0,     0,   205,   206,   207,     0,   209,     0,   210,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     220,   221,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   232,   233,   234,   235,   236,   237,
     238,     0,   239,     0,   240,     0,     0,   243,     0,   245,
     246,   247,   248,   249,     0,     0,   250,     0,   252,     0,
       0,   254,   255,   256,     0,     0,   257,   258,   259,   260,
     261,   492,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,     0,   283,   284,   285,   286,   287,     0,   288,   289,
       0,   291,     0,   292,   293,   294,   295,   296,   297,     0,
     298,   299,     0,     0,   300,   301,   302,     0,     0,   303,
     304,     0,   306,     0,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,     0,   319,   320,   321,   322,
     323,   324,   325,   326,   327,     0,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,     0,   354,   355,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,     0,   377,
     378,   379,   380,   381,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   494,   399,   400,   401,     0,   402,   403,     0,   404,
       0,   406,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,   416,   417,     0,   418,   419,   420,
     421,   422,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,     0,   431,   432,   433,   434,   435,   436,
     437,     0,   438,     0,   440,   441,   442,   443,     0,     0,
     444,     0,     0,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   660,  1089,   537,     0,     0,     0,
     734,     0,     0,  2131,     0,     0,     0,     0,     0,     0,
      91,    92,    93,    94,    95,    96,    97,    98,     0,    99,
     100,   101,     0,     0,     0,     0,     0,     0,     0,   102,
     103,     0,   104,   105,   106,     0,   108,   109,   110,   661,
     662,     0,   663,   664,     0,   116,   117,   118,   119,   120,
     121,     0,     0,   122,   123,   665,   666,   126,     0,   127,
     128,   129,   130,   667,     0,     0,     0,   133,   134,   135,
     136,   137,     0,   139,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   149,   150,   151,     0,     0,
       0,     0,     0,     0,     0,   153,   154,   155,   156,   157,
     158,   159,   668,   669,   162,  1304,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
       0,     0,   175,   176,   177,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,   189,
     670,   191,   192,   193,   194,   671,  1090,   196,     0,   197,
     198,   672,   200,     0,   201,     0,   202,     0,     0,     0,
     205,   206,   207,     0,   209,     0,   210,     0,   673,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   220,   221,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,     0,   674,   233,   234,   235,   236,   675,   676,     0,
     677,     0,   240,     0,     0,   243,     0,   245,   246,   247,
     248,   249,     0,     0,   250,     0,   252,     0,     0,   254,
     255,   256,     0,     0,   257,   258,   259,   260,   261,   678,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   679,     0,
     680,   284,   285,   286,   681,     0,   288,   289,     0,   291,
       0,   682,   293,   683,   295,   296,   297,     0,   298,   299,
    1091,     0,   300,   301,   302,     0,     0,   303,   684,     0,
     306,     0,   685,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,     0,   319,   320,   686,   322,   323,   687,
     325,   326,   327,     0,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   688,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,     0,   354,   355,     0,   357,   358,   359,   689,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   690,   379,
     380,   381,     0,   383,   384,   691,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   692,
     399,   693,   401,     0,   402,   403,     0,   404,     0,   406,
     407,   408,   409,   410,     0,   694,   695,     0,     0,   413,
     414,   696,   416,   697,  1092,   418,   419,   698,   421,   422,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
       0,     0,   431,   432,   433,   434,   435,  1038,   700,     0,
     438,     0,   440,   441,   442,   443,     0,     0,   444,     0,
       0,   445,   446,   447,   448,   449,   450,   701,   702,   703,
     704,   705,   706,   707,   708,   709,   710,   711,   462,   463,
     464,   465,   660,  1089,   537,     0,     0,     0,   734,  1093,
    1094,     0,     0,     0,     0,     0,     0,     0,    91,    92,
      93,    94,    95,    96,    97,    98,     0,    99,   100,   101,
       0,     0,     0,     0,     0,     0,     0,   102,   103,     0,
     104,   105,   106,     0,   108,   109,   110,   661,   662,     0,
     663,   664,     0,   116,   117,   118,   119,   120,   121,     0,
       0,   122,   123,   665,   666,   126,     0,   127,   128,   129,
     130,   667,     0,     0,     0,   133,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     668,   669,   162,  1306,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,   171,   172,   173,   174,     0,     0,
     175,   176,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   670,   191,
     192,   193,   194,   671,  1090,   196,     0,   197,   198,   672,
     200,     0,   201,     0,   202,     0,     0,     0,   205,   206,
     207,     0,   209,     0,   210,     0,   673,   212,     0,   213,
     214,   215,   216,   217,   218,     0,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,     0,
     674,   233,   234,   235,   236,   675,   676,     0,   677,     0,
     240,     0,     0,   243,     0,   245,   246,   247,   248,   249,
       0,     0,   250,     0,   252,     0,     0,   254,   255,   256,
       0,     0,   257,   258,   259,   260,   261,   678,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   679,     0,   680,   284,
     285,   286,   681,     0,   288,   289,     0,   291,     0,   682,
     293,   683,   295,   296,   297,     0,   298,   299,  1091,     0,
     300,   301,   302,     0,     0,   303,   684,     0,   306,     0,
     685,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,     0,   319,   320,   686,   322,   323,   687,   325,   326,
     327,     0,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   688,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,     0,
     354,   355,     0,   357,   358,   359,   689,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,     0,   377,   690,   379,   380,   381,
       0,   383,   384,   691,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   692,   399,   693,
     401,     0,   402,   403,     0,   404,     0,   406,   407,   408,
     409,   410,     0,   694,   695,     0,     0,   413,   414,   696,
     416,   697,  1092,   418,   419,   698,   421,   422,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,     0,
     431,   432,   433,   434,   435,  1038,   700,     0,   438,     0,
     440,   441,   442,   443,     0,     0,   444,     0,     0,   445,
     446,   447,   448,   449,   450,   701,   702,   703,   704,   705,
     706,   707,   708,   709,   710,   711,   462,   463,   464,   465,
     660,  1089,   537,     0,     0,     0,   734,  1093,  1094,     0,
       0,     0,     0,     0,     0,     0,    91,    92,    93,    94,
      95,    96,    97,    98,     0,    99,   100,   101,     0,     0,
       0,     0,     0,     0,     0,   102,   103,     0,   104,   105,
     106,     0,   108,   109,   110,   661,   662,     0,   663,   664,
       0,   116,   117,   118,   119,   120,   121,     0,     0,   122,
     123,   665,   666,   126,     0,   127,   128,   129,   130,   667,
       0,     0,     0,   133,   134,   135,   136,   137,     0,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   149,   150,   151,     0,     0,     0,     0,     0,     0,
       0,   153,   154,   155,   156,   157,   158,   159,   668,   669,
     162,     0,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,     0,     0,   175,   176,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,   670,   191,   192,   193,
     194,   671,  1090,   196,     0,   197,   198,   672,   200,     0,
     201,     0,   202,     0,     0,     0,   205,   206,   207,     0,
     209,     0,   210,     0,   673,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,     0,   674,   233,
     234,   235,   236,   675,   676,     0,   677,     0,   240,     0,
       0,   243,     0,   245,   246,   247,   248,   249,     0,     0,
     250,     0,   252,     0,     0,   254,   255,   256,     0,     0,
     257,   258,   259,   260,   261,   678,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   679,     0,   680,   284,   285,   286,
     681,     0,   288,   289,     0,   291,     0,   682,   293,   683,
     295,   296,   297,     0,   298,   299,  1091,     0,   300,   301,
     302,     0,     0,   303,   684,     0,   306,     0,   685,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     319,   320,   686,   322,   323,   687,   325,   326,   327,     0,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   688,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,     0,   354,   355,
       0,   357,   358,   359,   689,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,     0,   377,   690,   379,   380,   381,     0,   383,
     384,   691,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   692,   399,   693,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   694,   695,     0,     0,   413,   414,   696,   416,   697,
    1092,   418,   419,   698,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,  1038,   700,     0,   438,     0,   440,   441,
     442,   443,     0,     0,   444,     0,     0,   445,   446,   447,
     448,   449,   450,   701,   702,   703,   704,   705,   706,   707,
     708,   709,   710,   711,   462,   463,   464,   465,     0,  1246,
       0,     0,  1247,     0,     0,  1093,  1094,  1248,  1249,  1250,
       0,     0,     0,     0,     0,     0,     0,  1246,     0,     0,
    1247,     0,     0,     0,  1251,  1248,  1249,  1250,  1709,     0,
       0,     0,  1253,     0,     0,  1246,     0,     0,  1247,  1254,
       0,     0,  1251,  1248,  1249,  1250,     0,     0,     0,     0,
    1253,     0,     0,     0,     0,     0,     0,  1254,     0,     0,
    1251,     0,     0,  1246,  1255,     0,  1247,     0,  1253,     0,
       0,  1248,  1249,  1250,     0,  1254,     0,     0,     0,     0,
       0,     0,  1255,     0,     0,     0,     0,     0,  1251,     0,
       0,  1884,     0,     0,     0,     0,  1253,     0,     0,     0,
    1255,     0,     0,  1254,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1710,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1255,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1256,     0,     0,     0,     0,     0,     0,
       0,  1924,     0,     0,     0,     0,  1925,  1257,     0,     0,
       0,  1256,  1258,  1246,     0,     0,  1247,     0,  2833,     0,
       0,  1248,  1249,  1250,     0,  1257,     0,     0,     0,  1256,
    1258,     0,     0,  1259,  1260,     0,     0,     0,  1251,     0,
       0,     0,     0,  1257,     0,     0,  1253,  1261,  1258,     0,
       0,  1259,  1260,  1254,     0,     0,     0,  1256,     0,     0,
       0,     0,     0,     0,     0,  1261,     0,     0,     0,  1259,
    1260,  1257,     0,     0,     0,     0,  1258,     0,  1255,     0,
       0,     0,     0,  1261,     0,  1262,     0,     0,  1263,     0,
       0,     0,     0,     0,     0,     0,     0,  1259,  1260,     0,
       0,     0,  1264,  1262,     0,  1265,  1263,     0,     0,     0,
       0,  1261,     0,     0,     0,     0,     0,     0,     0,     0,
    1264,  1262,     0,  1265,  1263,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1264,     0,
       0,  1265,     0,     0,     0,     0,     0,     0,     0,  1262,
       0,     0,  1263,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2834,  1246,  1264,     0,  1247,  1265,
       0,     0,     0,  1248,  1249,  1250,     0,  1256,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1251,  1257,  1266,  1933,  1246,     0,  1258,  1247,  1253,     0,
       0,     0,  1248,  1249,  1250,  1254,     0,     0,     0,     0,
    1266,     0,     0,     0,     0,     0,     0,  1259,  1260,  1251,
       0,     0,     0,     0,     0,     0,     0,  1253,  1266,     0,
    1255,  1261,     0,     0,  1254,     0,     0,     0,     0,     0,
    1246,     0,     0,  1247,     0,     0,     0,     0,  1248,  1249,
    1250,  1711,     0,     0,     0,     0,  1266,     0,     0,  1255,
       0,     0,     0,     0,     0,  1251,     0,     0,  1940,  1262,
       0,     0,  1263,  1253,     0,     0,     0,     0,     0,     0,
    1254,     0,     0,     0,     0,     0,  1264,     0,     0,  1265,
       0,     0,  1267,     0,     0,  1268,  1269,  1270,     0,  1271,
    1272,  1273,  1274,  1275,  1276,  1255,     0,  1898,     0,     0,
    1267,     0,     0,  1268,  1269,  1270,     0,  1271,  1272,  1273,
    1274,  1275,  1276,     0,     0,     0,     0,     0,  1267,  1256,
       0,  1268,  1269,  1270,     0,  1271,  1272,  1273,  1274,  1275,
    1276,     0,     0,  1257,     0,     0,     0,     0,  1258,     0,
       0,     0,     0,  1938,     0,     0,  1267,     0,  1256,  1268,
    1269,  1270,     0,  1271,  1272,  1273,  1274,  1275,  1276,  1259,
    1260,     0,  1257,     0,     0,     0,  1266,  1258,     0,     0,
       0,     0,     0,  1261,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1246,  1259,  1260,
    1247,     0,     0,     0,  1256,  1248,  1249,  1250,     0,     0,
       0,     0,  1261,     0,     0,     0,     0,     0,  1257,     0,
       0,  1262,  1251,  1258,  1263,     0,     0,     0,     0,     0,
    1253,     0,     0,     0,     0,     0,     0,  1254,  1264,     0,
       0,  1265,     0,     0,  1259,  1260,     0,     0,     0,     0,
    1262,     0,     0,  1263,     0,     0,     0,     0,  1261,     0,
       0,     0,  1255,     0,     0,     0,     0,  1264,     0,     0,
    1265,     0,     0,     0,     0,     0,  1267,     0,     0,  1268,
    1269,  1270,     0,  1271,  1272,  1273,  1274,  1275,  1276,     0,
       0,     0,     0,     0,     0,     0,  1262,     0,     0,  1263,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1246,  1264,     0,  1247,  1265,     0,     0,     0,
    1248,  1249,  1250,     0,     0,     0,     0,     0,  1266,     0,
       0,     0,     0,     0,     0,     0,     0,  1251,     0,     0,
       0,  1246,     0,     0,  1247,  1253,     0,     0,     0,  1248,
    1249,  1250,  1254,     0,     0,     0,     0,  1266,     0,  1246,
       0,  1256,  1247,     0,     0,     0,  1251,  1248,  1249,  1250,
       0,     0,     0,     0,  1253,  1257,     0,  1255,     0,     0,
    1258,  1254,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1253,     0,     0,     0,     0,     0,     0,  1254,
       0,  1259,  1260,  1266,     0,     0,  1255,     0,     0,     0,
       0,     0,     0,     0,     0,  1261,     0,     0,     0,     0,
       0,     0,     0,     0,  1255,     0,     0,     0,  1267,     0,
       0,  1268,  1269,  1270,     0,  1271,  1272,  1273,  1274,  1275,
    1276,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1262,     0,     0,  1263,  1267,     0,     0,
    1268,  1269,  1270,     0,  1271,  1272,  1273,  1274,  1275,  1276,
    1264,     0,     0,  1265,     0,     0,  1256,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1257,     0,     0,     0,     0,  1258,     0,     0,     0,     0,
       0,     0,     0,  1267,     0,  1256,  1268,  1269,  1270,     0,
    1271,  1272,  1273,  1274,  1275,  1276,  1259,  1260,     0,  1257,
       0,     0,     0,  1256,  1258,     0,     0,     0,     0,     0,
    1261,     0,     0,     0,     0,     0,     0,  1257,     0,     0,
       0,     0,  1258,     0,     0,  1259,  1260,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1261,
    1266,     0,     0,  1259,  1260,     0,     0,     0,  1262,     0,
       0,  1263,     0,     0,     0,     0,     0,  1261,     0,     0,
       0,     0,     0,     0,     0,  1264,     0,     0,  1265,     0,
       0,     0,  2152,     0,     0,     0,     0,  1262,     0,     0,
    1263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1264,  1262,     0,     0,  1263,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1264,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1267,     0,     0,  1268,  1269,  1270,     0,  1271,  1272,  1273,
    1274,  1275,  1276,     0,     0,  1266,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1266,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1266,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1267,     0,     0,  1268,  1269,
    1270,     0,  1271,  1272,  1273,  1274,  1275,  1276,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1267,     0,     0,  1268,  1269,  1270,
       0,  1271,  1272,  1273,  1274,  1275,  1276,     0,     0,   965,
       0,  1618,  1267,     0,     0,  1268,  1269,  1270,     0,  1271,
    1272,  1273,  1274,  1275,  1276,    91,    92,    93,    94,    95,
      96,    97,    98,   966,    99,   100,   101,   967,   968,   969,
     970,   971,   972,   973,   102,   103,   974,   104,   105,   106,
       0,   108,   109,   110,   661,   662,     0,   663,   664,   975,
     116,   117,   118,   119,   120,   121,   976,   977,   122,   123,
     665,   666,   126,   978,   127,   128,   129,   130,   667,   979,
       0,   980,   133,   134,   135,   136,   137,     0,   139,   140,
     141,   981,   142,   143,   144,   145,   146,   147,   982,     0,
     149,   150,   151,   983,   984,   985,     0,   986,   987,   988,
     153,   154,   155,   156,   157,   158,   159,   668,   669,   162,
     989,   163,   990,   164,   165,   166,   167,   168,   169,   991,
     170,   171,   172,   173,   174,   992,   993,   175,   176,   177,
     178,   179,   994,   180,   181,   182,   995,   183,   184,   185,
     996,   186,   187,   188,   189,   670,   191,   192,   193,   194,
     671,   997,   196,   998,   197,   198,   672,   200,   999,   201,
    1000,   202,     0,  1001,     0,   205,   206,   207,     0,   209,
    1002,   210,  1003,   673,   212,  1004,   213,   214,   215,   216,
     217,   218,     0,   220,   221,   222,   223,  1005,   224,   225,
     226,   227,   228,   229,  1006,   230,     0,   674,   233,   234,
     235,   236,   675,   676,  1007,   677,  1008,   240,     0,     0,
     243,     0,   245,   246,   247,   248,   249,  1009,  1010,   250,
       0,   252,     0,  1011,   254,   255,   256,  1012,  1013,   257,
     258,   259,   260,   261,   678,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   679,     0,   680,   284,   285,   286,   681,
    1014,   288,   289,     0,   291,  1015,   682,   293,   683,   295,
     296,   297,  1016,   298,   299,  1017,  1018,   300,   301,   302,
    1019,  1020,   303,   684,     0,   306,     0,   685,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,  1021,   319,
     320,   686,   322,   323,   687,   325,   326,   327,  1022,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   688,   338,
     339,   340,   341,  1023,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,  1024,   354,   355,     0,
     357,   358,   359,   689,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,  1025,   372,   373,   374,   375,
     376,  1026,   377,   690,   379,   380,   381,     0,   383,   384,
     691,   386,  1027,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   692,   399,   693,   401,  1028,   402,
     403,  1029,   404,     0,   406,   407,   408,   409,   410,  1030,
     694,   695,  1031,  1032,   413,   414,   696,   416,   697,  1033,
     418,   419,   698,   421,   422,   423,   424,   425,  1034,  1035,
     426,   427,   428,   429,   430,  1036,  1037,   431,   432,   433,
     434,   435,  1038,   700,  1039,   438,     0,   440,   441,   442,
     443,  1040,  1041,   444,  1042,  1043,   445,   446,   447,   448,
     449,   450,   701,   702,   703,   704,   705,   706,   707,   708,
     709,   710,   711,   462,   463,   464,   465,   965,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    91,    92,    93,    94,    95,    96,    97,
      98,   966,    99,   100,   101,   967,   968,   969,   970,   971,
     972,   973,   102,   103,   974,   104,   105,   106,     0,   108,
     109,   110,   661,   662,     0,   663,   664,   975,   116,   117,
     118,   119,   120,   121,   976,   977,   122,   123,   665,   666,
     126,   978,   127,   128,   129,   130,   667,   979,     0,   980,
     133,   134,   135,   136,   137,     0,   139,   140,   141,   981,
     142,   143,   144,   145,   146,   147,   982,     0,   149,   150,
     151,   983,   984,   985,     0,   986,   987,   988,   153,   154,
     155,   156,   157,   158,   159,   668,   669,   162,   989,   163,
     990,   164,   165,   166,   167,   168,   169,   991,   170,   171,
     172,   173,   174,   992,   993,   175,   176,   177,   178,   179,
     994,   180,   181,   182,   995,   183,   184,   185,   996,   186,
     187,   188,   189,   670,   191,   192,   193,   194,   671,   997,
     196,   998,   197,   198,   672,   200,   999,   201,  1000,   202,
       0,  1001,     0,   205,   206,   207,     0,   209,  1002,   210,
    1003,   673,   212,  1004,   213,   214,   215,   216,   217,   218,
       0,   220,   221,   222,   223,  1005,   224,   225,   226,   227,
     228,   229,  1006,   230,     0,   674,   233,   234,   235,   236,
     675,   676,  1007,   677,  1008,   240,     0,     0,   243,     0,
     245,   246,   247,   248,   249,  1009,  1010,   250,     0,   252,
       0,  1011,   254,   255,   256,  1012,  1013,   257,   258,   259,
     260,   261,   678,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   679,     0,   680,   284,   285,   286,   681,  1014,   288,
     289,     0,   291,  1015,   682,   293,   683,   295,   296,   297,
    1016,   298,   299,  1017,  1018,   300,   301,   302,  1019,  1020,
     303,   684,     0,   306,     0,   685,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,  1021,   319,   320,   686,
     322,   323,   687,   325,   326,   327,  1022,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   688,   338,   339,   340,
     341,  1023,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,  1024,   354,   355,     0,   357,   358,
     359,   689,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,  1025,   372,   373,   374,   375,   376,  1026,
     377,   690,   379,   380,   381,     0,   383,   384,   691,   386,
    1027,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   692,   399,   693,   401,  1028,   402,   403,  1029,
     404,     0,   406,   407,   408,   409,   410,  1030,   694,   695,
    1031,  1032,   413,   414,   696,   416,   697,  1033,   418,   419,
     698,   421,   422,   423,   424,   425,  1034,  1035,   426,   427,
     428,   429,   430,  1036,  1037,   431,   432,   433,   434,   435,
    1038,   700,  1039,   438,     0,   440,   441,   442,   443,  1040,
    1041,   444,  1042,  1043,   445,   446,   447,   448,   449,   450,
     701,   702,   703,   704,   705,   706,   707,   708,   709,   710,
     711,   462,   463,   464,   465,   965,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,  1758,    96,    97,    98,   966,
      99,   100,   101,   967,   968,   969,   970,   971,   972,   973,
     102,   103,   974,   104,   105,   106,     0,   108,   109,   110,
     661,   662,     0,   663,   664,   975,   116,   117,   118,   119,
     120,   121,   976,   977,   122,   123,   665,   666,   126,   978,
     127,   128,   129,   130,   667,   979,     0,   980,   133,   134,
     135,   136,   137,     0,   139,   140,   141,   981,   142,   143,
     144,   145,   146,   147,   982,     0,   149,   150,   151,   983,
     984,   985,     0,   986,   987,   988,   153,   154,   155,   156,
     157,   158,   159,   668,   669,   162,   989,   163,   990,   164,
     165,   166,   167,   168,   169,   991,   170,   171,   172,   173,
     174,   992,   993,   175,   176,   177,  1759,   179,   994,   180,
     181,   182,   995,   183,   184,   185,   996,   186,   187,   188,
     189,   670,   191,   192,   193,   194,   671,   997,   196,   998,
     197,   198,   672,   200,   999,   201,  1000,   202,     0,  1001,
       0,   205,   206,   207,     0,   209,  1002,   210,  1003,   673,
     212,  1004,   213,   214,   215,   216,   217,   218,     0,   220,
     221,   222,   223,  1005,   224,   225,   226,   227,   228,   229,
    1006,   230,     0,   674,   233,   234,   235,   236,   675,   676,
    1007,   677,  1008,   240,     0,     0,   243,     0,   245,   246,
     247,   248,   249,  1009,  1010,   250,     0,   252,     0,  1011,
     254,   255,   256,  1012,  1013,   257,   258,   259,   260,   261,
     678,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   679,
       0,   680,   284,   285,   286,   681,  1014,   288,   289,     0,
     291,  1015,   682,   293,   683,   295,   296,   297,  1016,   298,
     299,  1017,  1018,   300,   301,   302,  1019,  1020,   303,   684,
       0,   306,     0,   685,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,  1021,   319,   320,   686,   322,   323,
     687,   325,   326,   327,  1022,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   688,   338,   339,   340,   341,  1023,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,  1024,   354,   355,     0,   357,   358,   359,   689,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,  1025,   372,   373,   374,   375,   376,  1026,  1760,   690,
     379,   380,   381,     0,   383,   384,   691,   386,  1027,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     692,   399,   693,   401,  1028,   402,   403,  1029,   404,     0,
     406,   407,   408,   409,   410,  1030,   694,   695,  1031,  1032,
     413,   414,   696,   416,   697,  1033,   418,   419,   698,   421,
     422,   423,   424,   425,  1034,  1035,   426,   427,   428,   429,
     430,  1036,  1037,   431,   432,   433,   434,   435,  1038,   700,
    1039,   438,     0,   440,   441,   442,   443,  1040,  1041,   444,
    1042,  1043,   445,   446,   447,   448,   449,   450,   701,   702,
     703,   704,   705,   706,   707,   708,   709,   710,   711,   462,
     463,   464,   465,    90,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     0,     0,     0,     0,     0,     0,     0,   102,   103,
       0,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,     0,   116,   117,   118,   119,   120,   121,
       0,   741,   122,   123,   124,   125,   126,     0,   127,   128,
     129,   130,   744,     0,   745,     0,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   746,   747,   748,
     749,   750,   751,   752,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   758,     0,   196,     0,   197,   198,
     199,   200,     0,   201,     0,   202,   203,     0,   204,   205,
     206,   207,   208,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,     0,     0,   250,   251,   252,   253,     0,   254,   255,
     256,   764,   765,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,     0,   288,   289,   290,   291,     0,
     770,   293,   294,   295,   296,   297,     0,   298,   299,     0,
       0,   300,   301,   302,     0,     0,   303,   304,   305,   306,
     307,   773,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   774,   322,   323,   324,   325,
     326,   327,     0,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   777,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     779,   401,     0,   402,   403,     0,   404,   405,   406,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     782,   416,   783,     0,   418,   419,   785,   421,   422,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,   786,
       0,   431,   432,   433,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    90,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,     0,     0,     0,   102,   103,     0,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,     0,   116,   117,   118,   119,   120,   121,     0,     0,
     122,   123,   124,   125,   126,     0,   127,   128,   129,   130,
     131,     0,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,     0,     0,     0,   152,     0,
       0,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,   203,     0,   204,   205,   206,   207,
     208,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,     0,
       0,   250,   251,   252,   253,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
     294,   295,   296,   297,     0,   298,   299,     0,     0,   300,
     301,   302,     0,     0,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,   402,   403,     0,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,   416,
     417,     0,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   490,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,  1362,   127,   128,   129,   130,   131,     0,
       0,  1363,   133,   134,   135,   136,   137,     0,   139,   140,
     141,  1364,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
    1365,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,  1366,     0,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   232,   233,   234,
     235,   236,   237,   238,     0,   239,     0,   240,     0,     0,
     243,     0,   245,   246,   247,   248,   249,     0,     0,   250,
       0,   252,     0,     0,   254,   255,   256,     0,     0,   257,
     258,   259,   260,   261,   492,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,     0,   283,   284,   285,   286,   287,
       0,   288,   289,     0,   291,     0,   292,   293,   294,   295,
     296,   297,     0,   298,   299,     0,     0,   300,   301,   302,
       0,     0,   303,   304,     0,   306,     0,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,  1367,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   494,   399,   400,   401,     0,   402,
     403,     0,   404,     0,   406,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,   416,   417,     0,
     418,   419,   420,   421,   422,   423,   424,   425,     0,  1368,
     426,   427,   428,   429,   430,     0,     0,   431,   432,   433,
     434,   435,   436,   437,     0,   438,     0,   440,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   490,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    91,    92,    93,    94,    95,    96,    97,
      98,     0,    99,   100,   101,     0,     0,     0,     0,     0,
       0,     0,   102,   103,     0,   104,   105,   106,     0,   108,
     109,   110,   111,   112,     0,   114,   115,     0,   116,   117,
     118,   119,   120,   121,     0,     0,   122,   123,   124,   125,
     126,  1362,   127,   128,   129,   130,   131,     0,     0,     0,
     133,   134,   135,   136,   137,     0,   139,   140,   141,  1364,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,     0,   201,  1365,   202,
       0,     0,     0,   205,   206,   207,     0,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
       0,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   232,   233,   234,   235,   236,
     237,   238,     0,   239,     0,   240,     0,     0,   243,     0,
     245,   246,   247,   248,   249,     0,     0,   250,     0,   252,
    1823,     0,   254,   255,   256,     0,     0,   257,   258,   259,
     260,   261,   492,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,     0,   283,   284,   285,   286,   287,     0,   288,
     289,     0,   291,     0,   292,   293,   294,   295,   296,   297,
       0,   298,   299,     0,     0,   300,   301,   302,     0,     0,
     303,   304,     0,   306,     0,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,  1367,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,     0,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   494,   399,   400,   401,     0,   402,   403,     0,
     404,     0,   406,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,   416,   417,     0,   418,   419,
     420,   421,   422,   423,   424,   425,     0,  1368,   426,   427,
     428,   429,   430,     0,     0,   431,   432,   433,   434,   435,
     436,   437,     0,   438,     0,   440,   441,   442,   443,     0,
       0,   444,     0,     0,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   660,     0,   537,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,     0,
      99,   100,   101,     0,     0,     0,     0,     0,     0,     0,
     102,   103,     0,   104,   105,   106,     0,   108,   109,   110,
     661,   662,     0,   663,   664,     0,   116,   117,   118,   119,
     120,   121,     0,     0,   122,   123,   665,   666,   126,     0,
     127,   128,   129,   130,   667,     0,     0,     0,   133,   134,
     135,   136,   137,     0,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   149,   150,   151,     0,
       0,     0,     0,     0,     0,     0,   153,   154,   155,   156,
     157,   158,   159,   668,   669,   162,     0,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   670,   191,   192,   193,   194,   671,  1090,   196,     0,
     197,   198,   672,   200,     0,   201,     0,   202,     0,     0,
       0,   205,   206,   207,     0,   209,     0,   210,     0,   673,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   674,   233,   234,   235,   236,   675,   676,
       0,   677,     0,   240,     0,     0,   243,     0,   245,   246,
     247,   248,   249,     0,     0,   250,     0,   252,     0,     0,
     254,   255,   256,     0,     0,   257,   258,   259,   260,   261,
     678,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   679,
       0,   680,   284,   285,   286,   681,     0,   288,   289,     0,
     291,     0,   682,   293,   683,   295,   296,   297,     0,   298,
     299,  1091,     0,   300,   301,   302,     0,     0,   303,   684,
       0,   306,     0,   685,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   686,   322,   323,
     687,   325,   326,   327,     0,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   688,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,   354,   355,     0,   357,   358,   359,   689,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,     0,   377,   690,
     379,   380,   381,     0,   383,   384,   691,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     692,   399,   693,   401,     0,   402,   403,     0,   404,     0,
     406,   407,   408,   409,   410,     0,   694,   695,     0,     0,
     413,   414,   696,   416,   697,  1092,   418,   419,   698,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,  1038,   700,
       0,   438,     0,   440,   441,   442,   443,     0,     0,   444,
       0,     0,   445,   446,   447,   448,   449,   450,   701,   702,
     703,   704,   705,   706,   707,   708,   709,   710,   711,   462,
     463,   464,   465,   490,     0,   567,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     3,     4,     0,     0,     0,     0,     0,   102,   103,
       0,   104,   105,   106,     0,   108,   109,   110,   111,   112,
       0,   114,   115,     0,   116,   117,   118,   119,   120,   121,
       0,     0,   122,   123,   124,   125,   126,     0,   127,   128,
     129,   130,   131,     0,     0,     0,   133,   134,   135,   136,
     137,     0,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   149,   150,   151,     0,     0,     0,
       0,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,     0,   201,     0,   202,     0,     0,     0,   205,
     206,   207,     0,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   492,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,     0,   283,
     284,   285,   286,   287,     0,   288,   289,     0,   291,     0,
     292,   293,   294,   295,   296,   297,     0,   298,   299,     0,
       0,   300,   301,   302,     0,     0,   303,   304,     0,   306,
       0,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   494,   399,
     400,   401,     0,   402,   403,     0,   404,     0,   406,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,   416,   417,     0,   418,   419,   420,   421,   422,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   437,     0,   438,
       0,   440,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   490,     0,   567,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,     0,     0,     0,   102,   103,     0,   104,
     105,   106,     0,   108,   109,   110,   111,   112,     0,   114,
     115,     0,   116,   117,   118,   119,   120,   121,     0,     0,
     122,   123,   124,   125,   126,     0,   127,   128,   129,   130,
     131,     0,     0,     0,   133,   134,   135,   136,   137,     0,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   149,   150,   151,     0,     0,     0,     0,     0,
       0,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   492,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   283,   284,   285,
     286,   287,     0,   288,   289,     0,   291,     0,   292,   293,
     294,   295,   296,   297,     0,   298,   299,     0,   568,   300,
     301,   302,     0,     0,   303,   304,     0,   306,     0,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   494,   399,   400,   401,
       0,   402,   403,     0,   404,     0,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,   416,
     417,     0,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,   436,   437,     0,   438,     0,   440,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   490,
       0,   567,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   611,     0,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   232,   233,   234,
     235,   236,   237,   238,     0,   239,     0,   240,     0,     0,
     243,     0,   245,   246,   247,   248,   249,     0,     0,   250,
       0,   252,     0,     0,   254,   255,   256,     0,     0,   257,
     258,   259,   260,   261,   492,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,     0,   283,   284,   285,   286,   287,
       0,   288,   289,     0,   291,     0,   292,   293,   294,   295,
     296,   297,     0,   298,   299,     0,   568,   300,   301,   302,
       0,     0,   303,   304,     0,   306,     0,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   494,   399,   400,   401,     0,   402,
     403,     0,   404,     0,   406,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,   416,   417,     0,
     418,   419,   420,   421,   422,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,     0,   431,   432,   433,
     434,   435,   436,   437,     0,   438,     0,   440,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   660,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    91,    92,    93,    94,    95,    96,    97,
      98,     0,    99,   100,   101,     3,     4,     0,     0,     0,
       0,     0,   102,   103,     0,   104,   105,   106,     0,   108,
     109,   110,   661,   662,     0,   663,   664,     0,   116,   117,
     118,   119,   120,   121,     0,     0,   122,   123,   665,   666,
     126,     0,   127,   128,   129,   130,   667,     0,     0,     0,
     133,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   668,   669,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   670,   191,   192,   193,   194,   671,     0,
     196,     0,   197,   198,   672,   200,     0,   201,     0,   202,
       0,     0,     0,   205,   206,   207,     0,   209,     0,   210,
       0,   673,   212,     0,   213,   214,   215,   216,   217,   218,
       0,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   674,   233,   234,   235,   236,
     675,   676,     0,   677,     0,   240,     0,     0,   243,     0,
     245,   246,   247,   248,   249,     0,     0,   250,     0,   252,
       0,     0,   254,   255,   256,     0,     0,   257,   258,   259,
     260,   261,   678,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   679,     0,   680,   284,   285,   286,   681,     0,   288,
     289,     0,   291,     0,   682,   293,   683,   295,   296,   297,
       0,   298,   299,     0,     0,   300,   301,   302,     0,     0,
     303,   684,     0,   306,     0,   685,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   686,
     322,   323,   687,   325,   326,   327,     0,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   688,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,     0,   354,   355,     0,   357,   358,
     359,   689,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   690,   379,   380,   381,     0,   383,   384,   691,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   692,   399,   693,   401,     0,   402,   403,     0,
     404,     0,   406,   407,   408,   409,   410,     0,   694,   695,
       0,     0,   413,   414,   696,   416,   697,     0,   418,   419,
     698,   421,   422,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,     0,   431,   432,   433,   434,   435,
    1038,   700,     0,   438,     0,   440,   441,   442,   443,     0,
       0,   444,     0,     0,   445,   446,   447,   448,   449,   450,
     701,   702,   703,   704,   705,   706,   707,   708,   709,   710,
     711,   462,   463,   464,   465,   490,     0,   567,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,     0,
      99,   100,   101,     0,     0,     0,     0,     0,     0,     0,
     102,   103,     0,   104,   105,   106,     0,   108,   109,   110,
     111,   112,     0,   114,   115,     0,   116,   117,   118,   119,
     120,   121,     0,     0,   122,   123,   124,   125,   126,     0,
     127,   128,   129,   130,   131,     0,     0,     0,   133,   134,
     135,   136,   137,     0,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   149,   150,   151,     0,
       0,     0,     0,     0,     0,     0,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,     0,   201,     0,   202,     0,     0,
       0,   205,   206,   207,     0,  1671,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   232,   233,   234,   235,   236,   237,   238,
       0,   239,     0,   240,     0,     0,   243,     0,   245,   246,
     247,   248,   249,     0,     0,   250,     0,   252,     0,     0,
     254,   255,  1672,     0,     0,   257,   258,   259,   260,   261,
     492,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
       0,   283,   284,   285,   286,   287,     0,   288,   289,     0,
     291,     0,   292,   293,   294,   295,   296,   297,     0,   298,
     299,     0,     0,   300,   301,   302,     0,     0,   303,   304,
       0,   306,     0,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,     0,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     494,   399,   400,   401,     0,   402,   403,  1673,   404,     0,
     406,  1674,   408,  1675,   410,     0,   411,   412,     0,     0,
     413,   414,   415,   416,   417,     0,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   426,   427,  1676,   429,
     430,     0,     0,   431,   432,   433,   434,   435,   436,   437,
       0,   438,     0,   440,   441,   442,   443,     0,     0,   444,
       0,     0,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   490,  2573,     0,     0,     0,     0,  2574,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     0,     0,     0,     0,     0,     0,     0,   102,   103,
       0,   104,   105,   106,     0,   108,   109,   110,   111,   112,
       0,   114,   115,     0,   116,   117,   118,   119,   120,   121,
       0,     0,   122,   123,   124,   125,   126,     0,   127,   128,
     129,   130,   131,     0,     0,     0,   133,   134,   135,   136,
     137,     0,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   149,   150,   151,     0,     0,     0,
       0,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,     0,   201,     0,   202,     0,     0,     0,   205,
     206,   207,     0,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   492,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,     0,   283,
     284,   285,   286,   287,     0,   288,   289,     0,   291,     0,
     292,   293,   294,   295,   296,   297,     0,   298,   299,     0,
       0,   300,   301,   302,     0,     0,   303,   304,     0,   306,
       0,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   494,   399,
     400,   401,     0,   402,   403,     0,   404,     0,   406,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,   416,   417,     0,   418,   419,   420,   421,   422,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   437,     0,   438,
       0,   440,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   490,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    91,    92,    93,
      94,    95,    96,    97,    98,   491,    99,   100,   101,     0,
       0,     0,     0,     0,     0,     0,   102,   103,     0,   104,
     105,   106,     0,   108,   109,   110,   111,   112,     0,   114,
     115,     0,   116,   117,   118,   119,   120,   121,     0,     0,
     122,   123,   124,   125,   126,     0,   127,   128,   129,   130,
     131,     0,     0,     0,   133,   134,   135,   136,   137,     0,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   149,   150,   151,     0,     0,     0,     0,     0,
       0,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   492,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   283,   284,   285,
     286,   287,     0,   288,   289,     0,   291,     0,   292,   293,
     294,   295,   296,   297,     0,   298,   299,     0,     0,   300,
     301,   302,     0,     0,   303,   304,     0,   306,     0,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,   323,   324,   493,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   494,   399,   400,   401,
       0,   402,   403,     0,   404,     0,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,   416,
     417,     0,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,   436,   437,     0,   438,     0,   440,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   490,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,   542,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   232,   233,   234,
     235,   236,   237,   238,     0,   239,     0,   240,     0,     0,
     243,     0,   245,   246,   247,   248,   249,     0,     0,   250,
       0,   252,     0,     0,   254,   255,   256,     0,     0,   257,
     258,   259,   260,   261,   492,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,     0,   283,   284,   285,   286,   287,
       0,   288,   289,     0,   291,     0,   292,   293,   294,   295,
     296,   297,     0,   298,   299,     0,     0,   300,   301,   302,
       0,     0,   303,   304,     0,   306,     0,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   494,   399,   400,   401,     0,   402,
     403,     0,   404,     0,   406,   407,   408,   409,   410,     0,
     543,   412,     0,     0,   544,   414,   415,   416,   417,     0,
     418,   419,   420,   421,   422,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,     0,   431,   432,   433,
     434,   435,   436,   437,     0,   438,     0,   440,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   490,     0,   567,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    91,    92,    93,    94,    95,    96,    97,
      98,     0,    99,   100,   101,     0,     0,     0,     0,     0,
       0,     0,   102,   103,     0,   104,   105,   106,     0,   108,
     109,   110,   111,   112,     0,   114,   115,     0,   116,   117,
     118,   119,   120,   121,     0,     0,   122,   123,   124,   125,
     126,     0,   127,   128,   129,   130,   131,     0,     0,     0,
     133,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,     0,   201,     0,   202,
       0,     0,     0,   205,   206,   207,     0,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   606,
       0,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   232,   233,   234,   235,   236,
     237,   238,     0,   239,     0,   240,     0,     0,   243,     0,
     245,   246,   247,   248,   249,     0,     0,   250,     0,   252,
       0,     0,   254,   255,   256,     0,     0,   257,   258,   259,
     260,   261,   492,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,     0,   283,   284,   285,   286,   287,     0,   288,
     289,     0,   291,     0,   292,   293,   294,   295,   296,   297,
       0,   298,   299,     0,     0,   300,   301,   302,     0,     0,
     303,   304,     0,   306,     0,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,     0,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   494,   399,   400,   401,     0,   402,   403,     0,
     404,     0,   406,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,   416,   417,     0,   418,   419,
     420,   421,   422,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,     0,   431,   432,   433,   434,   435,
     436,   437,     0,   438,     0,   440,   441,   442,   443,     0,
       0,   444,     0,     0,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   490,     0,   567,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,     0,
      99,   100,   101,     0,     0,     0,     0,     0,     0,     0,
     102,   103,     0,   104,   105,   106,     0,   108,   109,   110,
     111,   112,     0,   114,   115,     0,   116,   117,   118,   119,
     120,   121,     0,     0,   122,   123,   124,   125,   126,     0,
     127,   128,   129,   130,   131,     0,     0,     0,   133,   134,
     135,   136,   137,     0,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   149,   150,   151,     0,
       0,     0,     0,     0,     0,     0,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,     0,   201,     0,   202,     0,     0,
       0,   205,   206,   207,     0,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   609,     0,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   232,   233,   234,   235,   236,   237,   238,
       0,   239,     0,   240,     0,     0,   243,     0,   245,   246,
     247,   248,   249,     0,     0,   250,     0,   252,     0,     0,
     254,   255,   256,     0,     0,   257,   258,   259,   260,   261,
     492,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
       0,   283,   284,   285,   286,   287,     0,   288,   289,     0,
     291,     0,   292,   293,   294,   295,   296,   297,     0,   298,
     299,     0,     0,   300,   301,   302,     0,     0,   303,   304,
       0,   306,     0,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,     0,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     494,   399,   400,   401,     0,   402,   403,     0,   404,     0,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,   416,   417,     0,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,   436,   437,
       0,   438,     0,   440,   441,   442,   443,     0,     0,   444,
       0,     0,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   490,     0,   567,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     0,     0,     0,     0,     0,     0,     0,   102,   103,
       0,   104,   105,   106,     0,   108,   109,   110,   111,   112,
       0,   114,   115,     0,   116,   117,   118,   119,   120,   121,
       0,     0,   122,   123,   124,   125,   126,     0,   127,   128,
     129,   130,   131,     0,     0,     0,   133,   134,   135,   136,
     137,     0,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   149,   150,   151,     0,     0,     0,
       0,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,     0,   201,     0,   202,     0,     0,     0,   205,
     206,   207,     0,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   613,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   492,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,     0,   283,
     284,   285,   286,   287,     0,   288,   289,     0,   291,     0,
     292,   293,   294,   295,   296,   297,     0,   298,   299,     0,
       0,   300,   301,   302,     0,     0,   303,   304,     0,   306,
       0,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   494,   399,
     400,   401,     0,   402,   403,     0,   404,     0,   406,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,   416,   417,     0,   418,   419,   420,   421,   422,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   437,     0,   438,
       0,   440,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   490,     0,   567,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,     0,     0,     0,   102,   103,     0,   104,
     105,   106,     0,   108,   109,   110,   111,   112,     0,   114,
     115,     0,   116,   117,   118,   119,   120,   121,     0,     0,
     122,   123,   124,   125,   126,     0,   127,   128,   129,   130,
     131,     0,     0,     0,   133,   134,   135,   136,   137,     0,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   149,   150,   151,     0,     0,     0,     0,     0,
       0,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   492,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   283,   284,   285,
     286,   287,     0,   288,   289,     0,   291,     0,   292,   293,
     294,   295,   296,   297,     0,   298,   299,     0,     0,   300,
     301,   302,     0,     0,   303,   304,     0,   306,     0,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   494,   399,   400,   401,
       0,   402,   403,     0,   404,     0,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,   416,
     417,     0,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,   436,   437,     0,   438,     0,   440,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   490,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,   639,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   232,   233,   234,
     235,   236,   237,   238,     0,   239,     0,   240,     0,     0,
     243,     0,   245,   246,   247,   248,   249,     0,     0,   250,
       0,   252,     0,     0,   254,   255,   256,     0,     0,   257,
     258,   259,   260,   261,   492,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,     0,   283,   284,   285,   286,   287,
       0,   288,   289,     0,   291,     0,   292,   293,   294,   295,
     296,   297,     0,   298,   299,     0,     0,   300,   301,   302,
       0,     0,   303,   304,     0,   306,     0,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   494,   399,   400,   401,     0,   402,
     403,     0,   404,     0,   406,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,   416,   417,     0,
     418,   419,   420,   421,   422,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,     0,   431,   432,   433,
     434,   435,   436,   437,     0,   438,     0,   440,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   490,     0,   567,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    91,    92,    93,    94,    95,    96,    97,
      98,     0,    99,   100,   101,     0,     0,     0,     0,     0,
       0,     0,   102,   103,     0,   104,   105,   106,     0,   108,
     109,   110,   111,   112,     0,   114,   115,     0,   116,   117,
     118,   119,   120,   121,     0,     0,   122,   123,   124,   125,
     126,     0,   127,   128,   129,   130,   131,     0,     0,     0,
     133,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,     0,   201,     0,   202,
       0,     0,     0,   205,   206,   207,     0,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,  1060,
       0,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   232,   233,   234,   235,   236,
     237,   238,     0,   239,     0,   240,     0,     0,   243,     0,
     245,   246,   247,   248,   249,     0,     0,   250,     0,   252,
       0,     0,   254,   255,   256,     0,     0,   257,   258,   259,
     260,   261,   492,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,     0,   283,   284,   285,   286,   287,     0,   288,
     289,     0,   291,     0,   292,   293,   294,   295,   296,   297,
       0,   298,   299,     0,     0,   300,   301,   302,     0,     0,
     303,   304,     0,   306,     0,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,     0,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   494,   399,   400,   401,     0,   402,   403,     0,
     404,     0,   406,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,   416,   417,     0,   418,   419,
     420,   421,   422,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,     0,   431,   432,   433,   434,   435,
     436,   437,     0,   438,     0,   440,   441,   442,   443,     0,
       0,   444,     0,     0,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   490,     0,   567,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,     0,
      99,   100,   101,     0,     0,     0,     0,     0,     0,     0,
     102,   103,     0,   104,   105,   106,     0,   108,   109,   110,
     111,   112,     0,   114,   115,     0,   116,   117,   118,   119,
     120,   121,     0,     0,   122,   123,   124,   125,   126,     0,
     127,   128,   129,   130,   131,     0,     0,     0,   133,   134,
     135,   136,   137,     0,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   149,   150,   151,     0,
       0,     0,     0,     0,     0,     0,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,     0,   201,     0,   202,     0,     0,
       0,   205,   206,   207,     0,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,  1062,     0,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   232,   233,   234,   235,   236,   237,   238,
       0,   239,     0,   240,     0,     0,   243,     0,   245,   246,
     247,   248,   249,     0,     0,   250,     0,   252,     0,     0,
     254,   255,   256,     0,     0,   257,   258,   259,   260,   261,
     492,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
       0,   283,   284,   285,   286,   287,     0,   288,   289,     0,
     291,     0,   292,   293,   294,   295,   296,   297,     0,   298,
     299,     0,     0,   300,   301,   302,     0,     0,   303,   304,
       0,   306,     0,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,     0,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     494,   399,   400,   401,     0,   402,   403,     0,   404,     0,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,   416,   417,     0,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,   436,   437,
       0,   438,     0,   440,   441,   442,   443,     0,     0,   444,
       0,     0,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   490,     0,   567,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     0,     0,     0,     0,     0,     0,     0,   102,   103,
       0,   104,   105,   106,     0,   108,   109,   110,   111,   112,
       0,   114,   115,     0,   116,   117,   118,   119,   120,   121,
       0,     0,   122,   123,   124,   125,   126,     0,   127,   128,
     129,   130,   131,     0,     0,     0,   133,   134,   135,   136,
     137,     0,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   149,   150,   151,     0,     0,     0,
       0,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,     0,   201,     0,   202,     0,     0,     0,   205,
     206,   207,     0,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,  1466,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   492,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,     0,   283,
     284,   285,   286,   287,     0,   288,   289,     0,   291,     0,
     292,   293,   294,   295,   296,   297,     0,   298,   299,     0,
       0,   300,   301,   302,     0,     0,   303,   304,     0,   306,
       0,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   494,   399,
     400,   401,     0,   402,   403,     0,   404,     0,   406,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,   416,   417,     0,   418,   419,   420,   421,   422,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   437,     0,   438,
       0,   440,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   490,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,     0,  2230,     0,   102,   103,     0,   104,
     105,   106,     0,   108,   109,   110,   111,   112,     0,   114,
     115,     0,   116,   117,   118,   119,   120,   121,     0,     0,
     122,   123,   124,   125,   126,     0,   127,   128,   129,   130,
     131,     0,     0,     0,   133,   134,   135,   136,   137,     0,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   149,   150,   151,     0,     0,     0,     0,     0,
       0,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   492,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   283,   284,   285,
     286,   287,     0,   288,   289,     0,   291,     0,   292,   293,
     294,   295,   296,   297,     0,   298,   299,     0,     0,   300,
     301,   302,     0,     0,   303,   304,     0,   306,     0,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   494,   399,   400,   401,
       0,   402,   403,     0,   404,     0,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,   416,
     417,     0,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,   436,   437,     0,   438,     0,   440,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   490,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,  2244,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   232,   233,   234,
     235,   236,   237,   238,     0,   239,     0,   240,     0,     0,
     243,     0,   245,   246,   247,   248,   249,     0,     0,   250,
       0,   252,     0,     0,   254,   255,   256,     0,     0,   257,
     258,   259,   260,   261,   492,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,     0,   283,   284,   285,   286,   287,
       0,   288,   289,     0,   291,     0,   292,   293,   294,   295,
     296,   297,     0,   298,   299,     0,     0,   300,   301,   302,
       0,     0,   303,   304,     0,   306,     0,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   494,   399,   400,   401,     0,   402,
     403,     0,   404,     0,   406,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,   416,   417,     0,
     418,   419,   420,   421,   422,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,     0,   431,   432,   433,
     434,   435,   436,   437,     0,   438,     0,   440,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   490,     0,   567,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    91,    92,    93,    94,    95,    96,    97,
      98,     0,    99,   100,   101,     0,     0,     0,     0,     0,
       0,     0,   102,   103,     0,   104,   105,   106,     0,   108,
     109,   110,   111,   112,     0,   114,   115,     0,   116,   117,
     118,   119,   120,   121,     0,     0,   122,   123,   124,   125,
     126,     0,   127,   128,   129,   130,   131,     0,     0,     0,
     133,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,     0,   201,     0,   202,
       0,     0,     0,   205,   206,   207,     0,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,  2373,
       0,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   232,   233,   234,   235,   236,
     237,   238,     0,   239,     0,   240,     0,     0,   243,     0,
     245,   246,   247,   248,   249,     0,     0,   250,     0,   252,
       0,     0,   254,   255,   256,     0,     0,   257,   258,   259,
     260,   261,   492,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,     0,   283,   284,   285,   286,   287,     0,   288,
     289,     0,   291,     0,   292,   293,   294,   295,   296,   297,
       0,   298,   299,     0,     0,   300,   301,   302,     0,     0,
     303,   304,     0,   306,     0,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,     0,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   494,   399,   400,   401,     0,   402,   403,     0,
     404,     0,   406,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,   416,   417,     0,   418,   419,
     420,   421,   422,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,     0,   431,   432,   433,   434,   435,
     436,   437,     0,   438,     0,   440,   441,   442,   443,     0,
       0,   444,     0,     0,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   490,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,     0,
      99,   100,   101,     0,     0,     0,     0,     0,     0,     0,
     102,   103,     0,   104,   105,   106,     0,   108,   109,   110,
     111,   112,     0,   114,   115,     0,   116,   117,   118,   119,
     120,   121,     0,     0,   122,   123,   124,   125,   126,     0,
     127,   128,   129,   130,   131,     0,     0,     0,   133,   134,
     135,   136,   137,     0,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   149,   150,   151,     0,
       0,     0,     0,     0,     0,     0,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,     0,   201,     0,   202,     0,     0,
       0,   205,   206,   207,     0,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   232,   233,   234,   235,   236,   237,   238,
       0,   239,     0,   240,     0,     0,   243,     0,   245,   246,
     247,   248,   249,     0,     0,   250,     0,   252,     0,     0,
     254,   255,   256,     0,     0,   257,   258,   259,   260,   261,
     492,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
       0,   283,   284,   285,   286,   287,     0,   288,   289,     0,
     291,     0,   292,   293,   294,   295,   296,   297,     0,   298,
     299,     0,     0,   300,   301,   302,     0,     0,   303,   304,
       0,   306,     0,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,     0,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     494,   399,   400,   401,     0,   402,   403,     0,   404,     0,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,   416,   417,     0,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,   436,   437,
       0,   438,     0,   440,   441,   442,   443,     0,     0,   444,
       0,     0,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   490,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     0,     0,     0,     0,     0,     0,     0,   102,   103,
       0,   104,   105,   106,     0,   108,   109,   110,   111,   112,
       0,   114,   115,     0,   116,   117,   118,   119,   120,   121,
       0,     0,   122,   123,   124,   125,   126,     0,   127,   128,
     129,   130,   131,     0,     0,     0,   133,   134,   135,   136,
     137,     0,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   149,   150,   151,     0,     0,     0,
       0,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,     0,   201,     0,   202,     0,     0,     0,   205,
     206,   207,     0,   554,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     555,     0,     0,   257,   258,   259,   260,   261,   492,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,     0,   283,
     284,   285,   286,   287,     0,   288,   289,     0,   291,     0,
     292,   293,   294,   295,   296,   297,     0,   298,   299,     0,
       0,   300,   301,   302,     0,     0,   303,   304,     0,   306,
       0,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   556,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   557,     0,   377,   378,   379,   380,
     381,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   494,   399,
     400,   401,     0,   402,   403,     0,   404,     0,   406,   407,
     408,   409,   410,     0,   558,   412,     0,     0,   413,   414,
     415,   416,   417,     0,   418,   419,   420,   421,   422,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   437,     0,   438,
       0,   440,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   490,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,     0,     0,     0,   102,   103,     0,   104,
     105,   106,     0,   108,   109,   110,   111,   112,     0,   114,
     115,     0,   116,   117,   118,   119,   120,   121,     0,     0,
     122,   123,   124,   125,   126,     0,   127,   128,   129,   130,
     131,     0,     0,     0,   133,   134,   135,   136,   137,     0,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   149,   150,   151,     0,     0,     0,     0,     0,
       0,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   492,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   283,   284,   285,
     286,   287,     0,   288,   289,     0,   291,     0,   292,   293,
     294,   295,   296,   297,     0,   298,   299,     0,     0,   300,
     301,   302,     0,     0,   303,   304,     0,   306,     0,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   577,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   494,   399,   400,   401,
       0,   402,   403,     0,   404,     0,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,   416,
     417,     0,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,   436,   437,     0,   438,     0,   440,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   490,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   631,     0,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   232,   233,   234,
     235,   236,   237,   238,     0,   239,     0,   240,     0,     0,
     243,     0,   245,   246,   247,   248,   249,     0,     0,   250,
       0,   252,     0,     0,   254,   255,   256,     0,     0,   257,
     258,   259,   260,   261,   492,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,     0,   283,   284,   285,   286,   287,
       0,   288,   289,     0,   291,     0,   292,   293,   294,   295,
     296,   297,     0,   298,   299,     0,     0,   300,   301,   302,
       0,     0,   303,   304,     0,   306,     0,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,     0,   377,   378,   379,   380,   381,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   494,   399,   400,   401,     0,   402,
     403,     0,   404,     0,   406,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,   416,   417,     0,
     418,   419,   420,   421,   422,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,     0,   431,   432,   433,
     434,   435,   436,   437,     0,   438,     0,   440,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   490,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    91,    92,    93,    94,    95,    96,    97,
      98,     0,    99,   100,   101,     0,     0,     0,     0,     0,
       0,     0,   102,   103,     0,   104,   105,   106,     0,   108,
     109,   110,   111,   112,     0,   114,   115,     0,   116,   117,
     118,   119,   120,   121,     0,     0,   122,   123,   124,   125,
     126,     0,   127,   128,   129,   130,   131,     0,     0,     0,
     133,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,     0,   201,     0,   202,
       0,     0,     0,   205,   206,   207,     0,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   647,
       0,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   232,   233,   234,   235,   236,
     237,   238,     0,   239,     0,   240,     0,     0,   243,     0,
     245,   246,   247,   248,   249,     0,     0,   250,     0,   252,
       0,     0,   254,   255,   256,     0,     0,   257,   258,   259,
     260,   261,   492,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,     0,   283,   284,   285,   286,   287,     0,   288,
     289,     0,   291,     0,   292,   293,   294,   295,   296,   297,
       0,   298,   299,     0,     0,   300,   301,   302,     0,     0,
     303,   304,     0,   306,     0,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,     0,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   494,   399,   400,   401,     0,   402,   403,     0,
     404,     0,   406,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,   416,   417,     0,   418,   419,
     420,   421,   422,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,     0,   431,   432,   433,   434,   435,
     436,   437,     0,   438,     0,   440,   441,   442,   443,     0,
       0,   444,     0,     0,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   490,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,     0,
      99,   100,   101,     0,     0,     0,     0,     0,     0,     0,
     102,   103,     0,   104,   105,   106,     0,   108,   109,   110,
     111,   112,     0,   114,   115,     0,   116,   117,   118,   119,
     120,   121,     0,     0,   122,   123,   124,   125,   126,     0,
     127,   128,   129,   130,   131,     0,     0,     0,   133,   134,
     135,   136,   137,     0,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   149,   150,   151,     0,
       0,     0,     0,     0,     0,     0,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,     0,   201,     0,   202,     0,     0,
       0,   205,   206,   207,     0,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   651,     0,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   232,   233,   234,   235,   236,   237,   238,
       0,   239,     0,   240,     0,     0,   243,     0,   245,   246,
     247,   248,   249,     0,     0,   250,     0,   252,     0,     0,
     254,   255,   256,     0,     0,   257,   258,   259,   260,   261,
     492,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
       0,   283,   284,   285,   286,   287,     0,   288,   289,     0,
     291,     0,   292,   293,   294,   295,   296,   297,     0,   298,
     299,     0,     0,   300,   301,   302,     0,     0,   303,   304,
       0,   306,     0,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,     0,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     494,   399,   400,   401,     0,   402,   403,     0,   404,     0,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,   416,   417,     0,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,   436,   437,
       0,   438,     0,   440,   441,   442,   443,     0,     0,   444,
       0,     0,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   490,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     0,     0,     0,     0,     0,     0,     0,   102,   103,
       0,   104,   105,   106,     0,   108,   109,   110,   111,   112,
       0,   114,   115,     0,   116,   117,   118,   119,   120,   121,
       0,     0,   122,   123,   124,   125,   126,     0,   127,   128,
     129,   130,   131,     0,     0,     0,   133,   134,   135,   136,
     137,     0,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   149,   150,   151,     0,     0,     0,
       0,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,     0,   201,     0,   202,     0,     0,     0,   205,
     206,   207,     0,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   654,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   492,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,     0,   283,
     284,   285,   286,   287,     0,   288,   289,     0,   291,     0,
     292,   293,   294,   295,   296,   297,     0,   298,   299,     0,
       0,   300,   301,   302,     0,     0,   303,   304,     0,   306,
       0,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   494,   399,
     400,   401,     0,   402,   403,     0,   404,     0,   406,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,   416,   417,     0,   418,   419,   420,   421,   422,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   437,     0,   438,
       0,   440,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   490,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,     0,     0,     0,   102,   103,     0,   104,
     105,   106,     0,   108,   109,   110,   111,   112,     0,   114,
     115,     0,   116,   117,   118,   119,   120,   121,     0,     0,
     122,   123,   124,   125,   126,     0,   127,   128,   129,   130,
     131,     0,     0,     0,   133,   134,   135,   136,   137,     0,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   149,   150,   151,     0,     0,     0,     0,     0,
       0,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   492,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   283,   284,   285,
     286,   287,     0,   288,   289,     0,   291,     0,   292,   293,
     294,   295,   296,   297,     0,   298,   299,     0,     0,   300,
     301,   302,     0,     0,   303,   304,     0,   306,     0,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     556,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   494,   399,   400,   401,
       0,   402,   403,     0,   404,     0,   406,   407,   408,   409,
     410,     0,   558,   412,     0,     0,   413,   414,   415,   416,
     417,     0,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,   436,   437,     0,   438,     0,   440,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   490,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,  1320,     0,   102,   103,     0,   104,   105,   106,
       0,   108,   109,   110,   111,   112,     0,   114,   115,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
     124,   125,   126,     0,   127,   128,   129,   130,   131,     0,
       0,     0,   133,   134,   135,   136,   137,     0,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,     0,     0,   175,   176,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,     0,   201,
       0,   202,     0,     0,     0,   205,   206,   207,     0,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   232,   233,   234,
     235,   236,   237,   238,     0,   239,     0,   240,     0,     0,
     243,     0,   245,   246,   247,   248,   249,     0,     0,   250,
       0,   252,     0,     0,   254,   255,   256,     0,     0,   257,
     258,   259,   260,   261,   492,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,     0,   283,   284,   285,   286,   287,
       0,   288,   289,     0,   291,     0,   292,   293,   294,   295,
     296,   297,     0,   298,   299,     0,     0,   300,   301,   302,
       0,     0,   303,   304,     0,   306,     0,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,     0,     0,   378,   379,   380,   381,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   494,   399,   400,   401,     0,   402,
     403,     0,   404,     0,   406,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,   416,   417,     0,
     418,   419,   420,   421,   422,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,     0,   431,   432,   433,
     434,   435,   436,   437,     0,   438,     0,   440,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   490,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    91,    92,    93,    94,    95,    96,    97,
      98,     0,    99,   100,   101,     0,     0,     0,     0,     0,
       0,     0,   102,   103,     0,   104,   105,   106,     0,   108,
     109,   110,   111,   112,     0,   114,   115,     0,   116,   117,
     118,   119,   120,   121,     0,     0,   122,   123,   124,   125,
     126,     0,   127,   128,   129,   130,   131,     0,     0,     0,
     133,   134,   135,   136,   137,     0,   139,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   149,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,     0,     0,   175,   176,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,     0,   201,     0,   202,
       0,     0,     0,   205,   206,   207,     0,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,  1441,
       0,   220,   221,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   232,   233,   234,   235,   236,
     237,   238,     0,   239,     0,   240,     0,     0,   243,     0,
     245,   246,   247,   248,   249,     0,     0,   250,     0,   252,
       0,     0,   254,   255,   256,     0,     0,   257,   258,   259,
     260,   261,   492,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,     0,   283,   284,   285,   286,   287,     0,   288,
     289,     0,   291,     0,   292,   293,   294,   295,   296,   297,
       0,   298,   299,     0,     0,   300,   301,   302,     0,     0,
     303,   304,     0,   306,     0,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,     0,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,     0,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   378,   379,   380,   381,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   494,   399,   400,   401,     0,   402,   403,     0,
     404,     0,   406,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,   416,   417,     0,   418,   419,
     420,   421,   422,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,     0,   431,   432,   433,   434,   435,
     436,   437,     0,   438,     0,   440,   441,   442,   443,     0,
       0,   444,     0,     0,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   490,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,     0,
      99,   100,   101,     0,     0,     0,     0,     0,     0,     0,
     102,   103,     0,   104,   105,   106,     0,   108,   109,   110,
     111,   112,     0,   114,   115,     0,   116,   117,   118,   119,
     120,   121,     0,     0,   122,   123,   124,   125,   126,     0,
     127,   128,   129,   130,   131,     0,     0,     0,   133,   134,
     135,   136,   137,     0,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   149,   150,   151,     0,
       0,     0,     0,     0,     0,     0,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,     0,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,     0,     0,   175,   176,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,     0,   201,     0,   202,     0,     0,
       0,   205,   206,   207,     0,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,  1742,     0,   220,
     221,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   232,   233,   234,   235,   236,   237,   238,
       0,   239,     0,   240,     0,     0,   243,     0,   245,   246,
     247,   248,   249,     0,     0,   250,     0,   252,     0,     0,
     254,   255,   256,     0,     0,   257,   258,   259,   260,   261,
     492,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
       0,   283,   284,   285,   286,   287,     0,   288,   289,     0,
     291,     0,   292,   293,   294,   295,   296,   297,     0,   298,
     299,     0,     0,   300,   301,   302,     0,     0,   303,   304,
       0,   306,     0,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,     0,   319,   320,   321,   322,   323,
     324,   325,   326,   327,     0,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,     0,   377,   378,
     379,   380,   381,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     494,   399,   400,   401,     0,   402,   403,     0,   404,     0,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,   416,   417,     0,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,   436,   437,
       0,   438,     0,   440,   441,   442,   443,     0,     0,   444,
       0,     0,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   490,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     0,     0,     0,     0,     0,     0,     0,   102,   103,
       0,   104,   105,   106,     0,   108,   109,   110,   111,   112,
       0,   114,   115,     0,   116,   117,   118,   119,   120,   121,
       0,     0,   122,   123,   124,   125,   126,     0,   127,   128,
     129,   130,   131,     0,     0,     0,   133,   134,   135,   136,
     137,     0,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   149,   150,   151,     0,     0,     0,
       0,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,     0,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,     0,
       0,   175,   176,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,     0,   201,     0,   202,     0,     0,     0,   205,
     206,   207,     0,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,  1754,     0,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   232,   233,   234,   235,   236,   237,   238,     0,   239,
       0,   240,     0,     0,   243,     0,   245,   246,   247,   248,
     249,     0,     0,   250,     0,   252,     0,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,   492,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,     0,   283,
     284,   285,   286,   287,     0,   288,   289,     0,   291,     0,
     292,   293,   294,   295,   296,   297,     0,   298,   299,     0,
       0,   300,   301,   302,     0,     0,   303,   304,     0,   306,
       0,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,     0,   377,   378,   379,   380,
     381,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   494,   399,
     400,   401,     0,   402,   403,     0,   404,     0,   406,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,   416,   417,     0,   418,   419,   420,   421,   422,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   437,     0,   438,
       0,   440,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   490,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    91,    92,    93,
      94,    95,    96,    97,    98,     0,    99,   100,   101,     0,
       0,     0,     0,     0,     0,     0,   102,   103,     0,   104,
     105,   106,     0,   108,   109,   110,   111,   112,     0,   114,
     115,     0,   116,   117,   118,   119,   120,   121,     0,     0,
     122,   123,   124,   125,   126,     0,   127,   128,   129,   130,
     131,     0,     0,     0,   133,   134,   135,   136,   137,     0,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   149,   150,   151,     0,     0,     0,     0,     0,
       0,     0,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,     0,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,     0,     0,   175,
     176,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
       0,   201,     0,   202,     0,     0,     0,   205,   206,   207,
       0,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,  1756,     0,   220,   221,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   232,
     233,   234,   235,   236,   237,   238,     0,   239,     0,   240,
       0,     0,   243,     0,   245,   246,   247,   248,   249,     0,
       0,   250,     0,   252,     0,     0,   254,   255,   256,     0,
       0,   257,   258,   259,   260,   261,   492,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   283,   284,   285,
     286,   287,     0,   288,   289,     0,   291,     0,   292,   293,
     294,   295,   296,   297,     0,   298,   299,     0,     0,   300,
     301,   302,     0,     0,   303,   304,     0,   306,     0,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
       0,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,   380,   381,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   494,   399,   400,   401,
       0,   402,   403,     0,   404,     0,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,   416,
     417,     0,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,   436,   437,     0,   438,     0,   440,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,  1112,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    91,    92,    93,    94,    95,
      96,    97,    98,     0,    99,   100,   101,     0,     0,     0,
       0,     0,     0,     0,   102,   103,     0,   104,   105,   106,
    1113,   108,   109,   110,     0,  1114,  1115,  1116,  1117,     0,
     116,   117,   118,   119,   120,   121,     0,     0,   122,   123,
    1118,  1119,   126,     0,   127,   128,   129,   130,     0,     0,
    1120,     0,   133,   134,   135,   136,   137,  1121,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,  1122,
     149,   150,   151,     0,     0,     0,  1123,     0,     0,     0,
     153,   154,   155,   156,   157,   158,   159,  1124,  1125,   162,
       0,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,     0,     0,   175,   176,   756,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,   189,     0,   191,   192,   193,   194,
       0,     0,   196,     0,   197,   198,  1126,   200,     0,   201,
       0,   202,  1127,     0,  1128,   205,   206,   207,  1129,   209,
       0,   210,     0,     0,   212,     0,   213,   214,   215,   216,
     217,   218,  1130,   220,   221,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,  1131,     0,   233,   234,
     235,   236,  1132,  1133,     0,  1134,     0,   240,  1135,  1136,
     243,  1137,   245,   246,   247,   248,   249,     0,     0,   250,
    1138,   252,  1139,     0,   254,   255,   256,     0,     0,   257,
     258,   259,   260,   261,  1140,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,  1141,  1142,  1143,   284,   285,   286,     0,
       0,   288,   289,  1144,   291,     0,     0,   293,  1145,   295,
     296,   297,     0,   298,   299,     0,     0,   300,   301,   302,
       0,     0,   303,     0,  1146,   306,  1147,     0,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,     0,   319,
     320,     0,   322,   323,     0,   325,   326,   327,     0,   328,
     329,   330,   331,   332,   333,   334,   335,   336,  1148,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,     0,   354,   355,  1149,
     357,   358,   359,  1150,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,     0,   377,  1151,   379,   380,   381,  1152,   383,   384,
    1153,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,  1154,   399,     0,   401,     0,   402,
     403,     0,   404,  1155,   406,   407,   408,   409,   410,     0,
    1156,  1157,     0,     0,   413,   414,     0,   416,     0,     0,
     418,   419,  1158,   421,   422,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,     0,   431,   432,   433,
     434,   435,     0,  1159,     0,   438,  1160,   440,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   490,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   462,   463,   464,   465,     0,    91,    92,
      93,    94,    95,    96,    97,    98,     0,    99,   100,   101,
       0,     0,     0,     0,     0,     0,     0,   102,   103,     0,
     104,   105,   106,     0,   108,   109,   110,   111,   112,     0,
     114,   115,     0,   116,   117,   118,   119,   120,   121,     0,
       0,   122,   123,   124,   125,   126,     0,   127,   128,   129,
     130,   131,     0,     0,     0,   133,   134,   135,   136,   137,
       0,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   149,   150,   151,     0,     0,     0,     0,
       0,     0,     0,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,     0,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,   171,   172,   173,   174,     0,     0,
     175,   176,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,     0,   201,     0,   202,     0,     0,     0,   205,   206,
     207,     0,   209,     0,   210,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,     0,   220,   221,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,     0,
     232,   233,   234,   235,   236,   237,   238,     0,   239,     0,
     240,     0,     0,   243,     0,   245,   246,   247,   248,   249,
       0,     0,   250,     0,   252,     0,     0,   254,   255,   256,
       0,     0,   257,   258,   259,   260,   261,   492,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,     0,   283,   284,
     285,   286,   287,     0,   288,   289,     0,   291,     0,   292,
     293,   294,   295,   296,   297,     0,   298,   299,     0,     0,
     300,   301,   302,     0,     0,   303,   304,     0,   306,     0,
     308,   309,   310,   311,   312,   313,   314,     0,   316,   317,
     318,     0,   319,   320,   321,   322,   323,   324,   325,   326,
     327,     0,   328,   329,   330,   331,   332,   333,   334,     0,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,     0,
     354,   355,     0,   357,   358,   359,   360,     0,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,     0,   377,   378,   379,   380,   381,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   494,   399,   400,
     401,     0,   402,   403,     0,   404,     0,   406,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
     416,   417,     0,   418,   419,   420,   421,   422,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,     0,
     431,   432,   433,   434,   435,   436,   437,     0,   438,     0,
     440,   441,   442,   443,     0,     0,   444,     0,     0,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
    2314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    91,    92,    93,    94,
      95,    96,    97,    98,     0,    99,   100,   101,     0,     0,
       0,     0,     0,     0,     0,   102,   103,     0,   104,   105,
     106,  2315,   108,   109,   110,     0,  1114,  2316,  1116,  1117,
       0,   116,   117,   118,   119,   120,   121,     0,     0,   122,
     123,  1118,  1119,   126,     0,   127,   128,   129,   130,     0,
       0,  2317,     0,   133,   134,   135,   136,   137,  2318,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
    2319,   149,   150,   151,     0,     0,     0,  2320,     0,     0,
       0,   153,   154,   155,   156,   157,   158,   159,  1124,  1125,
     162,     0,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,     0,     0,   175,   176,
     756,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,   189,     0,   191,   192,   193,
     194,     0,     0,   196,     0,   197,   198,  1126,   200,     0,
     201,     0,   202,  2321,     0,  2322,   205,   206,   207,  2323,
     209,     0,   210,     0,     0,   212,     0,   213,   214,   215,
     216,   217,   218,  2324,   220,   221,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,  2325,     0,   233,
     234,   235,   236,  1132,  1133,     0,  1134,     0,   240,  2326,
    2327,   243,  2328,   245,   246,   247,   248,   249,     0,     0,
     250,  2329,   252,  2330,     0,   254,   255,   256,     0,     0,
     257,   258,   259,   260,   261,  2519,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,  1141,  2332,  1143,   284,   285,   286,
       0,     0,   288,   289,  2334,   291,     0,     0,   293,  1145,
     295,   296,   297,     0,   298,   299,     0,     0,   300,   301,
     302,     0,     0,   303,     0,  2336,   306,  2337,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
     319,   320,     0,   322,   323,     0,   325,   326,   327,     0,
     328,   329,   330,   331,   332,   333,   334,   335,   336,  1148,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,     0,   354,   355,
    2338,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,     0,   377,     0,   379,   380,   381,  2340,   383,
     384,  1153,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,  2520,   399,     0,   401,     0,
     402,   403,     0,   404,  2342,   406,   407,   408,   409,   410,
       0,  1156,  1157,     0,     0,   413,   414,     0,   416,     0,
       0,   418,   419,  2343,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,     0,  1159,     0,   438,  2344,   440,   441,
     442,   443,     0,     0,   444,     0,     0,   445,   446,   447,
     448,   449,   450,  1112,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   462,   463,   464,   465,     0,    91,
      92,    93,    94,    95,    96,    97,    98,     0,    99,   100,
     101,     0,     0,     0,     0,     0,     0,     0,   102,   103,
       0,   104,   105,   106,  1113,   108,   109,   110,     0,  1114,
    1115,  1116,  1117,     0,   116,   117,   118,   119,   120,   121,
       0,     0,   122,   123,  1118,  1119,   126,     0,   127,   128,
     129,   130,     0,     0,  1120,     0,   133,   134,   135,   136,
     137,  1121,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,  1122,   149,   150,   151,     0,     0,     0,
    1123,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     159,  1124,  1125,   162,     0,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,     0,
       0,   175,   176,   756,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,   189,     0,
     191,   192,   193,   194,     0,     0,   196,     0,   197,   198,
    1126,   200,     0,   201,     0,   202,  1127,     0,  1128,   205,
     206,   207,  1129,   209,     0,   210,     0,     0,   212,     0,
     213,   214,   215,   216,   217,   218,  1130,   220,   221,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
    1131,     0,   233,   234,   235,   236,  1132,  1133,     0,  1134,
       0,   240,  1135,  1136,   243,  1137,   245,   246,   247,   248,
     249,     0,     0,   250,  1138,   252,  1139,     0,   254,   255,
     256,     0,     0,   257,   258,   259,   260,   261,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,  1141,  1142,  1143,
     284,   285,   286,     0,     0,   288,   289,  1144,   291,     0,
       0,   293,  1145,   295,   296,   297,     0,   298,   299,     0,
       0,   300,   301,   302,     0,     0,   303,     0,  1146,   306,
    1147,     0,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,     0,   319,   320,     0,   322,   323,     0,   325,
     326,   327,     0,   328,   329,   330,   331,   332,   333,   334,
     335,   336,  1148,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
       0,   354,   355,  1149,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,     0,   377,     0,   379,   380,
     381,  1152,   383,   384,  1153,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,     0,   399,
       0,   401,   498,   402,   403,     0,   404,  1155,   406,   407,
     408,   409,   410,     0,  1156,  1157,     0,     0,   413,   414,
       0,   416,     0,     0,   418,   419,  1158,   421,   422,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
       0,   431,   432,   433,   434,   435,     0,  1159,     0,   438,
    1160,   440,   441,   442,   443,   499,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,     0,     0,     0,     0,
     500,     0,     0,     0,     0,     0,     0,   462,   463,   464,
     465,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   501,     0,     0,     0,     0,     0,
       0,     0,     0,   502,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   503,     0,     0,     0,     0,
     504,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   505,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   506,     0,
       0,     0,   507,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   508,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   509,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     510,     0,     0,   511,     0,     0,     0,     0,     0,     0,
       0,   512,     0,     0,   513,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   514,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   515,     0,     0,     0,
       0,     0,     0,   516,     0,     0,     0,     0,     0,     0,
       0,     0,   517,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   518
};

static const yytype_int16 yycheck[] =
{
       6,     6,   610,   520,   519,    35,   625,   912,   598,   553,
     716,   617,     0,    62,   576,   526,   619,   716,  1683,  1211,
     899,   794,   571,    16,   886,   652,  1680,     0,   781,  1086,
     911,   796,     0,     0,  1493,     0,  1247,  1056,   952,   524,
    1694,    29,  1056,    16,  1752,  1056,  1056,   812,   888,  1758,
       6,  1760,  1577,  1578,   862,    64,   891,  1582,    30,   824,
    2099,  2027,  2073,  1200,  1243,  1244,  1200,    64,  1494,  1200,
     610,  2073,   612,  1749,   614,  1200,   916,     0,  1178,  1986,
     723,  1640,    34,  2109,  1703,     5,    74,     9,  2116,    84,
       5,    86,   525,    88,   656,    50,   526,    58,  1623,  1624,
      13,    14,    73,     5,    11,     5,     5,  1295,  1992,     9,
       5,    13,    14,   754,     5,    87,  1344,     0,    13,    14,
       5,  2380,    11,  1342,     5,    75,   832,  1078,    13,    14,
     771,     9,    13,    14,    41,    85,  2383,     5,   167,   116,
       0,   119,  2386,   119,  1820,   630,    92,    40,    93,     5,
       5,   168,     5,     9,    15,   529,     5,     5,  1369,   121,
      13,    14,   136,   210,   167,   106,    73,  2016,  2369,     5,
      67,    40,  1926,     5,     5,  1675,  1676,     5,     5,     5,
      27,     5,    58,  1859,  1860,  2433,   236,    34,    58,    27,
       4,  1991,   173,   279,   900,     9,    34,   903,   904,    11,
       3,     4,     5,  2644,  2538,   716,     9,   595,    75,    92,
      27,   722,   277,   114,  2351,   236,  2455,    34,    85,  2302,
     167,  2469,   116,   168,   285,   285,   204,   301,   595,  2478,
     792,   793,    92,   301,  1213,   325,   839,     3,   157,    37,
     268,   359,   236,   106,    27,   325,    27,    82,   797,   230,
    2499,   157,   117,   265,    11,   200,   114,  2608,     4,   430,
     430,    20,  2709,     9,    11,    31,    32,   164,    13,    14,
     215,   159,  1151,  2523,   348,   488,   825,   395,   491,   224,
     360,   924,   159,   184,     8,   408,   719,    11,   931,   105,
    2538,   126,    16,    17,    18,   161,  2737,   446,  2542,  2767,
    2046,  2769,   352,   347,    48,   338,   872,   107,   227,   146,
      11,   114,  2792,   258,  1525,   395,   487,   487,   436,   129,
     882,   227,   187,   834,   835,   123,    73,  2234,  2339,   452,
    1984,  2238,  1986,   366,   279,    11,   853,  2045,  1897,  2378,
      41,  2225,   491,   220,   119,   373,   129,    11,   129,   476,
     168,  2590,   442,  1332,    75,   192,  2102,   276,   352,   134,
     487,  2808,   442,   264,    85,    41,  2042,   957,  2044,   487,
      68,  2839,    73,   261,  2854,   269,   426,    41,   339,  2628,
    1905,  1906,  1907,  1908,  2521,  2826,  1911,  1912,  1913,  1914,
    1915,  1916,  1917,  1918,  1919,  1920,   279,    73,   343,   262,
     166,   487,   168,   406,  1157,   426,   209,  2161,   482,    73,
    2493,   269,  2763,   359,   482,   312,   428,   162,   399,   279,
     401,  2270,   487,  1066,  2224,  2673,   242,   230,   172,   290,
     491,   491,   426,   107,   250,   742,   743,   487,  1963,  1964,
    2641,   307,   186,   487,   491,   426,  1065,   191,  1640,   395,
     428,  2785,   428,  2129,   395,   432,   406,   340,  2706,   406,
     767,   296,   491,   339,   274,     5,   487,   191,   430,   339,
     487,   445,  1078,   476,   848,  1975,  1976,  1977,  1978,   297,
     340,   476,   226,    58,  1125,   430,   489,   475,   212,  1717,
     436,  2738,   880,   487,   489,  2739,   526,  1716,  1104,   392,
    1959,  1363,   475,   449,  1145,  1419,  1685,   475,   475,  1460,
     475,  2750,  2523,   880,   485,   383,   384,  1705,   489,  1711,
     526,  2523,  2772,   392,   439,  2784,   423,   473,   114,   376,
     491,   451,   487,   526,  1175,  2442,   311,  2785,   376,   406,
    2447,   487,  1447,  2450,   129,    75,   552,   553,   487,   598,
    2434,   449,   525,   473,   372,    85,   565,   281,  1073,   376,
     451,  1076,     0,  1080,   486,   400,   449,   487,   565,  1084,
     576,  2279,   487,   568,   487,   473,   483,  1088,  1492,  1182,
    2234,   574,   473,  2292,  2238,   487,   485,   487,   487,   449,
     489,   236,   487,  1693,   483,   590,   487,   585,  1577,  1578,
     478,   479,   487,  1582,  2643,   488,   487,   490,     0,   615,
     616,   617,   585,  1824,   117,   491,   588,   585,   585,  1181,
     585,  1183,  2650,  2649,    16,   577,   490,   371,   488,  1191,
     490,   487,   487,  1195,   487,  1238,  1239,    29,   487,   487,
     635,   636,   637,    35,  1623,  1624,  1252,  1213,  1291,  2268,
     656,   487,  1214,  1215,  1087,   487,   487,  1868,  1088,   487,
     487,   487,   585,   487,   478,   479,   478,   479,   480,   481,
     482,   483,    64,  1884,   440,   478,   479,   325,  2585,   264,
    1283,  1230,    74,   491,   187,   394,  1392,   262,    23,   274,
    1293,  1294,     8,  1904,   485,  2371,  1402,  2736,   489,  1405,
      16,    17,    18,   449,   144,  1897,   292,   352,   440,  2135,
     716,  2137,   360,  2272,   248,   249,   722,   723,   724,   487,
     429,    30,  1933,   480,   481,   482,   483,   473,   335,  1940,
     236,   451,   478,   479,   740,    59,  1873,  1874,  1875,  1873,
    1255,  1872,  2201,    67,   194,    54,   719,   395,  1873,  1874,
     474,   475,   476,   473,   478,   479,   480,   481,   482,   483,
     243,  2772,   768,   793,   339,  1822,  1332,  1946,   208,  1475,
    2772,   482,  2480,   359,  1380,   534,  1475,   536,   489,  2433,
    1388,   426,   788,   789,   790,   157,   792,   793,  2442,   194,
     162,   366,   216,  2447,   442,   476,  2450,   556,  1595,   134,
    1597,  1598,   478,   479,   480,   481,   482,   483,   489,   395,
     816,  1118,  1119,   451,  2853,  2469,   480,   481,   482,   483,
     411,  1361,   356,   357,   482,  1415,  1416,  1417,   834,   835,
    1457,   489,   129,  1606,  1461,   473,  1143,  1464,   262,  1604,
     442,   836,   487,  2809,  2810,   285,   352,   264,  1388,   487,
     436,   399,   269,   401,  1460,   227,   865,   866,   155,   868,
     355,   867,  2073,   449,   859,   871,   872,  1407,   865,   866,
    1775,   868,  1412,   236,   116,   487,   882,     4,   451,  1687,
    2405,  2073,     9,  1398,  2538,  1799,   858,   473,  1403,   157,
     885,  2857,   488,   899,   162,   491,   129,   236,  1205,  1206,
     473,   487,   319,   898,   276,  2613,   230,  1482,   487,  2618,
      23,  1486,   488,  1488,   487,   491,    29,    27,   924,   399,
     426,   401,   155,    67,   919,   931,  1905,  1906,  1907,  1908,
     214,  2585,  1911,  1912,  1913,  1914,  1915,  1916,  1917,  1918,
    1919,  1920,  1707,   915,  1784,   369,   952,   352,   283,  2408,
    1435,   554,   555,   470,   557,   360,   198,   716,     8,   227,
     320,    11,   489,   722,  1475,   281,  2491,   264,    78,  1531,
     114,  1899,   269,   173,    23,   279,    86,   274,     4,  1490,
      29,   487,   422,     9,  1963,  1964,   148,     4,   348,   352,
     395,    41,     9,   491,   194,   493,  1831,   168,    48,  1927,
     216,  1836,   337,   338,   428,   115,    31,    32,   276,     4,
     470,  1577,  1578,   352,     9,   488,  1582,   480,   491,  2673,
     262,   134,   264,    73,   485,    74,   487,   171,   489,   200,
     230,   366,   488,  2558,  1596,   491,   269,   442,   166,   798,
    2705,   274,    64,    65,   215,    23,   262,   488,   491,   808,
     491,    29,  2706,   224,    13,    14,   488,  1623,  1624,   491,
    1066,   487,   821,   426,  1059,  2122,  1628,    92,   488,    13,
      14,   491,  1078,   832,   184,   834,   835,   399,   488,   401,
    2272,  2100,  1088,   475,   284,   195,  2100,   426,   488,  2100,
    2100,  1086,  1682,   488,     5,  1088,   491,     8,  1104,  2310,
    2559,   488,   167,    14,   491,   321,  1668,   488,   488,   488,
     491,   491,   491,    24,  1087,   488,   413,    28,   491,   210,
     264,  2786,   172,    23,   487,   269,    54,   424,  1755,    29,
    1757,  2785,   487,   525,   526,  2843,   186,   488,   470,   488,
     491,   191,   491,   214,   488,  1151,  2811,   491,   487,  1848,
     149,  2056,   488,   369,   488,   491,   134,   491,   474,   475,
     476,   333,   478,   479,   480,   481,   482,   483,   312,   449,
     283,   451,   343,   565,  2055,  1181,   226,  1183,  1931,  1932,
     413,  2043,  1188,   327,   399,  1191,   401,  2398,   149,  1195,
    1178,   424,   149,   585,   182,   183,  1815,   359,   149,   399,
    2865,   401,   592,  1209,   594,  1178,  1212,  1213,  1214,  1215,
    1178,  1178,   428,  1178,  2095,   488,  1222,  1223,  1224,  2054,
     333,  2056,    23,   423,   337,   487,   426,   488,    29,   488,
     491,   281,   491,   395,   134,   488,  1242,   488,   491,    36,
     491,  1247,  1248,  1249,  1250,  1251,  1252,  1853,    81,  2014,
    1256,  1257,   264,   366,   488,  1261,   148,   491,    55,  1265,
     248,   249,  1268,  1269,  1270,  1271,  1272,  1273,  1274,  1275,
    1276,   149,   382,  1279,   436,   385,   442,   488,  1284,   423,
     491,  1287,  2239,  1289,  2241,  1291,   488,   449,  2243,   491,
     487,  2246,   488,  1288,     8,   491,   488,    11,   488,   491,
     453,   491,    16,    17,    18,   283,   488,  1313,   105,   491,
     488,   473,  2523,   491,  1309,   488,  1311,  1310,   491,    33,
     433,   371,    13,    14,   489,   487,  1332,   719,  1843,   488,
    1318,  2523,   491,   134,   359,  1341,  1342,  1848,  1941,  1905,
    1906,  1907,  1908,    13,    14,  1911,  1912,  1913,  1914,  1915,
    1916,  1917,  1918,  1919,  1920,   333,    13,    14,   488,   337,
    1355,   491,   149,  1369,   149,   757,   279,  2073,   356,   357,
     395,   395,  1378,   487,  1380,    36,  1938,   488,  2589,   225,
     491,  2592,     8,   283,   488,    11,   488,   491,   366,   491,
      16,    17,    18,    13,    14,   487,   193,  1963,  1964,   488,
     485,   793,   491,  2308,    23,   488,   488,    33,   491,   491,
      29,   436,     5,  1419,     5,   440,  1422,  1423,  2280,  1425,
    2023,   471,   488,   487,   449,   491,  2405,   487,   478,   479,
     480,   481,   482,   483,    13,    14,    23,   337,  1433,   162,
     292,  1200,    29,   488,   487,   242,   491,  1996,   473,   488,
    1456,   487,   491,   250,  1460,   433,   488,  2230,   488,   491,
    2339,   491,   487,   308,  1452,   262,   366,   359,  2074,  1475,
    2076,  2244,   488,   865,   866,   491,   868,    23,   488,    13,
      14,   491,   283,    29,  1490,   487,  1492,  1493,    11,    93,
     347,   348,    15,   487,  2121,     5,   293,     5,   212,    22,
    2090,    13,    14,   395,    13,    14,   487,   359,    13,    14,
      33,    34,  2491,    13,    14,   134,    13,    14,   487,  1525,
      13,    14,   487,   359,   487,  1531,  1532,    13,    14,    13,
      14,  1537,   333,   433,    13,    14,   337,    13,    14,    13,
      14,   338,  1301,   395,   436,    13,    14,   134,   487,  1579,
      13,    14,    13,    14,    13,    14,   487,   449,     5,   395,
     487,  2772,    85,   360,   168,   366,     5,   281,   347,   348,
     487,  1577,  1578,  1579,   347,   348,  1582,   347,   348,  2558,
    2772,   473,   487,   380,   436,   487,   212,     9,   134,  1595,
    1596,  1597,  1598,  2299,   487,   487,   200,   449,  1628,  1605,
     436,   487,  1608,   252,   253,   724,   356,   357,   834,   835,
     450,   215,    15,   449,   210,   491,    96,  1623,  1624,    36,
     224,   473,  1628,   366,   162,   276,   162,   274,   225,     6,
     406,   487,   433,   487,    11,   487,  1642,   473,    15,  1645,
      85,  1647,   491,   406,    21,    22,    23,  2250,  2529,    26,
      54,   487,    29,    30,   258,   281,    33,    34,    36,    54,
     406,  2264,  1668,     8,   283,   255,    11,   406,  1698,   488,
     496,    16,    17,    18,  1680,  1680,   406,    55,  1673,   149,
     449,    92,   264,   264,  2311,  2312,    36,   487,  1694,  1694,
      36,   488,   491,   489,  2393,  1087,   283,    74,   439,   487,
      35,   487,  1708,   487,   487,  1693,   487,    84,    85,    86,
      87,    88,   445,   832,   333,  2259,  1475,  1723,   337,   487,
    1693,     9,  1481,   404,  1680,  1693,  1693,   105,  1693,   404,
      11,  1490,   491,   486,   491,  1741,   496,   283,  1694,   343,
     404,   269,   487,   487,   406,   176,   333,   366,   158,   167,
     337,   488,  1758,  1759,  1760,   487,   430,    36,   208,   369,
     474,   475,   476,   491,   478,   479,   480,   481,   482,   483,
     216,   491,   487,     8,   280,   216,    11,   264,   216,   366,
     899,    16,    17,    18,   285,   488,  1178,   333,   317,   277,
     442,   337,   264,  1799,   279,   487,   149,   149,   279,   264,
      36,   449,    36,    35,   406,   485,   485,   406,   406,   486,
     488,   406,   488,   167,   433,   193,   488,  2523,  1824,  1814,
     366,   488,   488,   488,  1819,   488,  1821,  1822,  1823,   489,
     488,   470,   488,   488,   470,   488,   470,   167,   406,  2405,
     289,   487,  1848,   488,   488,   488,   433,  1853,   474,   475,
     476,   279,   478,   479,   480,   481,   482,   483,  1846,   487,
     487,   446,  1868,   487,   242,   436,  1258,   212,   446,   476,
     428,   472,   250,   280,   280,  1881,   491,     0,  1884,   280,
     235,   406,  2393,   264,   262,  1891,   149,   433,   194,  1895,
     283,   149,  1898,   487,   149,   406,   488,   486,  1904,  1905,
    1906,  1907,  1908,   406,   406,  1911,  1912,  1913,  1914,  1915,
    1916,  1917,  1918,  1919,  1920,   293,   406,   491,  1924,  1925,
    2825,   488,  1971,   488,   149,  2491,  1318,  1933,   488,   277,
     279,   449,  1938,    36,  1940,   149,   281,   144,   269,  1969,
     485,  1947,   140,   167,  1950,   488,  1952,    11,   488,   162,
     157,   488,   167,  1959,  1960,   162,  1986,  1963,  1964,   395,
     338,   488,  1968,  1969,   488,   487,   167,   176,   446,    92,
     493,   491,   488,   488,  2489,   473,   340,  2567,  1984,  1984,
    1986,  1986,   360,   435,   488,    83,  1981,  1982,  1983,   280,
     149,  1997,  2558,   487,   171,   487,   417,   430,   521,    36,
    2006,   208,   380,    79,   487,   487,  1765,   167,  2614,   397,
    2629,   486,   215,   486,   491,   288,  2022,   488,   487,   215,
     227,   144,   488,    54,   488,   286,   488,   487,  1984,   487,
    1986,  2593,  1151,   488,   157,   179,   487,   449,   196,   162,
     185,  2036,   476,   269,   167,   489,   281,   269,  1807,   489,
     406,   476,   489,   176,   577,  2572,   179,   489,    36,   489,
    1452,   279,   489,   489,  2070,   489,  2772,  2073,  2074,   276,
    2076,   264,   406,  2590,   724,   489,   489,   106,   285,   449,
     489,   489,    36,   167,   489,   208,   298,   489,   488,  1848,
     489,   489,   489,  2712,   215,   489,  1855,   489,  1857,   476,
     489,   487,  1861,  1862,   227,   482,  2101,   489,  2670,   489,
     489,   448,   489,   489,   489,   489,   493,   489,   489,  2634,
     487,   486,    85,   130,   487,   487,   487,  2122,  1247,   474,
     475,   476,  2120,   478,   479,   480,   481,   482,   483,   327,
     114,   488,   519,   520,   521,   487,  2152,   487,   144,   216,
      36,   149,    73,   276,   121,   149,   279,    36,   348,   488,
      54,   157,   285,   348,    36,   487,   162,   487,  2774,  2686,
     487,  2779,   491,   430,    73,   435,    36,   554,   555,   184,
     557,   430,    67,   282,   417,    67,   487,  1579,   491,  2195,
    2196,   568,  2707,    36,  2200,  2201,   350,   366,   476,  2205,
     577,   269,  2208,  2209,   184,   240,   417,  2213,    67,    36,
     487,   588,   208,   590,    73,   422,   487,   340,   487,   282,
     282,   488,  2217,  2218,  2219,  2220,    85,   279,  2234,  2234,
     262,   227,  2238,  2238,   488,   487,  1628,   347,     9,   474,
     475,   476,   334,   478,   479,   480,   481,   482,   483,   899,
    1369,   196,   279,  2259,  1646,   114,   279,   116,   635,   636,
     637,    33,   119,   428,     9,   488,   487,    22,   488,   585,
    1662,  2263,   395,  2261,  2262,  1310,  2465,  2304,  2234,  2020,
     276,  2706,  2238,  2770,     8,  2646,  2292,    11,  1680,   285,
    1816,  1490,  2105,  1088,  2057,  2301,  1386,  2070,  1753,   422,
     852,  1693,  1694,    50,  2310,   826,  1698,   430,  1073,  1708,
    1358,   875,   171,   874,  2073,  2683,   169,    41,  2601,  2761,
     173,    36,  1723,   446,    48,   448,   449,  1332,  2000,   852,
    2695,  2255,  1694,  2339,  1357,   877,  1986,  2240,  2097,   198,
      55,   194,  2586,  2225,  1984,     8,  2673,    94,    11,    73,
    2672,   728,  2690,    16,    17,    18,  2691,  1200,  1200,  1200,
    2461,  1200,   485,  2759,  2746,   488,   489,   490,  2760,  1285,
      33,  1606,  1183,   120,  1493,  1646,  1533,   230,  1711,  1425,
    1643,  1289,  2776,  2846,   237,  2621,  2824,  2393,  2812,  2544,
     105,   138,  2398,  2381,  1747,   142,  2110,   886,  1759,  2405,
    1809,  2774,  2408,  2822,  1744,   264,  1525,  2076,  2771,  1813,
     269,  2417,  2418,  1311,  1853,  2421,   163,   794,   142,   166,
    2097,  2021,    -1,  2393,    -1,    -1,   422,  2433,  2433,   858,
      -1,   284,    -1,   180,    -1,    -1,  2442,  2442,    -1,    -1,
      -1,  2447,  2447,    -1,  2450,  2450,    -1,    -1,   172,    -1,
      -1,  2457,  2458,   312,  1846,    -1,   171,    -1,    -1,   836,
      -1,    -1,   186,  2469,  2469,  2471,    -1,   191,   327,    -1,
      -1,    -1,    -1,    -1,    -1,   852,   853,  2433,   193,    -1,
      -1,   858,   859,   860,    -1,  2491,  2442,    -1,    -1,   485,
      -1,  2447,   488,   489,  2450,  2254,    -1,  2256,    -1,   352,
      -1,  1151,   226,  2498,    -1,    -1,    -1,    -1,   885,   886,
      -1,    -1,    -1,  2469,    -1,    -1,    -1,  2523,    -1,    -1,
      -1,   898,   269,    -1,    -1,    -1,    -1,   242,    -1,    -1,
     277,    -1,  2538,  2538,    -1,   250,    -1,    -1,   915,    -1,
    2535,    -1,   919,    -1,  2532,    -1,   399,   262,   401,   212,
      -1,    -1,  2558,  2559,    -1,    -1,    -1,   281,  1081,    -1,
    1083,    -1,    -1,  2593,   423,  2553,    -1,    -1,    -1,    -1,
     423,    -1,   319,   426,    -1,  2581,    -1,  1969,   293,  2585,
    2585,    -1,  2538,  2589,    -1,    -1,  2592,  2593,    -1,    -1,
      -1,    -1,  1984,    -1,  1986,    -1,    -1,  1247,  2604,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2614,    -1,
      -1,    -1,  2618,  2619,    -1,    -1,    -1,  2612,   281,    -1,
      -1,    -1,    -1,   338,    -1,    -1,    -1,    -1,    -1,  2585,
      -1,    -1,    -1,    -1,  2393,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   360,    -1,   371,    -1,    -1,
    2645,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2648,    -1,    -1,    -1,  2670,   380,    -1,  2673,  2673,    -1,
      -1,    -1,    -1,    -1,    -1,  1052,    -1,    -1,    -1,    -1,
      -1,  1058,  1059,     8,    -1,    -1,    11,    -1,    -1,  2695,
      -1,    16,    17,    18,    -1,    -1,  1073,    -1,    -1,  1076,
    2706,  2706,    -1,  1080,  1081,  1824,  1083,  1084,    -1,  1086,
      -1,    -1,   716,    -1,  2702,    -1,    41,  2673,   722,  1369,
    2726,    -1,    -1,    48,    -1,    -1,    -1,    -1,  2120,    -1,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,  2745,
    2746,    -1,    -1,    -1,    -1,    -1,    -1,   471,    73,  1868,
    2706,    -1,    -1,    -1,   478,   479,   480,   481,   482,   483,
      -1,    -1,    -1,    -1,  2523,  1884,  2772,    -1,  2774,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2785,
    2785,    -1,    -1,    -1,    -1,  1904,  2792,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2783,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,   808,    -1,    -1,    16,    17,    18,
      -1,   474,   475,   476,  1933,   478,   479,   480,   481,   482,
     483,  1940,    -1,    -1,    33,    -1,    -1,    -1,   832,  2785,
     834,   835,    -1,    -1,  1211,   108,   109,    -1,    -1,    -1,
    1959,  1364,  2234,  1493,    -1,    -1,  2238,   172,  2854,    -1,
      -1,  1374,    -1,  1376,    -1,    -1,  1379,    -1,    -1,    -1,
      -1,   186,  1385,    -1,  1387,    -1,   191,    -1,    -1,  2261,
    2262,    -1,    -1,    -1,    -1,  1525,  1399,    -1,  1255,    -1,
      -1,  1404,    -1,  2642,    -1,  1408,  1409,  1410,  1411,    -1,
    1413,  1414,    -1,    -1,    -1,    -1,   900,    -1,    -1,   903,
     904,   226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,
     183,  1288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1309,    -1,  1311,    -1,     0,    -1,    -1,    -1,
      -1,    -1,    -1,  1320,    -1,  1322,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2073,    -1,   281,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   724,    -1,    -1,    -1,
      -1,   244,   245,   246,   247,   248,   249,    -1,  1355,   252,
     253,    -1,    -1,    -1,    -1,    -1,  1363,  1364,    -1,  2381,
      -1,    -1,   108,   109,    -1,    -1,    -1,  1374,  1375,  1376,
    1377,    -1,  1379,   212,    -1,    -1,    -1,    -1,  1385,    -1,
    1387,   724,    -1,  2772,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1398,  1399,    -1,    -1,    -1,  1403,  1404,    92,    -1,
      -1,  1408,  1409,  1410,  1411,    -1,  1413,  1414,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,
    2442,    -1,    -1,    -1,    -1,  2447,  1433,  1434,  2450,    -1,
      -1,    -1,    -1,    -1,    -1,    23,   182,   183,    -1,    -1,
      -1,    29,   281,  1450,    -1,    -1,    -1,    -1,    36,    -1,
     144,    -1,  2201,   356,   357,    -1,    -1,    -1,    -1,  1093,
    1094,    -1,    -1,   157,    -1,    -1,    -1,    55,   162,    -1,
      -1,     8,    -1,   167,    11,   724,    -1,    -1,    -1,    16,
      17,    18,   176,    -1,    -1,   179,    -1,    -1,  1495,   724,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,   245,
     246,   247,   248,   249,    -1,    -1,   252,   253,    -1,    -1,
    2532,   899,    -1,    -1,   208,    -1,   471,   105,    -1,   474,
     475,   476,    -1,   478,   479,   480,   481,   482,   483,    -1,
      -1,  2553,    -1,   227,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1824,    -1,   134,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   899,    -1,    -1,  1193,
    1194,  2310,    -1,  2585,   467,   468,    -1,  1201,    -1,  1203,
    1204,  2593,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   276,    -1,  1218,   279,  1220,    -1,  1868,    -1,
    2339,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1606,
      -1,    -1,    -1,    -1,  1884,   193,    -1,  1241,    -1,    -1,
     356,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1904,    -1,  2648,    -1,    -1,    -1,
      -1,    -1,    -1,  1640,    -1,   474,   475,   476,    -1,   478,
     479,   480,   481,   482,   483,    -1,   340,    -1,    -1,  2398,
     899,    -1,    -1,  1933,   242,    -1,    -1,    -1,    -1,  2408,
    1940,    -1,   250,    -1,   899,    36,  1673,    -1,    -1,    -1,
      -1,    -1,    -1,  1680,   262,   212,    -1,    -1,    -1,  1959,
    2702,  1834,    -1,     8,    55,   724,    11,  1694,    -1,    -1,
      -1,  1698,    -1,    -1,  1701,   283,  1703,    -1,    -1,    -1,
      -1,   395,    -1,    -1,    -1,   293,    -1,  1341,  1342,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
      -1,   467,   468,    48,    -1,    -1,    -1,    -1,   422,    -1,
      -1,    -1,    -1,    -1,   105,   106,   430,    -1,    -1,    -1,
      -1,   487,  1749,   114,   281,   333,    -1,    -1,    73,   337,
     338,    -1,   446,    -1,   448,   449,    -1,    -1,  1392,    -1,
      -1,  2783,    -1,  1151,    -1,    -1,    -1,    -1,  1402,    -1,
      -1,  1405,   360,    -1,  2523,    -1,    -1,    -1,   366,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   485,   380,  2073,   488,   489,   490,    -1,    -1,    -1,
     171,    -1,  1809,    -1,    -1,    -1,    -1,  1814,  1151,    -1,
    2559,     0,  1819,  1820,  1821,  1822,  1823,   142,    -1,    -1,
      -1,    -1,   193,    -1,    -1,    -1,    -1,  1834,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1843,    -1,    -1,    -1,
    2589,  1475,    -1,  2592,    -1,   433,    -1,   172,    -1,    -1,
      -1,    -1,  1859,  1860,    -1,    -1,  1490,    -1,    -1,  1247,
     899,   186,    -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,
      -1,   242,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   250,
    1514,    -1,    23,    -1,    -1,  2038,    -1,    -1,    29,    -1,
    1897,   262,    -1,   264,    -1,    36,    -1,    -1,    -1,    -1,
      -1,   226,  1151,    92,  1247,    -1,    -1,    -1,    -1,  2062,
      -1,    -1,    -1,    -1,    55,    -1,  1151,    -1,    -1,    -1,
      -1,  2201,   293,    -1,  2077,  2078,  2079,  2080,  2081,  2082,
    2083,  2084,  2085,  2086,    -1,    -1,    -1,   474,   475,   476,
      -1,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   144,   281,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   105,    -1,  1973,   338,   157,    -1,
      -1,    -1,    -1,   162,  1981,  1982,  1983,  1984,   167,  1986,
    1987,  1369,    -1,    -1,  1991,  1992,    -1,   176,    -1,   360,
     179,    -1,    -1,   134,    -1,    -1,    -1,    -1,  1247,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
      -1,   382,  1247,  2020,   385,    -1,    -1,    -1,    -1,   208,
      -1,    -1,    -1,  2772,    -1,    -1,  1369,    -1,    -1,  2036,
    2310,  2038,    -1,    -1,    -1,  2042,  2043,  2044,   227,  2046,
      -1,    -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,
    1684,    -1,   193,    -1,    -1,  2062,    -1,  2064,    -1,  2339,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2077,  2078,  2079,  2080,  2081,  2082,  2083,  2084,  2085,  2086,
      -1,  1715,  1716,    -1,    -1,    -1,    -1,   276,    -1,    -1,
     279,    -1,    -1,    -1,  2101,  2102,   285,    -1,   552,   553,
      -1,   242,    -1,  2110,    -1,  1493,    -1,    -1,    -1,   250,
      -1,    -1,  1151,    -1,    -1,  2122,   487,    -1,  2398,    -1,
    1369,   262,  2129,    -1,    -1,    -1,    -1,    -1,  2408,    -1,
      -1,  2138,    -1,    -1,  1369,    -1,    -1,  1525,    -1,    -1,
      -1,    -1,   283,    -1,    -1,    -1,   471,    -1,    -1,    -1,
    1493,   340,   293,   478,   479,   480,   481,   482,   483,    -1,
      -1,   615,   616,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,   109,  1525,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   333,    -1,    -1,    -1,   337,   338,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    -1,   395,  2214,  1247,    48,
    2217,  2218,  2219,  2220,    -1,    -1,    -1,  2224,  2225,   360,
    2227,    -1,    -1,  2230,    -1,   366,    -1,  2234,    -1,    -1,
      -1,  2238,    -1,   422,    73,  1869,  1870,  2244,    -1,   380,
      -1,   430,    -1,  2523,  1493,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   182,   183,  2263,   446,  1493,   448,
     449,  2268,    -1,    -1,    -1,  2272,    -1,    -1,    -1,   723,
      -1,    -1,    -1,  2280,    -1,    -1,  1525,    -1,    -1,  2559,
      -1,    -1,    -1,    -1,    -1,    -1,   740,    -1,    -1,    -1,
    1525,    -1,   433,    -1,    -1,    -1,   485,    -1,  2305,   488,
     489,   490,    -1,   142,    -1,    -1,    -1,    -1,    -1,  2589,
      -1,    -1,  2592,    -1,   768,    -1,   244,   245,   246,   247,
     248,   249,    -1,    -1,   252,   253,    -1,    -1,    -1,    -1,
    1369,    -1,    -1,   172,   788,   789,   790,  2490,    -1,   793,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,
      -1,    -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   816,    -1,  2371,    -1,    -1,    -1,    -1,  2376,
      -1,  2524,  2525,  2380,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,  2541,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   867,    -1,    -1,    -1,   871,   872,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2433,  2434,   356,   357,
    2437,    -1,    -1,  2440,    -1,  2442,  1824,    -1,    -1,  2073,
    2447,    -1,   281,  2450,    -1,  2452,    -1,    -1,  2455,    -1,
    2603,    -1,    -1,    -1,  1493,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2469,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     924,    -1,    -1,    -1,    -1,    -1,    -1,   931,    -1,    -1,
    1868,  1824,  2489,  2490,    -1,    -1,  1525,    -1,    -1,    -1,
      -1,  2498,  2772,    -1,    -1,    -1,  1884,    -1,   952,    -1,
      -1,    -1,  2136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1904,  2524,  2525,    -1,
      -1,    -1,    -1,    -1,    -1,  1868,    -1,  2534,  2535,    -1,
      -1,  2538,   371,    -1,  2541,    -1,    -1,    -1,    -1,   467,
     468,  1884,    -1,    -1,    -1,  1933,    -1,    -1,    -1,    -1,
      -1,    -1,  1940,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1904,    -1,    -1,    -1,  2572,    -1,    -1,    -1,    -1,
      -1,  1959,    -1,    -1,    -1,  1824,    -1,    -1,  2585,    -1,
      -1,    -1,    -1,  2590,    -1,    -1,    -1,    -1,    -1,  1824,
    1933,    -1,  2599,    -1,    -1,    -1,  2603,  1940,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2612,    -1,    -1,    -1,    -1,
      -1,    -1,  1066,    -1,    -1,    -1,  1959,    -1,    -1,  1868,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2634,    -1,    -1,
      -1,    -1,   471,  1868,    -1,  1884,    -1,    -1,  2645,   478,
     479,   480,   481,   482,   483,    -1,    -1,    -1,     8,  1884,
      -1,    11,    -1,    -1,    -1,  1904,    16,    17,    18,    -1,
      -1,    -1,    -1,    -1,    -1,  2299,  2673,    -1,    -1,  1904,
    2304,    -1,    -1,    33,    -1,  2682,    -1,    -1,    -1,  2686,
      -1,    41,    -1,  2690,  1933,  2073,    -1,    -1,    48,    -1,
      -1,  1940,    -1,    -1,    -1,    -1,    -1,    -1,  1933,  2706,
    2707,  2708,  2709,    -1,    -1,  1940,    -1,    -1,    -1,    -1,
    1959,  2345,  2346,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1959,    -1,    -1,    -1,    -1,    -1,
    2073,    -1,    -1,    -1,  1188,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2750,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2759,    -1,  2761,  1209,    -1,    -1,  1212,    -1,
      -1,  1215,    -1,  2770,    -1,    -1,    -1,    -1,  1222,  1223,
    1224,    -1,    -1,    -1,    -1,    -1,    -1,  2784,  2785,    -1,
      -1,    -1,    -1,    -1,    -1,  1824,    -1,    -1,  1242,    -1,
      -1,    -1,    -1,    -1,  1248,  1249,  1250,  1251,    -1,    -1,
      -1,  2808,  1256,  1257,    -1,    -1,    -1,  1261,    -1,    -1,
      -1,  1265,   172,  2201,  1268,  1269,  1270,  1271,  1272,  1273,
    1274,  1275,  1276,    -1,  2073,  1279,   186,    -1,    -1,  1868,
    1284,   191,    -1,  1287,    -1,  1289,    -1,  1291,  2073,    -1,
      -1,    -1,    -1,    -1,    -1,  1884,    -1,    -1,    -1,    -1,
      -1,    -1,   212,   213,    -1,    -1,    -1,    -1,  2201,  1313,
      -1,    -1,    -1,    -1,    -1,  1904,   226,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2512,  2513,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1341,  1342,  2523,
      -1,    -1,    -1,    -1,  1933,    -1,    -1,    -1,    -1,    -1,
      -1,  1940,    -1,    -1,   264,    -1,    -1,   267,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
    1959,   281,  2310,    -1,   284,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    -1,    31,    32,    -1,
      -1,  2339,  2201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    47,    -1,  1419,  2201,  2310,  1422,  1423,
      -1,  1425,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    79,  2339,    -1,    -1,    -1,
      -1,    -1,  1456,    -1,    -1,    -1,    90,    -1,    92,    -1,
    2398,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2408,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2073,    -1,    -1,    -1,  1492,    -1,
     124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,    -1,    -1,    -1,    -1,  2398,   140,    -1,    -1,    -1,
      -1,  2310,    -1,    -1,   148,  2408,   150,   151,    -1,    -1,
     809,    -1,    -1,    -1,    -1,  2310,    -1,    -1,  1532,   163,
      -1,    -1,    -1,  1537,    -1,    -1,    -1,    -1,    -1,    -1,
    2339,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,  2339,    -1,   190,    -1,    -1,    -1,
     849,   471,    -1,    -1,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,    -1,  1579,    -1,    -1,    -1,    -1,
      -1,   491,    -1,    41,    -1,  2523,    -1,    -1,  2772,    -1,
      48,  1595,    -1,  1597,  1598,   229,    -1,    -1,    -1,  2398,
      -1,  1605,    -1,    -1,  1608,    -1,    -1,    -1,    -1,  2408,
      -1,    -1,  2201,  2398,    -1,    73,    -1,    -1,    -1,    -1,
       3,  2559,    -1,  2408,    -1,     8,    -1,    -1,    11,    -1,
    2523,    -1,    -1,    16,    17,    18,    -1,    -1,  1642,    -1,
      -1,  1645,    -1,  1647,    -1,    -1,    -1,    -1,    -1,    -1,
      33,  2589,    -1,    36,  2592,    -1,    -1,    -1,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    48,  2559,   956,    -1,    -1,
      -1,    -1,   306,    -1,   963,   309,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    -1,    -1,    -1,  2589,    -1,    -1,  2592,
      -1,    -1,    -1,   337,  1708,    -1,    -1,    -1,    -1,    -1,
      -1,   345,    -1,    -1,   172,    -1,    -1,    -1,    -1,  1723,
      -1,  2310,    -1,    -1,  2523,   359,    -1,    -1,   186,    -1,
      -1,    -1,   366,   191,    -1,    -1,   370,  1741,  2523,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,
    2339,    -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,
    2559,   395,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,
      -1,    -1,    -1,    -1,  2559,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,
    2589,    -1,    -1,  2592,    -1,  1799,    -1,   431,    -1,    -1,
      -1,    -1,   436,   186,  2589,    -1,    -1,  2592,   191,  2398,
      -1,    -1,    -1,    -1,    -1,   449,    -1,    -1,    -1,  2408,
      -1,    -1,    -1,   281,    -1,    -1,    -1,    -1,    -1,   212,
     213,    -1,    -1,    -1,  2772,    -1,    -1,    -1,    -1,   473,
      -1,    -1,    -1,   226,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   487,    -1,    -1,   490,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1881,    -1,  2772,
      -1,   264,    -1,    -1,   267,    -1,    -1,  1891,    -1,    -1,
      -1,  1895,    -1,    -1,  1898,    -1,    -1,  1186,   281,    -1,
      -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   371,    -1,    -1,    -1,    -1,    -1,  1208,
    1924,  1925,    -1,    -1,  1213,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2523,    -1,  1225,  1226,  1227,    -1,
      -1,    -1,  1231,  1947,    -1,    -1,  1950,    -1,  1952,    -1,
      -1,    -1,     8,    -1,    -1,    11,  1960,    -1,    -1,    -1,
      16,    17,    18,    -1,  1968,  1969,    -1,    -1,     8,    -1,
    2559,    11,    -1,  2772,    -1,    -1,    -1,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,  2772,   371,    -1,
      -1,    -1,    48,  1997,    -1,    -1,    -1,  1286,    -1,    -1,
    2589,    41,  2006,  2592,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,   471,    -1,    -1,    -1,    73,  2022,    -1,
     478,   479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,  1328,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1340,    -1,    -1,    -1,    -1,  1345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,    -1,
      -1,   474,   475,   476,    -1,   478,   479,   480,   481,   482,
     483,    -1,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,   172,    -1,    -1,    -1,
      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     186,    -1,   172,    -1,    -1,   191,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,   186,    -1,  2152,    -1,
      -1,   191,    48,    -1,    -1,    -1,   212,   213,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     226,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
      -1,    -1,    -1,  2772,    -1,    -1,   226,    -1,    -1,    -1,
      -1,  2195,  2196,    -1,    -1,    -1,  2200,    -1,    -1,    -1,
      -1,  2205,    -1,    -1,  2208,  2209,    -1,    -1,   264,  2213,
      -1,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,   284,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   281,    -1,    -1,    -1,    -1,  1535,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2259,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1558,
      -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1575,    -1,  1577,  1578,
     186,  1580,    -1,  1582,    -1,   191,    -1,  2301,  1587,    -1,
      -1,    -1,    -1,    -1,    -1,  1594,    -1,    -1,    -1,    -1,
    1599,    -1,    -1,  1602,    -1,   371,   212,   213,    -1,    -1,
      -1,  1610,    -1,    -1,    -1,  1614,  1615,  1616,  1617,    -1,
     226,   371,    -1,    -1,  1623,  1624,    -1,  1626,  1627,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1638,
      -1,    -1,  1641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1649,  1650,  1651,  1652,  1653,  1654,  1655,  1656,  1657,  1658,
      -1,   267,    -1,    -1,    -1,    -1,    -1,  1666,    -1,    -1,
      -1,  1670,    -1,    -1,    -1,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1691,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2417,  2418,   471,    -1,  2421,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,    -1,    -1,
      -1,   471,   488,    -1,    -1,    -1,    -1,    -1,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2457,  2458,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2471,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,  1802,  1803,  1804,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,
      17,    18,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,
    1839,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    -1,    -1,   471,    -1,  2581,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,    -1,  2593,
      -1,  1880,    -1,    -1,    -1,    -1,    73,  1886,    -1,    -1,
    2604,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1901,  1902,  1903,  2619,  1905,  1906,  1907,  1908,
      -1,    -1,  1911,  1912,  1913,  1914,  1915,  1916,  1917,  1918,
    1919,  1920,  1921,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1942,    -1,  1944,   186,    -1,    -1,  1948,
    1949,   191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1962,  1963,  1964,  1965,    -1,  1967,    -1,
      -1,    -1,   212,   213,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2695,    -1,    -1,    -1,   172,   226,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,
      -1,    -1,    -1,    -1,   191,     8,    -1,    -1,    11,    -1,
      -1,    -1,  2726,    16,    17,    18,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   212,   213,   267,    -1,    -1,
      33,  2745,  2746,    -1,    -1,    -1,    -1,    -1,    41,   226,
    2039,   281,    -1,    -1,   284,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      73,    11,    -1,    -1,    -1,    -1,    -1,   264,  2792,    -1,
     267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   281,    -1,    -1,   284,    -1,    -1,
      -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   371,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,
    2854,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2153,    -1,    -1,    -1,  2157,  2158,
      -1,  2160,    -1,    -1,  2163,  2164,  2165,  2166,    -1,   172,
      -1,  2170,  2171,  2172,  2173,  2174,  2175,  2176,  2177,  2178,
    2179,  2180,  2181,   186,   371,    -1,    -1,    -1,   191,    -1,
      -1,    -1,    -1,    -1,    -1,  2194,    -1,    -1,  2197,    -1,
    2199,    -1,   142,    -1,  2203,    -1,    -1,  2206,  2207,   212,
     213,  2210,  2211,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   226,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   471,   172,    -1,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,    -1,    -1,   186,    -1,   488,    -1,
      -1,   191,  2251,    -1,    -1,    -1,    -1,    -1,    -1,  2258,
      -1,   264,    -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2271,    -1,    -1,    -1,    -1,    -1,   281,    -1,
      -1,   284,    -1,    -1,   471,    -1,   226,   474,   475,   476,
      -1,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,   488,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2401,    -1,    -1,    -1,  2405,    -1,    -1,    -1,
      -1,    -1,  2411,  2412,  2413,    -1,    -1,  2416,    -1,    -1,
    2419,  2420,    -1,    -1,    -1,  2424,    -1,    -1,    -1,    -1,
      -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,    -1,
      -1,   474,   475,   476,    -1,   478,   479,   480,   481,   482,
     483,    -1,    -1,    -1,    -1,   488,    -1,    -1,    -1,    -1,
      -1,    -1,  2491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2509,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   471,    -1,    -1,    -1,    -1,    -1,    -1,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2557,  2558,
      -1,    -1,    -1,  2562,  2563,  2564,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2597,  2598,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2610,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2622,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,  2667,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    -1,    -1,  2685,    35,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,  2704,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,  2718,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,   129,  2781,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,  2795,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
      -1,   199,   200,   201,   202,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,    -1,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
      -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,    -1,    -1,    -1,    -1,    -1,    -1,
     478,   479,   480,    -1,    -1,    -1,    -1,   485,    -1,   487,
     488,    -1,    -1,    -1,   492,    -1,   494,   495,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      35,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
     135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,   196,   197,    -1,   199,   200,   201,   202,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,    -1,   223,   224,
     225,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,    -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,    -1,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,   434,
     435,   436,   437,    -1,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,    -1,   473,    -1,
      -1,    -1,    -1,   478,   479,    -1,    -1,    -1,    -1,    -1,
     485,    -1,   487,   488,    -1,    -1,    -1,   492,    -1,   494,
     495,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
     282,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,   473,    -1,    -1,    -1,    -1,   478,   479,    -1,    -1,
      -1,    -1,    -1,   485,    -1,   487,    -1,    -1,    -1,    -1,
     492,    -1,   494,   495,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
      -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
     199,   200,   201,   202,   203,   204,   205,   206,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,   223,   224,   225,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
      -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,   393,   394,    -1,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,   434,   435,   436,   437,    -1,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,    -1,
      -1,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,    -1,    -1,    -1,    -1,    -1,    -1,   478,
     479,    -1,    -1,    -1,    -1,    -1,   485,    -1,   487,    -1,
      -1,    -1,    -1,   492,    -1,   494,   495,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,    -1,    -1,
      -1,    -1,   478,   479,   480,    -1,    -1,    -1,    -1,   485,
      -1,   487,    -1,    -1,    -1,    -1,   492,    -1,   494,   495,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
     133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,    -1,    -1,
     223,   224,   225,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,    -1,   277,   278,    -1,    -1,   281,   282,
     283,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
     393,   394,    -1,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,   434,   435,   436,   437,    -1,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,    -1,
      -1,    -1,    -1,    -1,    -1,   478,   479,    -1,    -1,    -1,
      -1,    -1,   485,    -1,   487,    -1,    -1,    -1,    -1,   492,
      -1,   494,   495,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
      -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
     200,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
      -1,   281,   282,   283,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,    -1,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,    -1,    -1,    -1,    -1,    -1,    -1,   478,   479,
      -1,    -1,    -1,    -1,    -1,   485,    -1,   487,   488,    -1,
      -1,    -1,   492,    -1,   494,   495,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
     127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,    -1,   223,   224,   225,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,    -1,
     277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,   393,   394,    -1,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
      -1,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,    -1,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,    -1,    -1,    -1,
      -1,   478,   479,    -1,    -1,    -1,    -1,    -1,   485,    -1,
     487,   488,    -1,    -1,    -1,   492,    -1,   494,   495,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
     394,    -1,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,    -1,    -1,
      -1,    -1,    -1,    -1,   478,   479,    -1,    -1,    -1,    -1,
      -1,   485,    -1,   487,    -1,    -1,    -1,    -1,   492,    -1,
     494,   495,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
     131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,    -1,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
      -1,    -1,   223,   224,   225,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,    -1,   277,   278,    -1,    -1,
     281,   282,   283,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,   393,   394,    -1,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,    -1,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,   434,   435,   436,   437,    -1,   439,   440,
     441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,    -1,    -1,    -1,    -1,   478,   479,    -1,
      -1,    -1,    -1,    -1,   485,    -1,   487,    -1,    -1,    -1,
      -1,   492,    -1,   494,   495,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
      -1,   199,   200,   201,   202,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,    -1,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,   433,   434,   435,   436,   437,
      -1,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
      -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,    -1,    -1,    -1,    -1,    -1,    -1,
     478,   479,    -1,    -1,    -1,    -1,    -1,   485,    -1,   487,
      -1,    -1,    -1,    -1,   492,    -1,   494,   495,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      35,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
     135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,   196,   197,    -1,   199,   200,   201,   202,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,    -1,   223,   224,
     225,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,    -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,   393,   394,
      -1,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,    -1,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,   434,
     435,   436,   437,    -1,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,    -1,    -1,    -1,
      -1,    -1,    -1,   478,   479,    -1,    -1,    -1,    -1,    -1,
     485,    -1,   487,    -1,    -1,    -1,    -1,   492,    -1,   494,
     495,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
     282,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,    -1,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,    -1,    -1,    -1,    -1,   478,   479,    -1,    -1,
      -1,    -1,    -1,   485,    -1,   487,    -1,    -1,    -1,    -1,
     492,    -1,   494,   495,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
      -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
     199,   200,   201,   202,   203,   204,   205,   206,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,    -1,   223,   224,   225,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
      -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,   393,   394,    -1,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,   434,   435,   436,   437,    -1,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,    -1,
      -1,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,    -1,    -1,    -1,    -1,    -1,    -1,   478,
     479,    -1,    -1,    -1,    -1,    -1,   485,    -1,   487,    -1,
      -1,    -1,    -1,   492,    -1,   494,   495,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,   442,   443,   444,    -1,
      -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,    -1,    -1,
      -1,    -1,   478,   479,    -1,    -1,    -1,    -1,    -1,   485,
      -1,   487,    -1,    -1,    -1,    -1,   492,    -1,   494,   495,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
     133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,    -1,    -1,
     223,   224,   225,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,    -1,   277,   278,    -1,    -1,   281,   282,
     283,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
     393,   394,    -1,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,   434,   435,   436,   437,    -1,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,    -1,
      -1,    -1,    -1,    -1,    -1,   478,   479,    -1,    -1,    -1,
      -1,    -1,   485,    -1,   487,    -1,    -1,    -1,    -1,   492,
      -1,   494,   495,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
      -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
     200,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
      -1,   281,   282,   283,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,    -1,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,    -1,    -1,    -1,    -1,    -1,    -1,   478,   479,
      -1,    -1,    -1,    -1,    -1,   485,    -1,   487,    -1,    -1,
      -1,    -1,   492,    -1,   494,   495,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
     127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,   214,   215,   216,
     217,   218,   219,   220,    -1,    -1,   223,   224,   225,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,    -1,   265,   266,
      -1,   268,   269,   270,   271,   272,   273,   274,   275,    -1,
     277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,   393,   394,    -1,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
      -1,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,   434,   435,   436,
     437,    -1,   439,   440,   441,   442,   443,   444,    -1,    -1,
     447,    -1,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,    -1,    -1,    -1,
      -1,   478,   479,    -1,    -1,    -1,    -1,    -1,   485,    -1,
     487,    -1,    -1,    -1,    -1,   492,    -1,   494,   495,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
     394,    -1,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   478,   479,    -1,    -1,     3,     4,
       5,     6,     7,   487,     9,    10,    -1,    -1,    -1,    -1,
     494,   495,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
     135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,   196,   197,    -1,   199,   200,   201,   202,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,    -1,   223,   224,
     225,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,    -1,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,    -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,   393,   394,
      -1,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,    -1,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,   434,
     435,   436,   437,    -1,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   478,   479,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   487,    -1,    -1,    -1,    -1,    -1,    -1,   494,
     495,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
     282,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,    -1,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   478,   479,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,    -1,    -1,
      -1,    -1,   494,   495,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    -1,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
      -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
     139,    -1,   141,    -1,   143,    -1,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
     199,   200,   201,   202,   203,   204,   205,   206,   207,    -1,
     209,    -1,   211,    -1,    -1,   214,   215,   216,   217,   218,
     219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,    -1,   265,   266,    -1,   268,
     269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
      -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,   393,   394,    -1,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,   434,   435,   436,   437,    -1,
     439,   440,   441,   442,   443,   444,    -1,    -1,   447,    -1,
      -1,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,
     479,     3,    -1,    -1,    -1,    -1,   485,    -1,   487,    -1,
      -1,    -1,    -1,   492,    -1,   494,   495,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,   168,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,   214,   215,   216,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
     282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,    -1,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
     442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
      -1,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   488,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
      -1,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,   280,   281,
     282,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
       3,   473,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   487,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
     133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,    -1,
     223,   224,   225,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,    -1,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,   275,    -1,   277,   278,    -1,   280,   281,   282,
     283,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
     393,   394,    -1,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,   416,   417,   418,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,   434,   435,   436,   437,    -1,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   487,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
     394,    -1,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
     434,   435,   436,   437,    -1,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   487,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
     135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,   196,   197,    -1,   199,   200,   201,   202,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,    -1,   223,   224,
     225,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,    -1,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
     275,    -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,   393,   394,
      -1,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,   416,   417,   418,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,   434,
     435,   436,   437,    -1,   439,   440,   441,   442,   443,   444,
      -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,    -1,     3,     4,     5,
      -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   487,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
     216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
      -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
     266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,   279,    -1,   281,   282,   283,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
     396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
      -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,     3,    -1,    -1,    -1,
      -1,    -1,   478,   479,   480,    -1,    -1,    -1,    -1,    -1,
      -1,   487,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
     127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,    -1,   180,   181,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,
     217,   218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,
      -1,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,    -1,   259,   260,   261,   262,   263,    -1,   265,   266,
      -1,   268,    -1,   270,   271,   272,   273,   274,   275,    -1,
     277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,    -1,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,    -1,   366,
     367,   368,   369,   370,    -1,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,   416,
     417,   418,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
     437,    -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,    -1,     3,   473,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     487,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
     218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
      -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
     268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,    -1,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
     418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
      -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,    -1,     3,   473,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
      -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
     199,    -1,   201,   202,   203,   204,   205,   206,   207,    -1,
     209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,
     219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,
     229,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,    -1,
     259,   260,   261,   262,   263,    -1,   265,   266,    -1,   268,
      -1,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
      -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,
     289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,   416,   417,   418,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,   436,   437,    -1,
     439,    -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,    -1,     3,   473,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
      -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
     260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
      -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
      -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,    -1,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
     131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,
     181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,    -1,   199,    -1,
     201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,   214,    -1,   216,   217,   218,   219,   220,
      -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,    -1,   259,   260,
     261,   262,   263,    -1,   265,   266,    -1,   268,    -1,   270,
     271,   272,   273,   274,   275,    -1,   277,   278,    -1,    -1,
     281,   282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
      -1,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,   393,   394,    -1,   396,    -1,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,   416,   417,   418,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,   436,   437,    -1,   439,    -1,
     441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   487,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
      -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
     262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
     282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
     442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   487,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
     133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,   196,   197,    -1,   199,    -1,   201,   202,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
      -1,   214,    -1,   216,   217,   218,   219,   220,    -1,    -1,
     223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
     263,    -1,   265,   266,    -1,   268,    -1,   270,   271,   272,
     273,   274,   275,    -1,   277,   278,    -1,    -1,   281,   282,
     283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
      -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,    -1,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
     393,   394,    -1,   396,    -1,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,   416,   417,   418,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,   436,   437,    -1,   439,    -1,   441,   442,
     443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,    -1,    -1,
      -1,    -1,     3,     4,     5,    -1,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,   487,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,    -1,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,    -1,   306,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,   468,   469,   470,
      -1,     3,    -1,   474,   475,   476,     8,   478,   479,   480,
     481,   482,   483,    -1,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
      -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
     262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
     282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
     442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
      -1,    -1,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,
      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    33,    16,    17,
      18,    -1,    -1,    -1,    -1,    41,    -1,    -1,     8,    -1,
      -1,    11,    48,    -1,    -1,    33,    16,    17,    18,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,    -1,    33,    -1,    -1,     8,    73,    -1,    11,
      -1,    41,    -1,    -1,    16,    17,    18,    -1,    48,    -1,
      -1,    -1,    -1,    -1,     8,    73,    -1,    11,    -1,    -1,
      -1,    33,    16,    17,    18,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    -1,    73,    -1,    -1,    48,    -1,    -1,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    -1,    16,    17,    18,    -1,   172,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
     186,    -1,    -1,    -1,   172,   191,    -1,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,   186,    -1,
      -1,    -1,   172,   191,    -1,    -1,   212,   213,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    73,
     226,   191,    -1,    -1,   212,   213,    -1,    -1,    -1,    -1,
     172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,
      -1,    -1,   212,   213,   186,    -1,    -1,    -1,   172,   191,
      -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,   264,    -1,
      -1,   267,   186,    -1,    -1,    -1,    -1,   191,    -1,    -1,
     212,   213,    -1,    -1,    -1,   281,   264,    -1,   284,   267,
      -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,   212,   213,
      -1,    -1,    -1,   281,   264,    -1,   284,   267,    -1,    -1,
      -1,    -1,   226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   281,    -1,    -1,   284,    -1,    -1,    -1,   172,    -1,
      -1,    -1,   264,    -1,    -1,   267,    -1,    -1,    -1,    -1,
      -1,    -1,   186,    -1,    -1,    -1,    -1,   191,    -1,   281,
     264,    -1,   284,   267,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   212,   213,
     284,    -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,    -1,
      -1,    -1,   226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   371,     8,    -1,    -1,    11,    -1,    -1,
      -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
      -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
     264,    -1,    -1,   267,    -1,    -1,    -1,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,   281,    -1,   371,
     284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   371,    -1,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,    -1,    -1,
      -1,    -1,   488,   471,    -1,    -1,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,
     488,   471,    -1,    -1,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,   371,   488,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,
      -1,    -1,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,    -1,    -1,    -1,    -1,   488,   471,   172,    -1,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
      -1,    -1,   186,    -1,   488,    -1,    -1,   191,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,   213,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
      -1,    -1,    -1,    -1,   488,    -1,    -1,    -1,    -1,    -1,
     264,    -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,
     284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,     3,    -1,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
      -1,    -1,   486,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,    -1,
     225,    -1,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,    -1,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,    -1,   289,    -1,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   480,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
      87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
     127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,    -1,   180,   181,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,
     217,   218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,
      -1,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,    -1,   259,   260,   261,   262,   263,    -1,   265,   266,
      -1,   268,    -1,   270,   271,   272,   273,   274,   275,    -1,
     277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,    -1,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,    -1,   366,
     367,   368,   369,   370,    -1,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,   393,   394,    -1,   396,
      -1,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,   416,
     417,   418,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
     437,    -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,
     447,    -1,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,     3,     4,     5,    -1,    -1,    -1,
       9,    -1,    -1,   480,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
      -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
     199,    -1,   201,   202,   203,   204,   205,   206,   207,    -1,
     209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,
     219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,
     229,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,    -1,
     259,   260,   261,   262,   263,    -1,   265,   266,    -1,   268,
      -1,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
     279,    -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,
     289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,    -1,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,   393,   394,    -1,   396,    -1,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,   436,   437,    -1,
     439,    -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,
      -1,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,     3,     4,     5,    -1,    -1,    -1,     9,   478,
     479,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
     131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,
     181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,    -1,   199,    -1,
     201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,   214,    -1,   216,   217,   218,   219,   220,
      -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,    -1,   259,   260,
     261,   262,   263,    -1,   265,   266,    -1,   268,    -1,   270,
     271,   272,   273,   274,   275,    -1,   277,   278,   279,    -1,
     281,   282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
      -1,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,   393,   394,    -1,   396,    -1,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,    -1,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,   436,   437,    -1,   439,    -1,
     441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
       3,     4,     5,    -1,    -1,    -1,     9,   478,   479,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
     133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,   196,   197,    -1,   199,    -1,   201,   202,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
      -1,   214,    -1,   216,   217,   218,   219,   220,    -1,    -1,
     223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
     263,    -1,   265,   266,    -1,   268,    -1,   270,   271,   272,
     273,   274,   275,    -1,   277,   278,   279,    -1,   281,   282,
     283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
      -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,    -1,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
     393,   394,    -1,   396,    -1,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,   436,   437,    -1,   439,    -1,   441,   442,
     443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,    -1,     8,
      -1,    -1,    11,    -1,    -1,   478,   479,    16,    17,    18,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    33,    16,    17,    18,    37,    -1,
      -1,    -1,    41,    -1,    -1,     8,    -1,    -1,    11,    48,
      -1,    -1,    33,    16,    17,    18,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,
      33,    -1,    -1,     8,    73,    -1,    11,    -1,    41,    -1,
      -1,    16,    17,    18,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    33,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
      73,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   162,    -1,    -1,    -1,    -1,   167,   186,    -1,    -1,
      -1,   172,   191,     8,    -1,    -1,    11,    -1,   161,    -1,
      -1,    16,    17,    18,    -1,   186,    -1,    -1,    -1,   172,
     191,    -1,    -1,   212,   213,    -1,    -1,    -1,    33,    -1,
      -1,    -1,    -1,   186,    -1,    -1,    41,   226,   191,    -1,
      -1,   212,   213,    48,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,   212,
     213,   186,    -1,    -1,    -1,    -1,   191,    -1,    73,    -1,
      -1,    -1,    -1,   226,    -1,   264,    -1,    -1,   267,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,   213,    -1,
      -1,    -1,   281,   264,    -1,   284,   267,    -1,    -1,    -1,
      -1,   226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     281,   264,    -1,   284,   267,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,    -1,
      -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
      -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   307,     8,   281,    -1,    11,   284,
      -1,    -1,    -1,    16,    17,    18,    -1,   172,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      33,   186,   371,    36,     8,    -1,   191,    11,    41,    -1,
      -1,    -1,    16,    17,    18,    48,    -1,    -1,    -1,    -1,
     371,    -1,    -1,    -1,    -1,    -1,    -1,   212,   213,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,   371,    -1,
      73,   226,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,
      18,   430,    -1,    -1,    -1,    -1,   371,    -1,    -1,    73,
      -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    36,   264,
      -1,    -1,   267,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,   284,
      -1,    -1,   471,    -1,    -1,   474,   475,   476,    -1,   478,
     479,   480,   481,   482,   483,    73,    -1,   302,    -1,    -1,
     471,    -1,    -1,   474,   475,   476,    -1,   478,   479,   480,
     481,   482,   483,    -1,    -1,    -1,    -1,    -1,   471,   172,
      -1,   474,   475,   476,    -1,   478,   479,   480,   481,   482,
     483,    -1,    -1,   186,    -1,    -1,    -1,    -1,   191,    -1,
      -1,    -1,    -1,   167,    -1,    -1,   471,    -1,   172,   474,
     475,   476,    -1,   478,   479,   480,   481,   482,   483,   212,
     213,    -1,   186,    -1,    -1,    -1,   371,   191,    -1,    -1,
      -1,    -1,    -1,   226,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,   212,   213,
      11,    -1,    -1,    -1,   172,    16,    17,    18,    -1,    -1,
      -1,    -1,   226,    -1,    -1,    -1,    -1,    -1,   186,    -1,
      -1,   264,    33,   191,   267,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    48,   281,    -1,
      -1,   284,    -1,    -1,   212,   213,    -1,    -1,    -1,    -1,
     264,    -1,    -1,   267,    -1,    -1,    -1,    -1,   226,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    -1,   281,    -1,    -1,
     284,    -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,   474,
     475,   476,    -1,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   264,    -1,    -1,   267,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,   281,    -1,    11,   284,    -1,    -1,    -1,
      16,    17,    18,    -1,    -1,    -1,    -1,    -1,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,
      -1,     8,    -1,    -1,    11,    41,    -1,    -1,    -1,    16,
      17,    18,    48,    -1,    -1,    -1,    -1,   371,    -1,     8,
      -1,   172,    11,    -1,    -1,    -1,    33,    16,    17,    18,
      -1,    -1,    -1,    -1,    41,   186,    -1,    73,    -1,    -1,
     191,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,   212,   213,   371,    -1,    -1,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,   471,    -1,
      -1,   474,   475,   476,    -1,   478,   479,   480,   481,   482,
     483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   264,    -1,    -1,   267,   471,    -1,    -1,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
     281,    -1,    -1,   284,    -1,    -1,   172,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     186,    -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   471,    -1,   172,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   212,   213,    -1,   186,
      -1,    -1,    -1,   172,   191,    -1,    -1,    -1,    -1,    -1,
     226,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,
      -1,    -1,   191,    -1,    -1,   212,   213,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,
     371,    -1,    -1,   212,   213,    -1,    -1,    -1,   264,    -1,
      -1,   267,    -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,   284,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,   264,    -1,    -1,
     267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   281,   264,    -1,    -1,   267,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     471,    -1,    -1,   474,   475,   476,    -1,   478,   479,   480,
     481,   482,   483,    -1,    -1,   371,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   471,    -1,    -1,   474,   475,   476,
      -1,   478,   479,   480,   481,   482,   483,    -1,    -1,     3,
      -1,     5,   471,    -1,    -1,   474,   475,   476,    -1,   478,
     479,   480,   481,   482,   483,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
     264,   265,   266,    -1,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,    -1,   225,
      -1,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,    -1,   259,   260,   261,   262,   263,   264,   265,
     266,    -1,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    -1,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,    -1,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
      -1,   259,   260,   261,   262,   263,   264,   265,   266,    -1,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
      -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
     200,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,    -1,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
      -1,   281,   282,   283,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,    -1,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
     440,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    93,    94,    95,    96,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,   226,    -1,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
     282,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,    -1,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,    -1,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
     442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
      -1,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
     164,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
     214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
      -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
     394,    -1,   396,    -1,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
     444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,   164,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
     216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
     266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
     396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
     416,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
      -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
     218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
      -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
     268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,   279,    -1,   281,   282,   283,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,    -1,   396,    -1,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
      -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
      -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
      -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
     260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
      -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
      -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
      -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
     262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,   280,   281,
     282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
     442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
     214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
      -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,    -1,   280,   281,   282,   283,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
     394,    -1,   396,    -1,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
     444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
     216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
      -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
     266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
     396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
     416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
      -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
     218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
      -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
     268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
     418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
      -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
      -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,     3,     4,    -1,    -1,    -1,    -1,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
      -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
     260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
      -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
      -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
      -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
     262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
     282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
     442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
     214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
      -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
     394,    -1,   396,    -1,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
     444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
     216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
      -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
     266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
     396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
     416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
      -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
     218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
      -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
     268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,    -1,   396,    -1,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
     418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
      -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
      -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
      -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
     260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
      -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
      -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
      -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
     262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
     282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
     442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
     214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
      -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
     394,    -1,   396,    -1,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
     444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
     216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
      -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
     266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
     396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
     416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
      -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
     218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
      -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
     268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,    -1,   396,    -1,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
     418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
      -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
      -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
      -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
     260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
      -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
      -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
      -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
     262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
     282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
     442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
     214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
      -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
     394,    -1,   396,    -1,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
     444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
     216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
      -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
     266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
     396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
     416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
      -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
     218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
      -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
     268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,    -1,   396,    -1,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
     418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
      -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
      -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
      -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
     260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
      -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
      -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
      -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
     262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
     282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
     442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
     214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
      -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
     394,    -1,   396,    -1,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
     444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
     216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
      -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
     266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
     396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
     416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
      -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
     218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
      -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
     268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,    -1,   396,    -1,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
     418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
      -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
      -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
      -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
     260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
      -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
      -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
      -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
     262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
     282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
     442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
     214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
      -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
     274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,    -1,    -1,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
     394,    -1,   396,    -1,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
     444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
     216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
      -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
     266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
      -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
     396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
     416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
     436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
      -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
      88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
     128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
     218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
      -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
     268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
     278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,    -1,   396,    -1,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
     418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
      -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
      -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
      -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
     260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
     270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
      -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
      -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
      -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
      -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
     262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
     272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
     282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
     442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    -1,    -1,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
      94,    95,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
     124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,    -1,   150,   151,   152,   153,
      -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,    -1,   178,    -1,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,    -1,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,   226,    -1,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,    -1,
      -1,   265,   266,   267,   268,    -1,    -1,   271,   272,   273,
     274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
      -1,    -1,   286,    -1,   288,   289,   290,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,    -1,   306,   307,    -1,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,    -1,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,    -1,   393,
     394,    -1,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,    -1,   408,   409,    -1,   411,    -1,    -1,
     414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,    -1,   439,   440,   441,   442,   443,
     444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
     454,   455,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,   468,   469,   470,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
     131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,
     181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,    -1,   199,    -1,
     201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,   214,    -1,   216,   217,   218,   219,   220,
      -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,    -1,   259,   260,
     261,   262,   263,    -1,   265,   266,    -1,   268,    -1,   270,
     271,   272,   273,   274,   275,    -1,   277,   278,    -1,    -1,
     281,   282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,    -1,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,    -1,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
      -1,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,   393,   394,    -1,   396,    -1,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,   416,   417,   418,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,   436,   437,    -1,   439,    -1,
     441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    -1,
      -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
     133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,    -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,    -1,   178,    -1,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,   196,   197,    -1,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,    -1,    -1,
     223,   224,   225,   226,    -1,   228,   229,   230,    -1,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
      -1,    -1,   265,   266,   267,   268,    -1,    -1,   271,   272,
     273,   274,   275,    -1,   277,   278,    -1,    -1,   281,   282,
     283,    -1,    -1,   286,    -1,   288,   289,   290,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,    -1,   306,   307,    -1,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,    -1,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,    -1,
     393,   394,    -1,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,    -1,   408,   409,    -1,   411,    -1,
      -1,   414,   415,   416,   417,   418,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,    -1,   439,   440,   441,   442,
     443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,
     453,   454,   455,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,   468,   469,   470,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    -1,    -1,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
      -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,    -1,
     150,   151,   152,   153,    -1,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,    -1,   178,    -1,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,   226,    -1,   228,   229,
     230,    -1,    -1,   233,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,    -1,    -1,   265,   266,   267,   268,    -1,
      -1,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
      -1,   281,   282,   283,    -1,    -1,   286,    -1,   288,   289,
     290,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,    -1,   306,   307,    -1,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,    -1,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,    -1,   389,
      -1,   391,    21,   393,   394,    -1,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
      -1,   411,    -1,    -1,   414,   415,   416,   417,   418,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,    -1,   439,
     440,   441,   442,   443,   444,    74,    -1,   447,    -1,    -1,
     450,   451,   452,   453,   454,   455,    -1,    -1,    -1,    -1,
      89,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,   469,
     470,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,
     169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   241,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   304,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     349,    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   360,    -1,    -1,   363,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   411,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   442
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    19,    29,    31,    32,    47,    56,    68,    79,    90,
      92,   110,   124,   134,   140,   148,   150,   151,   163,   190,
     229,   306,   309,   337,   345,   359,   366,   370,   380,   391,
     395,   431,   436,   449,   473,   487,   498,   499,   500,   501,
     502,   503,   508,   510,   517,   521,   535,   542,   545,   548,
     550,   557,   561,   563,   565,   571,   582,   583,   589,   591,
     592,   593,   594,   595,   596,   640,   772,   774,   777,   778,
     824,   825,   826,   827,   828,   830,   831,   848,   849,   852,
     855,   408,   452,   564,   194,   352,   360,   395,   442,   564,
       3,    19,    20,    21,    22,    23,    24,    25,    26,    28,
      29,    30,    38,    39,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    54,    55,    56,    57,
      58,    59,    62,    63,    64,    65,    66,    68,    69,    70,
      71,    72,    74,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    86,    87,    88,    89,    90,    91,    93,    94,
      95,    96,   100,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   115,   117,   118,   119,   120,   121,   122,
     124,   125,   126,   127,   128,   131,   132,   133,   134,   135,
     137,   138,   139,   141,   142,   143,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   156,   158,   159,   160,
     161,   163,   165,   166,   168,   169,   170,   171,   172,   173,
     175,   177,   178,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   192,   193,   194,   195,   196,   197,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   209,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     223,   224,   225,   226,   228,   229,   230,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   265,   266,
     267,   268,   270,   271,   272,   273,   274,   275,   277,   278,
     281,   282,   283,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   360,   361,   362,   363,   364,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   393,   394,   396,   397,   398,   399,   400,   401,
     402,   404,   405,   408,   409,   410,   411,   412,   414,   415,
     416,   417,   418,   419,   420,   421,   424,   425,   426,   427,
     428,   431,   432,   433,   434,   435,   436,   437,   439,   440,
     441,   442,   443,   444,   447,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   696,   757,   761,   764,
     859,   860,   861,   564,    50,   487,   843,   169,   173,   230,
     237,   284,   352,   399,   401,   423,   426,   541,   822,   853,
       3,    27,   238,   309,   388,   755,   761,   859,    21,    74,
      89,   143,   152,   164,   169,   194,   237,   241,   304,   318,
     349,   352,   360,   363,   382,   395,   402,   411,   442,   584,
     585,   588,   564,   755,    92,   440,   487,   517,   553,   557,
     591,   774,   825,   855,   107,    68,   107,     5,   590,   760,
     761,   755,    27,   404,   408,   761,   829,   850,   851,   564,
      27,   129,   603,   604,   173,   230,   352,   364,   404,   566,
     567,   829,   564,   436,   591,   596,   829,     5,   280,   651,
     753,   761,   762,   168,   487,   505,   487,   325,   597,   598,
     755,   597,   592,   593,     0,   490,   119,   204,   428,   440,
     551,   144,   208,   285,   422,   605,   606,   592,   594,   595,
     491,    27,   404,   408,   591,   829,   185,   753,   755,   185,
     753,   185,   651,   185,   753,   487,   485,   489,   744,   746,
     517,   547,   591,   825,   855,   753,   399,   401,   399,   401,
     335,   185,   761,   194,   325,   360,   395,   442,   753,    27,
     755,   243,   411,   106,   395,   442,   355,   185,   586,   761,
     766,   185,   754,   755,   185,   755,   487,   562,   822,   553,
       3,    48,    49,    51,    52,    64,    65,    72,   111,   112,
     149,   154,   160,   177,   201,   206,   207,   209,   238,   257,
     259,   263,   270,   272,   287,   291,   305,   308,   322,   347,
     367,   374,   388,   390,   404,   405,   410,   412,   416,   436,
     437,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   554,   556,   557,   559,   560,   859,   863,   551,
     760,   760,   476,   487,   487,   546,   470,   214,   489,   279,
       4,     6,     7,     8,     9,    10,    35,    49,    51,    52,
      60,    61,    64,    65,    72,    74,    97,    98,    99,   100,
     101,   102,   103,   111,   112,   114,   133,   149,   154,   155,
     160,   206,   207,   209,   231,   232,   257,   259,   264,   269,
     270,   272,   281,   291,   305,   322,   347,   365,   374,   390,
     404,   405,   410,   412,   413,   416,   429,   437,   471,   478,
     479,   480,   485,   487,   492,   494,   495,   592,   666,   669,
     672,   673,   674,   676,   677,   678,   679,   681,   682,   693,
     695,   696,   697,   699,   712,   713,   719,   738,   743,   750,
     751,   757,   758,   759,   760,   761,   749,   750,   566,   566,
     760,   566,   470,   167,   406,   476,   487,   753,   480,   746,
       3,   166,   168,   440,   504,   506,   557,   166,   507,   693,
     723,   597,   491,   487,   768,   488,   488,   500,   167,   210,
     651,   856,   753,    27,   129,   602,   602,    54,   602,   157,
     162,   227,   276,   611,   613,   614,   633,   635,   636,   637,
     605,   606,   487,   470,   214,   149,    23,    29,   134,   283,
     333,   337,   366,   433,   576,   579,   580,   333,   149,    36,
      55,   105,   193,   242,   250,   262,   293,   333,   338,   360,
     366,   380,   511,   514,   579,   149,   333,   366,   579,   149,
     333,   366,   579,     3,    27,    44,    50,    74,    81,    93,
     100,   129,   166,   168,   172,   186,   200,   212,   213,   215,
     224,   226,   238,   258,   267,   288,   290,   343,   371,   388,
     397,   416,   438,   440,   480,   488,   693,   725,   726,   763,
     769,   859,   864,   693,   745,     3,    27,    31,    32,    33,
      34,    35,    36,    37,    40,    53,    60,    61,    67,    73,
      75,    85,    92,    97,    98,    99,   101,   102,   103,   114,
     116,   123,   129,   130,   136,   140,   144,   155,   157,   162,
     164,   167,   174,   176,   179,   191,   198,   208,   210,   221,
     222,   227,   231,   232,   264,   269,   276,   279,   280,   284,
     285,   302,   312,   327,   340,   359,   365,   376,   392,   395,
     403,   406,   407,   413,   422,   423,   429,   430,   436,   438,
     445,   446,   448,   449,   480,   756,   770,   859,   863,   865,
     744,   488,   487,   812,   822,   264,   543,    81,   538,   442,
     185,   753,   185,   753,   776,   753,   487,   854,   453,    82,
     126,   296,   400,   149,    58,   339,   491,   587,   489,   767,
     149,   491,   587,   149,   279,   723,   395,   488,   491,     4,
     155,   279,   413,   478,   479,   513,   516,   552,   554,   555,
     558,   759,   760,   553,   487,   838,   842,   513,   558,   568,
     570,   725,     3,    44,    49,    50,    51,    52,    64,    65,
      74,    81,    93,   100,   111,   112,   160,   166,   168,   172,
     186,   200,   206,   207,   209,   212,   213,   215,   224,   226,
     238,   257,   258,   259,   267,   272,   288,   290,   322,   343,
     347,   367,   371,   374,   388,   397,   404,   405,   416,   437,
     440,   662,   663,   665,   667,   669,   671,   673,   674,   675,
     677,   678,   681,   682,   727,   765,   859,   862,    36,   225,
     761,   487,   747,   485,   439,   680,   693,   742,   487,   680,
     680,   487,   162,   487,   487,   487,   668,   668,   308,   592,
     487,   487,   670,   487,   487,    64,    65,   680,   693,   487,
     668,   487,   487,   487,   487,   487,   451,   473,   487,   683,
     487,   683,   487,   487,   487,   693,   693,   693,   723,   724,
     592,   693,   723,   714,   715,   761,   762,     9,   747,   746,
     760,   487,   487,   759,   760,     3,     8,    11,    16,    17,
      18,    33,    36,    41,    48,    73,   172,   186,   191,   212,
     213,   226,   264,   267,   281,   284,   371,   471,   474,   475,
     476,   478,   479,   480,   481,   482,   483,   717,   718,   719,
     721,   450,   700,   747,    15,   290,   693,    15,   210,   491,
     599,   487,   760,   747,   746,   599,     3,   114,   230,   513,
     569,   682,   760,    96,   114,   570,   114,   570,   753,   488,
     491,   551,   488,   491,   598,   754,    36,   856,   519,   753,
      36,   761,   366,   768,   594,   594,   607,   608,   693,   594,
     159,   261,   627,   216,   262,   321,   369,   428,    27,   622,
     693,   478,   479,   623,   624,   693,   695,   633,   634,   614,
     613,   611,   612,   162,   636,   274,   638,   611,   633,   723,
     225,   753,    67,    75,    85,   164,   185,   312,   423,   761,
     793,   803,   818,    75,    85,   509,    85,   509,   487,   406,
     487,   791,   236,   426,   791,    85,   491,   406,   753,   665,
     513,    54,   515,   513,   513,   105,   242,   250,    54,   406,
     449,   473,   512,   255,   352,   512,   514,   651,    85,   406,
     509,   352,   753,   406,   352,   725,   725,   726,   488,   491,
     605,   606,    13,    14,   486,   496,   406,   761,   811,   816,
     449,   841,   325,   442,   149,    92,   535,   544,   548,   772,
     778,   185,   539,   761,   806,   753,   264,   511,   549,   264,
     487,   812,    36,   812,   488,   725,    36,   586,   766,   756,
     489,   754,   755,   755,   766,   488,   185,   753,   776,   553,
     559,     4,   759,     4,   759,   770,   840,   847,    50,    94,
     120,   138,   142,   163,   166,   180,   269,   277,   319,   844,
     491,   488,   491,   487,   665,   487,    35,   664,   108,   109,
     182,   183,   244,   245,   246,   247,   248,   249,   252,   253,
     356,   357,   467,   468,   487,   684,   685,   686,   687,   688,
     689,   690,   691,   692,   488,   491,   668,   547,   723,   744,
     724,   487,   445,   739,   740,   693,   723,   487,   759,   759,
     723,     3,   684,   685,   686,   687,   688,   689,   690,   691,
     728,   729,   760,   759,   759,   759,   680,   680,   693,     8,
      16,    17,    18,   474,   475,   476,   478,   479,   480,   481,
     482,   483,   717,   722,   761,   693,   730,   478,   479,   487,
     694,   695,   719,   732,   743,   488,   723,   693,   723,   733,
     404,   404,   759,   759,   693,    53,   167,   222,   407,   693,
     723,   736,   693,   486,   488,   491,   491,   493,   496,   759,
     693,   692,   692,   663,   693,   693,   693,   693,     5,   770,
     771,   404,    40,   392,   748,   766,   693,   693,   487,   592,
     737,   129,   155,   264,   269,   274,   413,   424,   693,   269,
     487,   693,   406,    48,   172,   186,   191,   226,   371,   693,
     693,   693,   693,   693,   693,   693,   693,   693,   693,    27,
      34,   376,   716,   176,   158,   701,   693,   347,   487,   713,
     693,   173,   230,   395,   399,   401,   426,   600,   753,   751,
     167,   641,   725,   641,   487,   760,   488,   753,   504,   753,
     826,   693,   488,   487,   430,   858,   114,   292,   487,   518,
     591,    36,   761,   487,   523,   532,   534,   761,   491,    37,
     123,   430,   609,   347,   348,   478,   479,   624,   626,   695,
     369,   216,   280,   491,     4,   625,   759,   625,   347,   348,
     626,   752,   753,   268,   373,   639,   634,   612,   488,   333,
     579,   487,   185,   803,   755,   216,   264,   216,   430,   487,
     796,   663,   755,   761,   185,   755,   185,   761,    23,   134,
     366,   575,   578,   770,   786,   801,   755,   770,   795,   815,
     755,   576,   755,   333,   366,   511,   579,   513,   766,   755,
     513,   766,   755,   513,   333,   366,   579,   755,   755,   755,
     755,   333,   366,   579,   755,   755,   605,   605,   605,   438,
     726,   488,   693,   693,   693,   745,   317,   837,   488,   491,
     277,   167,   406,   832,   442,   753,   761,   822,   264,   279,
     487,   149,   149,   226,   761,   793,   803,   807,   810,   819,
     821,   449,   451,   798,   148,   591,   449,   540,   488,   693,
     587,   756,   587,   279,   587,   264,    36,   480,   487,   513,
     558,   839,   488,   491,    36,   836,   760,   836,   264,   269,
     319,   836,   836,   568,   727,    35,   664,   661,   761,   485,
     485,   759,   406,   406,   406,   406,   663,   488,   486,   723,
     693,   136,   740,   741,    36,   488,   693,   488,   488,   488,
     488,   167,   488,   488,   488,   491,   488,   489,   302,   731,
     488,   694,   694,   693,    11,    16,    17,    18,   191,   212,
     281,   474,   475,   476,   478,   479,   480,   481,   482,   483,
     719,   694,   488,   488,   162,   167,   734,   735,   488,   470,
     470,   488,   488,    36,   736,   723,   736,   736,   167,   488,
      36,   747,   693,   714,   693,   488,   488,   470,   694,   694,
     142,   723,   167,   129,   155,   269,   274,   413,   424,   487,
     142,   722,   693,   392,   748,   693,   737,   693,   406,   487,
     592,   487,   487,   289,   705,   399,   401,   399,   401,   753,
     395,   601,   601,   601,   221,   348,   487,   592,   642,   643,
     644,   651,   652,   696,   698,   699,   761,   446,   657,   605,
     657,   759,   692,   768,   547,   642,   446,   857,   436,   394,
     429,   527,   522,   531,   761,   279,   524,   761,   528,   534,
     491,   641,   476,   747,   608,   281,   717,   720,   472,   610,
       4,   759,   626,   280,   428,   623,   491,   235,   406,   693,
     264,   818,   487,   149,   487,   796,   194,   816,   779,   283,
     789,   779,    23,   134,   337,   338,   366,   572,   573,   574,
     580,   581,   149,   587,   149,   587,   786,   801,   786,   488,
     491,   760,   782,   476,   489,   488,   491,   406,   352,    85,
     406,   509,   352,   406,   406,   406,   352,   488,   488,   488,
     726,   486,   383,   384,   760,   846,   811,   837,   753,   812,
     543,   395,   149,   753,   816,   753,   753,   776,   753,   488,
     491,   277,   791,   277,   279,   790,   755,   449,   775,   791,
      36,   766,   149,   558,   834,   845,   840,   760,   760,   269,
     816,   480,   816,   760,   760,   488,   485,   488,   491,   663,
     759,   486,   759,   488,   685,   687,   688,   689,   688,   689,
     689,   488,   403,   693,   140,   663,   488,   693,   693,   722,
     693,   734,   663,   694,   694,   694,   694,   129,   264,   274,
     694,   694,   694,   694,   694,   694,   694,   694,   694,   694,
     693,   693,   735,   734,   683,   683,   663,   488,   488,   488,
     723,   663,   488,   692,   693,    33,    33,   693,   488,   693,
     167,   487,   727,   693,   488,   142,   694,   694,   142,   142,
     693,   693,   606,   446,   487,   706,   761,   601,   601,   601,
     601,   753,   753,   753,   592,   652,   167,   592,   643,   644,
      36,   645,   646,   761,   491,    93,   168,   200,   215,   224,
     258,   343,   648,   646,    36,   645,   647,   761,   473,   656,
     746,   693,   176,   628,   488,   628,   488,   488,   693,   340,
     526,   435,   488,   491,   747,    83,   526,   488,   491,   523,
     857,   693,   487,   610,   159,   220,   280,   753,   755,   488,
     149,   816,   803,   816,   779,   806,   488,   116,   198,   262,
     264,   802,   487,   813,   171,   114,   184,   264,   791,   512,
     106,   114,   171,   264,   382,   385,   514,   791,   366,   574,
     417,   755,   761,   578,     3,    44,    50,    74,    81,    93,
     100,   166,   168,   172,   186,   200,   212,   213,   215,   224,
     226,   238,   258,   263,   267,   281,   288,   290,   343,   367,
     371,   388,   397,   416,   440,   478,   479,   513,   663,   720,
     760,   763,   780,   817,   859,   865,   770,   815,   755,   755,
     755,   755,   755,   755,   755,   755,   755,   755,   605,   512,
     846,   487,   540,   185,   753,   806,   430,   537,   488,   549,
     487,    36,   800,   798,   807,    79,   562,   106,   262,   591,
     587,   776,   488,   491,   816,   664,   759,   664,   761,   486,
     486,   693,   488,   488,   735,   167,   129,   274,   487,   488,
     488,   693,   693,   693,   727,   488,   693,    33,    33,   693,
     693,   142,   488,   488,   693,   707,   761,   753,   753,   753,
     753,   646,   647,   487,   488,   761,   762,   397,   619,   620,
     487,   643,   215,   288,   649,   643,   649,   215,   648,   649,
     215,   620,   487,   761,   620,   487,   286,    54,   179,   632,
     760,   632,   760,   750,   591,   292,   591,   522,   279,   487,
     520,   476,   534,   526,   722,   779,   803,   488,   488,   449,
     809,   117,   187,   196,   116,   432,   786,   804,    67,    73,
      85,   114,   116,   171,   198,   264,   269,   312,   327,   423,
     784,   785,   797,    30,    54,   823,   185,   269,   513,   693,
     823,   269,   478,   479,   516,   761,   663,   587,   587,   238,
     388,   763,   767,   476,   406,   406,   488,   838,   430,   833,
     835,   816,    36,   264,   487,   279,   536,   761,   487,   540,
     810,   148,   591,   146,   192,   790,   119,   134,   311,   775,
     106,   449,   773,    36,   845,   486,   663,   694,   167,   487,
     727,   488,   693,   693,   693,   488,   298,   708,   653,   654,
     698,   645,   487,     4,     9,   615,   617,   618,   761,   754,
     643,   279,   430,   650,   643,   215,   643,   658,   659,   761,
     487,   658,   761,   487,   629,   630,   631,   693,   693,   448,
     702,   702,   527,    85,   487,   525,   533,   698,   761,   130,
     693,   488,   327,   809,   487,   799,   779,   488,   491,   487,
     766,   755,   694,   823,   117,   187,   116,   269,   216,   753,
     809,   114,    36,   149,    73,   660,   767,   482,   780,   755,
     755,   512,   121,   488,   591,   149,   753,   533,    36,   488,
     755,   775,    27,    78,    86,   115,   184,   195,   382,   385,
     794,   794,   348,   348,    59,    67,   230,   694,   727,   488,
      54,   605,   488,   491,    36,   655,   754,   301,   482,   301,
     348,   482,   487,   487,   488,   693,   487,   643,   650,   488,
     491,   663,   658,   488,   488,   491,   703,   704,   761,   430,
     616,   616,   435,   755,   693,   488,   491,    73,   529,   529,
     265,   428,   753,   779,   770,   805,   808,   786,   693,   264,
     785,    36,   809,   812,   184,   766,   430,   577,   482,   417,
     838,   760,   540,   773,   753,   537,   488,   591,   798,   562,
      67,   282,    67,   488,   723,   320,   348,   709,   656,   653,
     487,   488,   761,   615,   754,   659,   660,   488,   630,   491,
      36,   350,   591,   488,   657,   525,   766,   530,   766,   530,
     366,   812,   476,   488,   491,   488,   184,   240,   820,   487,
     781,   693,   417,    36,   487,   487,   540,   773,   790,   775,
     282,   282,    48,    96,   419,   693,   710,   711,   710,   488,
     658,   488,   491,   488,   488,   704,   706,   618,   529,   609,
     609,   532,   820,   780,   808,   262,   792,   781,   168,   297,
     372,   279,   787,   788,   814,   511,   591,   533,   657,   711,
     347,   161,   307,   161,   307,   488,     9,   334,   621,   530,
     610,   610,   657,   788,   196,   119,   428,   279,   814,   279,
     787,   488,   773,   488,    33,   488,   487,   609,   779,    58,
     262,   339,   366,   783,   783,   540,   711,     9,   610,    22,
     114,   269,   657,   488
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int16 yyr1[] =
{
       0,   497,   498,   499,   499,   500,   500,   500,   500,   500,
     500,   500,   500,   500,   500,   500,   500,   500,   500,   500,
     500,   500,   500,   500,   500,   500,   500,   500,   500,   500,
     500,   500,   500,   500,   500,   500,   500,   500,   500,   501,
     502,   503,   503,   503,   503,   503,   504,   504,   504,   504,
     504,   505,   505,   506,   506,   507,   507,   508,   508,   508,
     508,   508,   508,   508,   508,   508,   508,   508,   508,   508,
     509,   509,   510,   510,   511,   511,   512,   512,   512,   513,
     513,   513,   513,   514,   514,   514,   514,   514,   514,   514,
     514,   514,   514,   514,   514,   514,   514,   515,   515,   516,
     516,   516,   517,   518,   518,   518,   518,   518,   519,   519,
     520,   520,   520,   521,   521,   522,   523,   523,   524,   524,
     524,   525,   525,   525,   526,   526,   527,   527,   528,   528,
     529,   529,   530,   530,   531,   531,   532,   532,   533,   533,
     534,   535,   535,   536,   537,   537,   538,   538,   539,   539,
     540,   540,   541,   541,   542,   542,   543,   543,   544,   544,
     544,   544,   545,   546,   546,   547,   547,   547,   547,   548,
     548,   549,   549,   550,   550,   550,   550,   551,   551,   552,
     552,   552,   553,   553,   553,   553,   553,   554,   554,   554,
     555,   555,   556,   556,   557,   557,   558,   558,   558,   558,
     559,   560,   560,   561,   561,   561,   562,   562,   563,   563,
     563,   563,   563,   563,   564,   564,   564,   565,   565,   565,
     565,   566,   566,   566,   566,   567,   567,   567,   567,   568,
     568,   569,   569,   569,   569,   569,   569,   569,   570,   570,
     571,   571,   571,   571,   571,   571,   571,   571,   572,   572,
     573,   573,   574,   574,   574,   574,   575,   575,   576,   576,
     576,   576,   576,   576,   576,   576,   576,   576,   576,   576,
     576,   576,   576,   576,   576,   576,   576,   576,   576,   576,
     576,   576,   576,   576,   576,   576,   576,   577,   577,   578,
     578,   578,   578,   579,   579,   580,   581,   581,   581,   582,
     582,   582,   582,   583,   583,   583,   583,   583,   583,   584,
     584,   584,   584,   584,   584,   584,   584,   584,   584,   584,
     584,   584,   584,   584,   585,   585,   585,   585,   585,   585,
     585,   586,   586,   587,   587,   587,   588,   588,   588,   589,
     590,   591,   591,   592,   592,   593,   593,   593,   593,   593,
     593,   593,   593,   594,   594,   595,   595,   595,   595,   595,
     595,   595,   596,   596,   596,   597,   597,   598,   599,   599,
     600,   600,   600,   600,   600,   600,   600,   600,   600,   601,
     601,   602,   602,   602,   603,   603,   604,   604,   605,   605,
     606,   607,   607,   608,   608,   609,   609,   609,   610,   610,
     610,   611,   611,   611,   611,   612,   612,   613,   613,   613,
     613,   614,   614,   615,   615,   615,   615,   615,   615,   616,
     616,   617,   617,   618,   618,   618,   618,   619,   620,   620,
     621,   621,   622,   622,   623,   624,   624,   624,   625,   625,
     626,   626,   627,   627,   628,   628,   629,   629,   630,   630,
     631,   632,   632,   633,   633,   634,   634,   635,   635,   636,
     637,   637,   637,   637,   638,   638,   639,   639,   639,   640,
     640,   641,   641,   642,   642,   643,   643,   643,   643,   643,
     643,   643,   644,   644,   644,   644,   644,   644,   645,   645,
     645,   645,   646,   646,   647,   647,   647,   647,   647,   648,
     648,   648,   648,   649,   649,   650,   650,   651,   651,   651,
     651,   652,   652,   653,   654,   654,   655,   655,   656,   656,
     657,   657,   658,   658,   659,   660,   660,   661,   661,   662,
     662,   663,   663,   663,   663,   663,   663,   663,   663,   664,
     664,   664,   665,   665,   665,   665,   665,   665,   665,   666,
     666,   666,   666,   667,   668,   668,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   670,   670,   671,
     671,   672,   672,   673,   674,   675,   675,   676,   676,   677,
     678,   679,   679,   679,   679,   679,   679,   680,   680,   681,
     681,   681,   681,   682,   683,   683,   683,   684,   684,   685,
     685,   686,   686,   687,   687,   688,   688,   689,   689,   690,
     690,   691,   691,   692,   692,   692,   692,   692,   692,   692,
     692,   692,   692,   692,   692,   692,   692,   692,   692,   693,
     693,   693,   693,   693,   693,   693,   693,   693,   693,   693,
     693,   693,   693,   693,   693,   693,   693,   693,   693,   693,
     693,   693,   693,   693,   693,   693,   693,   693,   693,   693,
     693,   693,   693,   693,   693,   693,   693,   693,   693,   693,
     693,   693,   693,   693,   693,   693,   693,   693,   693,   693,
     693,   693,   693,   693,   693,   693,   693,   693,   693,   693,
     693,   693,   693,   693,   693,   693,   693,   693,   694,   694,
     694,   694,   694,   694,   694,   694,   694,   694,   694,   694,
     694,   694,   694,   694,   694,   694,   694,   694,   694,   694,
     694,   695,   695,   695,   695,   695,   695,   695,   695,   695,
     695,   695,   696,   696,   696,   696,   696,   696,   696,   697,
     697,   698,   698,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   700,   700,   701,   701,   702,   702,   703,   703,
     704,   705,   705,   705,   706,   707,   707,   708,   708,   709,
     709,   709,   710,   710,   711,   711,   711,   711,   711,   712,
     712,   713,   713,   714,   715,   715,   716,   716,   716,   717,
     717,   718,   718,   718,   718,   718,   718,   718,   718,   718,
     718,   718,   718,   719,   719,   720,   720,   721,   721,   721,
     721,   721,   721,   721,   721,   722,   722,   723,   723,   724,
     724,   725,   725,   726,   726,   726,   727,   727,   728,   728,
     729,   729,   729,   729,   729,   729,   729,   729,   729,   729,
     730,   730,   731,   732,   732,   733,   733,   733,   733,   733,
     733,   734,   735,   736,   736,   736,   737,   737,   738,   739,
     739,   740,   741,   741,   742,   742,   743,   743,   744,   744,
     744,   744,   745,   745,   746,   746,   747,   747,   748,   748,
     749,   749,   750,   750,   751,   751,   751,   751,   752,   752,
     753,   753,   754,   754,   755,   756,   757,   757,   758,   758,
     758,   758,   758,   758,   758,   758,   758,   758,   758,   758,
     758,   758,   759,   760,   761,   761,   761,   762,   762,   763,
     763,   763,   764,   764,   764,   765,   765,   765,   766,   766,
     767,   767,   768,   768,   769,   770,   770,   770,   770,   771,
     771,   772,   772,   772,   772,   773,   773,   773,   773,   774,
     774,   775,   775,   775,   776,   777,   777,   777,   778,   778,
     779,   779,   780,   780,   780,   780,   780,   780,   781,   781,
     782,   783,   783,   783,   783,   783,   784,   784,   784,   784,
     785,   785,   785,   785,   785,   785,   785,   785,   786,   787,
     788,   788,   788,   788,   788,   789,   789,   790,   790,   790,
     790,   791,   792,   792,   793,   793,   794,   794,   794,   794,
     794,   794,   794,   794,   795,   795,   796,   797,   797,   797,
     797,   798,   798,   798,   798,   799,   800,   800,   800,   801,
     802,   802,   802,   802,   802,   802,   803,   804,   804,   805,
     805,   806,   807,   807,   807,   808,   808,   809,   809,   810,
     810,   811,   812,   812,   813,   813,   814,   815,   815,   815,
     815,   816,   816,   817,   817,   817,   818,   818,   818,   818,
     818,   818,   819,   819,   820,   820,   820,   820,   821,   822,
     822,   822,   822,   822,   822,   822,   822,   823,   823,   824,
     824,   824,   824,   824,   824,   825,   826,   826,   827,   827,
     827,   827,   827,   827,   827,   828,   828,   829,   829,   830,
     831,   831,   832,   832,   833,   833,   834,   834,   835,   835,
     836,   836,   837,   837,   838,   838,   839,   839,   839,   839,
     839,   840,   841,   841,   842,   842,   843,   843,   844,   844,
     844,   844,   844,   844,   844,   844,   844,   844,   844,   844,
     844,   844,   845,   846,   846,   846,   847,   847,   848,   848,
     849,   850,   850,   851,   851,   851,   852,   853,   853,   854,
     854,   855,   856,   856,   856,   857,   857,   858,   858,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   860,
     860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
     860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
     860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
     860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
     860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
     861,   861,   861,   861,   861,   861,   861,   861,   861,   861,
     861,   861,   861,   861,   861,   861,   861,   861,   861,   861,
     861,   861,   861,   861,   861,   861,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     862,   863,   863,   863,   863,   863,   863,   863,   863,   863,
     863,   863,   863,   863,   863,   863,   863,   863,   863,   863,
     863,   863,   863,   863,   863,   863,   863,   863,   863,   863,
     863,   863,   863,   863,   863,   863,   863,   863,   863,   863,
     863,   863,   863,   863,   863,   863,   863,   863,   863,   863,
     863,   863,   864,   864,   864,   864,   864,   864,   864,   864,
     864,   864,   864,   864,   864,   864,   864,   864,   864,   864,
     864,   864,   864,   864,   864,   864,   864,   864,   864,   865,
     865,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   865,   865,   865,   865
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     4,
       3,     4,     5,     5,     4,     6,     1,     1,     1,     1,
       1,     1,     0,     1,     3,     1,     0,     6,     6,     8,
       6,     8,     6,     8,     6,     8,     8,    10,     8,    10,
       1,     0,     4,     6,     1,     2,     1,     1,     0,     1,
       2,     2,     1,     2,     2,     1,     2,     3,     2,     2,
       2,     2,     3,     3,     3,     1,     3,     1,     0,     1,
       2,     2,     7,     1,     4,     4,     7,     2,     1,     3,
       4,     3,     0,     1,     0,     2,     3,     5,     8,     5,
       0,     5,     5,     7,     2,     0,     1,     1,     1,     3,
       2,     0,     1,     0,     1,     3,     1,     3,     1,     3,
       2,    13,    16,     1,     2,     0,     1,     0,     1,     0,
       2,     0,     1,     0,     4,     7,     2,     0,     1,     1,
       1,     1,     5,     3,     0,     1,     1,     1,     1,     5,
       8,     1,     0,     2,     4,     3,     5,     1,     0,     1,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     3,     9,    12,     3,     0,     2,     2,
       2,     2,     2,     2,     1,     1,     0,     2,     3,     3,
       3,     1,     3,     3,     2,     3,     3,     3,     3,     1,
       1,     1,     1,     3,     5,     1,     1,     1,     1,     3,
       4,     6,     4,     6,     4,     6,     4,     6,     1,     2,
       3,     2,     1,     3,     2,     3,     1,     3,     2,     5,
       3,     6,     4,     6,     6,     6,     5,     5,     6,     9,
       4,     5,     7,     6,     4,     8,     4,     2,     4,     3,
       6,     4,     2,     2,     2,     2,     1,     2,     0,     1,
       2,     2,     2,     1,     3,     4,     2,     1,     0,     2,
       3,     2,     3,     6,     4,     6,     4,     6,     8,     1,
       1,     1,     1,     1,     2,     1,     2,     1,     1,     1,
       3,     3,     3,     3,     2,     2,     1,     3,     1,     1,
       1,     1,     3,     1,     1,     0,     1,     1,     1,     2,
       1,     1,     1,     3,     3,     1,     2,     4,     4,     2,
       3,     5,     5,     1,     1,    10,    10,     1,     2,     4,
       4,     4,     2,     2,     3,     1,     3,     6,     2,     0,
       3,     3,     4,     4,     4,     4,     3,     2,     1,     1,
       0,     1,     1,     0,     1,     5,     1,     0,     1,     0,
       3,     1,     3,     4,     3,     1,     1,     0,     2,     2,
       0,     2,     2,     1,     1,     1,     0,     2,     4,     5,
       4,     2,     3,     2,     2,     2,     2,     1,     2,     3,
       0,     1,     0,     5,     1,     4,     6,     2,     1,     0,
       4,     0,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     3,     0,     1,     3,     1,     1,
       2,     2,     0,     1,     3,     1,     0,     1,     2,     3,
       2,     4,     2,     3,     2,     0,     1,     2,     0,     4,
       5,     2,     0,     1,     3,     3,     3,     3,     3,     3,
       1,     4,     3,     4,     5,     4,     5,     4,     5,     2,
       4,     1,     1,     0,     1,     4,     5,     4,     0,     2,
       2,     2,     1,     1,     0,     4,     2,     1,     2,     2,
       4,     2,     6,     2,     1,     3,     4,     0,     2,     0,
       2,     0,     1,     3,     3,     2,     0,     2,     4,     1,
       1,     2,     3,     5,     6,     2,     3,     5,     5,     3,
       4,     0,     1,     1,     1,     1,     1,     2,     4,     1,
       1,     1,     1,     2,     3,     0,     1,     1,     1,     1,
       1,     2,     2,     2,     2,     2,     1,     3,     0,     1,
       1,     1,     1,     5,     2,     1,     1,     1,     1,     4,
       1,     2,     2,     1,     3,     3,     2,     1,     0,     5,
       2,     5,     2,     1,     3,     3,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     3,     3,     3,     3,     3,     0,     1,
       3,     3,     5,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       3,     3,     2,     2,     3,     3,     5,     4,     6,     3,
       5,     4,     6,     4,     6,     5,     7,     3,     2,     4,
       3,     2,     1,     3,     3,     3,     3,     3,     3,     4,
       3,     4,     3,     4,     5,     6,     6,     7,     6,     7,
       6,     7,     3,     4,     4,     6,     1,     4,     1,     3,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     5,     6,     6,
       7,     1,     1,     2,     2,     2,     4,     1,     2,     1,
       2,     2,     3,     5,     6,     8,     6,     6,     4,     4,
       1,     1,     1,     5,     1,     1,     4,     1,     4,     1,
       4,     1,     4,     1,     1,     1,     1,     1,     1,     6,
       6,     4,     4,     4,     4,     6,     5,     5,     5,     4,
       6,     4,     5,     0,     5,     0,     2,     0,     1,     3,
       3,     2,     2,     0,     6,     1,     0,     3,     0,     2,
       2,     0,     1,     4,     2,     2,     2,     2,     2,     4,
       3,     1,     5,     3,     1,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     1,     4,     1,     4,     1,
       2,     1,     2,     1,     2,     1,     3,     1,     3,     1,
       0,     1,     3,     1,     3,     3,     1,     3,     3,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     3,     2,     3,     0,     3,     3,     2,     2,     1,
       0,     2,     2,     3,     2,     1,     1,     3,     5,     1,
       2,     4,     2,     0,     1,     0,     1,     2,     2,     2,
       3,     5,     1,     0,     1,     2,     0,     2,     1,     0,
       1,     0,     1,     3,     3,     2,     1,     1,     1,     3,
       1,     2,     1,     3,     1,     1,     1,     2,     1,     1,
       2,     1,     1,     2,     6,     2,     5,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     3,     3,     0,     1,     1,     1,     1,     1,     1,
       1,     9,    11,    12,    14,     3,     4,     4,     0,     7,
      10,     2,     3,     0,     4,     2,     4,     5,     9,    12,
       0,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     2,     1,     1,     2,     2,     3,     1,     1,     2,
       2,     1,     2,     3,     5,     2,     5,     5,     2,     3,
       1,     1,     2,     2,     0,     4,     0,     3,     4,     4,
       0,     3,     2,     0,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     1,     2,     2,
       2,     2,     2,     2,     0,     3,     3,     3,     0,     1,
       2,     1,     2,     2,     2,     2,     4,     1,     3,     1,
       3,     1,     1,     1,     1,     3,     1,     2,     0,     1,
       0,     1,     3,     0,     2,     0,     3,     3,     1,     5,
       3,     1,     3,     1,     4,     5,     5,     6,     3,     7,
       4,    11,     1,     3,     2,     2,     2,     0,     3,     1,
       1,     2,     2,     2,     2,     1,     0,     1,     2,     6,
       8,     6,     8,     6,     8,     8,     2,     4,     2,     2,
       2,     2,     3,     4,     2,     1,     1,     1,     3,     2,
      11,     9,     1,     1,     3,     0,     1,     3,     1,     0,
       1,     0,     1,     0,     1,     3,     1,     1,     1,     3,
       0,     2,     2,     0,     2,     0,     1,     0,     1,     1,
       1,     3,     3,     1,     1,     3,     3,     3,     3,     4,
       3,     2,     1,     1,     1,     1,     1,     3,     2,     1,
       2,     1,     1,     1,     2,     3,     6,     1,     1,     2,
       3,     7,     1,     2,     3,     2,     0,     2,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yytype, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[+yyssp[yyi + 1 - yynrhs]],
                       &yyvsp[(yyi + 1) - (yynrhs)]
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
#  else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                yy_state_t *yyssp, int yytoken)
{
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Actual size of YYARG. */
  int yycount = 0;
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[+*yyssp];
      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
      yysize = yysize0;
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYPTRDIFF_T yysize1
                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
                    yysize = yysize1;
                  else
                    return 2;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    /* Don't count the "%s"s in the final size, but reserve room for
       the terminator.  */
    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
      yysize = yysize1;
    else
      return 2;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    yy_state_fast_t yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss;
    yy_state_t *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYPTRDIFF_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
# undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2:
#line 460 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 13762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3:
#line 476 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 13778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4:
#line 488 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 13789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 38:
#line 530 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 13795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 39:
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 13809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 40:
#line 21 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 13819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 41:
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 13837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 42:
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 13855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43:
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 13871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44:
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 13883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45:
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 13897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46:
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 13903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47:
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 13909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48:
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 13915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49:
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 13921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50:
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 13935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51:
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 13941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52:
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 13947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53:
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 13953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54:
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 13959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55:
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 13965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56:
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 13971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57:
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58:
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59:
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60:
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61:
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62:
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63:
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64:
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65:
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66:
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67:
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68:
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69:
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70:
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 14160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71:
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 14166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 14196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 14202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 14208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 14214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 14220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 14226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 14232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 14241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 14247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 14255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 14263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 14271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 14279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 14287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 14295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 14303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 14311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 14319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 14327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 14336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 14344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 14352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 14360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 14366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 14372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 14378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 14384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 14390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102:
#line 10 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 14402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103:
#line 22 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 14412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104:
#line 28 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 14423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105:
#line 35 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 14433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106:
#line 41 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 14444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107:
#line 48 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 14454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108:
#line 58 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 14462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109:
#line 62 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 14471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110:
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 14483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111:
#line 80 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 14495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112:
#line 88 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 14503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113:
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 14509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114:
#line 96 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 14515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115:
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 14527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116:
#line 114 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 14536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117:
#line 119 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 14561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118:
#line 144 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 14574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119:
#line 154 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 14587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120:
#line 163 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 14595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121:
#line 170 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 14610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122:
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 14625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123:
#line 192 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 14640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124:
#line 206 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 14646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125:
#line 207 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 14652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126:
#line 213 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 14658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127:
#line 214 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 14664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128:
#line 219 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 14670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129:
#line 220 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 14676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130:
#line 226 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 14682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131:
#line 227 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 14688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132:
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 14694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133:
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 14700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134:
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 14706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135:
#line 240 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 14712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136:
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 14718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137:
#line 246 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 14724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138:
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 14730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139:
#line 251 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 14736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140:
#line 257 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 14748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141:
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142:
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143:
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 14808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144:
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 14814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145:
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 14820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146:
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 14826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147:
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 14832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148:
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 14838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149:
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 14844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150:
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 14850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151:
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 14856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152:
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 14862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153:
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 14868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154:
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[-1].str);
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155:
#line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[-1].str);
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156:
#line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 14909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157:
#line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 14915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 14927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 14933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 14939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171:
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 14973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172:
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 14979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173:
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 14990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174:
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 15004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175:
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 15015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176:
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 15026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177:
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 15032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178:
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 15038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179:
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 15044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180:
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 15050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181:
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 15056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187:
#line 65 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188:
#line 66 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 15068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189:
#line 67 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 15074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190:
#line 72 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 15080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191:
#line 73 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192:
#line 79 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 15094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193:
#line 83 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 15102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194:
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 15108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195:
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 15114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196:
#line 96 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 15120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197:
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 15126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198:
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 15132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199:
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200:
#line 110 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 15146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201:
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 15152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202:
#line 118 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 15158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203:
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 15169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204:
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 15189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205:
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 15209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206:
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 15215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207:
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 15221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 15232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 15242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 15252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 15263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 15274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 15285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 15291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 15297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 15303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 15313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 15323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 15333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220:
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 15343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221:
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 15349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222:
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 15360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223:
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 15375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224:
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 15387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225:
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 15399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226:
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 15411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227:
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 15422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228:
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 15433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229:
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 15439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 15445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231:
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 15453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232:
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 15461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233:
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 15480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 15491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 15497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 15503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237:
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 15509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238:
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239:
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 15521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 15631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 15637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 15649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 15657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 15665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 15680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 15688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 15696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 15704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 15775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 15786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 15798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 15810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 15822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 15834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 15854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 15866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 15934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 15946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 15975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 15986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 16022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 16032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 16065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 16077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 16085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 16094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 16103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 16111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 16123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 16129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 16135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 16141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298:
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 16147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 16157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 16167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 16177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 16187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303:
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304:
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305:
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306:
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307:
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 16257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308:
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 16271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309:
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 16277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310:
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 16283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311:
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 16289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312:
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 16295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313:
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 16301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314:
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 16307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315:
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 16313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316:
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 16319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317:
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 16325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318:
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 16331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319:
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 16337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320:
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 16343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321:
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 16349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322:
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 16355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323:
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 16361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324:
#line 92 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 16367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325:
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 16373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326:
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 16379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327:
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 16385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328:
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 16391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329:
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 16397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330:
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 16403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331:
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 16409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332:
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 16415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333:
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 16421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334:
#line 110 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 16427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335:
#line 111 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 16433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336:
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 16439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337:
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 16445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338:
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 16451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339:
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 16461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340:
#line 16 "third_party/libpg_query/grammar/statements/load.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 16467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343:
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 16473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344:
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 16479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345:
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346:
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 16496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347:
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 16508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348:
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 16520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349:
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 16532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350:
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 16544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351:
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 16556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352:
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 16568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353:
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354:
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355:
#line 158 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 16597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356:
#line 173 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-8].list);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 16615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357:
#line 186 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358:
#line 188 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 16644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359:
#line 207 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 16652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360:
#line 211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 16660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361:
#line 215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 16668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362:
#line 232 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 16679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363:
#line 239 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 16690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364:
#line 246 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 16701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365:
#line 255 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366:
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 16713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367:
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 16726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368:
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 16740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369:
#line 282 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 16746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370:
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371:
#line 296 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372:
#line 301 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373:
#line 306 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374:
#line 311 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375:
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376:
#line 327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 16815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377:
#line 332 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 16824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378:
#line 337 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 16833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379:
#line 343 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 16839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380:
#line 344 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 16845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381:
#line 348 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 16851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382:
#line 349 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383:
#line 350 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384:
#line 357 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 16869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385:
#line 358 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 16875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386:
#line 362 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 16881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387:
#line 363 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388:
#line 367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 16893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389:
#line 368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390:
#line 372 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391:
#line 376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 16911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392:
#line 377 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 16917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393:
#line 381 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 16930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394:
#line 390 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 16943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395:
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 16949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396:
#line 401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 16955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397:
#line 402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 16961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398:
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 16967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399:
#line 406 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 16973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400:
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 16979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401:
#line 411 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 16985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402:
#line 412 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 16991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403:
#line 413 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 16997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404:
#line 414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 17003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405:
#line 418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406:
#line 419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 17015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407:
#line 424 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 17021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408:
#line 426 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 17034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409:
#line 442 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 17040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410:
#line 444 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 17046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411:
#line 449 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 17052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412:
#line 452 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 17058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413:
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 17066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414:
#line 464 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 17074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415:
#line 468 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 17082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416:
#line 472 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 17090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417:
#line 476 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 17098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418:
#line 480 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 17106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419:
#line 487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 17114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420:
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 17120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421:
#line 498 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 17126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422:
#line 499 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 17132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423:
#line 504 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), (yyvsp[0].ival), (yylsp[-4]));
				}
#line 17140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424:
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, -1, (yylsp[0]));
		}
#line 17148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425:
#line 512 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), -1, (yylsp[-3]));
		}
#line 17156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426:
#line 516 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), (yyvsp[-1].ival), (yylsp[-5]));
		}
#line 17164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427:
#line 523 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 17172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428:
#line 529 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429:
#line 530 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 17184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430:
#line 535 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 17190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431:
#line 536 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 17196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432:
#line 540 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433:
#line 542 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 17211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434:
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435:
#line 569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436:
#line 571 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437:
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 17235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438:
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 17241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439:
#line 578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 17247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440:
#line 582 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 17253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441:
#line 583 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 17259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442:
#line 586 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 17265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443:
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 17271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444:
#line 612 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445:
#line 613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446:
#line 617 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 17289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447:
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 17295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448:
#line 622 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449:
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450:
#line 628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 17315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451:
#line 640 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452:
#line 641 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453:
#line 645 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454:
#line 646 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455:
#line 650 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456:
#line 651 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 17351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457:
#line 655 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 17357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458:
#line 656 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 17363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459:
#line 661 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 17375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460:
#line 671 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 17381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461:
#line 672 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 17387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462:
#line 673 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 17393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463:
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 17399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464:
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465:
#line 679 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 17411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466:
#line 684 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 17417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467:
#line 685 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 17423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468:
#line 686 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 17429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469:
#line 696 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 17439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470:
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 17449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471:
#line 719 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472:
#line 720 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473:
#line 724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 17467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474:
#line 725 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 17473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475:
#line 732 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 17483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476:
#line 738 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 17495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477:
#line 746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 17507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478:
#line 754 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 17520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479:
#line 763 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 17533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480:
#line 772 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 17541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481:
#line 776 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 17550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482:
#line 802 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 17558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483:
#line 806 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484:
#line 819 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 17593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485:
#line 833 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486:
#line 848 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 17628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487:
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488:
#line 876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 17655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489:
#line 882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 17664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490:
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 17674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491:
#line 893 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 17683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492:
#line 899 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 17689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493:
#line 900 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 17695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494:
#line 909 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 17703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495:
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 17711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496:
#line 917 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 17721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497:
#line 923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 17731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498:
#line 929 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 17739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499:
#line 934 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 17745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500:
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 17751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501:
#line 936 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 17757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502:
#line 937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 17763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503:
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 17769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504:
#line 942 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505:
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 17781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506:
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507:
#line 961 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 17798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508:
#line 968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 17809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509:
#line 975 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 17820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510:
#line 982 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 17831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511:
#line 1014 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 17846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512:
#line 1025 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 17861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513:
#line 1038 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 17867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514:
#line 1042 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 17873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515:
#line 1043 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 17879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516:
#line 1046 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 17885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517:
#line 1047 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518:
#line 1050 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 17897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519:
#line 1051 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 17903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520:
#line 1056 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521:
#line 1057 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522:
#line 1063 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 17923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523:
#line 1067 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 17931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524:
#line 1073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 17953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525:
#line 1094 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 17965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526:
#line 1101 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 17971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527:
#line 1114 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 17979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528:
#line 1117 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 17987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531:
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 17996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532:
#line 1129 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 18006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533:
#line 1136 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 18015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534:
#line 1141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 18025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535:
#line 1147 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 18034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536:
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 18044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537:
#line 1157 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 18055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538:
#line 1163 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 18066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539:
#line 1173 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 18072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540:
#line 1175 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 18078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541:
#line 1177 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 18084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542:
#line 1181 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543:
#line 1182 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544:
#line 1183 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545:
#line 1184 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546:
#line 1185 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547:
#line 1187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 18123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548:
#line 1192 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 18133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549:
#line 1211 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550:
#line 1212 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551:
#line 1213 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552:
#line 1214 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553:
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554:
#line 1239 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 18173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555:
#line 1240 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 18179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556:
#line 1247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557:
#line 1252 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558:
#line 1257 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559:
#line 1262 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560:
#line 1267 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561:
#line 1272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562:
#line 1277 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563:
#line 1282 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564:
#line 1288 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565:
#line 1294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566:
#line 1300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567:
#line 1307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 18306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568:
#line 1328 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 18314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569:
#line 1338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570:
#line 1342 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571:
#line 1350 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572:
#line 1354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 18347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573:
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 18360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574:
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575:
#line 1395 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576:
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577:
#line 1405 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578:
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 18417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579:
#line 1422 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 18427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580:
#line 1430 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581:
#line 1440 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582:
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583:
#line 1444 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 18457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584:
#line 1446 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585:
#line 1448 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586:
#line 1450 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587:
#line 1454 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 18481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588:
#line 1455 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589:
#line 1463 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 18500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590:
#line 1472 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591:
#line 1480 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 18525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592:
#line 1489 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593:
#line 1500 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594:
#line 1507 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 18552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595:
#line 1508 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 18558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596:
#line 1509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613:
#line 1538 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 18570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614:
#line 1540 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 18576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615:
#line 1542 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 18582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616:
#line 1544 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 18588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617:
#line 1546 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 18594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618:
#line 1548 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 18600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619:
#line 1550 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 18606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620:
#line 1552 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 18612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621:
#line 1554 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 18621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622:
#line 1559 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 18630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623:
#line 1564 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 18640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624:
#line 1570 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625:
#line 1577 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 18660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626:
#line 1582 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627:
#line 1588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628:
#line 1593 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 18685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629:
#line 1624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630:
#line 1627 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 18697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631:
#line 1629 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 18709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632:
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 18719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633:
#line 1652 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634:
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 18731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635:
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636:
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637:
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638:
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639:
#line 1664 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640:
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641:
#line 1668 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642:
#line 1670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643:
#line 1672 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644:
#line 1674 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645:
#line 1676 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646:
#line 1678 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647:
#line 1681 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648:
#line 1683 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649:
#line 1685 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 18821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650:
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651:
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652:
#line 1692 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 18839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653:
#line 1694 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 18845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654:
#line 1697 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655:
#line 1702 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656:
#line 1707 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 18874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657:
#line 1714 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 18883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658:
#line 1719 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 18894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659:
#line 1726 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660:
#line 1731 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 18915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661:
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 18924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662:
#line 1744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 18936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663:
#line 1753 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 18948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664:
#line 1761 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 18960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665:
#line 1769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 18972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666:
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 18984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667:
#line 1795 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668:
#line 1803 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669:
#line 1811 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 19020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670:
#line 1819 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 19032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671:
#line 1827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672:
#line 1834 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 19053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673:
#line 1838 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 19062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674:
#line 1842 "third_party/libpg_query/grammar/statements/select.y"
                                                {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 19071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675:
#line 1847 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 19083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676:
#line 1855 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = list_make1((yyvsp[-2].node));
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 19095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677:
#line 1863 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 19115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678:
#line 1879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 19127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679:
#line 1887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 19139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680:
#line 1895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 19151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681:
#line 1903 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 19163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682:
#line 1911 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 19175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683:
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 19187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684:
#line 1927 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 19195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685:
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 19203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686:
#line 1935 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687:
#line 1939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 19219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688:
#line 1943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 19231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689:
#line 1951 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 19243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690:
#line 1959 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 19255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691:
#line 1967 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 19267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692:
#line 1975 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 19291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693:
#line 1995 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 19317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694:
#line 2017 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 19332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695:
#line 2028 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 19343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696:
#line 2035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697:
#line 2048 "third_party/libpg_query/grammar/statements/select.y"
                                                      {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 19371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698:
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699:
#line 2067 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 19383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700:
#line 2069 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 19389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701:
#line 2071 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 19395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702:
#line 2073 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703:
#line 2075 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704:
#line 2077 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705:
#line 2079 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706:
#line 2081 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707:
#line 2083 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708:
#line 2085 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709:
#line 2087 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710:
#line 2089 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711:
#line 2091 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712:
#line 2093 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713:
#line 2095 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714:
#line 2097 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715:
#line 2099 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 19479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716:
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 19485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717:
#line 2103 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 19493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718:
#line 2107 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 19501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719:
#line 2111 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720:
#line 2115 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 19517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721:
#line 2128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722:
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723:
#line 2131 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 19540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724:
#line 2138 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[-1]));
				}
#line 19556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725:
#line 2150 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[-1].ival);
					p->location = (yylsp[-1]);
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				}
#line 19575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726:
#line 2165 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-2].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[-2].node);
				}
#line 19591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727:
#line 2177 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728:
#line 2179 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else {
						(yyval.node) = (yyvsp[-1].node);
					}
				}
#line 19613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729:
#line 2191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730:
#line 2202 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 19656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731:
#line 2226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 19671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732:
#line 2239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 19679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733:
#line 2243 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-4].list), (yyvsp[-2].list), (yylsp[-4]));
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734:
#line 2249 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), list_make1((yyvsp[-2].node)), (yylsp[-5]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735:
#line 2256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-7].list), lappend((yyvsp[-5].list), (yyvsp[-2].node)), (yylsp[-7]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736:
#line 2263 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 19725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737:
#line 2273 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738:
#line 2280 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739:
#line 2308 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-3].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-2].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						n->agg_order = (yyvsp[-2].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-1].node);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 19795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740:
#line 2343 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741:
#line 2353 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742:
#line 2354 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743:
#line 2362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 19823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744:
#line 2368 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 19831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745:
#line 2372 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 19839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746:
#line 2376 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747:
#line 2380 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 19855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748:
#line 2384 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749:
#line 2388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 19871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750:
#line 2392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751:
#line 2396 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 19887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752:
#line 2400 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753:
#line 2404 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 19903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754:
#line 2408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 19911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755:
#line 2412 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 19919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756:
#line 2416 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 19927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757:
#line 2420 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 19935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758:
#line 2424 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 19943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759:
#line 2428 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 19949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760:
#line 2430 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 19955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761:
#line 2432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762:
#line 2436 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763:
#line 2445 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764:
#line 2450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765:
#line 2457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 20015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766:
#line 2472 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 20026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767:
#line 2479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 20034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768:
#line 2483 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 20042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769:
#line 2487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 20050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770:
#line 2491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 20058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771:
#line 2495 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 20069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772:
#line 2508 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773:
#line 2509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774:
#line 2513 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 20087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775:
#line 2514 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776:
#line 2522 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777:
#line 2523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778:
#line 2527 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 20111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779:
#line 2529 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 20117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780:
#line 2534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 20127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781:
#line 2542 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 20133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782:
#line 2544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 20150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783:
#line 2557 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 20156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784:
#line 2562 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 20174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785:
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786:
#line 2588 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 20186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787:
#line 2591 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788:
#line 2592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789:
#line 2604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 20208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790:
#line 2610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 20218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791:
#line 2616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792:
#line 2626 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 20251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793:
#line 2643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 20292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794:
#line 2688 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795:
#line 2696 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796:
#line 2704 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797:
#line 2712 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798:
#line 2720 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799:
#line 2740 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800:
#line 2741 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 20364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801:
#line 2744 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 20370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802:
#line 2745 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 20376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803:
#line 2749 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 20389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804:
#line 2759 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805:
#line 2760 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806:
#line 2762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 20407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807:
#line 2763 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 20413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808:
#line 2764 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 20419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809:
#line 2767 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810:
#line 2768 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 20431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811:
#line 2771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 20437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812:
#line 2772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 20443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813:
#line 2773 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 20449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814:
#line 2774 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 20455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815:
#line 2775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 20461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816:
#line 2776 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 20467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817:
#line 2777 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 20473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818:
#line 2778 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 20479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819:
#line 2779 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 20485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820:
#line 2780 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 20491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821:
#line 2781 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 20497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822:
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 20503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823:
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824:
#line 2788 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825:
#line 2793 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826:
#line 2795 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827:
#line 2800 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828:
#line 2802 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829:
#line 2804 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 20545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830:
#line 2806 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 20551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831:
#line 2808 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 20557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832:
#line 2810 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 20563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833:
#line 2812 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 20569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834:
#line 2814 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 20575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835:
#line 2828 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836:
#line 2830 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 20587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837:
#line 2834 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838:
#line 2838 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839:
#line 2845 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 20611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840:
#line 2849 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 20619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841:
#line 2857 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842:
#line 2861 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843:
#line 2867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844:
#line 2871 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845:
#line 2880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846:
#line 2890 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 20675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847:
#line 2891 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 20681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848:
#line 2896 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 20689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849:
#line 2899 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850:
#line 2906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851:
#line 2907 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 20707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852:
#line 2908 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 20713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853:
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 20719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854:
#line 2910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 20725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855:
#line 2911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 20731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856:
#line 2912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 20737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857:
#line 2913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 20743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858:
#line 2914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 20749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859:
#line 2915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860:
#line 2926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861:
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862:
#line 2937 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863:
#line 2943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 20783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864:
#line 2944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865:
#line 2961 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866:
#line 2965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 20806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867:
#line 2970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868:
#line 2974 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 20833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869:
#line 2989 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 20841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870:
#line 2993 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 20847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871:
#line 2997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872:
#line 3000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873:
#line 3003 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 20865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874:
#line 3004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875:
#line 3005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876:
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 20888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877:
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 20894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878:
#line 3026 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 20908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879:
#line 3039 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880:
#line 3040 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881:
#line 3045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 20932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882:
#line 3055 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883:
#line 3056 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884:
#line 3059 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885:
#line 3060 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886:
#line 3064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 20964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887:
#line 3068 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 20972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888:
#line 3075 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 20980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889:
#line 3079 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeNode(PGAStar);
				}
#line 20988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890:
#line 3083 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 21000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891:
#line 3091 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 21012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892:
#line 3101 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893:
#line 3102 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 21024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894:
#line 3106 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895:
#line 3107 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896:
#line 3111 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897:
#line 3112 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900:
#line 3126 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901:
#line 3127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 21060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902:
#line 3131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 21066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903:
#line 3132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 21072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904:
#line 3136 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 21084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905:
#line 3152 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 21096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906:
#line 3160 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 21108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907:
#line 3168 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					n->fields = list_make1(makeNode(PGAStar));
					n->location = (yylsp[0]);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[0]);
				}
#line 21124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908:
#line 3189 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 21130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909:
#line 3190 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 21136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910:
#line 3202 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 21144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911:
#line 3206 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 21173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912:
#line 3233 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913:
#line 3235 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 21185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914:
#line 3239 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915:
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916:
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917:
#line 3255 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 21212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918:
#line 3266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 21220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919:
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920:
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 21244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921:
#line 3286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922:
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923:
#line 3299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 21276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924:
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-5].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, nor ORDER BY.
					 */
					foreach(lc, (yyvsp[-3].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-2].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-2]))));

					t->typmods = (yyvsp[-3].list);
					t->location = (yylsp[-5]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 21312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925:
#line 3338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 21320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926:
#line 3342 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 21328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927:
#line 3346 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 21336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928:
#line 3350 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 21344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929:
#line 3354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 21352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930:
#line 3358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 21360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931:
#line 3362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 21368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932:
#line 3367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 21374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933:
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934:
#line 3384 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935:
#line 3385 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936:
#line 3386 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937:
#line 3389 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938:
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939:
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940:
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941:
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942:
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943:
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944:
#line 3403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945:
#line 3406 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946:
#line 3407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947:
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948:
#line 3411 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949:
#line 3412 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 21476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950:
#line 3416 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951:
#line 3418 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 21488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952:
#line 3422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953:
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955:
#line 3434 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956:
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957:
#line 3436 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958:
#line 3437 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959:
#line 3440 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960:
#line 3441 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961:
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 21552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962:
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 21568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963:
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 21589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964:
#line 54 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 21610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965:
#line 74 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 21616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966:
#line 75 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 21622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967:
#line 76 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 21628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968:
#line 77 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 21634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971:
#line 41 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 21674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972:
#line 42 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 21680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973:
#line 43 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 21686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974:
#line 49 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 21700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978:
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979:
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980:
#line 41 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 21775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981:
#line 43 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 21803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982:
#line 69 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 21809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983:
#line 70 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984:
#line 71 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 21821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985:
#line 72 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 21827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986:
#line 73 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 21833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987:
#line 74 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988:
#line 78 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989:
#line 79 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990:
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 21857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991:
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 21863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992:
#line 90 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 21869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993:
#line 91 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 21875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994:
#line 92 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 21881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995:
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 21887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996:
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997:
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998:
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999:
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000:
#line 125 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001:
#line 132 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002:
#line 139 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003:
#line 149 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004:
#line 159 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005:
#line 171 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006:
#line 180 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007:
#line 189 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008:
#line 208 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009:
#line 214 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010:
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 22058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011:
#line 222 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 22064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012:
#line 224 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 22070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013:
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 22076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014:
#line 228 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 22082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015:
#line 233 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016:
#line 234 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                        { (yyval.list) = NIL; }
#line 22094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017:
#line 238 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 22100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018:
#line 239 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 22106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019:
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 22112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020:
#line 241 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 22118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021:
#line 246 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022:
#line 250 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 22130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023:
#line 251 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 22136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024:
#line 257 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 22147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025:
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026:
#line 268 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 22159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027:
#line 269 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 22165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028:
#line 270 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 22171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029:
#line 271 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 22177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030:
#line 272 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 22183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031:
#line 273 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 22189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032:
#line 274 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 22195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033:
#line 275 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 22201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034:
#line 281 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035:
#line 282 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036:
#line 286 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037:
#line 292 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038:
#line 299 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039:
#line 306 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040:
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041:
#line 324 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042:
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 22275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043:
#line 326 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 22281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044:
#line 327 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 22287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045:
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046:
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 22299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047:
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 22305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048:
#line 338 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 22311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049:
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050:
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 22323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051:
#line 349 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 22329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052:
#line 350 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 22335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053:
#line 351 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 22341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054:
#line 352 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 22347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055:
#line 353 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 22353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056:
#line 359 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					n->fdwoptions = (yyvsp[-1].list);
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
				}
#line 22376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057:
#line 382 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058:
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059:
#line 392 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060:
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061:
#line 397 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062:
#line 401 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063:
#line 402 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064:
#line 403 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065:
#line 408 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066:
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067:
#line 419 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068:
#line 420 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069:
#line 425 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070:
#line 426 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 22468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071:
#line 431 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 22476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072:
#line 438 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073:
#line 439 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074:
#line 444 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 22494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075:
#line 445 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076:
#line 449 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077:
#line 455 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078:
#line 459 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079:
#line 463 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 22531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080:
#line 468 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 22539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081:
#line 475 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082:
#line 476 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083:
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084:
#line 482 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085:
#line 488 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086:
#line 499 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087:
#line 513 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088:
#line 526 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089:
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090:
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091:
#line 569 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092:
#line 591 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093:
#line 595 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094:
#line 602 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 22711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095:
#line 606 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 22723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096:
#line 614 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097:
#line 618 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098:
#line 626 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 22750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099:
#line 635 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100:
#line 636 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101:
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102:
#line 638 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103:
#line 640 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104:
#line 647 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105:
#line 653 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 22802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106:
#line 654 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 22808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107:
#line 659 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 22814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108:
#line 660 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 22820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115:
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 22913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118:
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 22953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119:
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 22965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120:
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 22976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121:
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 22987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122:
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 22998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123:
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 23009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124:
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "all";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 23020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127:
#line 57 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128:
#line 59 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 23032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129:
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 23042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130:
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 23074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131:
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132:
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 23103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133:
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 23109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134:
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135:
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136:
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137:
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138:
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139:
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140:
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141:
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 23163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142:
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 23169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143:
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 23175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144:
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145:
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146:
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147:
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 23199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148:
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 23205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149:
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 23211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150:
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 23217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151:
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152:
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 23233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153:
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154:
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155:
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 23251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156:
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157:
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158:
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159:
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160:
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161:
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162:
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163:
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 23313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164:
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165:
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166:
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167:
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168:
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169:
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 23361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170:
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171:
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172:
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173:
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174:
#line 210 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175:
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176:
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177:
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179:
#line 12 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 23443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 23454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182:
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 23464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183:
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 23470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 23481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185:
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 23492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186:
#line 8 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
					n->name = (yyvsp[-3].range);
					n->params = (yyvsp[-2].list);
					n->function = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189:
#line 24 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 23512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190:
#line 28 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 23520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191:
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 23534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192:
#line 22 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 23542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193:
#line 26 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 23553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194:
#line 33 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 23564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195:
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196:
#line 44 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 23576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197:
#line 50 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198:
#line 51 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 23588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 23592 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yyscanner, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[+*yyssp], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 64 "third_party/libpg_query/grammar/statements/delete.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	n->seed = seed;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
